
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005478  08005478  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005480  08005480  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080054f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080054f8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8e  00000000  00000000  0002c942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224ef  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6d0  00000000  00000000  00051fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc03d  00000000  00000000  000606cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c70c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000328c  00000000  00000000  0012c75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052b0 	.word	0x080052b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080052b0 	.word	0x080052b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f001 f808 	bl	8001654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fe66 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fe58 	bl	800132c <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 ffdb 	bl	8001688 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fb22 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	000186a0 	.word	0x000186a0

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fdf0 	bl	800132c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 800078a:	f107 010f 	add.w	r1, r7, #15
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_putchar+0x28>)
 8000794:	f003 f9e1 	bl	8003b5a <HAL_UART_Transmit>
	return ch;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80007ae:	230f      	movs	r3, #15
 80007b0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2132      	movs	r1, #50	; 0x32
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <who_am_i_sensors+0xc0>)
 80007c0:	f001 f8a6 	bl	8001910 <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <who_am_i_sensors+0xc4>)
 80007d0:	f003 fdf0 	bl	80043b4 <puts>
 80007d4:	e017      	b.n	8000806 <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <who_am_i_sensors+0xc0>)
 80007e4:	f001 f992 	bl	8001b0c <HAL_I2C_Master_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <who_am_i_sensors+0xc8>)
 80007f4:	f003 fdde 	bl	80043b4 <puts>
 80007f8:	e005      	b.n	8000806 <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b33      	cmp	r3, #51	; 0x33
 80007fe:	d102      	bne.n	8000806 <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <who_am_i_sensors+0xcc>)
 8000802:	f003 fd51 	bl	80042a8 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000806:	234f      	movs	r3, #79	; 0x4f
 8000808:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	213c      	movs	r1, #60	; 0x3c
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <who_am_i_sensors+0xc0>)
 8000818:	f001 f87a 	bl	8001910 <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <who_am_i_sensors+0xc4>)
 8000828:	f003 fdc4 	bl	80043b4 <puts>
 800082c:	e017      	b.n	800085e <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <who_am_i_sensors+0xc0>)
 800083c:	f001 f966 	bl	8001b0c <HAL_I2C_Master_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <who_am_i_sensors+0xc8>)
 800084c:	f003 fdb2 	bl	80043b4 <puts>
 8000850:	e005      	b.n	800085e <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d102      	bne.n	800085e <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <who_am_i_sensors+0xd0>)
 800085a:	f003 fd25 	bl	80042a8 <iprintf>
    	}
    }
  }
}
 800085e:	bf00      	nop
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	080052c8 	.word	0x080052c8
 8000870:	080052d4 	.word	0x080052d4
 8000874:	080052e0 	.word	0x080052e0
 8000878:	08005300 	.word	0x08005300

0800087c <reset_acc>:

int reset_acc(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  
 8000882:	2324      	movs	r3, #36	; 0x24
 8000884:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  //Data de reset
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	2132      	movs	r1, #50	; 0x32
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <reset_acc+0x3c>)
 8000898:	f001 f83a 	bl	8001910 <HAL_I2C_Master_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <reset_acc+0x30>
		printf("Error Tx\r\n");
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <reset_acc+0x40>)
 80008a8:	f003 fd84 	bl	80043b4 <puts>
	}
}
 80008ac:	bf00      	nop
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	080052c8 	.word	0x080052c8

080008c0 <config_acc>:

int config_acc(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x27;//Valeur a mettre dans ctrm_reg_1
 80008c6:	2327      	movs	r3, #39	; 0x27
 80008c8:	723b      	strb	r3, [r7, #8]
	buf[1]=0x00;//Valeur a mettre dans ctrm_reg_2
 80008ca:	2300      	movs	r3, #0
 80008cc:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_3
 80008ce:	2300      	movs	r3, #0
 80008d0:	72bb      	strb	r3, [r7, #10]
	buf[3]=0x00;//Valeur a mettre dans ctrm_reg_4
 80008d2:	2300      	movs	r3, #0
 80008d4:	72fb      	strb	r3, [r7, #11]
	buf[4]=0x00;//Valeur a mettre dans ctrm_reg_5
 80008d6:	2300      	movs	r3, #0
 80008d8:	733b      	strb	r3, [r7, #12]
	buf[5]=0x00;//Valeur a mettre dans ctrm_reg_6
 80008da:	2300      	movs	r3, #0
 80008dc:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	2306      	movs	r3, #6
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	22a0      	movs	r2, #160	; 0xa0
 80008f2:	2132      	movs	r1, #50	; 0x32
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <config_acc+0xc8>)
 80008f6:	f001 fb2f 	bl	8001f58 <HAL_I2C_Mem_Write>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <config_acc+0x4a>
		printf("Error Tx\r\n");
 8000904:	4821      	ldr	r0, [pc, #132]	; (800098c <config_acc+0xcc>)
 8000906:	f003 fd55 	bl	80043b4 <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 6, HAL_MAX_DELAY);
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9302      	str	r3, [sp, #8]
 8000910:	2306      	movs	r3, #6
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	463b      	mov	r3, r7
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2301      	movs	r3, #1
 800091a:	22a0      	movs	r2, #160	; 0xa0
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <config_acc+0xc8>)
 8000920:	f001 fc14 	bl	800214c <HAL_I2C_Mem_Read>
 8000924:	4603      	mov	r3, r0
 8000926:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<6;i++){
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e021      	b.n	8000976 <config_acc+0xb6>
		if(buf[i]==res[i]){
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3310      	adds	r3, #16
 8000936:	443b      	add	r3, r7
 8000938:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	3310      	adds	r3, #16
 8000940:	443b      	add	r3, r7
 8000942:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000946:	429a      	cmp	r2, r3
 8000948:	d10c      	bne.n	8000964 <config_acc+0xa4>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3310      	adds	r3, #16
 800094e:	443b      	add	r3, r7
 8000950:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000954:	4619      	mov	r1, r3
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	461a      	mov	r2, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <config_acc+0xd0>)
 800095e:	f003 fca3 	bl	80042a8 <iprintf>
 8000962:	e005      	b.n	8000970 <config_acc+0xb0>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	4619      	mov	r1, r3
 800096a:	480a      	ldr	r0, [pc, #40]	; (8000994 <config_acc+0xd4>)
 800096c:	f003 fc9c 	bl	80042a8 <iprintf>
	for(i=0;i<6;i++){
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	3301      	adds	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d9da      	bls.n	8000932 <config_acc+0x72>
		}
	}
}
 800097c:	bf00      	nop
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000008c 	.word	0x2000008c
 800098c:	080052c8 	.word	0x080052c8
 8000990:	08005318 	.word	0x08005318
 8000994:	08005348 	.word	0x08005348

08000998 <reset_mag>:

int reset_mag(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af04      	add	r7, sp, #16
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = 0x60;//1 sur reboot
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CTRL_REG_A_M, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	2260      	movs	r2, #96	; 0x60
 80009b4:	213c      	movs	r1, #60	; 0x3c
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <reset_mag+0x40>)
 80009b8:	f001 face 	bl	8001f58 <HAL_I2C_Mem_Write>
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <reset_mag+0x34>
		printf("Error Tx\r\n");
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <reset_mag+0x44>)
 80009c8:	f003 fcf4 	bl	80043b4 <puts>
	}
}
 80009cc:	bf00      	nop
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	080052c8 	.word	0x080052c8

080009e0 <config_mag>:

int config_mag(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x0C;//Valeur a mettre dans ctrm_reg_a
 80009e6:	230c      	movs	r3, #12
 80009e8:	723b      	strb	r3, [r7, #8]
	buf[1]=0x02;//Valeur a mettre dans ctrm_reg_b
 80009ea:	2302      	movs	r3, #2
 80009ec:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_c
 80009ee:	2300      	movs	r3, #0
 80009f0:	72bb      	strb	r3, [r7, #10]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 3, HAL_MAX_DELAY);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2303      	movs	r3, #3
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	22e0      	movs	r2, #224	; 0xe0
 8000a06:	213c      	movs	r1, #60	; 0x3c
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <config_mag+0xbc>)
 8000a0a:	f001 faa5 	bl	8001f58 <HAL_I2C_Mem_Write>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <config_mag+0x3e>
		printf("Error Tx\r\n");
 8000a18:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <config_mag+0xc0>)
 8000a1a:	f003 fccb 	bl	80043b4 <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 3, HAL_MAX_DELAY);
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2303      	movs	r3, #3
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	463b      	mov	r3, r7
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	22e0      	movs	r2, #224	; 0xe0
 8000a30:	213c      	movs	r1, #60	; 0x3c
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <config_mag+0xbc>)
 8000a34:	f001 fb8a 	bl	800214c <HAL_I2C_Mem_Read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<3;i++){
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e021      	b.n	8000a8a <config_mag+0xaa>
		if(buf[i]==res[i]){
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3310      	adds	r3, #16
 8000a4a:	443b      	add	r3, r7
 8000a4c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3310      	adds	r3, #16
 8000a54:	443b      	add	r3, r7
 8000a56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d10c      	bne.n	8000a78 <config_mag+0x98>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3310      	adds	r3, #16
 8000a62:	443b      	add	r3, r7
 8000a64:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	461a      	mov	r2, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <config_mag+0xc4>)
 8000a72:	f003 fc19 	bl	80042a8 <iprintf>
 8000a76:	e005      	b.n	8000a84 <config_mag+0xa4>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <config_mag+0xc8>)
 8000a80:	f003 fc12 	bl	80042a8 <iprintf>
	for(i=0;i<3;i++){
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3301      	adds	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d9da      	bls.n	8000a46 <config_mag+0x66>
		}
	}
}
 8000a90:	bf00      	nop
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	080052c8 	.word	0x080052c8
 8000aa4:	08005318 	.word	0x08005318
 8000aa8:	08005348 	.word	0x08005348

08000aac <get_data>:

void get_data(struct data* acc, struct data* mag){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
		HAL_StatusTypeDef ret;
		uint8_t buf[6] ;
		//int16_t acc.X, acc.Y, acc.Z;
		//int16_t magX, magY, magZ;
		ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, OUT_X_L_A, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2300      	movs	r3, #0
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	2228      	movs	r2, #40	; 0x28
 8000ac8:	2132      	movs	r1, #50	; 0x32
 8000aca:	483d      	ldr	r0, [pc, #244]	; (8000bc0 <get_data+0x114>)
 8000acc:	f001 fa44 	bl	8001f58 <HAL_I2C_Mem_Write>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <get_data+0x34>
			printf("Error Tx\r\n");
 8000ada:	483a      	ldr	r0, [pc, #232]	; (8000bc4 <get_data+0x118>)
 8000adc:	f003 fc6a 	bl	80043b4 <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, OUT_X_L_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2306      	movs	r3, #6
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2301      	movs	r3, #1
 8000af2:	22a8      	movs	r2, #168	; 0xa8
 8000af4:	2132      	movs	r1, #50	; 0x32
 8000af6:	4832      	ldr	r0, [pc, #200]	; (8000bc0 <get_data+0x114>)
 8000af8:	f001 fb28 	bl	800214c <HAL_I2C_Mem_Read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]
		acc->X=(buf[1]<<8)|(buf[0]);
 8000b00:	7a7b      	ldrb	r3, [r7, #9]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	7a3b      	ldrb	r3, [r7, #8]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	801a      	strh	r2, [r3, #0]
		acc->Y=(buf[3]<<8)|(buf[2]);
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	7abb      	ldrb	r3, [r7, #10]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	805a      	strh	r2, [r3, #2]
		acc->Z=(buf[5]<<8)|(buf[4]);
 8000b24:	7b7b      	ldrb	r3, [r7, #13]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	7b3b      	ldrb	r3, [r7, #12]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	809a      	strh	r2, [r3, #4]

		ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	2268      	movs	r2, #104	; 0x68
 8000b48:	213c      	movs	r1, #60	; 0x3c
 8000b4a:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <get_data+0x114>)
 8000b4c:	f001 fa04 	bl	8001f58 <HAL_I2C_Mem_Write>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <get_data+0xb4>
			printf("Error Tx\r\n");
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <get_data+0x118>)
 8000b5c:	f003 fc2a 	bl	80043b4 <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, OUTX_L_REG_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2306      	movs	r3, #6
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	22e8      	movs	r2, #232	; 0xe8
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <get_data+0x114>)
 8000b78:	f001 fae8 	bl	800214c <HAL_I2C_Mem_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]
		mag->X=(buf[1]<<8)|(buf[0]);
 8000b80:	7a7b      	ldrb	r3, [r7, #9]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	7a3b      	ldrb	r3, [r7, #8]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	801a      	strh	r2, [r3, #0]
		mag->Y=(buf[3]<<8)|(buf[2]);
 8000b92:	7afb      	ldrb	r3, [r7, #11]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	7abb      	ldrb	r3, [r7, #10]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	805a      	strh	r2, [r3, #2]
		mag->Z=(buf[5]<<8)|(buf[4]);
 8000ba4:	7b7b      	ldrb	r3, [r7, #13]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	7b3b      	ldrb	r3, [r7, #12]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	809a      	strh	r2, [r3, #4]
		printf("magY=%d  ",magY);
		printf("magZ=%d\n\r",magZ);
		printf("accX=%d  ",accX);
		printf("accY=%d  ",accY);
		printf("accZ=%d\n\r",accZ);*/
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000008c 	.word	0x2000008c
 8000bc4:	080052c8 	.word	0x080052c8

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fa55 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f837 	bl	8000c44 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f7ff fced 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bda:	f000 f9b3 	bl	8000f44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bde:	f7ff fd57 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  who_am_i_sensors();
 8000be2:	f7ff fde1 	bl	80007a8 <who_am_i_sensors>
  reset_acc();
 8000be6:	f7ff fe49 	bl	800087c <reset_acc>
  config_acc();
 8000bea:	f7ff fe69 	bl	80008c0 <config_acc>
  reset_mag();
 8000bee:	f7ff fed3 	bl	8000998 <reset_mag>
  config_mag();
 8000bf2:	f7ff fef5 	bl	80009e0 <config_mag>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  get_data(&acc,&mag);
 8000bf6:	463a      	mov	r2, r7
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff54 	bl	8000aac <get_data>
	  printf("accX=%d\t accY=%d\t accZ=%d\t |\t magX=%d\t magY=%d\t magZ=%d",acc.X,acc.Y,acc.Z,mag.X,mag.Y,mag.Z);
 8000c04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c0e:	461c      	mov	r4, r3
 8000c10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c14:	461d      	mov	r5, r3
 8000c16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c22:	9102      	str	r1, [sp, #8]
 8000c24:	9201      	str	r2, [sp, #4]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	462b      	mov	r3, r5
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <main+0x74>)
 8000c30:	f003 fb3a 	bl	80042a8 <iprintf>
	  printf("\n\r");
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <main+0x78>)
 8000c36:	f003 fb37 	bl	80042a8 <iprintf>
  while (1){
 8000c3a:	e7dc      	b.n	8000bf6 <main+0x2e>
 8000c3c:	08005380 	.word	0x08005380
 8000c40:	080053b8 	.word	0x080053b8

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2234      	movs	r2, #52	; 0x34
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fb20 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c84:	2300      	movs	r3, #0
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c90:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <SystemClock_Config+0xd8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fc56 	bl	8003584 <HAL_RCC_OscConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cde:	f000 f81f 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 f8f6 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d0a:	f000 f809 	bl	8000d20 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	; 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8000d28:	4801      	ldr	r0, [pc, #4]	; (8000d30 <Error_Handler+0x10>)
 8000d2a:	f003 fabd 	bl	80042a8 <iprintf>
  {
 8000d2e:	e7fb      	b.n	8000d28 <Error_Handler+0x8>
 8000d30:	080053bc 	.word	0x080053bc

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d72:	2007      	movs	r0, #7
 8000d74:	f000 faa6 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f9a6 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
	}

return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e009      	b.n	8000e38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fca5 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf1      	blt.n	8000e24 <_write+0x12>
	}
	return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f003 f9ae 	bl	8004244 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20020000 	.word	0x20020000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	20000140 	.word	0x20000140

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MX_USART2_UART_Init+0x50>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f002 fda0 	bl	8003ac0 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f86:	f7ff fecb 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000e4 	.word	0x200000e4
 8000f94:	40004400 	.word	0x40004400

08000f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12b      	bne.n	8001012 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 800100e:	f000 f98d 	bl	800132c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ff65 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f003 f8fb 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fdb5 	bl	8000bc8 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800106c:	08005488 	.word	0x08005488
  ldr r2, =_sbss
 8001070:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001074:	2000013c 	.word	0x2000013c

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f90d 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fe40 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f917 	bl	8001312 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f8ed 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000128 	.word	0x20000128

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000128 	.word	0x20000128

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff47 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e165      	b.n	8001614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8154 	bne.w	800160e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	2b02      	cmp	r3, #2
 800137c:	d130      	bne.n	80013e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0201 	and.w	r2, r3, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d017      	beq.n	800141c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d123      	bne.n	8001470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80ae 	beq.w	800160e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_GPIO_Init+0x300>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <HAL_GPIO_Init+0x300>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_GPIO_Init+0x300>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_GPIO_Init+0x304>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x308>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x30c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x310>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x314>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x20e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x318>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x20a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x206>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a49      	ldr	r2, [pc, #292]	; (800164c <HAL_GPIO_Init+0x320>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x202>
 800152a:	2306      	movs	r3, #6
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800152e:	2307      	movs	r3, #7
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x21c>
 8001546:	2300      	movs	r3, #0
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <HAL_GPIO_Init+0x304>)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_GPIO_Init+0x324>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_GPIO_Init+0x324>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x324>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x324>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_GPIO_Init+0x324>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3301      	adds	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	f67f ae96 	bls.w	8001348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40021400 	.word	0x40021400
 800164c:	40021800 	.word	0x40021800
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	619a      	str	r2, [r3, #24]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e12b      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff f81c 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2224      	movs	r2, #36	; 0x24
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ec:	f001 fcf2 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a81      	ldr	r2, [pc, #516]	; (80018fc <HAL_I2C_Init+0x274>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d807      	bhi.n	800170c <HAL_I2C_Init+0x84>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a80      	ldr	r2, [pc, #512]	; (8001900 <HAL_I2C_Init+0x278>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e006      	b.n	800171a <HAL_I2C_Init+0x92>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a7d      	ldr	r2, [pc, #500]	; (8001904 <HAL_I2C_Init+0x27c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e7      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a78      	ldr	r2, [pc, #480]	; (8001908 <HAL_I2C_Init+0x280>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_I2C_Init+0x274>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d802      	bhi.n	800175c <HAL_I2C_Init+0xd4>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	e009      	b.n	8001770 <HAL_I2C_Init+0xe8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_I2C_Init+0x284>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	495c      	ldr	r1, [pc, #368]	; (80018fc <HAL_I2C_Init+0x274>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d819      	bhi.n	80017c4 <HAL_I2C_Init+0x13c>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fbb1 f3f3 	udiv	r3, r1, r3
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017a4:	400b      	ands	r3, r1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_I2C_Init+0x138>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e59      	subs	r1, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017be:	e051      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c0:	2304      	movs	r3, #4
 80017c2:	e04f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_I2C_Init+0x168>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e012      	b.n	8001816 <HAL_I2C_Init+0x18e>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Init+0x196>
 800181a:	2301      	movs	r3, #1
 800181c:	e022      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_I2C_Init+0x1bc>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e58      	subs	r0, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	440b      	add	r3, r1
 8001834:	fbb0 f3f3 	udiv	r3, r0, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	e00f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6809      	ldr	r1, [r1, #0]
 8001868:	4313      	orrs	r3, r2
 800186a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6911      	ldr	r1, [r2, #16]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	000186a0 	.word	0x000186a0
 8001900:	001e847f 	.word	0x001e847f
 8001904:	003d08ff 	.word	0x003d08ff
 8001908:	431bde83 	.word	0x431bde83
 800190c:	10624dd3 	.word	0x10624dd3

08001910 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	460b      	mov	r3, r1
 800191e:	817b      	strh	r3, [r7, #10]
 8001920:	4613      	mov	r3, r2
 8001922:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff fc10 	bl	8001148 <HAL_GetTick>
 8001928:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b20      	cmp	r3, #32
 8001934:	f040 80e0 	bne.w	8001af8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2319      	movs	r3, #25
 800193e:	2201      	movs	r2, #1
 8001940:	4970      	ldr	r1, [pc, #448]	; (8001b04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f001 f8f6 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
 8001950:	e0d3      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x50>
 800195c:	2302      	movs	r3, #2
 800195e:	e0cc      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d007      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2221      	movs	r2, #33	; 0x21
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2210      	movs	r2, #16
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_I2C_Master_Transmit+0x1f8>)
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019c8:	8979      	ldrh	r1, [r7, #10]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fde2 	bl	8002598 <I2C_MasterRequestWrite>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e08d      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f4:	e066      	b.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f001 f970 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d107      	bne.n	8001a1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d11b      	bne.n	8001a98 <HAL_I2C_Master_Transmit+0x188>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f001 f960 	bl	8002d62 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e01a      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d194      	bne.n	80019f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	00100002 	.word	0x00100002
 8001b08:	ffff0000 	.word	0xffff0000

08001b0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	817b      	strh	r3, [r7, #10]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fb12 	bl	8001148 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	f040 820b 	bne.w	8001f4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	497c      	ldr	r1, [pc, #496]	; (8001d30 <HAL_I2C_Master_Receive+0x224>)
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fff8 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e1fe      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_I2C_Master_Receive+0x50>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e1f7      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d007      	beq.n	8001b82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2222      	movs	r2, #34	; 0x22
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	893a      	ldrh	r2, [r7, #8]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	; (8001d34 <HAL_I2C_Master_Receive+0x228>)
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc4:	8979      	ldrh	r1, [r7, #10]
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fd66 	bl	800269c <I2C_MasterRequestRead>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1b8      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e18c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d11b      	bne.n	8001c4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e16c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d11b      	bne.n	8001c8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	e14c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cb0:	e138      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	f200 80f1 	bhi.w	8001e9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d123      	bne.n	8001d0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f001 f88b 	bl	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e139      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d0a:	e10b      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d14e      	bne.n	8001db2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <HAL_I2C_Master_Receive+0x22c>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 ff08 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e10e      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
 8001d2e:	bf00      	nop
 8001d30:	00100002 	.word	0x00100002
 8001d34:	ffff0000 	.word	0xffff0000
 8001d38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001db0:	e0b8      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	2200      	movs	r2, #0
 8001dba:	4966      	ldr	r1, [pc, #408]	; (8001f54 <HAL_I2C_Master_Receive+0x448>)
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 feb9 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0bf      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	2200      	movs	r2, #0
 8001e16:	494f      	ldr	r1, [pc, #316]	; (8001f54 <HAL_I2C_Master_Receive+0x448>)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fe8b 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e091      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e9c:	e042      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 ff9e 	bl	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04c      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d118      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f aec2 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00010004 	.word	0x00010004

08001f58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f72:	f7ff f8e9 	bl	8001148 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	f040 80d9 	bne.w	8002138 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2319      	movs	r3, #25
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	496d      	ldr	r1, [pc, #436]	; (8002144 <HAL_I2C_Mem_Write+0x1ec>)
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fdcf 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e0cc      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Mem_Write+0x56>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0c5      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d007      	beq.n	8001fd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a3a      	ldr	r2, [r7, #32]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <HAL_I2C_Mem_Write+0x1f0>)
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002016:	88f8      	ldrh	r0, [r7, #6]
 8002018:	893a      	ldrh	r2, [r7, #8]
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4603      	mov	r3, r0
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fc06 	bl	8002838 <I2C_RequestMemoryWrite>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d052      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e081      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fe50 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b04      	cmp	r3, #4
 800204c:	d107      	bne.n	800205e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e06b      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d11b      	bne.n	80020d8 <HAL_I2C_Mem_Write+0x180>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d017      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1aa      	bne.n	8002036 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fe3c 	bl	8002d62 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d107      	bne.n	8002108 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002106:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e016      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	00100002 	.word	0x00100002
 8002148:	ffff0000 	.word	0xffff0000

0800214c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	460b      	mov	r3, r1
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002166:	f7fe ffef 	bl	8001148 <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	f040 8208 	bne.w	800258a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2319      	movs	r3, #25
 8002180:	2201      	movs	r2, #1
 8002182:	497b      	ldr	r1, [pc, #492]	; (8002370 <HAL_I2C_Mem_Read+0x224>)
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fcd5 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	e1fb      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Read+0x56>
 800219e:	2302      	movs	r3, #2
 80021a0:	e1f4      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d007      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2222      	movs	r2, #34	; 0x22
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_I2C_Mem_Read+0x228>)
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800220a:	88f8      	ldrh	r0, [r7, #6]
 800220c:	893a      	ldrh	r2, [r7, #8]
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4603      	mov	r3, r0
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fba2 	bl	8002964 <I2C_RequestMemoryRead>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1b0      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d113      	bne.n	800225a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	623b      	str	r3, [r7, #32]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e184      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11b      	bne.n	800229a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e164      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d11b      	bne.n	80022da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	e144      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022f0:	e138      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	f200 80f1 	bhi.w	80024de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	2b01      	cmp	r3, #1
 8002302:	d123      	bne.n	800234c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fd6b 	bl	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e139      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800234a:	e10b      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b02      	cmp	r3, #2
 8002352:	d14e      	bne.n	80023f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2200      	movs	r2, #0
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <HAL_I2C_Mem_Read+0x22c>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fbe8 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e10e      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
 800236e:	bf00      	nop
 8002370:	00100002 	.word	0x00100002
 8002374:	ffff0000 	.word	0xffff0000
 8002378:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f0:	e0b8      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f8:	2200      	movs	r2, #0
 80023fa:	4966      	ldr	r1, [pc, #408]	; (8002594 <HAL_I2C_Mem_Read+0x448>)
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb99 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0bf      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	2200      	movs	r2, #0
 8002456:	494f      	ldr	r1, [pc, #316]	; (8002594 <HAL_I2C_Mem_Read+0x448>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fb6b 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e091      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024dc:	e042      	b.n	8002564 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fc7e 	bl	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e04c      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d118      	bne.n	8002564 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f aec2 	bne.w	80022f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00010004 	.word	0x00010004

08002598 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	460b      	mov	r3, r1
 80025a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d006      	beq.n	80025c2 <I2C_MasterRequestWrite+0x2a>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d003      	beq.n	80025c2 <I2C_MasterRequestWrite+0x2a>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c0:	d108      	bne.n	80025d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e00b      	b.n	80025ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	2b12      	cmp	r3, #18
 80025da:	d107      	bne.n	80025ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fa9b 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002612:	d103      	bne.n	800261c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e035      	b.n	800268c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002628:	d108      	bne.n	800263c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	e01b      	b.n	8002674 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800263c:	897b      	ldrh	r3, [r7, #10]
 800263e:	11db      	asrs	r3, r3, #7
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f003 0306 	and.w	r3, r3, #6
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f063 030f 	orn	r3, r3, #15
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	490e      	ldr	r1, [pc, #56]	; (8002694 <I2C_MasterRequestWrite+0xfc>)
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fac1 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e010      	b.n	800268c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <I2C_MasterRequestWrite+0x100>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fab1 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	00010008 	.word	0x00010008
 8002698:	00010002 	.word	0x00010002

0800269c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	460b      	mov	r3, r1
 80026aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d006      	beq.n	80026d6 <I2C_MasterRequestRead+0x3a>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d003      	beq.n	80026d6 <I2C_MasterRequestRead+0x3a>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d4:	d108      	bne.n	80026e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00b      	b.n	8002700 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	d107      	bne.n	8002700 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fa11 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002726:	d103      	bne.n	8002730 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e079      	b.n	8002828 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e05f      	b.n	8002810 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	11db      	asrs	r3, r3, #7
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0306 	and.w	r3, r3, #6
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f063 030f 	orn	r3, r3, #15
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4930      	ldr	r1, [pc, #192]	; (8002830 <I2C_MasterRequestRead+0x194>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fa37 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e054      	b.n	8002828 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4929      	ldr	r1, [pc, #164]	; (8002834 <I2C_MasterRequestRead+0x198>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa27 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e044      	b.n	8002828 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f9af 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ea:	d103      	bne.n	80027f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e017      	b.n	8002828 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027f8:	897b      	ldrh	r3, [r7, #10]
 80027fa:	11db      	asrs	r3, r3, #7
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f003 0306 	and.w	r3, r3, #6
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f063 030e 	orn	r3, r3, #14
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <I2C_MasterRequestRead+0x198>)
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f9e3 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00010008 	.word	0x00010008
 8002834:	00010002 	.word	0x00010002

08002838 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	460b      	mov	r3, r1
 800284c:	813b      	strh	r3, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2200      	movs	r2, #0
 800286a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f960 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002888:	d103      	bne.n	8002892 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e05f      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	492d      	ldr	r1, [pc, #180]	; (8002960 <I2C_RequestMemoryWrite+0x128>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f998 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04c      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa02 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e02b      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e021      	b.n	8002954 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	b29b      	uxth	r3, r3
 8002916:	b2da      	uxtb	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9dc 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e005      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	00010002 	.word	0x00010002

08002964 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800298c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8c2 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c4:	d103      	bne.n	80029ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0aa      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	6a3a      	ldr	r2, [r7, #32]
 80029e6:	4952      	ldr	r1, [pc, #328]	; (8002b30 <I2C_RequestMemoryRead+0x1cc>)
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f8fa 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e097      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f964 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e076      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]
 8002a4a:	e021      	b.n	8002a90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f93e 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d107      	bne.n	8002a82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e050      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a92:	6a39      	ldr	r1, [r7, #32]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f923 	bl	8002ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d107      	bne.n	8002ab8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e035      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f82b 	bl	8002b34 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af2:	d103      	bne.n	8002afc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e013      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	6a3a      	ldr	r2, [r7, #32]
 8002b14:	4906      	ldr	r1, [pc, #24]	; (8002b30 <I2C_RequestMemoryRead+0x1cc>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f863 	bl	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010002 	.word	0x00010002

08002b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	e025      	b.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d021      	beq.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe fafb 	bl	8001148 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d116      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e023      	b.n	8002bda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10d      	bne.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	e00c      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d0b6      	beq.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf0:	e051      	b.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d123      	bne.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0204 	orr.w	r2, r3, #4
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e046      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d021      	beq.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe fa79 	bl	8001148 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e020      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0c1b      	lsrs	r3, r3, #16
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d10c      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	e00b      	b.n	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d18d      	bne.n	8002bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cec:	e02d      	b.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f8ce 	bl	8002e90 <I2C_IsAcknowledgeFailed>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02d      	b.n	8002d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d021      	beq.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d06:	f7fe fa1f 	bl	8001148 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d1ca      	bne.n	8002cee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d6e:	e02d      	b.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f88d 	bl	8002e90 <I2C_IsAcknowledgeFailed>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e02d      	b.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d021      	beq.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7fe f9de 	bl	8001148 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0220 	orr.w	r2, r3, #32
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e007      	b.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d1ca      	bne.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df0:	e042      	b.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d119      	bne.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0210 	mvn.w	r2, #16
 8002e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e029      	b.n	8002e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fe f988 	bl	8001148 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e007      	b.n	8002e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d1b5      	bne.n	8002df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d11b      	bne.n	8002ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0204 	orr.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0cc      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d90c      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b65      	ldr	r3, [pc, #404]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0b8      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f44:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d044      	beq.n	8003010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e067      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f8b2 	bl	8001148 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe f8ae 	bl	8001148 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e04f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d20c      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e032      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003076:	f000 f855 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800307a:	4602      	mov	r2, r0
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	490a      	ldr	r1, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	5ccb      	ldrb	r3, [r1, r3]
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe f812 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00
 80030ac:	40023800 	.word	0x40023800
 80030b0:	080053c8 	.word	0x080053c8
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff0 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080053d8 	.word	0x080053d8

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003100:	f7ff ffdc 	bl	80030bc <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0b5b      	lsrs	r3, r3, #13
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	080053d8 	.word	0x080053d8

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b0ae      	sub	sp, #184	; 0xb8
 800312a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800314a:	4bcb      	ldr	r3, [pc, #812]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b0c      	cmp	r3, #12
 8003154:	f200 8206 	bhi.w	8003564 <HAL_RCC_GetSysClockFreq+0x440>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_RCC_GetSysClockFreq+0x3c>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003195 	.word	0x08003195
 8003164:	08003565 	.word	0x08003565
 8003168:	08003565 	.word	0x08003565
 800316c:	08003565 	.word	0x08003565
 8003170:	0800319d 	.word	0x0800319d
 8003174:	08003565 	.word	0x08003565
 8003178:	08003565 	.word	0x08003565
 800317c:	08003565 	.word	0x08003565
 8003180:	080031a5 	.word	0x080031a5
 8003184:	08003565 	.word	0x08003565
 8003188:	08003565 	.word	0x08003565
 800318c:	08003565 	.word	0x08003565
 8003190:	08003395 	.word	0x08003395
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4bb9      	ldr	r3, [pc, #740]	; (800347c <HAL_RCC_GetSysClockFreq+0x358>)
 8003196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800319a:	e1e7      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800319c:	4bb8      	ldr	r3, [pc, #736]	; (8003480 <HAL_RCC_GetSysClockFreq+0x35c>)
 800319e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031a2:	e1e3      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a4:	4bb4      	ldr	r3, [pc, #720]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b0:	4bb1      	ldr	r3, [pc, #708]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d071      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031bc:	4bae      	ldr	r3, [pc, #696]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4621      	mov	r1, r4
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003200:	4629      	mov	r1, r5
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003214:	4649      	mov	r1, r9
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4641      	mov	r1, r8
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4641      	mov	r1, r8
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	4641      	mov	r1, r8
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	63b9      	str	r1, [r7, #56]	; 0x38
 8003228:	4649      	mov	r1, r9
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800323c:	4649      	mov	r1, r9
 800323e:	00cb      	lsls	r3, r1, #3
 8003240:	4641      	mov	r1, r8
 8003242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003246:	4641      	mov	r1, r8
 8003248:	00ca      	lsls	r2, r1, #3
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4603      	mov	r3, r0
 8003250:	4622      	mov	r2, r4
 8003252:	189b      	adds	r3, r3, r2
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
 8003256:	462b      	mov	r3, r5
 8003258:	460a      	mov	r2, r1
 800325a:	eb42 0303 	adc.w	r3, r2, r3
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800326c:	4629      	mov	r1, r5
 800326e:	024b      	lsls	r3, r1, #9
 8003270:	4621      	mov	r1, r4
 8003272:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003276:	4621      	mov	r1, r4
 8003278:	024a      	lsls	r2, r1, #9
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800328c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003290:	f7fd f80e 	bl	80002b0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800329e:	e067      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a0:	4b75      	ldr	r3, [pc, #468]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80032b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ba:	2300      	movs	r3, #0
 80032bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4621      	mov	r1, r4
 80032dc:	1a51      	subs	r1, r2, r1
 80032de:	62b9      	str	r1, [r7, #40]	; 0x28
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb63 0301 	sbc.w	r3, r3, r1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80032f4:	4649      	mov	r1, r9
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	4641      	mov	r1, r8
 80032fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fe:	4641      	mov	r1, r8
 8003300:	018a      	lsls	r2, r1, #6
 8003302:	4641      	mov	r1, r8
 8003304:	ebb2 0a01 	subs.w	sl, r2, r1
 8003308:	4649      	mov	r1, r9
 800330a:	eb63 0b01 	sbc.w	fp, r3, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800331a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800331e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003322:	4692      	mov	sl, r2
 8003324:	469b      	mov	fp, r3
 8003326:	4623      	mov	r3, r4
 8003328:	eb1a 0303 	adds.w	r3, sl, r3
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	462b      	mov	r3, r5
 8003330:	eb4b 0303 	adc.w	r3, fp, r3
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003342:	4629      	mov	r1, r5
 8003344:	028b      	lsls	r3, r1, #10
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800334c:	4621      	mov	r1, r4
 800334e:	028a      	lsls	r2, r1, #10
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003358:	2200      	movs	r2, #0
 800335a:	673b      	str	r3, [r7, #112]	; 0x70
 800335c:	677a      	str	r2, [r7, #116]	; 0x74
 800335e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003362:	f7fc ffa5 	bl	80002b0 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4613      	mov	r3, r2
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003370:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003392:	e0eb      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003394:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800339c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d06b      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	2200      	movs	r2, #0
 80033b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	663b      	str	r3, [r7, #96]	; 0x60
 80033c0:	2300      	movs	r3, #0
 80033c2:	667b      	str	r3, [r7, #100]	; 0x64
 80033c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033c8:	4622      	mov	r2, r4
 80033ca:	462b      	mov	r3, r5
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033da:	0150      	lsls	r0, r2, #5
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4621      	mov	r1, r4
 80033e2:	1a51      	subs	r1, r2, r1
 80033e4:	61b9      	str	r1, [r7, #24]
 80033e6:	4629      	mov	r1, r5
 80033e8:	eb63 0301 	sbc.w	r3, r3, r1
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033fa:	4659      	mov	r1, fp
 80033fc:	018b      	lsls	r3, r1, #6
 80033fe:	4651      	mov	r1, sl
 8003400:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003404:	4651      	mov	r1, sl
 8003406:	018a      	lsls	r2, r1, #6
 8003408:	4651      	mov	r1, sl
 800340a:	ebb2 0801 	subs.w	r8, r2, r1
 800340e:	4659      	mov	r1, fp
 8003410:	eb63 0901 	sbc.w	r9, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003420:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003424:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003428:	4690      	mov	r8, r2
 800342a:	4699      	mov	r9, r3
 800342c:	4623      	mov	r3, r4
 800342e:	eb18 0303 	adds.w	r3, r8, r3
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	462b      	mov	r3, r5
 8003436:	eb49 0303 	adc.w	r3, r9, r3
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003448:	4629      	mov	r1, r5
 800344a:	024b      	lsls	r3, r1, #9
 800344c:	4621      	mov	r1, r4
 800344e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003452:	4621      	mov	r1, r4
 8003454:	024a      	lsls	r2, r1, #9
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345e:	2200      	movs	r2, #0
 8003460:	65bb      	str	r3, [r7, #88]	; 0x58
 8003462:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003468:	f7fc ff22 	bl	80002b0 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003476:	e065      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x420>
 8003478:	40023800 	.word	0x40023800
 800347c:	00f42400 	.word	0x00f42400
 8003480:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003484:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_GetSysClockFreq+0x458>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	4618      	mov	r0, r3
 800348e:	4611      	mov	r1, r2
 8003490:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
 8003496:	2300      	movs	r3, #0
 8003498:	657b      	str	r3, [r7, #84]	; 0x54
 800349a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800349e:	4642      	mov	r2, r8
 80034a0:	464b      	mov	r3, r9
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4641      	mov	r1, r8
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	4649      	mov	r1, r9
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034d0:	4659      	mov	r1, fp
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4651      	mov	r1, sl
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4651      	mov	r1, sl
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4651      	mov	r1, sl
 80034e0:	1a54      	subs	r4, r2, r1
 80034e2:	4659      	mov	r1, fp
 80034e4:	eb63 0501 	sbc.w	r5, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	00eb      	lsls	r3, r5, #3
 80034f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f6:	00e2      	lsls	r2, r4, #3
 80034f8:	4614      	mov	r4, r2
 80034fa:	461d      	mov	r5, r3
 80034fc:	4643      	mov	r3, r8
 80034fe:	18e3      	adds	r3, r4, r3
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	464b      	mov	r3, r9
 8003504:	eb45 0303 	adc.w	r3, r5, r3
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003520:	4621      	mov	r1, r4
 8003522:	028a      	lsls	r2, r1, #10
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800352c:	2200      	movs	r2, #0
 800352e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003530:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003532:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003536:	f7fc febb 	bl	80002b0 <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4613      	mov	r3, r2
 8003540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_RCC_GetSysClockFreq+0x458>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0f1b      	lsrs	r3, r3, #28
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003562:	e003      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800356a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003570:	4618      	mov	r0, r3
 8003572:	37b8      	adds	r7, #184	; 0xb8
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	00f42400 	.word	0x00f42400

08003584 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e28d      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8083 	beq.w	80036aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035a4:	4b94      	ldr	r3, [pc, #592]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b0:	4b91      	ldr	r3, [pc, #580]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035bc:	4b8e      	ldr	r3, [pc, #568]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b84      	ldr	r3, [pc, #528]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x124>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e25a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x90>
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7b      	ldr	r2, [pc, #492]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xcc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0xb4>
 800361e:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a75      	ldr	r2, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a72      	ldr	r2, [pc, #456]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xcc>
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6b      	ldr	r2, [pc, #428]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fd76 	bl	8001148 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd fd72 	bl	8001148 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e21f      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xdc>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd fd62 	bl	8001148 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003688:	f7fd fd5e 	bl	8001148 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e20b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x104>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d06f      	beq.n	8003796 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036b6:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d017      	beq.n	80036f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c2:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d11c      	bne.n	8003720 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x186>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1d3      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4937      	ldr	r1, [pc, #220]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	e03a      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x278>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fd0b 	bl	8001148 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003736:	f7fd fd07 	bl	8001148 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1b4      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_RCC_OscConfig+0x278>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fcea 	bl	8001148 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7fd fce6 	bl	8001148 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e193      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d036      	beq.n	8003810 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x27c>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd fcca 	bl	8001148 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fd fcc6 	bl	8001148 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e173      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x234>
 80037d6:	e01b      	b.n	8003810 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x27c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fd fcb3 	bl	8001148 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	e00e      	b.n	8003804 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e6:	f7fd fcaf 	bl	8001148 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d907      	bls.n	8003804 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e15c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
 80037f8:	40023800 	.word	0x40023800
 80037fc:	42470000 	.word	0x42470000
 8003800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	4b8a      	ldr	r3, [pc, #552]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ea      	bne.n	80037e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8097 	beq.w	800394c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b83      	ldr	r3, [pc, #524]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b79      	ldr	r3, [pc, #484]	; (8003a34 <HAL_RCC_OscConfig+0x4b0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b76      	ldr	r3, [pc, #472]	; (8003a34 <HAL_RCC_OscConfig+0x4b0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a75      	ldr	r2, [pc, #468]	; (8003a34 <HAL_RCC_OscConfig+0x4b0>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fd fc6f 	bl	8001148 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fd fc6b 	bl	8001148 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e118      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_RCC_OscConfig+0x4b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x31e>
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e01c      	b.n	80038dc <HAL_RCC_OscConfig+0x358>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x340>
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a60      	ldr	r2, [pc, #384]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5d      	ldr	r2, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0x358>
 80038c4:	4b5a      	ldr	r3, [pc, #360]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a59      	ldr	r2, [pc, #356]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80038d6:	f023 0304 	bic.w	r3, r3, #4
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fc30 	bl	8001148 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fd fc2c 	bl	8001148 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0d7      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0ee      	beq.n	80038ec <HAL_RCC_OscConfig+0x368>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fc1a 	bl	8001148 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fc16 	bl	8001148 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0c1      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ee      	bne.n	8003918 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a3a      	ldr	r2, [pc, #232]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80ad 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003956:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d060      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d145      	bne.n	80039f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCC_OscConfig+0x4b4>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd fbea 	bl	8001148 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd fbe6 	bl	8001148 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e093      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	019b      	lsls	r3, r3, #6
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	491b      	ldr	r1, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCC_OscConfig+0x4b4>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd fbbb 	bl	8001148 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fd fbb7 	bl	8001148 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e064      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x452>
 80039f4:	e05c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_RCC_OscConfig+0x4b4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fba4 	bl	8001148 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fba0 	bl	8001148 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04d      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x480>
 8003a22:	e045      	b.n	8003ab0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e040      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40007000 	.word	0x40007000
 8003a38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_RCC_OscConfig+0x538>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d030      	beq.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d129      	bne.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d122      	bne.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d119      	bne.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d10f      	bne.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03f      	b.n	8003b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fa56 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f929 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b08a      	sub	sp, #40	; 0x28
 8003b5e:	af02      	add	r7, sp, #8
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d17c      	bne.n	8003c74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_Transmit+0x2c>
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e075      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Transmit+0x3e>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e06e      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2221      	movs	r2, #33	; 0x21
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bae:	f7fd facb 	bl	8001148 <HAL_GetTick>
 8003bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	88fa      	ldrh	r2, [r7, #6]
 8003bb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d108      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	e003      	b.n	8003be4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bec:	e02a      	b.n	8003c44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f840 	bl	8003c7e <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3302      	adds	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e007      	b.n	8003c36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cf      	bne.n	8003bee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f810 	bl	8003c7e <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b090      	sub	sp, #64	; 0x40
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8e:	e050      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d04c      	beq.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9e:	f7fd fa53 	bl	8001148 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d241      	bcs.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cce:	637a      	str	r2, [r7, #52]	; 0x34
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d02:	623a      	str	r2, [r7, #32]
 8003d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	69f9      	ldr	r1, [r7, #28]
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e5      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e00f      	b.n	8003d52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d09f      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3740      	adds	r7, #64	; 0x40
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b0c0      	sub	sp, #256	; 0x100
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	ea40 0301 	orr.w	r3, r0, r1
 8003d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db4:	f021 010c 	bic.w	r1, r1, #12
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	6999      	ldr	r1, [r3, #24]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	ea40 0301 	orr.w	r3, r0, r1
 8003de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <UART_SetConfig+0x2cc>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0xa0>
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b8d      	ldr	r3, [pc, #564]	; (800402c <UART_SetConfig+0x2d0>)
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7ff f97e 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e04:	e003      	b.n	8003e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e06:	f7ff f965 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8003e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	f040 810c 	bne.w	8004034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e36:	415b      	adcs	r3, r3
 8003e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e3e:	4621      	mov	r1, r4
 8003e40:	eb12 0801 	adds.w	r8, r2, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	eb43 0901 	adc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	eb49 0303 	adc.w	r3, r9, r3
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	18db      	adds	r3, r3, r3
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	4613      	mov	r3, r2
 8003e92:	eb42 0303 	adc.w	r3, r2, r3
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
 8003e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea0:	f7fc fa06 	bl	80002b0 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <UART_SetConfig+0x2d4>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	4692      	mov	sl, r2
 8003ef6:	469b      	mov	fp, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	eb1a 0303 	adds.w	r3, sl, r3
 8003efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb4b 0303 	adc.w	r3, fp, r3
 8003f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f36:	f7fc f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f58:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f80:	415b      	adcs	r3, r3
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ff2:	f7fc f95d 	bl	80002b0 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <UART_SetConfig+0x2d4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 0207 	and.w	r2, r3, #7
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004024:	e105      	b.n	8004232 <UART_SetConfig+0x4d6>
 8004026:	bf00      	nop
 8004028:	40011000 	.word	0x40011000
 800402c:	40011400 	.word	0x40011400
 8004030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800403e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	1891      	adds	r1, r2, r2
 800404c:	6239      	str	r1, [r7, #32]
 800404e:	415b      	adcs	r3, r3
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004056:	4641      	mov	r1, r8
 8004058:	1854      	adds	r4, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb43 0501 	adc.w	r5, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	00eb      	lsls	r3, r5, #3
 800406a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406e:	00e2      	lsls	r2, r4, #3
 8004070:	4614      	mov	r4, r2
 8004072:	461d      	mov	r5, r3
 8004074:	4643      	mov	r3, r8
 8004076:	18e3      	adds	r3, r4, r3
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800407c:	464b      	mov	r3, r9
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040a2:	4629      	mov	r1, r5
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ac:	4621      	mov	r1, r4
 80040ae:	008a      	lsls	r2, r1, #2
 80040b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040b4:	f7fc f8fc 	bl	80002b0 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b60      	ldr	r3, [pc, #384]	; (8004240 <UART_SetConfig+0x4e4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	61b9      	str	r1, [r7, #24]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6139      	str	r1, [r7, #16]
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	67bb      	str	r3, [r7, #120]	; 0x78
 8004132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004152:	f7fc f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <UART_SetConfig+0x4e4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	3332      	adds	r3, #50	; 0x32
 800416e:	4a34      	ldr	r2, [pc, #208]	; (8004240 <UART_SetConfig+0x4e4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417a:	441c      	add	r4, r3
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	673b      	str	r3, [r7, #112]	; 0x70
 8004184:	677a      	str	r2, [r7, #116]	; 0x74
 8004186:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	1891      	adds	r1, r2, r2
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	415b      	adcs	r3, r3
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419a:	4641      	mov	r1, r8
 800419c:	1851      	adds	r1, r2, r1
 800419e:	6039      	str	r1, [r7, #0]
 80041a0:	4649      	mov	r1, r9
 80041a2:	414b      	adcs	r3, r1
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b2:	4659      	mov	r1, fp
 80041b4:	00cb      	lsls	r3, r1, #3
 80041b6:	4651      	mov	r1, sl
 80041b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041bc:	4651      	mov	r1, sl
 80041be:	00ca      	lsls	r2, r1, #3
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	4603      	mov	r3, r0
 80041c6:	4642      	mov	r2, r8
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80041cc:	464b      	mov	r3, r9
 80041ce:	460a      	mov	r2, r1
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
 80041e0:	667a      	str	r2, [r7, #100]	; 0x64
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041ee:	4649      	mov	r1, r9
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4641      	mov	r1, r8
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4641      	mov	r1, r8
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004200:	f7fc f856 	bl	80002b0 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <UART_SetConfig+0x4e4>)
 800420a:	fba3 1302 	umull	r1, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2164      	movs	r1, #100	; 0x64
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a08      	ldr	r2, [pc, #32]	; (8004240 <UART_SetConfig+0x4e4>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4422      	add	r2, r4
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423e:	bf00      	nop
 8004240:	51eb851f 	.word	0x51eb851f

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000000c 	.word	0x2000000c

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	; (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	; (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	; (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	; (8004294 <__libc_init_array+0x44>)
 8004264:	f001 f824 	bl	80052b0 <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	08005480 	.word	0x08005480
 800428c:	08005480 	.word	0x08005480
 8004290:	08005480 	.word	0x08005480
 8004294:	08005484 	.word	0x08005484

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <iprintf>:
 80042a8:	b40f      	push	{r0, r1, r2, r3}
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <iprintf+0x2c>)
 80042ac:	b513      	push	{r0, r1, r4, lr}
 80042ae:	681c      	ldr	r4, [r3, #0]
 80042b0:	b124      	cbz	r4, 80042bc <iprintf+0x14>
 80042b2:	69a3      	ldr	r3, [r4, #24]
 80042b4:	b913      	cbnz	r3, 80042bc <iprintf+0x14>
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 fa5e 	bl	8004778 <__sinit>
 80042bc:	ab05      	add	r3, sp, #20
 80042be:	9a04      	ldr	r2, [sp, #16]
 80042c0:	68a1      	ldr	r1, [r4, #8]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	4620      	mov	r0, r4
 80042c6:	f000 fc67 	bl	8004b98 <_vfiprintf_r>
 80042ca:	b002      	add	sp, #8
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	b004      	add	sp, #16
 80042d2:	4770      	bx	lr
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <_puts_r>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	460e      	mov	r6, r1
 80042dc:	4605      	mov	r5, r0
 80042de:	b118      	cbz	r0, 80042e8 <_puts_r+0x10>
 80042e0:	6983      	ldr	r3, [r0, #24]
 80042e2:	b90b      	cbnz	r3, 80042e8 <_puts_r+0x10>
 80042e4:	f000 fa48 	bl	8004778 <__sinit>
 80042e8:	69ab      	ldr	r3, [r5, #24]
 80042ea:	68ac      	ldr	r4, [r5, #8]
 80042ec:	b913      	cbnz	r3, 80042f4 <_puts_r+0x1c>
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 fa42 	bl	8004778 <__sinit>
 80042f4:	4b2c      	ldr	r3, [pc, #176]	; (80043a8 <_puts_r+0xd0>)
 80042f6:	429c      	cmp	r4, r3
 80042f8:	d120      	bne.n	800433c <_puts_r+0x64>
 80042fa:	686c      	ldr	r4, [r5, #4]
 80042fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042fe:	07db      	lsls	r3, r3, #31
 8004300:	d405      	bmi.n	800430e <_puts_r+0x36>
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	0598      	lsls	r0, r3, #22
 8004306:	d402      	bmi.n	800430e <_puts_r+0x36>
 8004308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800430a:	f000 fad3 	bl	80048b4 <__retarget_lock_acquire_recursive>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	0719      	lsls	r1, r3, #28
 8004312:	d51d      	bpl.n	8004350 <_puts_r+0x78>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	b1db      	cbz	r3, 8004350 <_puts_r+0x78>
 8004318:	3e01      	subs	r6, #1
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004320:	3b01      	subs	r3, #1
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	bb39      	cbnz	r1, 8004376 <_puts_r+0x9e>
 8004326:	2b00      	cmp	r3, #0
 8004328:	da38      	bge.n	800439c <_puts_r+0xc4>
 800432a:	4622      	mov	r2, r4
 800432c:	210a      	movs	r1, #10
 800432e:	4628      	mov	r0, r5
 8004330:	f000 f848 	bl	80043c4 <__swbuf_r>
 8004334:	3001      	adds	r0, #1
 8004336:	d011      	beq.n	800435c <_puts_r+0x84>
 8004338:	250a      	movs	r5, #10
 800433a:	e011      	b.n	8004360 <_puts_r+0x88>
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <_puts_r+0xd4>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d101      	bne.n	8004346 <_puts_r+0x6e>
 8004342:	68ac      	ldr	r4, [r5, #8]
 8004344:	e7da      	b.n	80042fc <_puts_r+0x24>
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <_puts_r+0xd8>)
 8004348:	429c      	cmp	r4, r3
 800434a:	bf08      	it	eq
 800434c:	68ec      	ldreq	r4, [r5, #12]
 800434e:	e7d5      	b.n	80042fc <_puts_r+0x24>
 8004350:	4621      	mov	r1, r4
 8004352:	4628      	mov	r0, r5
 8004354:	f000 f888 	bl	8004468 <__swsetup_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	d0dd      	beq.n	8004318 <_puts_r+0x40>
 800435c:	f04f 35ff 	mov.w	r5, #4294967295
 8004360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004362:	07da      	lsls	r2, r3, #31
 8004364:	d405      	bmi.n	8004372 <_puts_r+0x9a>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	059b      	lsls	r3, r3, #22
 800436a:	d402      	bmi.n	8004372 <_puts_r+0x9a>
 800436c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800436e:	f000 faa2 	bl	80048b6 <__retarget_lock_release_recursive>
 8004372:	4628      	mov	r0, r5
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	2b00      	cmp	r3, #0
 8004378:	da04      	bge.n	8004384 <_puts_r+0xac>
 800437a:	69a2      	ldr	r2, [r4, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	dc06      	bgt.n	800438e <_puts_r+0xb6>
 8004380:	290a      	cmp	r1, #10
 8004382:	d004      	beq.n	800438e <_puts_r+0xb6>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	6022      	str	r2, [r4, #0]
 800438a:	7019      	strb	r1, [r3, #0]
 800438c:	e7c5      	b.n	800431a <_puts_r+0x42>
 800438e:	4622      	mov	r2, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f000 f817 	bl	80043c4 <__swbuf_r>
 8004396:	3001      	adds	r0, #1
 8004398:	d1bf      	bne.n	800431a <_puts_r+0x42>
 800439a:	e7df      	b.n	800435c <_puts_r+0x84>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	250a      	movs	r5, #10
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	6022      	str	r2, [r4, #0]
 80043a4:	701d      	strb	r5, [r3, #0]
 80043a6:	e7db      	b.n	8004360 <_puts_r+0x88>
 80043a8:	08005404 	.word	0x08005404
 80043ac:	08005424 	.word	0x08005424
 80043b0:	080053e4 	.word	0x080053e4

080043b4 <puts>:
 80043b4:	4b02      	ldr	r3, [pc, #8]	; (80043c0 <puts+0xc>)
 80043b6:	4601      	mov	r1, r0
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f7ff bf8d 	b.w	80042d8 <_puts_r>
 80043be:	bf00      	nop
 80043c0:	2000000c 	.word	0x2000000c

080043c4 <__swbuf_r>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	460e      	mov	r6, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	4605      	mov	r5, r0
 80043cc:	b118      	cbz	r0, 80043d6 <__swbuf_r+0x12>
 80043ce:	6983      	ldr	r3, [r0, #24]
 80043d0:	b90b      	cbnz	r3, 80043d6 <__swbuf_r+0x12>
 80043d2:	f000 f9d1 	bl	8004778 <__sinit>
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <__swbuf_r+0x98>)
 80043d8:	429c      	cmp	r4, r3
 80043da:	d12b      	bne.n	8004434 <__swbuf_r+0x70>
 80043dc:	686c      	ldr	r4, [r5, #4]
 80043de:	69a3      	ldr	r3, [r4, #24]
 80043e0:	60a3      	str	r3, [r4, #8]
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	071a      	lsls	r2, r3, #28
 80043e6:	d52f      	bpl.n	8004448 <__swbuf_r+0x84>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	b36b      	cbz	r3, 8004448 <__swbuf_r+0x84>
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	1ac0      	subs	r0, r0, r3
 80043f2:	6963      	ldr	r3, [r4, #20]
 80043f4:	b2f6      	uxtb	r6, r6
 80043f6:	4283      	cmp	r3, r0
 80043f8:	4637      	mov	r7, r6
 80043fa:	dc04      	bgt.n	8004406 <__swbuf_r+0x42>
 80043fc:	4621      	mov	r1, r4
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 f926 	bl	8004650 <_fflush_r>
 8004404:	bb30      	cbnz	r0, 8004454 <__swbuf_r+0x90>
 8004406:	68a3      	ldr	r3, [r4, #8]
 8004408:	3b01      	subs	r3, #1
 800440a:	60a3      	str	r3, [r4, #8]
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	6022      	str	r2, [r4, #0]
 8004412:	701e      	strb	r6, [r3, #0]
 8004414:	6963      	ldr	r3, [r4, #20]
 8004416:	3001      	adds	r0, #1
 8004418:	4283      	cmp	r3, r0
 800441a:	d004      	beq.n	8004426 <__swbuf_r+0x62>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	07db      	lsls	r3, r3, #31
 8004420:	d506      	bpl.n	8004430 <__swbuf_r+0x6c>
 8004422:	2e0a      	cmp	r6, #10
 8004424:	d104      	bne.n	8004430 <__swbuf_r+0x6c>
 8004426:	4621      	mov	r1, r4
 8004428:	4628      	mov	r0, r5
 800442a:	f000 f911 	bl	8004650 <_fflush_r>
 800442e:	b988      	cbnz	r0, 8004454 <__swbuf_r+0x90>
 8004430:	4638      	mov	r0, r7
 8004432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <__swbuf_r+0x9c>)
 8004436:	429c      	cmp	r4, r3
 8004438:	d101      	bne.n	800443e <__swbuf_r+0x7a>
 800443a:	68ac      	ldr	r4, [r5, #8]
 800443c:	e7cf      	b.n	80043de <__swbuf_r+0x1a>
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <__swbuf_r+0xa0>)
 8004440:	429c      	cmp	r4, r3
 8004442:	bf08      	it	eq
 8004444:	68ec      	ldreq	r4, [r5, #12]
 8004446:	e7ca      	b.n	80043de <__swbuf_r+0x1a>
 8004448:	4621      	mov	r1, r4
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f80c 	bl	8004468 <__swsetup_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	d0cb      	beq.n	80043ec <__swbuf_r+0x28>
 8004454:	f04f 37ff 	mov.w	r7, #4294967295
 8004458:	e7ea      	b.n	8004430 <__swbuf_r+0x6c>
 800445a:	bf00      	nop
 800445c:	08005404 	.word	0x08005404
 8004460:	08005424 	.word	0x08005424
 8004464:	080053e4 	.word	0x080053e4

08004468 <__swsetup_r>:
 8004468:	4b32      	ldr	r3, [pc, #200]	; (8004534 <__swsetup_r+0xcc>)
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	681d      	ldr	r5, [r3, #0]
 800446e:	4606      	mov	r6, r0
 8004470:	460c      	mov	r4, r1
 8004472:	b125      	cbz	r5, 800447e <__swsetup_r+0x16>
 8004474:	69ab      	ldr	r3, [r5, #24]
 8004476:	b913      	cbnz	r3, 800447e <__swsetup_r+0x16>
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f97d 	bl	8004778 <__sinit>
 800447e:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <__swsetup_r+0xd0>)
 8004480:	429c      	cmp	r4, r3
 8004482:	d10f      	bne.n	80044a4 <__swsetup_r+0x3c>
 8004484:	686c      	ldr	r4, [r5, #4]
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800448c:	0719      	lsls	r1, r3, #28
 800448e:	d42c      	bmi.n	80044ea <__swsetup_r+0x82>
 8004490:	06dd      	lsls	r5, r3, #27
 8004492:	d411      	bmi.n	80044b8 <__swsetup_r+0x50>
 8004494:	2309      	movs	r3, #9
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	e03e      	b.n	8004522 <__swsetup_r+0xba>
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <__swsetup_r+0xd4>)
 80044a6:	429c      	cmp	r4, r3
 80044a8:	d101      	bne.n	80044ae <__swsetup_r+0x46>
 80044aa:	68ac      	ldr	r4, [r5, #8]
 80044ac:	e7eb      	b.n	8004486 <__swsetup_r+0x1e>
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <__swsetup_r+0xd8>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	bf08      	it	eq
 80044b4:	68ec      	ldreq	r4, [r5, #12]
 80044b6:	e7e6      	b.n	8004486 <__swsetup_r+0x1e>
 80044b8:	0758      	lsls	r0, r3, #29
 80044ba:	d512      	bpl.n	80044e2 <__swsetup_r+0x7a>
 80044bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044be:	b141      	cbz	r1, 80044d2 <__swsetup_r+0x6a>
 80044c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c4:	4299      	cmp	r1, r3
 80044c6:	d002      	beq.n	80044ce <__swsetup_r+0x66>
 80044c8:	4630      	mov	r0, r6
 80044ca:	f000 fa5b 	bl	8004984 <_free_r>
 80044ce:	2300      	movs	r3, #0
 80044d0:	6363      	str	r3, [r4, #52]	; 0x34
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	2300      	movs	r3, #0
 80044dc:	6063      	str	r3, [r4, #4]
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	81a3      	strh	r3, [r4, #12]
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	b94b      	cbnz	r3, 8004502 <__swsetup_r+0x9a>
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d003      	beq.n	8004502 <__swsetup_r+0x9a>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 fa01 	bl	8004904 <__smakebuf_r>
 8004502:	89a0      	ldrh	r0, [r4, #12]
 8004504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004508:	f010 0301 	ands.w	r3, r0, #1
 800450c:	d00a      	beq.n	8004524 <__swsetup_r+0xbc>
 800450e:	2300      	movs	r3, #0
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	6963      	ldr	r3, [r4, #20]
 8004514:	425b      	negs	r3, r3
 8004516:	61a3      	str	r3, [r4, #24]
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	b943      	cbnz	r3, 800452e <__swsetup_r+0xc6>
 800451c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004520:	d1ba      	bne.n	8004498 <__swsetup_r+0x30>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	0781      	lsls	r1, r0, #30
 8004526:	bf58      	it	pl
 8004528:	6963      	ldrpl	r3, [r4, #20]
 800452a:	60a3      	str	r3, [r4, #8]
 800452c:	e7f4      	b.n	8004518 <__swsetup_r+0xb0>
 800452e:	2000      	movs	r0, #0
 8004530:	e7f7      	b.n	8004522 <__swsetup_r+0xba>
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
 8004538:	08005404 	.word	0x08005404
 800453c:	08005424 	.word	0x08005424
 8004540:	080053e4 	.word	0x080053e4

08004544 <__sflush_r>:
 8004544:	898a      	ldrh	r2, [r1, #12]
 8004546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	4605      	mov	r5, r0
 800454c:	0710      	lsls	r0, r2, #28
 800454e:	460c      	mov	r4, r1
 8004550:	d458      	bmi.n	8004604 <__sflush_r+0xc0>
 8004552:	684b      	ldr	r3, [r1, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dc05      	bgt.n	8004564 <__sflush_r+0x20>
 8004558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	dc02      	bgt.n	8004564 <__sflush_r+0x20>
 800455e:	2000      	movs	r0, #0
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004566:	2e00      	cmp	r6, #0
 8004568:	d0f9      	beq.n	800455e <__sflush_r+0x1a>
 800456a:	2300      	movs	r3, #0
 800456c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004570:	682f      	ldr	r7, [r5, #0]
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	d032      	beq.n	80045dc <__sflush_r+0x98>
 8004576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	075a      	lsls	r2, r3, #29
 800457c:	d505      	bpl.n	800458a <__sflush_r+0x46>
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	1ac0      	subs	r0, r0, r3
 8004582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004584:	b10b      	cbz	r3, 800458a <__sflush_r+0x46>
 8004586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004588:	1ac0      	subs	r0, r0, r3
 800458a:	2300      	movs	r3, #0
 800458c:	4602      	mov	r2, r0
 800458e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004590:	6a21      	ldr	r1, [r4, #32]
 8004592:	4628      	mov	r0, r5
 8004594:	47b0      	blx	r6
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	d106      	bne.n	80045aa <__sflush_r+0x66>
 800459c:	6829      	ldr	r1, [r5, #0]
 800459e:	291d      	cmp	r1, #29
 80045a0:	d82c      	bhi.n	80045fc <__sflush_r+0xb8>
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <__sflush_r+0x108>)
 80045a4:	40ca      	lsrs	r2, r1
 80045a6:	07d6      	lsls	r6, r2, #31
 80045a8:	d528      	bpl.n	80045fc <__sflush_r+0xb8>
 80045aa:	2200      	movs	r2, #0
 80045ac:	6062      	str	r2, [r4, #4]
 80045ae:	04d9      	lsls	r1, r3, #19
 80045b0:	6922      	ldr	r2, [r4, #16]
 80045b2:	6022      	str	r2, [r4, #0]
 80045b4:	d504      	bpl.n	80045c0 <__sflush_r+0x7c>
 80045b6:	1c42      	adds	r2, r0, #1
 80045b8:	d101      	bne.n	80045be <__sflush_r+0x7a>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	b903      	cbnz	r3, 80045c0 <__sflush_r+0x7c>
 80045be:	6560      	str	r0, [r4, #84]	; 0x54
 80045c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c2:	602f      	str	r7, [r5, #0]
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d0ca      	beq.n	800455e <__sflush_r+0x1a>
 80045c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045cc:	4299      	cmp	r1, r3
 80045ce:	d002      	beq.n	80045d6 <__sflush_r+0x92>
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f9d7 	bl	8004984 <_free_r>
 80045d6:	2000      	movs	r0, #0
 80045d8:	6360      	str	r0, [r4, #52]	; 0x34
 80045da:	e7c1      	b.n	8004560 <__sflush_r+0x1c>
 80045dc:	6a21      	ldr	r1, [r4, #32]
 80045de:	2301      	movs	r3, #1
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b0      	blx	r6
 80045e4:	1c41      	adds	r1, r0, #1
 80045e6:	d1c7      	bne.n	8004578 <__sflush_r+0x34>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0c4      	beq.n	8004578 <__sflush_r+0x34>
 80045ee:	2b1d      	cmp	r3, #29
 80045f0:	d001      	beq.n	80045f6 <__sflush_r+0xb2>
 80045f2:	2b16      	cmp	r3, #22
 80045f4:	d101      	bne.n	80045fa <__sflush_r+0xb6>
 80045f6:	602f      	str	r7, [r5, #0]
 80045f8:	e7b1      	b.n	800455e <__sflush_r+0x1a>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	e7ad      	b.n	8004560 <__sflush_r+0x1c>
 8004604:	690f      	ldr	r7, [r1, #16]
 8004606:	2f00      	cmp	r7, #0
 8004608:	d0a9      	beq.n	800455e <__sflush_r+0x1a>
 800460a:	0793      	lsls	r3, r2, #30
 800460c:	680e      	ldr	r6, [r1, #0]
 800460e:	bf08      	it	eq
 8004610:	694b      	ldreq	r3, [r1, #20]
 8004612:	600f      	str	r7, [r1, #0]
 8004614:	bf18      	it	ne
 8004616:	2300      	movne	r3, #0
 8004618:	eba6 0807 	sub.w	r8, r6, r7
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	f1b8 0f00 	cmp.w	r8, #0
 8004622:	dd9c      	ble.n	800455e <__sflush_r+0x1a>
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004628:	4643      	mov	r3, r8
 800462a:	463a      	mov	r2, r7
 800462c:	4628      	mov	r0, r5
 800462e:	47b0      	blx	r6
 8004630:	2800      	cmp	r0, #0
 8004632:	dc06      	bgt.n	8004642 <__sflush_r+0xfe>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	e78e      	b.n	8004560 <__sflush_r+0x1c>
 8004642:	4407      	add	r7, r0
 8004644:	eba8 0800 	sub.w	r8, r8, r0
 8004648:	e7e9      	b.n	800461e <__sflush_r+0xda>
 800464a:	bf00      	nop
 800464c:	20400001 	.word	0x20400001

08004650 <_fflush_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	690b      	ldr	r3, [r1, #16]
 8004654:	4605      	mov	r5, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b913      	cbnz	r3, 8004660 <_fflush_r+0x10>
 800465a:	2500      	movs	r5, #0
 800465c:	4628      	mov	r0, r5
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	b118      	cbz	r0, 800466a <_fflush_r+0x1a>
 8004662:	6983      	ldr	r3, [r0, #24]
 8004664:	b90b      	cbnz	r3, 800466a <_fflush_r+0x1a>
 8004666:	f000 f887 	bl	8004778 <__sinit>
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <_fflush_r+0x6c>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d11b      	bne.n	80046a8 <_fflush_r+0x58>
 8004670:	686c      	ldr	r4, [r5, #4]
 8004672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ef      	beq.n	800465a <_fflush_r+0xa>
 800467a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800467c:	07d0      	lsls	r0, r2, #31
 800467e:	d404      	bmi.n	800468a <_fflush_r+0x3a>
 8004680:	0599      	lsls	r1, r3, #22
 8004682:	d402      	bmi.n	800468a <_fflush_r+0x3a>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f000 f915 	bl	80048b4 <__retarget_lock_acquire_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	4621      	mov	r1, r4
 800468e:	f7ff ff59 	bl	8004544 <__sflush_r>
 8004692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004694:	07da      	lsls	r2, r3, #31
 8004696:	4605      	mov	r5, r0
 8004698:	d4e0      	bmi.n	800465c <_fflush_r+0xc>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d4dd      	bmi.n	800465c <_fflush_r+0xc>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f000 f908 	bl	80048b6 <__retarget_lock_release_recursive>
 80046a6:	e7d9      	b.n	800465c <_fflush_r+0xc>
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <_fflush_r+0x70>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d101      	bne.n	80046b2 <_fflush_r+0x62>
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	e7df      	b.n	8004672 <_fflush_r+0x22>
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <_fflush_r+0x74>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bf08      	it	eq
 80046b8:	68ec      	ldreq	r4, [r5, #12]
 80046ba:	e7da      	b.n	8004672 <_fflush_r+0x22>
 80046bc:	08005404 	.word	0x08005404
 80046c0:	08005424 	.word	0x08005424
 80046c4:	080053e4 	.word	0x080053e4

080046c8 <std>:
 80046c8:	2300      	movs	r3, #0
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
 80046ce:	e9c0 3300 	strd	r3, r3, [r0]
 80046d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046d6:	6083      	str	r3, [r0, #8]
 80046d8:	8181      	strh	r1, [r0, #12]
 80046da:	6643      	str	r3, [r0, #100]	; 0x64
 80046dc:	81c2      	strh	r2, [r0, #14]
 80046de:	6183      	str	r3, [r0, #24]
 80046e0:	4619      	mov	r1, r3
 80046e2:	2208      	movs	r2, #8
 80046e4:	305c      	adds	r0, #92	; 0x5c
 80046e6:	f7ff fdd7 	bl	8004298 <memset>
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <std+0x38>)
 80046ec:	6263      	str	r3, [r4, #36]	; 0x24
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <std+0x3c>)
 80046f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <std+0x40>)
 80046f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <std+0x44>)
 80046f8:	6224      	str	r4, [r4, #32]
 80046fa:	6323      	str	r3, [r4, #48]	; 0x30
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	08005141 	.word	0x08005141
 8004704:	08005163 	.word	0x08005163
 8004708:	0800519b 	.word	0x0800519b
 800470c:	080051bf 	.word	0x080051bf

08004710 <_cleanup_r>:
 8004710:	4901      	ldr	r1, [pc, #4]	; (8004718 <_cleanup_r+0x8>)
 8004712:	f000 b8af 	b.w	8004874 <_fwalk_reent>
 8004716:	bf00      	nop
 8004718:	08004651 	.word	0x08004651

0800471c <__sfmoreglue>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	2268      	movs	r2, #104	; 0x68
 8004720:	1e4d      	subs	r5, r1, #1
 8004722:	4355      	muls	r5, r2
 8004724:	460e      	mov	r6, r1
 8004726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800472a:	f000 f997 	bl	8004a5c <_malloc_r>
 800472e:	4604      	mov	r4, r0
 8004730:	b140      	cbz	r0, 8004744 <__sfmoreglue+0x28>
 8004732:	2100      	movs	r1, #0
 8004734:	e9c0 1600 	strd	r1, r6, [r0]
 8004738:	300c      	adds	r0, #12
 800473a:	60a0      	str	r0, [r4, #8]
 800473c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004740:	f7ff fdaa 	bl	8004298 <memset>
 8004744:	4620      	mov	r0, r4
 8004746:	bd70      	pop	{r4, r5, r6, pc}

08004748 <__sfp_lock_acquire>:
 8004748:	4801      	ldr	r0, [pc, #4]	; (8004750 <__sfp_lock_acquire+0x8>)
 800474a:	f000 b8b3 	b.w	80048b4 <__retarget_lock_acquire_recursive>
 800474e:	bf00      	nop
 8004750:	2000012d 	.word	0x2000012d

08004754 <__sfp_lock_release>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__sfp_lock_release+0x8>)
 8004756:	f000 b8ae 	b.w	80048b6 <__retarget_lock_release_recursive>
 800475a:	bf00      	nop
 800475c:	2000012d 	.word	0x2000012d

08004760 <__sinit_lock_acquire>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__sinit_lock_acquire+0x8>)
 8004762:	f000 b8a7 	b.w	80048b4 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	2000012e 	.word	0x2000012e

0800476c <__sinit_lock_release>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__sinit_lock_release+0x8>)
 800476e:	f000 b8a2 	b.w	80048b6 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	2000012e 	.word	0x2000012e

08004778 <__sinit>:
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
 800477c:	f7ff fff0 	bl	8004760 <__sinit_lock_acquire>
 8004780:	69a3      	ldr	r3, [r4, #24]
 8004782:	b11b      	cbz	r3, 800478c <__sinit+0x14>
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f7ff bff0 	b.w	800476c <__sinit_lock_release>
 800478c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004790:	6523      	str	r3, [r4, #80]	; 0x50
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <__sinit+0x68>)
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <__sinit+0x6c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	62a2      	str	r2, [r4, #40]	; 0x28
 800479a:	42a3      	cmp	r3, r4
 800479c:	bf04      	itt	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	61a3      	streq	r3, [r4, #24]
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 f820 	bl	80047e8 <__sfp>
 80047a8:	6060      	str	r0, [r4, #4]
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 f81c 	bl	80047e8 <__sfp>
 80047b0:	60a0      	str	r0, [r4, #8]
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 f818 	bl	80047e8 <__sfp>
 80047b8:	2200      	movs	r2, #0
 80047ba:	60e0      	str	r0, [r4, #12]
 80047bc:	2104      	movs	r1, #4
 80047be:	6860      	ldr	r0, [r4, #4]
 80047c0:	f7ff ff82 	bl	80046c8 <std>
 80047c4:	68a0      	ldr	r0, [r4, #8]
 80047c6:	2201      	movs	r2, #1
 80047c8:	2109      	movs	r1, #9
 80047ca:	f7ff ff7d 	bl	80046c8 <std>
 80047ce:	68e0      	ldr	r0, [r4, #12]
 80047d0:	2202      	movs	r2, #2
 80047d2:	2112      	movs	r1, #18
 80047d4:	f7ff ff78 	bl	80046c8 <std>
 80047d8:	2301      	movs	r3, #1
 80047da:	61a3      	str	r3, [r4, #24]
 80047dc:	e7d2      	b.n	8004784 <__sinit+0xc>
 80047de:	bf00      	nop
 80047e0:	080053e0 	.word	0x080053e0
 80047e4:	08004711 	.word	0x08004711

080047e8 <__sfp>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	4607      	mov	r7, r0
 80047ec:	f7ff ffac 	bl	8004748 <__sfp_lock_acquire>
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <__sfp+0x84>)
 80047f2:	681e      	ldr	r6, [r3, #0]
 80047f4:	69b3      	ldr	r3, [r6, #24]
 80047f6:	b913      	cbnz	r3, 80047fe <__sfp+0x16>
 80047f8:	4630      	mov	r0, r6
 80047fa:	f7ff ffbd 	bl	8004778 <__sinit>
 80047fe:	3648      	adds	r6, #72	; 0x48
 8004800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004804:	3b01      	subs	r3, #1
 8004806:	d503      	bpl.n	8004810 <__sfp+0x28>
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	b30b      	cbz	r3, 8004850 <__sfp+0x68>
 800480c:	6836      	ldr	r6, [r6, #0]
 800480e:	e7f7      	b.n	8004800 <__sfp+0x18>
 8004810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004814:	b9d5      	cbnz	r5, 800484c <__sfp+0x64>
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <__sfp+0x88>)
 8004818:	60e3      	str	r3, [r4, #12]
 800481a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800481e:	6665      	str	r5, [r4, #100]	; 0x64
 8004820:	f000 f847 	bl	80048b2 <__retarget_lock_init_recursive>
 8004824:	f7ff ff96 	bl	8004754 <__sfp_lock_release>
 8004828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800482c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004830:	6025      	str	r5, [r4, #0]
 8004832:	61a5      	str	r5, [r4, #24]
 8004834:	2208      	movs	r2, #8
 8004836:	4629      	mov	r1, r5
 8004838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800483c:	f7ff fd2c 	bl	8004298 <memset>
 8004840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004848:	4620      	mov	r0, r4
 800484a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484c:	3468      	adds	r4, #104	; 0x68
 800484e:	e7d9      	b.n	8004804 <__sfp+0x1c>
 8004850:	2104      	movs	r1, #4
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff ff62 	bl	800471c <__sfmoreglue>
 8004858:	4604      	mov	r4, r0
 800485a:	6030      	str	r0, [r6, #0]
 800485c:	2800      	cmp	r0, #0
 800485e:	d1d5      	bne.n	800480c <__sfp+0x24>
 8004860:	f7ff ff78 	bl	8004754 <__sfp_lock_release>
 8004864:	230c      	movs	r3, #12
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	e7ee      	b.n	8004848 <__sfp+0x60>
 800486a:	bf00      	nop
 800486c:	080053e0 	.word	0x080053e0
 8004870:	ffff0001 	.word	0xffff0001

08004874 <_fwalk_reent>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	4606      	mov	r6, r0
 800487a:	4688      	mov	r8, r1
 800487c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004880:	2700      	movs	r7, #0
 8004882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004886:	f1b9 0901 	subs.w	r9, r9, #1
 800488a:	d505      	bpl.n	8004898 <_fwalk_reent+0x24>
 800488c:	6824      	ldr	r4, [r4, #0]
 800488e:	2c00      	cmp	r4, #0
 8004890:	d1f7      	bne.n	8004882 <_fwalk_reent+0xe>
 8004892:	4638      	mov	r0, r7
 8004894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004898:	89ab      	ldrh	r3, [r5, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d907      	bls.n	80048ae <_fwalk_reent+0x3a>
 800489e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048a2:	3301      	adds	r3, #1
 80048a4:	d003      	beq.n	80048ae <_fwalk_reent+0x3a>
 80048a6:	4629      	mov	r1, r5
 80048a8:	4630      	mov	r0, r6
 80048aa:	47c0      	blx	r8
 80048ac:	4307      	orrs	r7, r0
 80048ae:	3568      	adds	r5, #104	; 0x68
 80048b0:	e7e9      	b.n	8004886 <_fwalk_reent+0x12>

080048b2 <__retarget_lock_init_recursive>:
 80048b2:	4770      	bx	lr

080048b4 <__retarget_lock_acquire_recursive>:
 80048b4:	4770      	bx	lr

080048b6 <__retarget_lock_release_recursive>:
 80048b6:	4770      	bx	lr

080048b8 <__swhatbuf_r>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	460e      	mov	r6, r1
 80048bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c0:	2900      	cmp	r1, #0
 80048c2:	b096      	sub	sp, #88	; 0x58
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	da08      	bge.n	80048dc <__swhatbuf_r+0x24>
 80048ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	061a      	lsls	r2, r3, #24
 80048d4:	d410      	bmi.n	80048f8 <__swhatbuf_r+0x40>
 80048d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048da:	e00e      	b.n	80048fa <__swhatbuf_r+0x42>
 80048dc:	466a      	mov	r2, sp
 80048de:	f000 fc95 	bl	800520c <_fstat_r>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	dbf1      	blt.n	80048ca <__swhatbuf_r+0x12>
 80048e6:	9a01      	ldr	r2, [sp, #4]
 80048e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048f0:	425a      	negs	r2, r3
 80048f2:	415a      	adcs	r2, r3
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	e7ee      	b.n	80048d6 <__swhatbuf_r+0x1e>
 80048f8:	2340      	movs	r3, #64	; 0x40
 80048fa:	2000      	movs	r0, #0
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	b016      	add	sp, #88	; 0x58
 8004900:	bd70      	pop	{r4, r5, r6, pc}
	...

08004904 <__smakebuf_r>:
 8004904:	898b      	ldrh	r3, [r1, #12]
 8004906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004908:	079d      	lsls	r5, r3, #30
 800490a:	4606      	mov	r6, r0
 800490c:	460c      	mov	r4, r1
 800490e:	d507      	bpl.n	8004920 <__smakebuf_r+0x1c>
 8004910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	2301      	movs	r3, #1
 800491a:	6163      	str	r3, [r4, #20]
 800491c:	b002      	add	sp, #8
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	ab01      	add	r3, sp, #4
 8004922:	466a      	mov	r2, sp
 8004924:	f7ff ffc8 	bl	80048b8 <__swhatbuf_r>
 8004928:	9900      	ldr	r1, [sp, #0]
 800492a:	4605      	mov	r5, r0
 800492c:	4630      	mov	r0, r6
 800492e:	f000 f895 	bl	8004a5c <_malloc_r>
 8004932:	b948      	cbnz	r0, 8004948 <__smakebuf_r+0x44>
 8004934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004938:	059a      	lsls	r2, r3, #22
 800493a:	d4ef      	bmi.n	800491c <__smakebuf_r+0x18>
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	e7e3      	b.n	8004910 <__smakebuf_r+0xc>
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <__smakebuf_r+0x7c>)
 800494a:	62b3      	str	r3, [r6, #40]	; 0x28
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	6020      	str	r0, [r4, #0]
 8004950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	9b00      	ldr	r3, [sp, #0]
 8004958:	6163      	str	r3, [r4, #20]
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	6120      	str	r0, [r4, #16]
 800495e:	b15b      	cbz	r3, 8004978 <__smakebuf_r+0x74>
 8004960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004964:	4630      	mov	r0, r6
 8004966:	f000 fc63 	bl	8005230 <_isatty_r>
 800496a:	b128      	cbz	r0, 8004978 <__smakebuf_r+0x74>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	89a0      	ldrh	r0, [r4, #12]
 800497a:	4305      	orrs	r5, r0
 800497c:	81a5      	strh	r5, [r4, #12]
 800497e:	e7cd      	b.n	800491c <__smakebuf_r+0x18>
 8004980:	08004711 	.word	0x08004711

08004984 <_free_r>:
 8004984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004986:	2900      	cmp	r1, #0
 8004988:	d044      	beq.n	8004a14 <_free_r+0x90>
 800498a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498e:	9001      	str	r0, [sp, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f1a1 0404 	sub.w	r4, r1, #4
 8004996:	bfb8      	it	lt
 8004998:	18e4      	addlt	r4, r4, r3
 800499a:	f000 fc6b 	bl	8005274 <__malloc_lock>
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <_free_r+0x94>)
 80049a0:	9801      	ldr	r0, [sp, #4]
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	b933      	cbnz	r3, 80049b4 <_free_r+0x30>
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	6014      	str	r4, [r2, #0]
 80049aa:	b003      	add	sp, #12
 80049ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049b0:	f000 bc66 	b.w	8005280 <__malloc_unlock>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d908      	bls.n	80049ca <_free_r+0x46>
 80049b8:	6825      	ldr	r5, [r4, #0]
 80049ba:	1961      	adds	r1, r4, r5
 80049bc:	428b      	cmp	r3, r1
 80049be:	bf01      	itttt	eq
 80049c0:	6819      	ldreq	r1, [r3, #0]
 80049c2:	685b      	ldreq	r3, [r3, #4]
 80049c4:	1949      	addeq	r1, r1, r5
 80049c6:	6021      	streq	r1, [r4, #0]
 80049c8:	e7ed      	b.n	80049a6 <_free_r+0x22>
 80049ca:	461a      	mov	r2, r3
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	b10b      	cbz	r3, 80049d4 <_free_r+0x50>
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	d9fa      	bls.n	80049ca <_free_r+0x46>
 80049d4:	6811      	ldr	r1, [r2, #0]
 80049d6:	1855      	adds	r5, r2, r1
 80049d8:	42a5      	cmp	r5, r4
 80049da:	d10b      	bne.n	80049f4 <_free_r+0x70>
 80049dc:	6824      	ldr	r4, [r4, #0]
 80049de:	4421      	add	r1, r4
 80049e0:	1854      	adds	r4, r2, r1
 80049e2:	42a3      	cmp	r3, r4
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	d1e0      	bne.n	80049aa <_free_r+0x26>
 80049e8:	681c      	ldr	r4, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	6053      	str	r3, [r2, #4]
 80049ee:	4421      	add	r1, r4
 80049f0:	6011      	str	r1, [r2, #0]
 80049f2:	e7da      	b.n	80049aa <_free_r+0x26>
 80049f4:	d902      	bls.n	80049fc <_free_r+0x78>
 80049f6:	230c      	movs	r3, #12
 80049f8:	6003      	str	r3, [r0, #0]
 80049fa:	e7d6      	b.n	80049aa <_free_r+0x26>
 80049fc:	6825      	ldr	r5, [r4, #0]
 80049fe:	1961      	adds	r1, r4, r5
 8004a00:	428b      	cmp	r3, r1
 8004a02:	bf04      	itt	eq
 8004a04:	6819      	ldreq	r1, [r3, #0]
 8004a06:	685b      	ldreq	r3, [r3, #4]
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	bf04      	itt	eq
 8004a0c:	1949      	addeq	r1, r1, r5
 8004a0e:	6021      	streq	r1, [r4, #0]
 8004a10:	6054      	str	r4, [r2, #4]
 8004a12:	e7ca      	b.n	80049aa <_free_r+0x26>
 8004a14:	b003      	add	sp, #12
 8004a16:	bd30      	pop	{r4, r5, pc}
 8004a18:	20000130 	.word	0x20000130

08004a1c <sbrk_aligned>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4e0e      	ldr	r6, [pc, #56]	; (8004a58 <sbrk_aligned+0x3c>)
 8004a20:	460c      	mov	r4, r1
 8004a22:	6831      	ldr	r1, [r6, #0]
 8004a24:	4605      	mov	r5, r0
 8004a26:	b911      	cbnz	r1, 8004a2e <sbrk_aligned+0x12>
 8004a28:	f000 fb7a 	bl	8005120 <_sbrk_r>
 8004a2c:	6030      	str	r0, [r6, #0]
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 fb75 	bl	8005120 <_sbrk_r>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d00a      	beq.n	8004a50 <sbrk_aligned+0x34>
 8004a3a:	1cc4      	adds	r4, r0, #3
 8004a3c:	f024 0403 	bic.w	r4, r4, #3
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d007      	beq.n	8004a54 <sbrk_aligned+0x38>
 8004a44:	1a21      	subs	r1, r4, r0
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fb6a 	bl	8005120 <_sbrk_r>
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d101      	bne.n	8004a54 <sbrk_aligned+0x38>
 8004a50:	f04f 34ff 	mov.w	r4, #4294967295
 8004a54:	4620      	mov	r0, r4
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	20000134 	.word	0x20000134

08004a5c <_malloc_r>:
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	1ccd      	adds	r5, r1, #3
 8004a62:	f025 0503 	bic.w	r5, r5, #3
 8004a66:	3508      	adds	r5, #8
 8004a68:	2d0c      	cmp	r5, #12
 8004a6a:	bf38      	it	cc
 8004a6c:	250c      	movcc	r5, #12
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	4607      	mov	r7, r0
 8004a72:	db01      	blt.n	8004a78 <_malloc_r+0x1c>
 8004a74:	42a9      	cmp	r1, r5
 8004a76:	d905      	bls.n	8004a84 <_malloc_r+0x28>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	4630      	mov	r0, r6
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a84:	4e2e      	ldr	r6, [pc, #184]	; (8004b40 <_malloc_r+0xe4>)
 8004a86:	f000 fbf5 	bl	8005274 <__malloc_lock>
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	bb34      	cbnz	r4, 8004ade <_malloc_r+0x82>
 8004a90:	4629      	mov	r1, r5
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff ffc2 	bl	8004a1c <sbrk_aligned>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	d14d      	bne.n	8004b3a <_malloc_r+0xde>
 8004a9e:	6834      	ldr	r4, [r6, #0]
 8004aa0:	4626      	mov	r6, r4
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	d140      	bne.n	8004b28 <_malloc_r+0xcc>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4638      	mov	r0, r7
 8004aac:	eb04 0803 	add.w	r8, r4, r3
 8004ab0:	f000 fb36 	bl	8005120 <_sbrk_r>
 8004ab4:	4580      	cmp	r8, r0
 8004ab6:	d13a      	bne.n	8004b2e <_malloc_r+0xd2>
 8004ab8:	6821      	ldr	r1, [r4, #0]
 8004aba:	3503      	adds	r5, #3
 8004abc:	1a6d      	subs	r5, r5, r1
 8004abe:	f025 0503 	bic.w	r5, r5, #3
 8004ac2:	3508      	adds	r5, #8
 8004ac4:	2d0c      	cmp	r5, #12
 8004ac6:	bf38      	it	cc
 8004ac8:	250c      	movcc	r5, #12
 8004aca:	4629      	mov	r1, r5
 8004acc:	4638      	mov	r0, r7
 8004ace:	f7ff ffa5 	bl	8004a1c <sbrk_aligned>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d02b      	beq.n	8004b2e <_malloc_r+0xd2>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	442b      	add	r3, r5
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	e00e      	b.n	8004afc <_malloc_r+0xa0>
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	1b52      	subs	r2, r2, r5
 8004ae2:	d41e      	bmi.n	8004b22 <_malloc_r+0xc6>
 8004ae4:	2a0b      	cmp	r2, #11
 8004ae6:	d916      	bls.n	8004b16 <_malloc_r+0xba>
 8004ae8:	1961      	adds	r1, r4, r5
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	6025      	str	r5, [r4, #0]
 8004aee:	bf18      	it	ne
 8004af0:	6059      	strne	r1, [r3, #4]
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	bf08      	it	eq
 8004af6:	6031      	streq	r1, [r6, #0]
 8004af8:	5162      	str	r2, [r4, r5]
 8004afa:	604b      	str	r3, [r1, #4]
 8004afc:	4638      	mov	r0, r7
 8004afe:	f104 060b 	add.w	r6, r4, #11
 8004b02:	f000 fbbd 	bl	8005280 <__malloc_unlock>
 8004b06:	f026 0607 	bic.w	r6, r6, #7
 8004b0a:	1d23      	adds	r3, r4, #4
 8004b0c:	1af2      	subs	r2, r6, r3
 8004b0e:	d0b6      	beq.n	8004a7e <_malloc_r+0x22>
 8004b10:	1b9b      	subs	r3, r3, r6
 8004b12:	50a3      	str	r3, [r4, r2]
 8004b14:	e7b3      	b.n	8004a7e <_malloc_r+0x22>
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	bf0c      	ite	eq
 8004b1c:	6032      	streq	r2, [r6, #0]
 8004b1e:	605a      	strne	r2, [r3, #4]
 8004b20:	e7ec      	b.n	8004afc <_malloc_r+0xa0>
 8004b22:	4623      	mov	r3, r4
 8004b24:	6864      	ldr	r4, [r4, #4]
 8004b26:	e7b2      	b.n	8004a8e <_malloc_r+0x32>
 8004b28:	4634      	mov	r4, r6
 8004b2a:	6876      	ldr	r6, [r6, #4]
 8004b2c:	e7b9      	b.n	8004aa2 <_malloc_r+0x46>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4638      	mov	r0, r7
 8004b34:	f000 fba4 	bl	8005280 <__malloc_unlock>
 8004b38:	e7a1      	b.n	8004a7e <_malloc_r+0x22>
 8004b3a:	6025      	str	r5, [r4, #0]
 8004b3c:	e7de      	b.n	8004afc <_malloc_r+0xa0>
 8004b3e:	bf00      	nop
 8004b40:	20000130 	.word	0x20000130

08004b44 <__sfputc_r>:
 8004b44:	6893      	ldr	r3, [r2, #8]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	b410      	push	{r4}
 8004b4c:	6093      	str	r3, [r2, #8]
 8004b4e:	da08      	bge.n	8004b62 <__sfputc_r+0x1e>
 8004b50:	6994      	ldr	r4, [r2, #24]
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	db01      	blt.n	8004b5a <__sfputc_r+0x16>
 8004b56:	290a      	cmp	r1, #10
 8004b58:	d103      	bne.n	8004b62 <__sfputc_r+0x1e>
 8004b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5e:	f7ff bc31 	b.w	80043c4 <__swbuf_r>
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	1c58      	adds	r0, r3, #1
 8004b66:	6010      	str	r0, [r2, #0]
 8004b68:	7019      	strb	r1, [r3, #0]
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <__sfputs_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	4606      	mov	r6, r0
 8004b76:	460f      	mov	r7, r1
 8004b78:	4614      	mov	r4, r2
 8004b7a:	18d5      	adds	r5, r2, r3
 8004b7c:	42ac      	cmp	r4, r5
 8004b7e:	d101      	bne.n	8004b84 <__sfputs_r+0x12>
 8004b80:	2000      	movs	r0, #0
 8004b82:	e007      	b.n	8004b94 <__sfputs_r+0x22>
 8004b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b88:	463a      	mov	r2, r7
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff ffda 	bl	8004b44 <__sfputc_r>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d1f3      	bne.n	8004b7c <__sfputs_r+0xa>
 8004b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b98 <_vfiprintf_r>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	b09d      	sub	sp, #116	; 0x74
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	b118      	cbz	r0, 8004bb0 <_vfiprintf_r+0x18>
 8004ba8:	6983      	ldr	r3, [r0, #24]
 8004baa:	b90b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x18>
 8004bac:	f7ff fde4 	bl	8004778 <__sinit>
 8004bb0:	4b89      	ldr	r3, [pc, #548]	; (8004dd8 <_vfiprintf_r+0x240>)
 8004bb2:	429d      	cmp	r5, r3
 8004bb4:	d11b      	bne.n	8004bee <_vfiprintf_r+0x56>
 8004bb6:	6875      	ldr	r5, [r6, #4]
 8004bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bba:	07d9      	lsls	r1, r3, #31
 8004bbc:	d405      	bmi.n	8004bca <_vfiprintf_r+0x32>
 8004bbe:	89ab      	ldrh	r3, [r5, #12]
 8004bc0:	059a      	lsls	r2, r3, #22
 8004bc2:	d402      	bmi.n	8004bca <_vfiprintf_r+0x32>
 8004bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bc6:	f7ff fe75 	bl	80048b4 <__retarget_lock_acquire_recursive>
 8004bca:	89ab      	ldrh	r3, [r5, #12]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	d501      	bpl.n	8004bd4 <_vfiprintf_r+0x3c>
 8004bd0:	692b      	ldr	r3, [r5, #16]
 8004bd2:	b9eb      	cbnz	r3, 8004c10 <_vfiprintf_r+0x78>
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f7ff fc46 	bl	8004468 <__swsetup_r>
 8004bdc:	b1c0      	cbz	r0, 8004c10 <_vfiprintf_r+0x78>
 8004bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004be0:	07dc      	lsls	r4, r3, #31
 8004be2:	d50e      	bpl.n	8004c02 <_vfiprintf_r+0x6a>
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	b01d      	add	sp, #116	; 0x74
 8004bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bee:	4b7b      	ldr	r3, [pc, #492]	; (8004ddc <_vfiprintf_r+0x244>)
 8004bf0:	429d      	cmp	r5, r3
 8004bf2:	d101      	bne.n	8004bf8 <_vfiprintf_r+0x60>
 8004bf4:	68b5      	ldr	r5, [r6, #8]
 8004bf6:	e7df      	b.n	8004bb8 <_vfiprintf_r+0x20>
 8004bf8:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <_vfiprintf_r+0x248>)
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf08      	it	eq
 8004bfe:	68f5      	ldreq	r5, [r6, #12]
 8004c00:	e7da      	b.n	8004bb8 <_vfiprintf_r+0x20>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	0598      	lsls	r0, r3, #22
 8004c06:	d4ed      	bmi.n	8004be4 <_vfiprintf_r+0x4c>
 8004c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c0a:	f7ff fe54 	bl	80048b6 <__retarget_lock_release_recursive>
 8004c0e:	e7e9      	b.n	8004be4 <_vfiprintf_r+0x4c>
 8004c10:	2300      	movs	r3, #0
 8004c12:	9309      	str	r3, [sp, #36]	; 0x24
 8004c14:	2320      	movs	r3, #32
 8004c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1e:	2330      	movs	r3, #48	; 0x30
 8004c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004de4 <_vfiprintf_r+0x24c>
 8004c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c28:	f04f 0901 	mov.w	r9, #1
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	469a      	mov	sl, r3
 8004c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c34:	b10a      	cbz	r2, 8004c3a <_vfiprintf_r+0xa2>
 8004c36:	2a25      	cmp	r2, #37	; 0x25
 8004c38:	d1f9      	bne.n	8004c2e <_vfiprintf_r+0x96>
 8004c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c3e:	d00b      	beq.n	8004c58 <_vfiprintf_r+0xc0>
 8004c40:	465b      	mov	r3, fp
 8004c42:	4622      	mov	r2, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7ff ff93 	bl	8004b72 <__sfputs_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f000 80aa 	beq.w	8004da6 <_vfiprintf_r+0x20e>
 8004c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c54:	445a      	add	r2, fp
 8004c56:	9209      	str	r2, [sp, #36]	; 0x24
 8004c58:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a2 	beq.w	8004da6 <_vfiprintf_r+0x20e>
 8004c62:	2300      	movs	r3, #0
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6c:	f10a 0a01 	add.w	sl, sl, #1
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	9307      	str	r3, [sp, #28]
 8004c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c78:	931a      	str	r3, [sp, #104]	; 0x68
 8004c7a:	4654      	mov	r4, sl
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c82:	4858      	ldr	r0, [pc, #352]	; (8004de4 <_vfiprintf_r+0x24c>)
 8004c84:	f7fb fac4 	bl	8000210 <memchr>
 8004c88:	9a04      	ldr	r2, [sp, #16]
 8004c8a:	b9d8      	cbnz	r0, 8004cc4 <_vfiprintf_r+0x12c>
 8004c8c:	06d1      	lsls	r1, r2, #27
 8004c8e:	bf44      	itt	mi
 8004c90:	2320      	movmi	r3, #32
 8004c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c96:	0713      	lsls	r3, r2, #28
 8004c98:	bf44      	itt	mi
 8004c9a:	232b      	movmi	r3, #43	; 0x2b
 8004c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca6:	d015      	beq.n	8004cd4 <_vfiprintf_r+0x13c>
 8004ca8:	9a07      	ldr	r2, [sp, #28]
 8004caa:	4654      	mov	r4, sl
 8004cac:	2000      	movs	r0, #0
 8004cae:	f04f 0c0a 	mov.w	ip, #10
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb8:	3b30      	subs	r3, #48	; 0x30
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	d94e      	bls.n	8004d5c <_vfiprintf_r+0x1c4>
 8004cbe:	b1b0      	cbz	r0, 8004cee <_vfiprintf_r+0x156>
 8004cc0:	9207      	str	r2, [sp, #28]
 8004cc2:	e014      	b.n	8004cee <_vfiprintf_r+0x156>
 8004cc4:	eba0 0308 	sub.w	r3, r0, r8
 8004cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	46a2      	mov	sl, r4
 8004cd2:	e7d2      	b.n	8004c7a <_vfiprintf_r+0xe2>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	1d19      	adds	r1, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	9103      	str	r1, [sp, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfbb      	ittet	lt
 8004ce0:	425b      	neglt	r3, r3
 8004ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce6:	9307      	strge	r3, [sp, #28]
 8004ce8:	9307      	strlt	r3, [sp, #28]
 8004cea:	bfb8      	it	lt
 8004cec:	9204      	strlt	r2, [sp, #16]
 8004cee:	7823      	ldrb	r3, [r4, #0]
 8004cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf2:	d10c      	bne.n	8004d0e <_vfiprintf_r+0x176>
 8004cf4:	7863      	ldrb	r3, [r4, #1]
 8004cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf8:	d135      	bne.n	8004d66 <_vfiprintf_r+0x1ce>
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfb8      	it	lt
 8004d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d0a:	3402      	adds	r4, #2
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004df4 <_vfiprintf_r+0x25c>
 8004d12:	7821      	ldrb	r1, [r4, #0]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4650      	mov	r0, sl
 8004d18:	f7fb fa7a 	bl	8000210 <memchr>
 8004d1c:	b140      	cbz	r0, 8004d30 <_vfiprintf_r+0x198>
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	eba0 000a 	sub.w	r0, r0, sl
 8004d24:	fa03 f000 	lsl.w	r0, r3, r0
 8004d28:	9b04      	ldr	r3, [sp, #16]
 8004d2a:	4303      	orrs	r3, r0
 8004d2c:	3401      	adds	r4, #1
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	482c      	ldr	r0, [pc, #176]	; (8004de8 <_vfiprintf_r+0x250>)
 8004d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d3a:	2206      	movs	r2, #6
 8004d3c:	f7fb fa68 	bl	8000210 <memchr>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d03f      	beq.n	8004dc4 <_vfiprintf_r+0x22c>
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <_vfiprintf_r+0x254>)
 8004d46:	bb1b      	cbnz	r3, 8004d90 <_vfiprintf_r+0x1f8>
 8004d48:	9b03      	ldr	r3, [sp, #12]
 8004d4a:	3307      	adds	r3, #7
 8004d4c:	f023 0307 	bic.w	r3, r3, #7
 8004d50:	3308      	adds	r3, #8
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d56:	443b      	add	r3, r7
 8004d58:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5a:	e767      	b.n	8004c2c <_vfiprintf_r+0x94>
 8004d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d60:	460c      	mov	r4, r1
 8004d62:	2001      	movs	r0, #1
 8004d64:	e7a5      	b.n	8004cb2 <_vfiprintf_r+0x11a>
 8004d66:	2300      	movs	r3, #0
 8004d68:	3401      	adds	r4, #1
 8004d6a:	9305      	str	r3, [sp, #20]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f04f 0c0a 	mov.w	ip, #10
 8004d72:	4620      	mov	r0, r4
 8004d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d78:	3a30      	subs	r2, #48	; 0x30
 8004d7a:	2a09      	cmp	r2, #9
 8004d7c:	d903      	bls.n	8004d86 <_vfiprintf_r+0x1ee>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0c5      	beq.n	8004d0e <_vfiprintf_r+0x176>
 8004d82:	9105      	str	r1, [sp, #20]
 8004d84:	e7c3      	b.n	8004d0e <_vfiprintf_r+0x176>
 8004d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e7f0      	b.n	8004d72 <_vfiprintf_r+0x1da>
 8004d90:	ab03      	add	r3, sp, #12
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	462a      	mov	r2, r5
 8004d96:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <_vfiprintf_r+0x258>)
 8004d98:	a904      	add	r1, sp, #16
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f3af 8000 	nop.w
 8004da0:	4607      	mov	r7, r0
 8004da2:	1c78      	adds	r0, r7, #1
 8004da4:	d1d6      	bne.n	8004d54 <_vfiprintf_r+0x1bc>
 8004da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004da8:	07d9      	lsls	r1, r3, #31
 8004daa:	d405      	bmi.n	8004db8 <_vfiprintf_r+0x220>
 8004dac:	89ab      	ldrh	r3, [r5, #12]
 8004dae:	059a      	lsls	r2, r3, #22
 8004db0:	d402      	bmi.n	8004db8 <_vfiprintf_r+0x220>
 8004db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004db4:	f7ff fd7f 	bl	80048b6 <__retarget_lock_release_recursive>
 8004db8:	89ab      	ldrh	r3, [r5, #12]
 8004dba:	065b      	lsls	r3, r3, #25
 8004dbc:	f53f af12 	bmi.w	8004be4 <_vfiprintf_r+0x4c>
 8004dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc2:	e711      	b.n	8004be8 <_vfiprintf_r+0x50>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <_vfiprintf_r+0x258>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f880 	bl	8004ed4 <_printf_i>
 8004dd4:	e7e4      	b.n	8004da0 <_vfiprintf_r+0x208>
 8004dd6:	bf00      	nop
 8004dd8:	08005404 	.word	0x08005404
 8004ddc:	08005424 	.word	0x08005424
 8004de0:	080053e4 	.word	0x080053e4
 8004de4:	08005444 	.word	0x08005444
 8004de8:	0800544e 	.word	0x0800544e
 8004dec:	00000000 	.word	0x00000000
 8004df0:	08004b73 	.word	0x08004b73
 8004df4:	0800544a 	.word	0x0800544a

08004df8 <_printf_common>:
 8004df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	4699      	mov	r9, r3
 8004e00:	688a      	ldr	r2, [r1, #8]
 8004e02:	690b      	ldr	r3, [r1, #16]
 8004e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	bfb8      	it	lt
 8004e0c:	4613      	movlt	r3, r2
 8004e0e:	6033      	str	r3, [r6, #0]
 8004e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e14:	4607      	mov	r7, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	b10a      	cbz	r2, 8004e1e <_printf_common+0x26>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	0699      	lsls	r1, r3, #26
 8004e22:	bf42      	ittt	mi
 8004e24:	6833      	ldrmi	r3, [r6, #0]
 8004e26:	3302      	addmi	r3, #2
 8004e28:	6033      	strmi	r3, [r6, #0]
 8004e2a:	6825      	ldr	r5, [r4, #0]
 8004e2c:	f015 0506 	ands.w	r5, r5, #6
 8004e30:	d106      	bne.n	8004e40 <_printf_common+0x48>
 8004e32:	f104 0a19 	add.w	sl, r4, #25
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	6832      	ldr	r2, [r6, #0]
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dc26      	bgt.n	8004e8e <_printf_common+0x96>
 8004e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e44:	1e13      	subs	r3, r2, #0
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	bf18      	it	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	0692      	lsls	r2, r2, #26
 8004e4e:	d42b      	bmi.n	8004ea8 <_printf_common+0xb0>
 8004e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e54:	4649      	mov	r1, r9
 8004e56:	4638      	mov	r0, r7
 8004e58:	47c0      	blx	r8
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d01e      	beq.n	8004e9c <_printf_common+0xa4>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	68e5      	ldr	r5, [r4, #12]
 8004e62:	6832      	ldr	r2, [r6, #0]
 8004e64:	f003 0306 	and.w	r3, r3, #6
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	bf08      	it	eq
 8004e6c:	1aad      	subeq	r5, r5, r2
 8004e6e:	68a3      	ldr	r3, [r4, #8]
 8004e70:	6922      	ldr	r2, [r4, #16]
 8004e72:	bf0c      	ite	eq
 8004e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e78:	2500      	movne	r5, #0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bfc4      	itt	gt
 8004e7e:	1a9b      	subgt	r3, r3, r2
 8004e80:	18ed      	addgt	r5, r5, r3
 8004e82:	2600      	movs	r6, #0
 8004e84:	341a      	adds	r4, #26
 8004e86:	42b5      	cmp	r5, r6
 8004e88:	d11a      	bne.n	8004ec0 <_printf_common+0xc8>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e008      	b.n	8004ea0 <_printf_common+0xa8>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4652      	mov	r2, sl
 8004e92:	4649      	mov	r1, r9
 8004e94:	4638      	mov	r0, r7
 8004e96:	47c0      	blx	r8
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d103      	bne.n	8004ea4 <_printf_common+0xac>
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea4:	3501      	adds	r5, #1
 8004ea6:	e7c6      	b.n	8004e36 <_printf_common+0x3e>
 8004ea8:	18e1      	adds	r1, r4, r3
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	2030      	movs	r0, #48	; 0x30
 8004eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eb2:	4422      	add	r2, r4
 8004eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	e7c7      	b.n	8004e50 <_printf_common+0x58>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0e6      	beq.n	8004e9c <_printf_common+0xa4>
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7d9      	b.n	8004e86 <_printf_common+0x8e>
	...

08004ed4 <_printf_i>:
 8004ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	7e0f      	ldrb	r7, [r1, #24]
 8004eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004edc:	2f78      	cmp	r7, #120	; 0x78
 8004ede:	4691      	mov	r9, r2
 8004ee0:	4680      	mov	r8, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	469a      	mov	sl, r3
 8004ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eea:	d807      	bhi.n	8004efc <_printf_i+0x28>
 8004eec:	2f62      	cmp	r7, #98	; 0x62
 8004eee:	d80a      	bhi.n	8004f06 <_printf_i+0x32>
 8004ef0:	2f00      	cmp	r7, #0
 8004ef2:	f000 80d8 	beq.w	80050a6 <_printf_i+0x1d2>
 8004ef6:	2f58      	cmp	r7, #88	; 0x58
 8004ef8:	f000 80a3 	beq.w	8005042 <_printf_i+0x16e>
 8004efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f04:	e03a      	b.n	8004f7c <_printf_i+0xa8>
 8004f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f0a:	2b15      	cmp	r3, #21
 8004f0c:	d8f6      	bhi.n	8004efc <_printf_i+0x28>
 8004f0e:	a101      	add	r1, pc, #4	; (adr r1, 8004f14 <_printf_i+0x40>)
 8004f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f14:	08004f6d 	.word	0x08004f6d
 8004f18:	08004f81 	.word	0x08004f81
 8004f1c:	08004efd 	.word	0x08004efd
 8004f20:	08004efd 	.word	0x08004efd
 8004f24:	08004efd 	.word	0x08004efd
 8004f28:	08004efd 	.word	0x08004efd
 8004f2c:	08004f81 	.word	0x08004f81
 8004f30:	08004efd 	.word	0x08004efd
 8004f34:	08004efd 	.word	0x08004efd
 8004f38:	08004efd 	.word	0x08004efd
 8004f3c:	08004efd 	.word	0x08004efd
 8004f40:	0800508d 	.word	0x0800508d
 8004f44:	08004fb1 	.word	0x08004fb1
 8004f48:	0800506f 	.word	0x0800506f
 8004f4c:	08004efd 	.word	0x08004efd
 8004f50:	08004efd 	.word	0x08004efd
 8004f54:	080050af 	.word	0x080050af
 8004f58:	08004efd 	.word	0x08004efd
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004efd 	.word	0x08004efd
 8004f64:	08004efd 	.word	0x08004efd
 8004f68:	08005077 	.word	0x08005077
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	1d1a      	adds	r2, r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	602a      	str	r2, [r5, #0]
 8004f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0a3      	b.n	80050c8 <_printf_i+0x1f4>
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	6829      	ldr	r1, [r5, #0]
 8004f84:	0606      	lsls	r6, r0, #24
 8004f86:	f101 0304 	add.w	r3, r1, #4
 8004f8a:	d50a      	bpl.n	8004fa2 <_printf_i+0xce>
 8004f8c:	680e      	ldr	r6, [r1, #0]
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	2e00      	cmp	r6, #0
 8004f92:	da03      	bge.n	8004f9c <_printf_i+0xc8>
 8004f94:	232d      	movs	r3, #45	; 0x2d
 8004f96:	4276      	negs	r6, r6
 8004f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9c:	485e      	ldr	r0, [pc, #376]	; (8005118 <_printf_i+0x244>)
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e019      	b.n	8004fd6 <_printf_i+0x102>
 8004fa2:	680e      	ldr	r6, [r1, #0]
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004faa:	bf18      	it	ne
 8004fac:	b236      	sxthne	r6, r6
 8004fae:	e7ef      	b.n	8004f90 <_printf_i+0xbc>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	6820      	ldr	r0, [r4, #0]
 8004fb4:	1d19      	adds	r1, r3, #4
 8004fb6:	6029      	str	r1, [r5, #0]
 8004fb8:	0601      	lsls	r1, r0, #24
 8004fba:	d501      	bpl.n	8004fc0 <_printf_i+0xec>
 8004fbc:	681e      	ldr	r6, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <_printf_i+0xf2>
 8004fc0:	0646      	lsls	r6, r0, #25
 8004fc2:	d5fb      	bpl.n	8004fbc <_printf_i+0xe8>
 8004fc4:	881e      	ldrh	r6, [r3, #0]
 8004fc6:	4854      	ldr	r0, [pc, #336]	; (8005118 <_printf_i+0x244>)
 8004fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8004fca:	bf0c      	ite	eq
 8004fcc:	2308      	moveq	r3, #8
 8004fce:	230a      	movne	r3, #10
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd6:	6865      	ldr	r5, [r4, #4]
 8004fd8:	60a5      	str	r5, [r4, #8]
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	bfa2      	ittt	ge
 8004fde:	6821      	ldrge	r1, [r4, #0]
 8004fe0:	f021 0104 	bicge.w	r1, r1, #4
 8004fe4:	6021      	strge	r1, [r4, #0]
 8004fe6:	b90e      	cbnz	r6, 8004fec <_printf_i+0x118>
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	d04d      	beq.n	8005088 <_printf_i+0x1b4>
 8004fec:	4615      	mov	r5, r2
 8004fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ff6:	5dc7      	ldrb	r7, [r0, r7]
 8004ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ffc:	4637      	mov	r7, r6
 8004ffe:	42bb      	cmp	r3, r7
 8005000:	460e      	mov	r6, r1
 8005002:	d9f4      	bls.n	8004fee <_printf_i+0x11a>
 8005004:	2b08      	cmp	r3, #8
 8005006:	d10b      	bne.n	8005020 <_printf_i+0x14c>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	07de      	lsls	r6, r3, #31
 800500c:	d508      	bpl.n	8005020 <_printf_i+0x14c>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	6861      	ldr	r1, [r4, #4]
 8005012:	4299      	cmp	r1, r3
 8005014:	bfde      	ittt	le
 8005016:	2330      	movle	r3, #48	; 0x30
 8005018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800501c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005020:	1b52      	subs	r2, r2, r5
 8005022:	6122      	str	r2, [r4, #16]
 8005024:	f8cd a000 	str.w	sl, [sp]
 8005028:	464b      	mov	r3, r9
 800502a:	aa03      	add	r2, sp, #12
 800502c:	4621      	mov	r1, r4
 800502e:	4640      	mov	r0, r8
 8005030:	f7ff fee2 	bl	8004df8 <_printf_common>
 8005034:	3001      	adds	r0, #1
 8005036:	d14c      	bne.n	80050d2 <_printf_i+0x1fe>
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	b004      	add	sp, #16
 800503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005042:	4835      	ldr	r0, [pc, #212]	; (8005118 <_printf_i+0x244>)
 8005044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005048:	6829      	ldr	r1, [r5, #0]
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005050:	6029      	str	r1, [r5, #0]
 8005052:	061d      	lsls	r5, r3, #24
 8005054:	d514      	bpl.n	8005080 <_printf_i+0x1ac>
 8005056:	07df      	lsls	r7, r3, #31
 8005058:	bf44      	itt	mi
 800505a:	f043 0320 	orrmi.w	r3, r3, #32
 800505e:	6023      	strmi	r3, [r4, #0]
 8005060:	b91e      	cbnz	r6, 800506a <_printf_i+0x196>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f023 0320 	bic.w	r3, r3, #32
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	2310      	movs	r3, #16
 800506c:	e7b0      	b.n	8004fd0 <_printf_i+0xfc>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	f043 0320 	orr.w	r3, r3, #32
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	2378      	movs	r3, #120	; 0x78
 8005078:	4828      	ldr	r0, [pc, #160]	; (800511c <_printf_i+0x248>)
 800507a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507e:	e7e3      	b.n	8005048 <_printf_i+0x174>
 8005080:	0659      	lsls	r1, r3, #25
 8005082:	bf48      	it	mi
 8005084:	b2b6      	uxthmi	r6, r6
 8005086:	e7e6      	b.n	8005056 <_printf_i+0x182>
 8005088:	4615      	mov	r5, r2
 800508a:	e7bb      	b.n	8005004 <_printf_i+0x130>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6826      	ldr	r6, [r4, #0]
 8005090:	6961      	ldr	r1, [r4, #20]
 8005092:	1d18      	adds	r0, r3, #4
 8005094:	6028      	str	r0, [r5, #0]
 8005096:	0635      	lsls	r5, r6, #24
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0x1cc>
 800509c:	6019      	str	r1, [r3, #0]
 800509e:	e002      	b.n	80050a6 <_printf_i+0x1d2>
 80050a0:	0670      	lsls	r0, r6, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0x1c8>
 80050a4:	8019      	strh	r1, [r3, #0]
 80050a6:	2300      	movs	r3, #0
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	4615      	mov	r5, r2
 80050ac:	e7ba      	b.n	8005024 <_printf_i+0x150>
 80050ae:	682b      	ldr	r3, [r5, #0]
 80050b0:	1d1a      	adds	r2, r3, #4
 80050b2:	602a      	str	r2, [r5, #0]
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	2100      	movs	r1, #0
 80050ba:	4628      	mov	r0, r5
 80050bc:	f7fb f8a8 	bl	8000210 <memchr>
 80050c0:	b108      	cbz	r0, 80050c6 <_printf_i+0x1f2>
 80050c2:	1b40      	subs	r0, r0, r5
 80050c4:	6060      	str	r0, [r4, #4]
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	6123      	str	r3, [r4, #16]
 80050ca:	2300      	movs	r3, #0
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	e7a8      	b.n	8005024 <_printf_i+0x150>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	462a      	mov	r2, r5
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d0ab      	beq.n	8005038 <_printf_i+0x164>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	079b      	lsls	r3, r3, #30
 80050e4:	d413      	bmi.n	800510e <_printf_i+0x23a>
 80050e6:	68e0      	ldr	r0, [r4, #12]
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	bfb8      	it	lt
 80050ee:	4618      	movlt	r0, r3
 80050f0:	e7a4      	b.n	800503c <_printf_i+0x168>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4632      	mov	r2, r6
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	47d0      	blx	sl
 80050fc:	3001      	adds	r0, #1
 80050fe:	d09b      	beq.n	8005038 <_printf_i+0x164>
 8005100:	3501      	adds	r5, #1
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	9903      	ldr	r1, [sp, #12]
 8005106:	1a5b      	subs	r3, r3, r1
 8005108:	42ab      	cmp	r3, r5
 800510a:	dcf2      	bgt.n	80050f2 <_printf_i+0x21e>
 800510c:	e7eb      	b.n	80050e6 <_printf_i+0x212>
 800510e:	2500      	movs	r5, #0
 8005110:	f104 0619 	add.w	r6, r4, #25
 8005114:	e7f5      	b.n	8005102 <_printf_i+0x22e>
 8005116:	bf00      	nop
 8005118:	08005455 	.word	0x08005455
 800511c:	08005466 	.word	0x08005466

08005120 <_sbrk_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d06      	ldr	r5, [pc, #24]	; (800513c <_sbrk_r+0x1c>)
 8005124:	2300      	movs	r3, #0
 8005126:	4604      	mov	r4, r0
 8005128:	4608      	mov	r0, r1
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	f7fb fec2 	bl	8000eb4 <_sbrk>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_sbrk_r+0x1a>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	b103      	cbz	r3, 800513a <_sbrk_r+0x1a>
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	20000138 	.word	0x20000138

08005140 <__sread>:
 8005140:	b510      	push	{r4, lr}
 8005142:	460c      	mov	r4, r1
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	f000 f8a0 	bl	800528c <_read_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	bfab      	itete	ge
 8005150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005152:	89a3      	ldrhlt	r3, [r4, #12]
 8005154:	181b      	addge	r3, r3, r0
 8005156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800515a:	bfac      	ite	ge
 800515c:	6563      	strge	r3, [r4, #84]	; 0x54
 800515e:	81a3      	strhlt	r3, [r4, #12]
 8005160:	bd10      	pop	{r4, pc}

08005162 <__swrite>:
 8005162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	461f      	mov	r7, r3
 8005168:	898b      	ldrh	r3, [r1, #12]
 800516a:	05db      	lsls	r3, r3, #23
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	4616      	mov	r6, r2
 8005172:	d505      	bpl.n	8005180 <__swrite+0x1e>
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	2302      	movs	r3, #2
 800517a:	2200      	movs	r2, #0
 800517c:	f000 f868 	bl	8005250 <_lseek_r>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	4632      	mov	r2, r6
 800518e:	463b      	mov	r3, r7
 8005190:	4628      	mov	r0, r5
 8005192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	f000 b817 	b.w	80051c8 <_write_r>

0800519a <__sseek>:
 800519a:	b510      	push	{r4, lr}
 800519c:	460c      	mov	r4, r1
 800519e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a2:	f000 f855 	bl	8005250 <_lseek_r>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	bf15      	itete	ne
 80051ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80051ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051b6:	81a3      	strheq	r3, [r4, #12]
 80051b8:	bf18      	it	ne
 80051ba:	81a3      	strhne	r3, [r4, #12]
 80051bc:	bd10      	pop	{r4, pc}

080051be <__sclose>:
 80051be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c2:	f000 b813 	b.w	80051ec <_close_r>
	...

080051c8 <_write_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4d07      	ldr	r5, [pc, #28]	; (80051e8 <_write_r+0x20>)
 80051cc:	4604      	mov	r4, r0
 80051ce:	4608      	mov	r0, r1
 80051d0:	4611      	mov	r1, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	602a      	str	r2, [r5, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f7fb fe1b 	bl	8000e12 <_write>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_write_r+0x1e>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_write_r+0x1e>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000138 	.word	0x20000138

080051ec <_close_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_close_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fe27 	bl	8000e4a <_close>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_close_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_close_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000138 	.word	0x20000138

0800520c <_fstat_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	; (800522c <_fstat_r+0x20>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fb fe22 	bl	8000e62 <_fstat>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_fstat_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_fstat_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	20000138 	.word	0x20000138

08005230 <_isatty_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	; (800524c <_isatty_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fe21 	bl	8000e82 <_isatty>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_isatty_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_isatty_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000138 	.word	0x20000138

08005250 <_lseek_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <_lseek_r+0x20>)
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	2200      	movs	r2, #0
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f7fb fe1a 	bl	8000e98 <_lseek>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_lseek_r+0x1e>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_lseek_r+0x1e>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000138 	.word	0x20000138

08005274 <__malloc_lock>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__malloc_lock+0x8>)
 8005276:	f7ff bb1d 	b.w	80048b4 <__retarget_lock_acquire_recursive>
 800527a:	bf00      	nop
 800527c:	2000012c 	.word	0x2000012c

08005280 <__malloc_unlock>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__malloc_unlock+0x8>)
 8005282:	f7ff bb18 	b.w	80048b6 <__retarget_lock_release_recursive>
 8005286:	bf00      	nop
 8005288:	2000012c 	.word	0x2000012c

0800528c <_read_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	; (80052ac <_read_r+0x20>)
 8005290:	4604      	mov	r4, r0
 8005292:	4608      	mov	r0, r1
 8005294:	4611      	mov	r1, r2
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7fb fd9c 	bl	8000dd8 <_read>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_read_r+0x1e>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_read_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	20000138 	.word	0x20000138

080052b0 <_init>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr

080052bc <_fini>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr
