
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009604  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080097d8  080097d8  000197d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d90  08009d90  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d98  08009d98  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08009f7c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08009f7c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb10  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3a  00000000  00000000  0002cd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002278d  00000000  00000000  0002ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea60  00000000  00000000  00052775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8eb  00000000  00000000  000611d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012dac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004044  00000000  00000000  0012db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080097bc 	.word	0x080097bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080097bc 	.word	0x080097bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_GPIO_Init+0xd0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_GPIO_Init+0xd0>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001018:	f001 fbd8 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001022:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0xd8>)
 8001034:	f001 fa36 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001038:	2320      	movs	r3, #32
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001050:	f001 fa28 	bl	80024a4 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020800 	.word	0x40020800

08001068 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f001 fbab 	bl	8002800 <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 fed0 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_I2C_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12c      	bne.n	8001140 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001114:	2304      	movs	r3, #4
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <HAL_I2C_MspInit+0x8c>)
 8001120:	f001 f9c0 	bl	80024a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_I2C_MspInit+0x88>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_I2C_MspInit+0x88>)
 800112e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_I2C_MspInit+0x88>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020400 	.word	0x40020400

08001154 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 8001162:	f107 010f 	add.w	r1, r7, #15
 8001166:	230a      	movs	r3, #10
 8001168:	2201      	movs	r2, #1
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <__io_putchar+0x28>)
 800116c:	f003 fdb1 	bl	8004cd2 <HAL_UART_Transmit>
	return ch;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000250 	.word	0x20000250

08001180 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <__io_getchar+0x48>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__io_getchar+0x48>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011a0:	1df9      	adds	r1, r7, #7
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2201      	movs	r2, #1
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <__io_getchar+0x48>)
 80011aa:	f003 fe24 	bl	8004df6 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011ae:	1df9      	adds	r1, r7, #7
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	2201      	movs	r2, #1
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <__io_getchar+0x48>)
 80011b8:	f003 fd8b 	bl	8004cd2 <HAL_UART_Transmit>
  return ch;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000250 	.word	0x20000250

080011cc <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                              //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                       //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                         //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80011d2:	230f      	movs	r3, #15
 80011d4:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);       //On effectue la transmission sur l'accelero
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2132      	movs	r1, #50	; 0x32
 80011e2:	482a      	ldr	r0, [pc, #168]	; (800128c <who_am_i_sensors+0xc0>)
 80011e4:	f001 fc50 	bl	8002a88 <HAL_I2C_Master_Transmit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                       //Si la transmission s'est mal passée, on affiche une erreur
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80011f2:	4827      	ldr	r0, [pc, #156]	; (8001290 <who_am_i_sensors+0xc4>)
 80011f4:	f004 fea6 	bl	8005f44 <puts>
 80011f8:	e017      	b.n	800122a <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);     //Sinon, on recupere la valeur dans la case memoire
 80011fa:	1d3a      	adds	r2, r7, #4
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	2132      	movs	r1, #50	; 0x32
 8001206:	4821      	ldr	r0, [pc, #132]	; (800128c <who_am_i_sensors+0xc0>)
 8001208:	f001 fd3c 	bl	8002c84 <HAL_I2C_Master_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                    //Si la réception s'est mal passée, on affiche une erreur
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 8001216:	481f      	ldr	r0, [pc, #124]	; (8001294 <who_am_i_sensors+0xc8>)
 8001218:	f004 fe94 	bl	8005f44 <puts>
 800121c:	e005      	b.n	800122a <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                 //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	2b33      	cmp	r3, #51	; 0x33
 8001222:	d102      	bne.n	800122a <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8001224:	481c      	ldr	r0, [pc, #112]	; (8001298 <who_am_i_sensors+0xcc>)
 8001226:	f004 fe07 	bl	8005e38 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                             //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 800122a:	234f      	movs	r3, #79	; 0x4f
 800122c:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);           //On effectue la transmission sur le magneto
 800122e:	1d3a      	adds	r2, r7, #4
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	213c      	movs	r1, #60	; 0x3c
 800123a:	4814      	ldr	r0, [pc, #80]	; (800128c <who_am_i_sensors+0xc0>)
 800123c:	f001 fc24 	bl	8002a88 <HAL_I2C_Master_Transmit>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                           //Si la transmission s'est mal passée, on affiche une erreur
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 800124a:	4811      	ldr	r0, [pc, #68]	; (8001290 <who_am_i_sensors+0xc4>)
 800124c:	f004 fe7a 	bl	8005f44 <puts>
 8001250:	e017      	b.n	8001282 <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);          //Sinon, on recupere la valeur dans la case memoire
 8001252:	1d3a      	adds	r2, r7, #4
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	213c      	movs	r1, #60	; 0x3c
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <who_am_i_sensors+0xc0>)
 8001260:	f001 fd10 	bl	8002c84 <HAL_I2C_Master_Receive>
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                          //Si la réception s'est mal passée, on affiche une erreur
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <who_am_i_sensors+0xc8>)
 8001270:	f004 fe68 	bl	8005f44 <puts>
 8001274:	e005      	b.n	8001282 <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                        //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	d102      	bne.n	8001282 <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <who_am_i_sensors+0xd0>)
 800127e:	f004 fddb 	bl	8005e38 <iprintf>
    	}
    }
  }
}
 8001282:	bf00      	nop
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001f8 	.word	0x200001f8
 8001290:	080097d8 	.word	0x080097d8
 8001294:	080097e4 	.word	0x080097e4
 8001298:	080097f0 	.word	0x080097f0
 800129c:	08009810 	.word	0x08009810

080012a0 <reset_acc>:

int reset_acc(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af02      	add	r7, sp, #8
	uint8_t buf[2];																	//Buffer de 2 octets car on dirige la mémoire puis on écrit une valeur
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  															//L'adresse où écrire sera CTRL_REG_5
 80012a6:	2324      	movs	r3, #36	; 0x24
 80012a8:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  																	//Data de reset
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);			//On teste si la transmission se passe bien
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2302      	movs	r3, #2
 80012b8:	2132      	movs	r1, #50	; 0x32
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <reset_acc+0x3c>)
 80012bc:	f001 fbe4 	bl	8002a88 <HAL_I2C_Master_Transmit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <reset_acc+0x30>
		printf("Error Tx\r\n");														//Si elle se passe mal, on met une erreur
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <reset_acc+0x40>)
 80012cc:	f004 fe3a 	bl	8005f44 <puts>
	}
}
 80012d0:	bf00      	nop
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001f8 	.word	0x200001f8
 80012e0:	080097d8 	.word	0x080097d8

080012e4 <config_acc>:

int config_acc(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;																//Buffer de 6 car on va écrire sur 6 reg d'un coup
	uint8_t res[6] ;																//Buffer permettant de vérifier si les valeurs ont bien été écrites
	buf[0]=0x27;//Valeur a mettre dans ctrm_reg_1
 80012ea:	2327      	movs	r3, #39	; 0x27
 80012ec:	723b      	strb	r3, [r7, #8]
	buf[1]=0x00;//Valeur a mettre dans ctrm_reg_2
 80012ee:	2300      	movs	r3, #0
 80012f0:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_3
 80012f2:	2300      	movs	r3, #0
 80012f4:	72bb      	strb	r3, [r7, #10]
	buf[3]=0x00;//Valeur a mettre dans ctrm_reg_4
 80012f6:	2300      	movs	r3, #0
 80012f8:	72fb      	strb	r3, [r7, #11]
	buf[4]=0x00;//Valeur a mettre dans ctrm_reg_5
 80012fa:	2300      	movs	r3, #0
 80012fc:	733b      	strb	r3, [r7, #12]
	buf[5]=0x00;//Valeur a mettre dans ctrm_reg_6
 80012fe:	2300      	movs	r3, #0
 8001300:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2306      	movs	r3, #6
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	22a0      	movs	r2, #160	; 0xa0
 8001316:	2132      	movs	r1, #50	; 0x32
 8001318:	4824      	ldr	r0, [pc, #144]	; (80013ac <config_acc+0xc8>)
 800131a:	f001 fed9 	bl	80030d0 <HAL_I2C_Mem_Write>
 800131e:	4603      	mov	r3, r0
 8001320:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <config_acc+0x4a>
		printf("Error Tx\r\n");
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <config_acc+0xcc>)
 800132a:	f004 fe0b 	bl	8005f44 <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 6, HAL_MAX_DELAY);
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	2306      	movs	r3, #6
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	463b      	mov	r3, r7
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22a0      	movs	r2, #160	; 0xa0
 8001340:	2132      	movs	r1, #50	; 0x32
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <config_acc+0xc8>)
 8001344:	f001 ffbe 	bl	80032c4 <HAL_I2C_Mem_Read>
 8001348:	4603      	mov	r3, r0
 800134a:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
	//Ici on relit les 6 registres pour vérifier que la valeur souhaitée à bien été inscrite
	for(i=0;i<6;i++){
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e021      	b.n	800139a <config_acc+0xb6>
		if(buf[i]==res[i]){
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3310      	adds	r3, #16
 800135a:	443b      	add	r3, r7
 800135c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	3310      	adds	r3, #16
 8001364:	443b      	add	r3, r7
 8001366:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800136a:	429a      	cmp	r2, r3
 800136c:	d10c      	bne.n	8001388 <config_acc+0xa4>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3310      	adds	r3, #16
 8001372:	443b      	add	r3, r7
 8001374:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001378:	4619      	mov	r1, r3
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	3301      	adds	r3, #1
 800137e:	461a      	mov	r2, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <config_acc+0xd0>)
 8001382:	f004 fd59 	bl	8005e38 <iprintf>
 8001386:	e005      	b.n	8001394 <config_acc+0xb0>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	3301      	adds	r3, #1
 800138c:	4619      	mov	r1, r3
 800138e:	480a      	ldr	r0, [pc, #40]	; (80013b8 <config_acc+0xd4>)
 8001390:	f004 fd52 	bl	8005e38 <iprintf>
	for(i=0;i<6;i++){
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3301      	adds	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d9da      	bls.n	8001356 <config_acc+0x72>
		}
	}
}
 80013a0:	bf00      	nop
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001f8 	.word	0x200001f8
 80013b0:	080097d8 	.word	0x080097d8
 80013b4:	08009828 	.word	0x08009828
 80013b8:	08009858 	.word	0x08009858

080013bc <reset_mag>:

int reset_mag(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af04      	add	r7, sp, #16
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = 0x60;//1 sur reboot
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CTRL_REG_A_M, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	2260      	movs	r2, #96	; 0x60
 80013d8:	213c      	movs	r1, #60	; 0x3c
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <reset_mag+0x40>)
 80013dc:	f001 fe78 	bl	80030d0 <HAL_I2C_Mem_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <reset_mag+0x34>
		printf("Error Tx\r\n");
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <reset_mag+0x44>)
 80013ec:	f004 fdaa 	bl	8005f44 <puts>
	}
}
 80013f0:	bf00      	nop
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001f8 	.word	0x200001f8
 8001400:	080097d8 	.word	0x080097d8

08001404 <config_mag>:

int config_mag(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[3] ;															//Buffer de 3 car on va écrire sur 3 reg d'un coup
	uint8_t res[3] ;															//Buffer permettant de vérifier si les valeurs ont bien été écrites
	buf[0]=0x8C;//Valeur a mettre dans ctrm_reg_a
 800140a:	238c      	movs	r3, #140	; 0x8c
 800140c:	723b      	strb	r3, [r7, #8]
	buf[1]=0x02;//Valeur a mettre dans ctrm_reg_b
 800140e:	2302      	movs	r3, #2
 8001410:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_c
 8001412:	2300      	movs	r3, #0
 8001414:	72bb      	strb	r3, [r7, #10]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 3, HAL_MAX_DELAY);
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2303      	movs	r3, #3
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	22e0      	movs	r2, #224	; 0xe0
 800142a:	213c      	movs	r1, #60	; 0x3c
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <config_mag+0xbc>)
 800142e:	f001 fe4f 	bl	80030d0 <HAL_I2C_Mem_Write>
 8001432:	4603      	mov	r3, r0
 8001434:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <config_mag+0x3e>
		printf("Error Tx\r\n");
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <config_mag+0xc0>)
 800143e:	f004 fd81 	bl	8005f44 <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 3, HAL_MAX_DELAY);
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2303      	movs	r3, #3
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	22e0      	movs	r2, #224	; 0xe0
 8001454:	213c      	movs	r1, #60	; 0x3c
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <config_mag+0xbc>)
 8001458:	f001 ff34 	bl	80032c4 <HAL_I2C_Mem_Read>
 800145c:	4603      	mov	r3, r0
 800145e:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
	//Ici on relit les 3 registres pour vérifier que la valeur souhaitée à bien été inscrite
	for(i=0;i<3;i++){
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e021      	b.n	80014ae <config_mag+0xaa>
		if(buf[i]==res[i]){
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3310      	adds	r3, #16
 800146e:	443b      	add	r3, r7
 8001470:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	3310      	adds	r3, #16
 8001478:	443b      	add	r3, r7
 800147a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800147e:	429a      	cmp	r2, r3
 8001480:	d10c      	bne.n	800149c <config_mag+0x98>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	3310      	adds	r3, #16
 8001486:	443b      	add	r3, r7
 8001488:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800148c:	4619      	mov	r1, r3
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	3301      	adds	r3, #1
 8001492:	461a      	mov	r2, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <config_mag+0xc4>)
 8001496:	f004 fccf 	bl	8005e38 <iprintf>
 800149a:	e005      	b.n	80014a8 <config_mag+0xa4>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <config_mag+0xc8>)
 80014a4:	f004 fcc8 	bl	8005e38 <iprintf>
	for(i=0;i<3;i++){
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	3301      	adds	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d9da      	bls.n	800146a <config_mag+0x66>
		}
	}
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001f8 	.word	0x200001f8
 80014c4:	080097d8 	.word	0x080097d8
 80014c8:	08009828 	.word	0x08009828
 80014cc:	08009858 	.word	0x08009858

080014d0 <get_data>:

void get_data(struct data_meas* acc, struct data_meas* mag){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af04      	add	r7, sp, #16
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
		HAL_StatusTypeDef ret;
		uint8_t buf[6] ;
		ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, OUT_X_L_A, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2300      	movs	r3, #0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	2228      	movs	r2, #40	; 0x28
 80014ec:	2132      	movs	r1, #50	; 0x32
 80014ee:	483d      	ldr	r0, [pc, #244]	; (80015e4 <get_data+0x114>)
 80014f0:	f001 fdee 	bl	80030d0 <HAL_I2C_Mem_Write>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <get_data+0x34>
			printf("Error Tx\r\n");
 80014fe:	483a      	ldr	r0, [pc, #232]	; (80015e8 <get_data+0x118>)
 8001500:	f004 fd20 	bl	8005f44 <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, OUT_X_L_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2306      	movs	r3, #6
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	22a8      	movs	r2, #168	; 0xa8
 8001518:	2132      	movs	r1, #50	; 0x32
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <get_data+0x114>)
 800151c:	f001 fed2 	bl	80032c4 <HAL_I2C_Mem_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
		acc->X=(buf[1]<<8)|(buf[0]);
 8001524:	7a7b      	ldrb	r3, [r7, #9]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7a3b      	ldrb	r3, [r7, #8]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	801a      	strh	r2, [r3, #0]
		acc->Y=(buf[3]<<8)|(buf[2]);
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7abb      	ldrb	r3, [r7, #10]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	805a      	strh	r2, [r3, #2]
		acc->Z=(buf[5]<<8)|(buf[4]);
 8001548:	7b7b      	ldrb	r3, [r7, #13]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7b3b      	ldrb	r3, [r7, #12]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	809a      	strh	r2, [r3, #4]

		ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2300      	movs	r3, #0
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	2268      	movs	r2, #104	; 0x68
 800156c:	213c      	movs	r1, #60	; 0x3c
 800156e:	481d      	ldr	r0, [pc, #116]	; (80015e4 <get_data+0x114>)
 8001570:	f001 fdae 	bl	80030d0 <HAL_I2C_Mem_Write>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <get_data+0xb4>
			printf("Error Tx\r\n");
 800157e:	481a      	ldr	r0, [pc, #104]	; (80015e8 <get_data+0x118>)
 8001580:	f004 fce0 	bl	8005f44 <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, OUTX_L_REG_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	2306      	movs	r3, #6
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	22e8      	movs	r2, #232	; 0xe8
 8001598:	213c      	movs	r1, #60	; 0x3c
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <get_data+0x114>)
 800159c:	f001 fe92 	bl	80032c4 <HAL_I2C_Mem_Read>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
		mag->X=(buf[1]<<8)|(buf[0]);
 80015a4:	7a7b      	ldrb	r3, [r7, #9]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7a3b      	ldrb	r3, [r7, #8]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	801a      	strh	r2, [r3, #0]
		mag->Y=(buf[3]<<8)|(buf[2]);
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7abb      	ldrb	r3, [r7, #10]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	805a      	strh	r2, [r3, #2]
		mag->Z=(buf[5]<<8)|(buf[4]);
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	809a      	strh	r2, [r3, #4]
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001f8 	.word	0x200001f8
 80015e8:	080097d8 	.word	0x080097d8
 80015ec:	00000000 	.word	0x00000000

080015f0 <acc_calibration>:

void acc_calibration(struct data_meas* acc, struct data_real* real_acc){
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	real_acc->X=-6.025*pow(10,-5)*(acc->X+1152)+1.075*pow(10,-7)*(acc->Y-1055)+1.387*pow(10,-6)*(acc->Z-1504);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffad 	bl	8000564 <__aeabi_i2d>
 800160a:	a365      	add	r3, pc, #404	; (adr r3, 80017a0 <acc_calibration+0x1b0>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f812 	bl	8000638 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4614      	mov	r4, r2
 800161a:	461d      	mov	r5, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001622:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff9c 	bl	8000564 <__aeabi_i2d>
 800162c:	a35e      	add	r3, pc, #376	; (adr r3, 80017a8 <acc_calibration+0x1b8>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f801 	bl	8000638 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7fe fe45 	bl	80002cc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001650:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff85 	bl	8000564 <__aeabi_i2d>
 800165a:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <acc_calibration+0x1c0>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffea 	bl	8000638 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fe2e 	bl	80002cc <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff fab6 	bl	8000be8 <__aeabi_d2f>
 800167c:	4602      	mov	r2, r0
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
	real_acc->Y=1.299*pow(10,-6)*(acc->X+1152)-6.14*pow(10,-5)*(acc->Y-1055)+8.793*pow(10,-8)*(acc->Z-1504);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff69 	bl	8000564 <__aeabi_i2d>
 8001692:	a349      	add	r3, pc, #292	; (adr r3, 80017b8 <acc_calibration+0x1c8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffce 	bl	8000638 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4614      	mov	r4, r2
 80016a2:	461d      	mov	r5, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016aa:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff58 	bl	8000564 <__aeabi_i2d>
 80016b4:	a342      	add	r3, pc, #264	; (adr r3, 80017c0 <acc_calibration+0x1d0>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ffbd 	bl	8000638 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe fdff 	bl	80002c8 <__aeabi_dsub>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff41 	bl	8000564 <__aeabi_i2d>
 80016e2:	a339      	add	r3, pc, #228	; (adr r3, 80017c8 <acc_calibration+0x1d8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ffa6 	bl	8000638 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fdea 	bl	80002cc <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa72 	bl	8000be8 <__aeabi_d2f>
 8001704:	4602      	mov	r2, r0
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]
	real_acc->Z=-1.378*pow(10,-6)*(acc->X+1152)+4.689*pow(10,-7)*(acc->Y-1055)-6.001*pow(10,-5)*(acc->Z-1504);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff25 	bl	8000564 <__aeabi_i2d>
 800171a:	a32d      	add	r3, pc, #180	; (adr r3, 80017d0 <acc_calibration+0x1e0>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe ff8a 	bl	8000638 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001732:	f2a3 431f 	subw	r3, r3, #1055	; 0x41f
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff14 	bl	8000564 <__aeabi_i2d>
 800173c:	a326      	add	r3, pc, #152	; (adr r3, 80017d8 <acc_calibration+0x1e8>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fdbd 	bl	80002cc <__adddf3>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4614      	mov	r4, r2
 8001758:	461d      	mov	r5, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001760:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fefd 	bl	8000564 <__aeabi_i2d>
 800176a:	a31d      	add	r3, pc, #116	; (adr r3, 80017e0 <acc_calibration+0x1f0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff62 	bl	8000638 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4620      	mov	r0, r4
 800177a:	4629      	mov	r1, r5
 800177c:	f7fe fda4 	bl	80002c8 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fa2e 	bl	8000be8 <__aeabi_d2f>
 800178c:	4602      	mov	r2, r0
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	609a      	str	r2, [r3, #8]
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bdb0      	pop	{r4, r5, r7, pc}
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	3c968945 	.word	0x3c968945
 80017a4:	bf0f969e 	.word	0xbf0f969e
 80017a8:	fff13c6d 	.word	0xfff13c6d
 80017ac:	3e7cdb57 	.word	0x3e7cdb57
 80017b0:	a0b29b26 	.word	0xa0b29b26
 80017b4:	3eb7451e 	.word	0x3eb7451e
 80017b8:	9abf44b5 	.word	0x9abf44b5
 80017bc:	3eb5cb29 	.word	0x3eb5cb29
 80017c0:	f7c8231a 	.word	0xf7c8231a
 80017c4:	3f10187b 	.word	0x3f10187b
 80017c8:	eb3c147e 	.word	0xeb3c147e
 80017cc:	3e779a80 	.word	0x3e779a80
 80017d0:	05e843c2 	.word	0x05e843c2
 80017d4:	beb71e77 	.word	0xbeb71e77
 80017d8:	025189a2 	.word	0x025189a2
 80017dc:	3e9f77a4 	.word	0x3e9f77a4
 80017e0:	e6434073 	.word	0xe6434073
 80017e4:	3f0f7667 	.word	0x3f0f7667

080017e8 <mag_calibration>:

void mag_calibration(struct data_meas* mag){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	  mag->X=mag->X-46;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3b2e      	subs	r3, #46	; 0x2e
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	801a      	strh	r2, [r3, #0]
	  mag->Y=mag->Y-88;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b58      	subs	r3, #88	; 0x58
 800180c:	b29b      	uxth	r3, r3
 800180e:	b21a      	sxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	805a      	strh	r2, [r3, #2]
	  mag->Z=mag->Z-12;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b0c      	subs	r3, #12
 800181e:	b29b      	uxth	r3, r3
 8001820:	b21a      	sxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	809a      	strh	r2, [r3, #4]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	0000      	movs	r0, r0
 8001834:	0000      	movs	r0, r0
	...

08001838 <calcul_angle>:

void calcul_angle(struct angle* angle, struct data_real* acc, struct data_meas* mag){
 8001838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	angle->theta=atan((acc->Y)/(acc->X));
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	ed93 7a01 	vldr	s14, [r3, #4]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001856:	ee16 0a90 	vmov	r0, s13
 800185a:	f7fe fe95 	bl	8000588 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	ec43 2b10 	vmov	d0, r2, r3
 8001866:	f006 fc23 	bl	80080b0 <atan>
 800186a:	ec53 2b10 	vmov	r2, r3, d0
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f9b9 	bl	8000be8 <__aeabi_d2f>
 8001876:	4602      	mov	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	601a      	str	r2, [r3, #0]
	angle->psi=atan((-acc->Z)/(sqrt(acc->Y*acc->Y+acc->X*acc->X)));
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001882:	eef1 7a67 	vneg.f32	s15, s15
 8001886:	ee17 3a90 	vmov	r3, s15
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe7c 	bl	8000588 <__aeabi_f2d>
 8001890:	4604      	mov	r4, r0
 8001892:	460d      	mov	r5, r1
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	ed93 7a01 	vldr	s14, [r3, #4]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	edd3 6a00 	vldr	s13, [r3]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	ee17 0a90 	vmov	r0, s15
 80018bc:	f7fe fe64 	bl	8000588 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	ec43 2b10 	vmov	d0, r2, r3
 80018c8:	f006 fe40 	bl	800854c <sqrt>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ffda 	bl	800088c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b17 	vmov	d7, r2, r3
 80018e0:	eeb0 0a47 	vmov.f32	s0, s14
 80018e4:	eef0 0a67 	vmov.f32	s1, s15
 80018e8:	f006 fbe2 	bl	80080b0 <atan>
 80018ec:	ec53 2b10 	vmov	r2, r3, d0
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f978 	bl	8000be8 <__aeabi_d2f>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	605a      	str	r2, [r3, #4]
	angle->delta=acos(sqrt(pow((mag->Y*acc->Z-mag->Z*acc->Y),2)+pow((mag->Z*acc->X-mag->X*acc->Z),2)+pow((mag->X*acc->Y-mag->Y*acc->X),2)+(mag->X*acc->Y-mag->Y*acc->Z))/(sqrt(mag->X*mag->X+mag->Y*mag->Y+mag->Z*mag->Z)*sqrt(acc->Z*acc->X+acc->Y*acc->Y+acc->Z*acc->Z)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	edd3 7a01 	vldr	s15, [r3, #4]
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	ee17 0a90 	vmov	r0, s15
 8001936:	f7fe fe27 	bl	8000588 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	ed9f 1baa 	vldr	d1, [pc, #680]	; 8001be8 <calcul_angle+0x3b0>
 8001942:	ec43 2b10 	vmov	d0, r2, r3
 8001946:	f006 fd91 	bl	800846c <pow>
 800194a:	ec55 4b10 	vmov	r4, r5, d0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	edd3 7a02 	vldr	s15, [r3, #8]
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7fe fdff 	bl	8000588 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8001be8 <calcul_angle+0x3b0>
 8001992:	ec43 2b10 	vmov	d0, r2, r3
 8001996:	f006 fd69 	bl	800846c <pow>
 800199a:	ec53 2b10 	vmov	r2, r3, d0
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f7fe fc93 	bl	80002cc <__adddf3>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4614      	mov	r4, r2
 80019ac:	461d      	mov	r5, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	ee17 0a90 	vmov	r0, s15
 80019e6:	f7fe fdcf 	bl	8000588 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8001be8 <calcul_angle+0x3b0>
 80019f2:	ec43 2b10 	vmov	d0, r2, r3
 80019f6:	f006 fd39 	bl	800846c <pow>
 80019fa:	ec53 2b10 	vmov	r2, r3, d0
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc63 	bl	80002cc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fd9f 	bl	8000588 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fc3b 	bl	80002cc <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b17 	vmov	d7, r2, r3
 8001a5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a62:	eef0 0a67 	vmov.f32	s1, s15
 8001a66:	f006 fd71 	bl	800854c <sqrt>
 8001a6a:	ec55 4b10 	vmov	r4, r5, d0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	fb03 f202 	mul.w	r2, r3, r2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	441a      	add	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd5b 	bl	8000564 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ec43 2b10 	vmov	d0, r2, r3
 8001ab6:	f006 fd49 	bl	800854c <sqrt>
 8001aba:	ec59 8b10 	vmov	r8, r9, d0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fd45 	bl	8000588 <__aeabi_f2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	ec43 2b10 	vmov	d0, r2, r3
 8001b06:	f006 fd21 	bl	800854c <sqrt>
 8001b0a:	ec53 2b10 	vmov	r2, r3, d0
 8001b0e:	4640      	mov	r0, r8
 8001b10:	4649      	mov	r1, r9
 8001b12:	f7fe fd91 	bl	8000638 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe feb5 	bl	800088c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b17 	vmov	d7, r2, r3
 8001b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2e:	eef0 0a67 	vmov.f32	s1, s15
 8001b32:	f006 fc67 	bl	8008404 <acos>
 8001b36:	ec53 2b10 	vmov	r2, r3, d0
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f853 	bl	8000be8 <__aeabi_d2f>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	60da      	str	r2, [r3, #12]
	//Conversion en radians
	//NOTE : 57.3 = (360)/(2*pi)
	angle->theta=angle->theta*57.3;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd1b 	bl	8000588 <__aeabi_f2d>
 8001b52:	a327      	add	r3, pc, #156	; (adr r3, 8001bf0 <calcul_angle+0x3b8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd6e 	bl	8000638 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f840 	bl	8000be8 <__aeabi_d2f>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]
	if((acc->X<0.06))angle->theta=0;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fd08 	bl	8000588 <__aeabi_f2d>
 8001b78:	a31f      	add	r3, pc, #124	; (adr r3, 8001bf8 <calcul_angle+0x3c0>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe ffcd 	bl	8000b1c <__aeabi_dcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <calcul_angle+0x358>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
	angle->psi=angle->psi*57.3;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcf7 	bl	8000588 <__aeabi_f2d>
 8001b9a:	a315      	add	r3, pc, #84	; (adr r3, 8001bf0 <calcul_angle+0x3b8>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd4a 	bl	8000638 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff f81c 	bl	8000be8 <__aeabi_d2f>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
	angle->delta=angle->delta*57.3;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fce4 	bl	8000588 <__aeabi_f2d>
 8001bc0:	a30b      	add	r3, pc, #44	; (adr r3, 8001bf0 <calcul_angle+0x3b8>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fd37 	bl	8000638 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001be6:	bf00      	nop
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40000000 	.word	0x40000000
 8001bf0:	66666666 	.word	0x66666666
 8001bf4:	404ca666 	.word	0x404ca666
 8001bf8:	eb851eb8 	.word	0xeb851eb8
 8001bfc:	3faeb851 	.word	0x3faeb851

08001c00 <affich_meas>:
void affich_meas(struct data_meas* acc,struct data_real* real_acc,struct data_meas* mag,struct angle* angle){
 8001c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af04      	add	r7, sp, #16
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
	//Affichage des toutes les valeurs
	printf("accX=%d\t accY=%d\t accZ=%d\t |\t magX=%d\t magY=%d\t magZ=%d",acc->X,acc->Y,acc->Z,mag->X,mag->Y,mag->Z);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	4618      	mov	r0, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c1e:	461c      	mov	r4, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c26:	461d      	mov	r5, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c36:	4619      	mov	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	9101      	str	r1, [sp, #4]
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	462b      	mov	r3, r5
 8001c46:	4622      	mov	r2, r4
 8001c48:	4601      	mov	r1, r0
 8001c4a:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <affich_meas+0xe4>)
 8001c4c:	f004 f8f4 	bl	8005e38 <iprintf>
	printf("\t|||||\t");
 8001c50:	4825      	ldr	r0, [pc, #148]	; (8001ce8 <affich_meas+0xe8>)
 8001c52:	f004 f8f1 	bl	8005e38 <iprintf>
	printf("accX=%.2f\t accY=%.2f\t accZ=%.2f",real_acc->X,real_acc->Y,real_acc->Z);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc94 	bl	8000588 <__aeabi_f2d>
 8001c60:	4680      	mov	r8, r0
 8001c62:	4689      	mov	r9, r1
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc8d 	bl	8000588 <__aeabi_f2d>
 8001c6e:	4604      	mov	r4, r0
 8001c70:	460d      	mov	r5, r1
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc86 	bl	8000588 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c84:	e9cd 4500 	strd	r4, r5, [sp]
 8001c88:	4642      	mov	r2, r8
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	4817      	ldr	r0, [pc, #92]	; (8001cec <affich_meas+0xec>)
 8001c8e:	f004 f8d3 	bl	8005e38 <iprintf>
	printf("\t|||\t");
 8001c92:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <affich_meas+0xf0>)
 8001c94:	f004 f8d0 	bl	8005e38 <iprintf>
	printf("theta=%.2f\t psi=%.2f\t delta=%.2f",angle->theta,angle->psi,angle->delta);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc73 	bl	8000588 <__aeabi_f2d>
 8001ca2:	4680      	mov	r8, r0
 8001ca4:	4689      	mov	r9, r1
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc6c 	bl	8000588 <__aeabi_f2d>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	460d      	mov	r5, r1
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc65 	bl	8000588 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cc6:	e9cd 4500 	strd	r4, r5, [sp]
 8001cca:	4642      	mov	r2, r8
 8001ccc:	464b      	mov	r3, r9
 8001cce:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <affich_meas+0xf4>)
 8001cd0:	f004 f8b2 	bl	8005e38 <iprintf>
	printf("\n\r");
 8001cd4:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <affich_meas+0xf8>)
 8001cd6:	f004 f8af 	bl	8005e38 <iprintf>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ce4:	08009890 	.word	0x08009890
 8001ce8:	080098c8 	.word	0x080098c8
 8001cec:	080098d0 	.word	0x080098d0
 8001cf0:	080098f0 	.word	0x080098f0
 8001cf4:	080098f8 	.word	0x080098f8
 8001cf8:	0800991c 	.word	0x0800991c

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f000 fa77 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f837 	bl	8001d78 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f7ff f93f 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d0e:	f000 f9d5 	bl	80020bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d12:	f7ff f9a9 	bl	8001068 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  who_am_i_sensors();//Fonction qui permet dé vérifier la communication avec les capteurs
 8001d16:	f7ff fa59 	bl	80011cc <who_am_i_sensors>
  reset_acc();//Fonction qui permet de reset les registres de Acc
 8001d1a:	f7ff fac1 	bl	80012a0 <reset_acc>
  config_acc();//Fonction qui permet de régler les registres de config de Mag
 8001d1e:	f7ff fae1 	bl	80012e4 <config_acc>
  reset_mag();//Fonction qui permet de reset les registres de Acc
 8001d22:	f7ff fb4b 	bl	80013bc <reset_mag>
  config_mag();//Fonction qui permet de régler les registres de config de Mag
 8001d26:	f7ff fb6d 	bl	8001404 <config_mag>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  get_data(&acc,&mag);
 8001d2a:	f107 0220 	add.w	r2, r7, #32
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fbcb 	bl	80014d0 <get_data>
	  acc_calibration(&acc,&real_acc);
 8001d3a:	f107 0214 	add.w	r2, r7, #20
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fc53 	bl	80015f0 <acc_calibration>
	  mag_calibration(&mag);
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fd4a 	bl	80017e8 <mag_calibration>
	  calcul_angle(&angle,&real_acc,&mag);
 8001d54:	f107 0220 	add.w	r2, r7, #32
 8001d58:	f107 0114 	add.w	r1, r7, #20
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fd6a 	bl	8001838 <calcul_angle>
	  affich_meas(&acc,&real_acc,&mag,&angle);
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	f107 0220 	add.w	r2, r7, #32
 8001d6a:	f107 0114 	add.w	r1, r7, #20
 8001d6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d72:	f7ff ff45 	bl	8001c00 <affich_meas>
	  get_data(&acc,&mag);
 8001d76:	e7d8      	b.n	8001d2a <main+0x2e>

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	; 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	2234      	movs	r2, #52	; 0x34
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fbe4 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <SystemClock_Config+0xd4>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <SystemClock_Config+0xd4>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <SystemClock_Config+0xd4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db8:	2300      	movs	r3, #0
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <SystemClock_Config+0xd8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <SystemClock_Config+0xd8>)
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <SystemClock_Config+0xd8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2310      	movs	r3, #16
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de4:	2302      	movs	r3, #2
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001dec:	2310      	movs	r3, #16
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001df0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001df4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001df6:	2304      	movs	r3, #4
 8001df8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fc78 	bl	80046fc <HAL_RCC_OscConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e12:	f000 f81f 	bl	8001e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	230f      	movs	r3, #15
 8001e18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	2102      	movs	r1, #2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 f918 	bl	8004068 <HAL_RCC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001e3e:	f000 f809 	bl	8001e54 <Error_Handler>
  }
}
 8001e42:	bf00      	nop
 8001e44:	3750      	adds	r7, #80	; 0x50
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8001e5c:	4801      	ldr	r0, [pc, #4]	; (8001e64 <Error_Handler+0x10>)
 8001e5e:	f003 ffeb 	bl	8005e38 <iprintf>
  {
 8001e62:	e7fb      	b.n	8001e5c <Error_Handler+0x8>
 8001e64:	08009920 	.word	0x08009920

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ea6:	2007      	movs	r0, #7
 8001ea8:	f000 fac8 	bl	800243c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f04:	f000 f9c8 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f26:	f003 faeb 	bl	8005500 <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f4e:	e7fe      	b.n	8001f4e <_exit+0x12>

08001f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f62:	f7ff f90d 	bl	8001180 <__io_getchar>
 8001f66:	4601      	mov	r1, r0
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf0      	blt.n	8001f62 <_read+0x12>
	}

return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e009      	b.n	8001fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f8d5 	bl	8001154 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf1      	blt.n	8001f9c <_write+0x12>
	}
	return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f003 fa50 	bl	8005500 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	2000024c 	.word	0x2000024c
 8002094:	200002a8 	.word	0x200002a8

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_USART2_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART2_UART_Init+0x4c>)
 80020f4:	f002 fda0 	bl	8004c38 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f7ff fea9 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000250 	.word	0x20000250
 800210c:	40004400 	.word	0x40004400

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_UART_MspInit+0x84>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_UART_MspInit+0x88>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800216a:	230c      	movs	r3, #12
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217a:	2307      	movs	r3, #7
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_UART_MspInit+0x8c>)
 8002186:	f000 f98d 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	; 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40004400 	.word	0x40004400
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021a6:	490e      	ldr	r1, [pc, #56]	; (80021e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021bc:	4c0b      	ldr	r4, [pc, #44]	; (80021ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ca:	f7ff ff65 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f003 f99d 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7ff fd93 	bl	8001cfc <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021e4:	08009da0 	.word	0x08009da0
  ldr r2, =_sbss
 80021e8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021ec:	200002a8 	.word	0x200002a8

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f90d 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff fe1e 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f917 	bl	800248a <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 f8ed 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000294 	.word	0x20000294

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000294 	.word	0x20000294

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff8e 	bl	800233c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff47 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff5c 	bl	8002320 <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff8e 	bl	8002390 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5d 	bl	800233c <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffb0 	bl	80023f8 <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e165      	b.n	800278c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8154 	bne.w	8002786 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80ae 	beq.w	8002786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_GPIO_Init+0x300>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a5c      	ldr	r2, [pc, #368]	; (80027a4 <HAL_GPIO_Init+0x300>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b5a      	ldr	r3, [pc, #360]	; (80027a4 <HAL_GPIO_Init+0x300>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4f      	ldr	r2, [pc, #316]	; (80027ac <HAL_GPIO_Init+0x308>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x21a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4e      	ldr	r2, [pc, #312]	; (80027b0 <HAL_GPIO_Init+0x30c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x216>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4d      	ldr	r2, [pc, #308]	; (80027b4 <HAL_GPIO_Init+0x310>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x212>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4c      	ldr	r2, [pc, #304]	; (80027b8 <HAL_GPIO_Init+0x314>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x20e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4b      	ldr	r2, [pc, #300]	; (80027bc <HAL_GPIO_Init+0x318>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x20a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_GPIO_Init+0x31c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x206>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a49      	ldr	r2, [pc, #292]	; (80027c4 <HAL_GPIO_Init+0x320>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x202>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00c      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e00a      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026aa:	2305      	movs	r3, #5
 80026ac:	e008      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026b2:	2303      	movs	r3, #3
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x21c>
 80026be:	2300      	movs	r3, #0
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f002 0203 	and.w	r2, r2, #3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4093      	lsls	r3, r2
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d0:	4935      	ldr	r1, [pc, #212]	; (80027a8 <HAL_GPIO_Init+0x304>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_GPIO_Init+0x324>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <HAL_GPIO_Init+0x324>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_GPIO_Init+0x324>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_GPIO_Init+0x324>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_GPIO_Init+0x324>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_GPIO_Init+0x324>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_GPIO_Init+0x324>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_GPIO_Init+0x324>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f67f ae96 	bls.w	80024c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40021800 	.word	0x40021800
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e12b      	b.n	8002a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fc4c 	bl	80010c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	; 0x24
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002864:	f001 fcf2 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8002868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a81      	ldr	r2, [pc, #516]	; (8002a74 <HAL_I2C_Init+0x274>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d807      	bhi.n	8002884 <HAL_I2C_Init+0x84>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_I2C_Init+0x278>)
 8002878:	4293      	cmp	r3, r2
 800287a:	bf94      	ite	ls
 800287c:	2301      	movls	r3, #1
 800287e:	2300      	movhi	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e006      	b.n	8002892 <HAL_I2C_Init+0x92>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a7d      	ldr	r2, [pc, #500]	; (8002a7c <HAL_I2C_Init+0x27c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0e7      	b.n	8002a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a78      	ldr	r2, [pc, #480]	; (8002a80 <HAL_I2C_Init+0x280>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0c9b      	lsrs	r3, r3, #18
 80028a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_I2C_Init+0x274>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d802      	bhi.n	80028d4 <HAL_I2C_Init+0xd4>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3301      	adds	r3, #1
 80028d2:	e009      	b.n	80028e8 <HAL_I2C_Init+0xe8>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_I2C_Init+0x284>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	3301      	adds	r3, #1
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	495c      	ldr	r1, [pc, #368]	; (8002a74 <HAL_I2C_Init+0x274>)
 8002904:	428b      	cmp	r3, r1
 8002906:	d819      	bhi.n	800293c <HAL_I2C_Init+0x13c>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e59      	subs	r1, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fbb1 f3f3 	udiv	r3, r1, r3
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	f640 73fc 	movw	r3, #4092	; 0xffc
 800291c:	400b      	ands	r3, r1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_I2C_Init+0x138>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e59      	subs	r1, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002936:	e051      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 8002938:	2304      	movs	r3, #4
 800293a:	e04f      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_I2C_Init+0x168>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e012      	b.n	800298e <HAL_I2C_Init+0x18e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	0099      	lsls	r1, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Init+0x196>
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10e      	bne.n	80029bc <HAL_I2C_Init+0x1bc>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e58      	subs	r0, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	440b      	add	r3, r1
 80029ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Init+0x1dc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	0099      	lsls	r1, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6911      	ldr	r1, [r2, #16]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	000186a0 	.word	0x000186a0
 8002a78:	001e847f 	.word	0x001e847f
 8002a7c:	003d08ff 	.word	0x003d08ff
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	460b      	mov	r3, r1
 8002a96:	817b      	strh	r3, [r7, #10]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff fc10 	bl	80022c0 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	f040 80e0 	bne.w	8002c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2319      	movs	r3, #25
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4970      	ldr	r1, [pc, #448]	; (8002c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f001 f8f6 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0d3      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2C_Master_Transmit+0x50>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e0cc      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d007      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	893a      	ldrh	r2, [r7, #8]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fde2 	bl	8003710 <I2C_MasterRequestWrite>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e08d      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b6c:	e066      	b.n	8002c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 f970 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d107      	bne.n	8002b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06b      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_I2C_Master_Transmit+0x188>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f001 f960 	bl	8003eda <I2C_WaitOnBTFFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d107      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e01a      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d194      	bne.n	8002b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e000      	b.n	8002c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	00100002 	.word	0x00100002
 8002c80:	ffff0000 	.word	0xffff0000

08002c84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	4613      	mov	r3, r2
 8002c96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fb12 	bl	80022c0 <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	f040 820b 	bne.w	80030c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	497c      	ldr	r1, [pc, #496]	; (8002ea8 <HAL_I2C_Master_Receive+0x224>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fff8 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e1fe      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x50>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e1f7      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d007      	beq.n	8002cfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2222      	movs	r2, #34	; 0x22
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a5c      	ldr	r2, [pc, #368]	; (8002eac <HAL_I2C_Master_Receive+0x228>)
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d3c:	8979      	ldrh	r1, [r7, #10]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fd66 	bl	8003814 <I2C_MasterRequestRead>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1b8      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d113      	bne.n	8002d82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e18c      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d11b      	bne.n	8002dc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e16c      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d11b      	bne.n	8002e02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	e14c      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e28:	e138      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	f200 80f1 	bhi.w	8003016 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d123      	bne.n	8002e84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f001 f88b 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e139      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e82:	e10b      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d14e      	bne.n	8002f2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	2200      	movs	r2, #0
 8002e94:	4906      	ldr	r1, [pc, #24]	; (8002eb0 <HAL_I2C_Master_Receive+0x22c>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 ff08 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e10e      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
 8002ea6:	bf00      	nop
 8002ea8:	00100002 	.word	0x00100002
 8002eac:	ffff0000 	.word	0xffff0000
 8002eb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f28:	e0b8      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2200      	movs	r2, #0
 8002f32:	4966      	ldr	r1, [pc, #408]	; (80030cc <HAL_I2C_Master_Receive+0x448>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 feb9 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0bf      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	494f      	ldr	r1, [pc, #316]	; (80030cc <HAL_I2C_Master_Receive+0x448>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fe8b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e091      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003014:	e042      	b.n	800309c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 ff9e 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e04c      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d118      	bne.n	800309c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f aec2 	bne.w	8002e2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3728      	adds	r7, #40	; 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	00010004 	.word	0x00010004

080030d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	460b      	mov	r3, r1
 80030e4:	813b      	strh	r3, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ea:	f7ff f8e9 	bl	80022c0 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	f040 80d9 	bne.w	80032b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2319      	movs	r3, #25
 8003104:	2201      	movs	r2, #1
 8003106:	496d      	ldr	r1, [pc, #436]	; (80032bc <HAL_I2C_Mem_Write+0x1ec>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fdcf 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
 8003116:	e0cc      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Mem_Write+0x56>
 8003122:	2302      	movs	r3, #2
 8003124:	e0c5      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d007      	beq.n	800314c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2221      	movs	r2, #33	; 0x21
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <HAL_I2C_Mem_Write+0x1f0>)
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800318e:	88f8      	ldrh	r0, [r7, #6]
 8003190:	893a      	ldrh	r2, [r7, #8]
 8003192:	8979      	ldrh	r1, [r7, #10]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fc06 	bl	80039b0 <I2C_RequestMemoryWrite>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d052      	beq.n	8003250 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e081      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fe50 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d11b      	bne.n	8003250 <HAL_I2C_Mem_Write+0x180>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1aa      	bne.n	80031ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fe3c 	bl	8003eda <I2C_WaitOnBTFFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2b04      	cmp	r3, #4
 800326e:	d107      	bne.n	8003280 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e016      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	00100002 	.word	0x00100002
 80032c0:	ffff0000 	.word	0xffff0000

080032c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032de:	f7fe ffef 	bl	80022c0 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	f040 8208 	bne.w	8003702 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2319      	movs	r3, #25
 80032f8:	2201      	movs	r2, #1
 80032fa:	497b      	ldr	r1, [pc, #492]	; (80034e8 <HAL_I2C_Mem_Read+0x224>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fcd5 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	e1fb      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Read+0x56>
 8003316:	2302      	movs	r3, #2
 8003318:	e1f4      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2222      	movs	r2, #34	; 0x22
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	; 0x40
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <HAL_I2C_Mem_Read+0x228>)
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003382:	88f8      	ldrh	r0, [r7, #6]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fba2 	bl	8003adc <I2C_RequestMemoryRead>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1b0      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d113      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e184      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d11b      	bne.n	8003412 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e164      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11b      	bne.n	8003452 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003428:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	e144      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003468:	e138      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	2b03      	cmp	r3, #3
 8003470:	f200 80f1 	bhi.w	8003656 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	2b01      	cmp	r3, #1
 800347a:	d123      	bne.n	80034c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fd6b 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e139      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c2:	e10b      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d14e      	bne.n	800356a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2200      	movs	r2, #0
 80034d4:	4906      	ldr	r1, [pc, #24]	; (80034f0 <HAL_I2C_Mem_Read+0x22c>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fbe8 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e10e      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
 80034e6:	bf00      	nop
 80034e8:	00100002 	.word	0x00100002
 80034ec:	ffff0000 	.word	0xffff0000
 80034f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003568:	e0b8      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2200      	movs	r2, #0
 8003572:	4966      	ldr	r1, [pc, #408]	; (800370c <HAL_I2C_Mem_Read+0x448>)
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb99 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0bf      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	2200      	movs	r2, #0
 80035ce:	494f      	ldr	r1, [pc, #316]	; (800370c <HAL_I2C_Mem_Read+0x448>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fb6b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e091      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003654:	e042      	b.n	80036dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003658:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fc7e 	bl	8003f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e04c      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d118      	bne.n	80036dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f aec2 	bne.w	800346a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	00010004 	.word	0x00010004

08003710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d006      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d003      	beq.n	800373a <I2C_MasterRequestWrite+0x2a>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003738:	d108      	bne.n	800374c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e00b      	b.n	8003764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	2b12      	cmp	r3, #18
 8003752:	d107      	bne.n	8003764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa9b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d103      	bne.n	8003794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e035      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d108      	bne.n	80037b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b0:	611a      	str	r2, [r3, #16]
 80037b2:	e01b      	b.n	80037ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	11db      	asrs	r3, r3, #7
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f063 030f 	orn	r3, r3, #15
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <I2C_MasterRequestWrite+0xfc>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fac1 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e010      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <I2C_MasterRequestWrite+0x100>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fab1 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	00010008 	.word	0x00010008
 8003810:	00010002 	.word	0x00010002

08003814 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d006      	beq.n	800384e <I2C_MasterRequestRead+0x3a>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d003      	beq.n	800384e <I2C_MasterRequestRead+0x3a>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800384c:	d108      	bne.n	8003860 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00b      	b.n	8003878 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	2b11      	cmp	r3, #17
 8003866:	d107      	bne.n	8003878 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fa11 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389e:	d103      	bne.n	80038a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e079      	b.n	80039a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b4:	d108      	bne.n	80038c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	e05f      	b.n	8003988 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	11db      	asrs	r3, r3, #7
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0306 	and.w	r3, r3, #6
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f063 030f 	orn	r3, r3, #15
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4930      	ldr	r1, [pc, #192]	; (80039a8 <I2C_MasterRequestRead+0x194>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fa37 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e054      	b.n	80039a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038f6:	897b      	ldrh	r3, [r7, #10]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4929      	ldr	r1, [pc, #164]	; (80039ac <I2C_MasterRequestRead+0x198>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa27 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e044      	b.n	80039a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9af 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003962:	d103      	bne.n	800396c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e017      	b.n	80039a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003970:	897b      	ldrh	r3, [r7, #10]
 8003972:	11db      	asrs	r3, r3, #7
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0306 	and.w	r3, r3, #6
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f063 030e 	orn	r3, r3, #14
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <I2C_MasterRequestRead+0x198>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f9e3 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	00010008 	.word	0x00010008
 80039ac:	00010002 	.word	0x00010002

080039b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	817b      	strh	r3, [r7, #10]
 80039c2:	460b      	mov	r3, r1
 80039c4:	813b      	strh	r3, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f960 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a00:	d103      	bne.n	8003a0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e05f      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <I2C_RequestMemoryWrite+0x128>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f998 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e04c      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa02 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02b      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7c:	893b      	ldrh	r3, [r7, #8]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
 8003a86:	e021      	b.n	8003acc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f9dc 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e005      	b.n	8003ace <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	00010002 	.word	0x00010002

08003adc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	817b      	strh	r3, [r7, #10]
 8003aee:	460b      	mov	r3, r1
 8003af0:	813b      	strh	r3, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8c2 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d103      	bne.n	8003b46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0aa      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	4952      	ldr	r1, [pc, #328]	; (8003ca8 <I2C_RequestMemoryRead+0x1cc>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f8fa 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e097      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f964 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e076      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e021      	b.n	8003c08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f93e 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e050      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	6a39      	ldr	r1, [r7, #32]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f923 	bl	8003e58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e035      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f82b 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d103      	bne.n	8003c74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e013      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c78:	897b      	ldrh	r3, [r7, #10]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <I2C_RequestMemoryRead+0x1cc>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f863 	bl	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	00010002 	.word	0x00010002

08003cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	e025      	b.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fafb 	bl	80022c0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e023      	b.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10d      	bne.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	e00c      	b.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d0b6      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d68:	e051      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d123      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e046      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d021      	beq.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe fa79 	bl	80022c0 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e020      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e00b      	b.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d18d      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e64:	e02d      	b.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8ce 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e02d      	b.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d021      	beq.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe fa1f 	bl	80022c0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e007      	b.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d1ca      	bne.n	8003e66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ee6:	e02d      	b.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f88d 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e02d      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d021      	beq.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f00:	f7fe f9de 	bl	80022c0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d1ca      	bne.n	8003ee8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f68:	e042      	b.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d119      	bne.n	8003fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0210 	mvn.w	r2, #16
 8003f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e029      	b.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7fe f988 	bl	80022c0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d1b5      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d11b      	bne.n	8004058 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004028:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cc      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b68      	ldr	r3, [pc, #416]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d90c      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b65      	ldr	r3, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	494d      	ldr	r1, [pc, #308]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d044      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d119      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d003      	beq.n	8004126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	2b03      	cmp	r3, #3
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e06f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e067      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4934      	ldr	r1, [pc, #208]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fe f8b2 	bl	80022c0 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fe f8ae 	bl	80022c0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e04f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d20c      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b22      	ldr	r3, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4916      	ldr	r1, [pc, #88]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f855 	bl	800429c <HAL_RCC_GetSysClockFreq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	5ccb      	ldrb	r3, [r1, r3]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f812 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	40023800 	.word	0x40023800
 8004228:	0800992c 	.word	0x0800992c
 800422c:	20000000 	.word	0x20000000
 8004230:	20000004 	.word	0x20000004

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	0800993c 	.word	0x0800993c

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffdc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0b5b      	lsrs	r3, r3, #13
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	0800993c 	.word	0x0800993c

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b0ae      	sub	sp, #184	; 0xb8
 80042a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c2:	4bcb      	ldr	r3, [pc, #812]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	f200 8206 	bhi.w	80046dc <HAL_RCC_GetSysClockFreq+0x440>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	080046dd 	.word	0x080046dd
 80042e0:	080046dd 	.word	0x080046dd
 80042e4:	080046dd 	.word	0x080046dd
 80042e8:	08004315 	.word	0x08004315
 80042ec:	080046dd 	.word	0x080046dd
 80042f0:	080046dd 	.word	0x080046dd
 80042f4:	080046dd 	.word	0x080046dd
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	080046dd 	.word	0x080046dd
 8004300:	080046dd 	.word	0x080046dd
 8004304:	080046dd 	.word	0x080046dd
 8004308:	0800450d 	.word	0x0800450d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4bb9      	ldr	r3, [pc, #740]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800430e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004312:	e1e7      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004314:	4bb8      	ldr	r3, [pc, #736]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800431a:	e1e3      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800431c:	4bb4      	ldr	r3, [pc, #720]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004328:	4bb1      	ldr	r3, [pc, #708]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d071      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4bae      	ldr	r3, [pc, #696]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004340:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435a:	4622      	mov	r2, r4
 800435c:	462b      	mov	r3, r5
 800435e:	f04f 0000 	mov.w	r0, #0
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	0159      	lsls	r1, r3, #5
 8004368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800436c:	0150      	lsls	r0, r2, #5
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4621      	mov	r1, r4
 8004374:	1a51      	subs	r1, r2, r1
 8004376:	6439      	str	r1, [r7, #64]	; 0x40
 8004378:	4629      	mov	r1, r5
 800437a:	eb63 0301 	sbc.w	r3, r3, r1
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800438c:	4649      	mov	r1, r9
 800438e:	018b      	lsls	r3, r1, #6
 8004390:	4641      	mov	r1, r8
 8004392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004396:	4641      	mov	r1, r8
 8004398:	018a      	lsls	r2, r1, #6
 800439a:	4641      	mov	r1, r8
 800439c:	1a51      	subs	r1, r2, r1
 800439e:	63b9      	str	r1, [r7, #56]	; 0x38
 80043a0:	4649      	mov	r1, r9
 80043a2:	eb63 0301 	sbc.w	r3, r3, r1
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80043b4:	4649      	mov	r1, r9
 80043b6:	00cb      	lsls	r3, r1, #3
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043be:	4641      	mov	r1, r8
 80043c0:	00ca      	lsls	r2, r1, #3
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	4622      	mov	r2, r4
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
 80043ce:	462b      	mov	r3, r5
 80043d0:	460a      	mov	r2, r1
 80043d2:	eb42 0303 	adc.w	r3, r2, r3
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043e4:	4629      	mov	r1, r5
 80043e6:	024b      	lsls	r3, r1, #9
 80043e8:	4621      	mov	r1, r4
 80043ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ee:	4621      	mov	r1, r4
 80043f0:	024a      	lsls	r2, r1, #9
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004404:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004408:	f7fc fc3e 	bl	8000c88 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4613      	mov	r3, r2
 8004412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004416:	e067      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004418:	4b75      	ldr	r3, [pc, #468]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004424:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800442c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004430:	67bb      	str	r3, [r7, #120]	; 0x78
 8004432:	2300      	movs	r3, #0
 8004434:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004436:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	f04f 0000 	mov.w	r0, #0
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	0159      	lsls	r1, r3, #5
 8004448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444c:	0150      	lsls	r0, r2, #5
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4621      	mov	r1, r4
 8004454:	1a51      	subs	r1, r2, r1
 8004456:	62b9      	str	r1, [r7, #40]	; 0x28
 8004458:	4629      	mov	r1, r5
 800445a:	eb63 0301 	sbc.w	r3, r3, r1
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800446c:	4649      	mov	r1, r9
 800446e:	018b      	lsls	r3, r1, #6
 8004470:	4641      	mov	r1, r8
 8004472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004476:	4641      	mov	r1, r8
 8004478:	018a      	lsls	r2, r1, #6
 800447a:	4641      	mov	r1, r8
 800447c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004480:	4649      	mov	r1, r9
 8004482:	eb63 0b01 	sbc.w	fp, r3, r1
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004492:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449a:	4692      	mov	sl, r2
 800449c:	469b      	mov	fp, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	eb1a 0303 	adds.w	r3, sl, r3
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	462b      	mov	r3, r5
 80044a8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044ba:	4629      	mov	r1, r5
 80044bc:	028b      	lsls	r3, r1, #10
 80044be:	4621      	mov	r1, r4
 80044c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c4:	4621      	mov	r1, r4
 80044c6:	028a      	lsls	r2, r1, #10
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d0:	2200      	movs	r2, #0
 80044d2:	673b      	str	r3, [r7, #112]	; 0x70
 80044d4:	677a      	str	r2, [r7, #116]	; 0x74
 80044d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80044da:	f7fc fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4613      	mov	r3, r2
 80044e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80044fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800450a:	e0eb      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800450c:	4b38      	ldr	r3, [pc, #224]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004518:	4b35      	ldr	r3, [pc, #212]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d06b      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	2200      	movs	r2, #0
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
 800452e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	663b      	str	r3, [r7, #96]	; 0x60
 8004538:	2300      	movs	r3, #0
 800453a:	667b      	str	r3, [r7, #100]	; 0x64
 800453c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004540:	4622      	mov	r2, r4
 8004542:	462b      	mov	r3, r5
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	0159      	lsls	r1, r3, #5
 800454e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004552:	0150      	lsls	r0, r2, #5
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4621      	mov	r1, r4
 800455a:	1a51      	subs	r1, r2, r1
 800455c:	61b9      	str	r1, [r7, #24]
 800455e:	4629      	mov	r1, r5
 8004560:	eb63 0301 	sbc.w	r3, r3, r1
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004572:	4659      	mov	r1, fp
 8004574:	018b      	lsls	r3, r1, #6
 8004576:	4651      	mov	r1, sl
 8004578:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800457c:	4651      	mov	r1, sl
 800457e:	018a      	lsls	r2, r1, #6
 8004580:	4651      	mov	r1, sl
 8004582:	ebb2 0801 	subs.w	r8, r2, r1
 8004586:	4659      	mov	r1, fp
 8004588:	eb63 0901 	sbc.w	r9, r3, r1
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a0:	4690      	mov	r8, r2
 80045a2:	4699      	mov	r9, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	eb18 0303 	adds.w	r3, r8, r3
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	462b      	mov	r3, r5
 80045ae:	eb49 0303 	adc.w	r3, r9, r3
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045c0:	4629      	mov	r1, r5
 80045c2:	024b      	lsls	r3, r1, #9
 80045c4:	4621      	mov	r1, r4
 80045c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045ca:	4621      	mov	r1, r4
 80045cc:	024a      	lsls	r2, r1, #9
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045d6:	2200      	movs	r2, #0
 80045d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80045dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e0:	f7fc fb52 	bl	8000c88 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ee:	e065      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x420>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	2200      	movs	r2, #0
 8004604:	4618      	mov	r0, r3
 8004606:	4611      	mov	r1, r2
 8004608:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800460c:	653b      	str	r3, [r7, #80]	; 0x50
 800460e:	2300      	movs	r3, #0
 8004610:	657b      	str	r3, [r7, #84]	; 0x54
 8004612:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004616:	4642      	mov	r2, r8
 8004618:	464b      	mov	r3, r9
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004628:	0150      	lsls	r0, r2, #5
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4641      	mov	r1, r8
 8004630:	1a51      	subs	r1, r2, r1
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	4649      	mov	r1, r9
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004648:	4659      	mov	r1, fp
 800464a:	018b      	lsls	r3, r1, #6
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004652:	4651      	mov	r1, sl
 8004654:	018a      	lsls	r2, r1, #6
 8004656:	4651      	mov	r1, sl
 8004658:	1a54      	subs	r4, r2, r1
 800465a:	4659      	mov	r1, fp
 800465c:	eb63 0501 	sbc.w	r5, r3, r1
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	00eb      	lsls	r3, r5, #3
 800466a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466e:	00e2      	lsls	r2, r4, #3
 8004670:	4614      	mov	r4, r2
 8004672:	461d      	mov	r5, r3
 8004674:	4643      	mov	r3, r8
 8004676:	18e3      	adds	r3, r4, r3
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	464b      	mov	r3, r9
 800467c:	eb45 0303 	adc.w	r3, r5, r3
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800468e:	4629      	mov	r1, r5
 8004690:	028b      	lsls	r3, r1, #10
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004698:	4621      	mov	r1, r4
 800469a:	028a      	lsls	r2, r1, #10
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046a4:	2200      	movs	r2, #0
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046ae:	f7fc faeb 	bl	8000c88 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4613      	mov	r3, r2
 80046b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0f1b      	lsrs	r3, r3, #28
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80046ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046da:	e003      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80046de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	37b8      	adds	r7, #184	; 0xb8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800
 80046f8:	00f42400 	.word	0x00f42400

080046fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e28d      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8083 	beq.w	8004822 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800471c:	4b94      	ldr	r3, [pc, #592]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b04      	cmp	r3, #4
 8004726:	d019      	beq.n	800475c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004728:	4b91      	ldr	r3, [pc, #580]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004730:	2b08      	cmp	r3, #8
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004734:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004740:	d00c      	beq.n	800475c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004742:	4b8b      	ldr	r3, [pc, #556]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d112      	bne.n	8004774 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474e:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475a:	d10b      	bne.n	8004774 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	4b84      	ldr	r3, [pc, #528]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05b      	beq.n	8004820 <HAL_RCC_OscConfig+0x124>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d157      	bne.n	8004820 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e25a      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d106      	bne.n	800478c <HAL_RCC_OscConfig+0x90>
 800477e:	4b7c      	ldr	r3, [pc, #496]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7b      	ldr	r2, [pc, #492]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xcc>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0xb4>
 8004796:	4b76      	ldr	r3, [pc, #472]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a75      	ldr	r2, [pc, #468]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b73      	ldr	r3, [pc, #460]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a72      	ldr	r2, [pc, #456]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xcc>
 80047b0:	4b6f      	ldr	r3, [pc, #444]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6e      	ldr	r2, [pc, #440]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b6c      	ldr	r3, [pc, #432]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6b      	ldr	r2, [pc, #428]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fd fd76 	bl	80022c0 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd fd72 	bl	80022c0 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e21f      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xdc>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fd62 	bl	80022c0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd fd5e 	bl	80022c0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e20b      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b57      	ldr	r3, [pc, #348]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x104>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d06f      	beq.n	800490e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800482e:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d017      	beq.n	800486a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800483a:	4b4d      	ldr	r3, [pc, #308]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d105      	bne.n	8004852 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004846:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d11c      	bne.n	8004898 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485e:	4b44      	ldr	r3, [pc, #272]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d116      	bne.n	8004898 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_RCC_OscConfig+0x186>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e1d3      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4937      	ldr	r1, [pc, #220]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004896:	e03a      	b.n	800490e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a0:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_RCC_OscConfig+0x278>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd fd0b 	bl	80022c0 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ae:	f7fd fd07 	bl	80022c0 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1b4      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c0:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048cc:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4925      	ldr	r1, [pc, #148]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e2:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_RCC_OscConfig+0x278>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd fcea 	bl	80022c0 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fd fce6 	bl	80022c0 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e193      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d036      	beq.n	8004988 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd fcca 	bl	80022c0 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004930:	f7fd fcc6 	bl	80022c0 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e173      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x234>
 800494e:	e01b      	b.n	8004988 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_OscConfig+0x27c>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004956:	f7fd fcb3 	bl	80022c0 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	e00e      	b.n	800497c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800495e:	f7fd fcaf 	bl	80022c0 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d907      	bls.n	800497c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e15c      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
 8004970:	40023800 	.word	0x40023800
 8004974:	42470000 	.word	0x42470000
 8004978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	4b8a      	ldr	r3, [pc, #552]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 800497e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ea      	bne.n	800495e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8097 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800499a:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a7e      	ldr	r2, [pc, #504]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
 80049b6:	4b7c      	ldr	r3, [pc, #496]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c6:	4b79      	ldr	r3, [pc, #484]	; (8004bac <HAL_RCC_OscConfig+0x4b0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d118      	bne.n	8004a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d2:	4b76      	ldr	r3, [pc, #472]	; (8004bac <HAL_RCC_OscConfig+0x4b0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a75      	ldr	r2, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x4b0>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049de:	f7fd fc6f 	bl	80022c0 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e6:	f7fd fc6b 	bl	80022c0 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e118      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f8:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_RCC_OscConfig+0x4b0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_OscConfig+0x31e>
 8004a0c:	4b66      	ldr	r3, [pc, #408]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a65      	ldr	r2, [pc, #404]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
 8004a18:	e01c      	b.n	8004a54 <HAL_RCC_OscConfig+0x358>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x340>
 8004a22:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a60      	ldr	r2, [pc, #384]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a28:	f043 0304 	orr.w	r3, r3, #4
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a5d      	ldr	r2, [pc, #372]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3a:	e00b      	b.n	8004a54 <HAL_RCC_OscConfig+0x358>
 8004a3c:	4b5a      	ldr	r3, [pc, #360]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4a59      	ldr	r2, [pc, #356]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	; 0x70
 8004a48:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	4a56      	ldr	r2, [pc, #344]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d015      	beq.n	8004a88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd fc30 	bl	80022c0 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fd fc2c 	bl	80022c0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0d7      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0ee      	beq.n	8004a64 <HAL_RCC_OscConfig+0x368>
 8004a86:	e014      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fd fc1a 	bl	80022c0 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fd fc16 	bl	80022c0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0c1      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa6:	4b40      	ldr	r3, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1ee      	bne.n	8004a90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	4a3a      	ldr	r2, [pc, #232]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80ad 	beq.w	8004c28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d060      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d145      	bne.n	8004b6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b33      	ldr	r3, [pc, #204]	; (8004bb0 <HAL_RCC_OscConfig+0x4b4>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fbea 	bl	80022c0 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd fbe6 	bl	80022c0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e093      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	491b      	ldr	r1, [pc, #108]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x4b4>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fbbb 	bl	80022c0 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fd fbb7 	bl	80022c0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e064      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x452>
 8004b6c:	e05c      	b.n	8004c28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_OscConfig+0x4b4>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fd fba4 	bl	80022c0 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fd fba0 	bl	80022c0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e04d      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x480>
 8004b9a:	e045      	b.n	8004c28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e040      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <HAL_RCC_OscConfig+0x538>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d030      	beq.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d129      	bne.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d122      	bne.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d119      	bne.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d10f      	bne.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800

08004c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e03f      	b.n	8004cca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fa56 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f9cb 	bl	8005018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08a      	sub	sp, #40	; 0x28
 8004cd6:	af02      	add	r7, sp, #8
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d17c      	bne.n	8004dec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_UART_Transmit+0x2c>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e075      	b.n	8004dee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Transmit+0x3e>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e06e      	b.n	8004dee <HAL_UART_Transmit+0x11c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	; 0x21
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d26:	f7fd facb 	bl	80022c0 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x82>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d64:	e02a      	b.n	8004dbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f8e2 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e036      	b.n	8004dee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e007      	b.n	8004dae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1cf      	bne.n	8004d66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2140      	movs	r1, #64	; 0x40
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f8b2 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e006      	b.n	8004dee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af02      	add	r7, sp, #8
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 808c 	bne.w	8004f30 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Receive+0x2e>
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e084      	b.n	8004f32 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Receive+0x40>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e07d      	b.n	8004f32 <HAL_UART_Receive+0x13c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2222      	movs	r2, #34	; 0x22
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e52:	f7fd fa35 	bl	80022c0 <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6c:	d108      	bne.n	8004e80 <HAL_UART_Receive+0x8a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e003      	b.n	8004e88 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e90:	e043      	b.n	8004f1a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f84c 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e042      	b.n	8004f32 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e01f      	b.n	8004f0c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d007      	beq.n	8004ee6 <HAL_UART_Receive+0xf0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_UART_Receive+0xfe>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e008      	b.n	8004f06 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1b6      	bne.n	8004e92 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b090      	sub	sp, #64	; 0x40
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e050      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d04c      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5a:	f7fd f9b1 	bl	80022c0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d241      	bcs.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f8a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	613b      	str	r3, [r7, #16]
   return(result);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fbe:	623a      	str	r2, [r7, #32]
 8004fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	69f9      	ldr	r1, [r7, #28]
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	429a      	cmp	r2, r3
 800500a:	d09f      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3740      	adds	r7, #64	; 0x40
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b0c0      	sub	sp, #256	; 0x100
 800501e:	af00      	add	r7, sp, #0
 8005020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	ea40 0301 	orr.w	r3, r0, r1
 8005040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005070:	f021 010c 	bic.w	r1, r1, #12
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800507e:	430b      	orrs	r3, r1
 8005080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	6999      	ldr	r1, [r3, #24]
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	ea40 0301 	orr.w	r3, r0, r1
 800509e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b8f      	ldr	r3, [pc, #572]	; (80052e4 <UART_SetConfig+0x2cc>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <UART_SetConfig+0xa0>
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b8d      	ldr	r3, [pc, #564]	; (80052e8 <UART_SetConfig+0x2d0>)
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d104      	bne.n	80050c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7ff f8dc 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 80050bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050c0:	e003      	b.n	80050ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050c2:	f7ff f8c3 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80050c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d4:	f040 810c 	bne.w	80052f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050f2:	415b      	adcs	r3, r3
 80050f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050fa:	4621      	mov	r1, r4
 80050fc:	eb12 0801 	adds.w	r8, r2, r1
 8005100:	4629      	mov	r1, r5
 8005102:	eb43 0901 	adc.w	r9, r3, r1
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511a:	4690      	mov	r8, r2
 800511c:	4699      	mov	r9, r3
 800511e:	4623      	mov	r3, r4
 8005120:	eb18 0303 	adds.w	r3, r8, r3
 8005124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005128:	462b      	mov	r3, r5
 800512a:	eb49 0303 	adc.w	r3, r9, r3
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800513e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005146:	460b      	mov	r3, r1
 8005148:	18db      	adds	r3, r3, r3
 800514a:	653b      	str	r3, [r7, #80]	; 0x50
 800514c:	4613      	mov	r3, r2
 800514e:	eb42 0303 	adc.w	r3, r2, r3
 8005152:	657b      	str	r3, [r7, #84]	; 0x54
 8005154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800515c:	f7fb fd94 	bl	8000c88 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <UART_SetConfig+0x2d4>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011c      	lsls	r4, r3, #4
 800516e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005172:	2200      	movs	r2, #0
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800517c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	1891      	adds	r1, r2, r2
 8005186:	64b9      	str	r1, [r7, #72]	; 0x48
 8005188:	415b      	adcs	r3, r3
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005190:	4641      	mov	r1, r8
 8005192:	eb12 0a01 	adds.w	sl, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb43 0b01 	adc.w	fp, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	4692      	mov	sl, r2
 80051b2:	469b      	mov	fp, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051be:	464b      	mov	r3, r9
 80051c0:	eb4b 0303 	adc.w	r3, fp, r3
 80051c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051dc:	460b      	mov	r3, r1
 80051de:	18db      	adds	r3, r3, r3
 80051e0:	643b      	str	r3, [r7, #64]	; 0x40
 80051e2:	4613      	mov	r3, r2
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051f2:	f7fb fd49 	bl	8000c88 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <UART_SetConfig+0x2d4>)
 80051fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2264      	movs	r2, #100	; 0x64
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	1acb      	subs	r3, r1, r3
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005212:	4b36      	ldr	r3, [pc, #216]	; (80052ec <UART_SetConfig+0x2d4>)
 8005214:	fba3 2302 	umull	r2, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005220:	441c      	add	r4, r3
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800522c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	63b9      	str	r1, [r7, #56]	; 0x38
 800523c:	415b      	adcs	r3, r3
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005244:	4641      	mov	r1, r8
 8005246:	1851      	adds	r1, r2, r1
 8005248:	6339      	str	r1, [r7, #48]	; 0x30
 800524a:	4649      	mov	r1, r9
 800524c:	414b      	adcs	r3, r1
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800525c:	4659      	mov	r1, fp
 800525e:	00cb      	lsls	r3, r1, #3
 8005260:	4651      	mov	r1, sl
 8005262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005266:	4651      	mov	r1, sl
 8005268:	00ca      	lsls	r2, r1, #3
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	4603      	mov	r3, r0
 8005270:	4642      	mov	r2, r8
 8005272:	189b      	adds	r3, r3, r2
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005278:	464b      	mov	r3, r9
 800527a:	460a      	mov	r2, r1
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005298:	460b      	mov	r3, r1
 800529a:	18db      	adds	r3, r3, r3
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
 800529e:	4613      	mov	r3, r2
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052ae:	f7fb fceb 	bl	8000c88 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <UART_SetConfig+0x2d4>)
 80052b8:	fba3 1302 	umull	r1, r3, r3, r2
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	2164      	movs	r1, #100	; 0x64
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3332      	adds	r3, #50	; 0x32
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <UART_SetConfig+0x2d4>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	f003 0207 	and.w	r2, r3, #7
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4422      	add	r2, r4
 80052de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e0:	e105      	b.n	80054ee <UART_SetConfig+0x4d6>
 80052e2:	bf00      	nop
 80052e4:	40011000 	.word	0x40011000
 80052e8:	40011400 	.word	0x40011400
 80052ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005302:	4642      	mov	r2, r8
 8005304:	464b      	mov	r3, r9
 8005306:	1891      	adds	r1, r2, r2
 8005308:	6239      	str	r1, [r7, #32]
 800530a:	415b      	adcs	r3, r3
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
 800530e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005312:	4641      	mov	r1, r8
 8005314:	1854      	adds	r4, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb43 0501 	adc.w	r5, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	00eb      	lsls	r3, r5, #3
 8005326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532a:	00e2      	lsls	r2, r4, #3
 800532c:	4614      	mov	r4, r2
 800532e:	461d      	mov	r5, r3
 8005330:	4643      	mov	r3, r8
 8005332:	18e3      	adds	r3, r4, r3
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005338:	464b      	mov	r3, r9
 800533a:	eb45 0303 	adc.w	r3, r5, r3
 800533e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800534e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800535e:	4629      	mov	r1, r5
 8005360:	008b      	lsls	r3, r1, #2
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005368:	4621      	mov	r1, r4
 800536a:	008a      	lsls	r2, r1, #2
 800536c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005370:	f7fb fc8a 	bl	8000c88 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b60      	ldr	r3, [pc, #384]	; (80054fc <UART_SetConfig+0x4e4>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011c      	lsls	r4, r3, #4
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800538c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	61b9      	str	r1, [r7, #24]
 800539c:	415b      	adcs	r3, r3
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6139      	str	r1, [r7, #16]
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053fc:	4649      	mov	r1, r9
 80053fe:	008b      	lsls	r3, r1, #2
 8005400:	4641      	mov	r1, r8
 8005402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005406:	4641      	mov	r1, r8
 8005408:	008a      	lsls	r2, r1, #2
 800540a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800540e:	f7fb fc3b 	bl	8000c88 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4b39      	ldr	r3, [pc, #228]	; (80054fc <UART_SetConfig+0x4e4>)
 8005418:	fba3 1302 	umull	r1, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	2164      	movs	r1, #100	; 0x64
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	3332      	adds	r3, #50	; 0x32
 800542a:	4a34      	ldr	r2, [pc, #208]	; (80054fc <UART_SetConfig+0x4e4>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005436:	441c      	add	r4, r3
 8005438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543c:	2200      	movs	r2, #0
 800543e:	673b      	str	r3, [r7, #112]	; 0x70
 8005440:	677a      	str	r2, [r7, #116]	; 0x74
 8005442:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005446:	4642      	mov	r2, r8
 8005448:	464b      	mov	r3, r9
 800544a:	1891      	adds	r1, r2, r2
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	415b      	adcs	r3, r3
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005456:	4641      	mov	r1, r8
 8005458:	1851      	adds	r1, r2, r1
 800545a:	6039      	str	r1, [r7, #0]
 800545c:	4649      	mov	r1, r9
 800545e:	414b      	adcs	r3, r1
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800546e:	4659      	mov	r1, fp
 8005470:	00cb      	lsls	r3, r1, #3
 8005472:	4651      	mov	r1, sl
 8005474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005478:	4651      	mov	r1, sl
 800547a:	00ca      	lsls	r2, r1, #3
 800547c:	4610      	mov	r0, r2
 800547e:	4619      	mov	r1, r3
 8005480:	4603      	mov	r3, r0
 8005482:	4642      	mov	r2, r8
 8005484:	189b      	adds	r3, r3, r2
 8005486:	66bb      	str	r3, [r7, #104]	; 0x68
 8005488:	464b      	mov	r3, r9
 800548a:	460a      	mov	r2, r1
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	663b      	str	r3, [r7, #96]	; 0x60
 800549c:	667a      	str	r2, [r7, #100]	; 0x64
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054aa:	4649      	mov	r1, r9
 80054ac:	008b      	lsls	r3, r1, #2
 80054ae:	4641      	mov	r1, r8
 80054b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b4:	4641      	mov	r1, r8
 80054b6:	008a      	lsls	r2, r1, #2
 80054b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054bc:	f7fb fbe4 	bl	8000c88 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <UART_SetConfig+0x4e4>)
 80054c6:	fba3 1302 	umull	r1, r3, r3, r2
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	2164      	movs	r1, #100	; 0x64
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	3332      	adds	r3, #50	; 0x32
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <UART_SetConfig+0x4e4>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	f003 020f 	and.w	r2, r3, #15
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4422      	add	r2, r4
 80054ec:	609a      	str	r2, [r3, #8]
}
 80054ee:	bf00      	nop
 80054f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fa:	bf00      	nop
 80054fc:	51eb851f 	.word	0x51eb851f

08005500 <__errno>:
 8005500:	4b01      	ldr	r3, [pc, #4]	; (8005508 <__errno+0x8>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	2000000c 	.word	0x2000000c

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4d0d      	ldr	r5, [pc, #52]	; (8005544 <__libc_init_array+0x38>)
 8005510:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <__libc_init_array+0x3c>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	2600      	movs	r6, #0
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	4d0b      	ldr	r5, [pc, #44]	; (800554c <__libc_init_array+0x40>)
 800551e:	4c0c      	ldr	r4, [pc, #48]	; (8005550 <__libc_init_array+0x44>)
 8005520:	f004 f94c 	bl	80097bc <_init>
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	2600      	movs	r6, #0
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	08009d98 	.word	0x08009d98
 8005548:	08009d98 	.word	0x08009d98
 800554c:	08009d98 	.word	0x08009d98
 8005550:	08009d9c 	.word	0x08009d9c

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <__cvt>:
 8005564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	ec55 4b10 	vmov	r4, r5, d0
 800556c:	2d00      	cmp	r5, #0
 800556e:	460e      	mov	r6, r1
 8005570:	4619      	mov	r1, r3
 8005572:	462b      	mov	r3, r5
 8005574:	bfbb      	ittet	lt
 8005576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800557a:	461d      	movlt	r5, r3
 800557c:	2300      	movge	r3, #0
 800557e:	232d      	movlt	r3, #45	; 0x2d
 8005580:	700b      	strb	r3, [r1, #0]
 8005582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005588:	4691      	mov	r9, r2
 800558a:	f023 0820 	bic.w	r8, r3, #32
 800558e:	bfbc      	itt	lt
 8005590:	4622      	movlt	r2, r4
 8005592:	4614      	movlt	r4, r2
 8005594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005598:	d005      	beq.n	80055a6 <__cvt+0x42>
 800559a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800559e:	d100      	bne.n	80055a2 <__cvt+0x3e>
 80055a0:	3601      	adds	r6, #1
 80055a2:	2102      	movs	r1, #2
 80055a4:	e000      	b.n	80055a8 <__cvt+0x44>
 80055a6:	2103      	movs	r1, #3
 80055a8:	ab03      	add	r3, sp, #12
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	ab02      	add	r3, sp, #8
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	ec45 4b10 	vmov	d0, r4, r5
 80055b4:	4653      	mov	r3, sl
 80055b6:	4632      	mov	r2, r6
 80055b8:	f000 fe1a 	bl	80061f0 <_dtoa_r>
 80055bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055c0:	4607      	mov	r7, r0
 80055c2:	d102      	bne.n	80055ca <__cvt+0x66>
 80055c4:	f019 0f01 	tst.w	r9, #1
 80055c8:	d022      	beq.n	8005610 <__cvt+0xac>
 80055ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055ce:	eb07 0906 	add.w	r9, r7, r6
 80055d2:	d110      	bne.n	80055f6 <__cvt+0x92>
 80055d4:	783b      	ldrb	r3, [r7, #0]
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d10a      	bne.n	80055f0 <__cvt+0x8c>
 80055da:	2200      	movs	r2, #0
 80055dc:	2300      	movs	r3, #0
 80055de:	4620      	mov	r0, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f7fb fa91 	bl	8000b08 <__aeabi_dcmpeq>
 80055e6:	b918      	cbnz	r0, 80055f0 <__cvt+0x8c>
 80055e8:	f1c6 0601 	rsb	r6, r6, #1
 80055ec:	f8ca 6000 	str.w	r6, [sl]
 80055f0:	f8da 3000 	ldr.w	r3, [sl]
 80055f4:	4499      	add	r9, r3
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	4620      	mov	r0, r4
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7fb fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8005602:	b108      	cbz	r0, 8005608 <__cvt+0xa4>
 8005604:	f8cd 900c 	str.w	r9, [sp, #12]
 8005608:	2230      	movs	r2, #48	; 0x30
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	454b      	cmp	r3, r9
 800560e:	d307      	bcc.n	8005620 <__cvt+0xbc>
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005614:	1bdb      	subs	r3, r3, r7
 8005616:	4638      	mov	r0, r7
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	b004      	add	sp, #16
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	9103      	str	r1, [sp, #12]
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e7f0      	b.n	800560a <__cvt+0xa6>

08005628 <__exponent>:
 8005628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800562a:	4603      	mov	r3, r0
 800562c:	2900      	cmp	r1, #0
 800562e:	bfb8      	it	lt
 8005630:	4249      	neglt	r1, r1
 8005632:	f803 2b02 	strb.w	r2, [r3], #2
 8005636:	bfb4      	ite	lt
 8005638:	222d      	movlt	r2, #45	; 0x2d
 800563a:	222b      	movge	r2, #43	; 0x2b
 800563c:	2909      	cmp	r1, #9
 800563e:	7042      	strb	r2, [r0, #1]
 8005640:	dd2a      	ble.n	8005698 <__exponent+0x70>
 8005642:	f10d 0407 	add.w	r4, sp, #7
 8005646:	46a4      	mov	ip, r4
 8005648:	270a      	movs	r7, #10
 800564a:	46a6      	mov	lr, r4
 800564c:	460a      	mov	r2, r1
 800564e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005652:	fb07 1516 	mls	r5, r7, r6, r1
 8005656:	3530      	adds	r5, #48	; 0x30
 8005658:	2a63      	cmp	r2, #99	; 0x63
 800565a:	f104 34ff 	add.w	r4, r4, #4294967295
 800565e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005662:	4631      	mov	r1, r6
 8005664:	dcf1      	bgt.n	800564a <__exponent+0x22>
 8005666:	3130      	adds	r1, #48	; 0x30
 8005668:	f1ae 0502 	sub.w	r5, lr, #2
 800566c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005670:	1c44      	adds	r4, r0, #1
 8005672:	4629      	mov	r1, r5
 8005674:	4561      	cmp	r1, ip
 8005676:	d30a      	bcc.n	800568e <__exponent+0x66>
 8005678:	f10d 0209 	add.w	r2, sp, #9
 800567c:	eba2 020e 	sub.w	r2, r2, lr
 8005680:	4565      	cmp	r5, ip
 8005682:	bf88      	it	hi
 8005684:	2200      	movhi	r2, #0
 8005686:	4413      	add	r3, r2
 8005688:	1a18      	subs	r0, r3, r0
 800568a:	b003      	add	sp, #12
 800568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005692:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005696:	e7ed      	b.n	8005674 <__exponent+0x4c>
 8005698:	2330      	movs	r3, #48	; 0x30
 800569a:	3130      	adds	r1, #48	; 0x30
 800569c:	7083      	strb	r3, [r0, #2]
 800569e:	70c1      	strb	r1, [r0, #3]
 80056a0:	1d03      	adds	r3, r0, #4
 80056a2:	e7f1      	b.n	8005688 <__exponent+0x60>

080056a4 <_printf_float>:
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	ed2d 8b02 	vpush	{d8}
 80056ac:	b08d      	sub	sp, #52	; 0x34
 80056ae:	460c      	mov	r4, r1
 80056b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056b4:	4616      	mov	r6, r2
 80056b6:	461f      	mov	r7, r3
 80056b8:	4605      	mov	r5, r0
 80056ba:	f001 fd3f 	bl	800713c <_localeconv_r>
 80056be:	f8d0 a000 	ldr.w	sl, [r0]
 80056c2:	4650      	mov	r0, sl
 80056c4:	f7fa fda4 	bl	8000210 <strlen>
 80056c8:	2300      	movs	r3, #0
 80056ca:	930a      	str	r3, [sp, #40]	; 0x28
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	f8d8 3000 	ldr.w	r3, [r8]
 80056d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056d8:	3307      	adds	r3, #7
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	f103 0208 	add.w	r2, r3, #8
 80056e2:	f8c8 2000 	str.w	r2, [r8]
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056f6:	9307      	str	r3, [sp, #28]
 80056f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80056fc:	ee08 0a10 	vmov	s16, r0
 8005700:	4b9f      	ldr	r3, [pc, #636]	; (8005980 <_printf_float+0x2dc>)
 8005702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005706:	f04f 32ff 	mov.w	r2, #4294967295
 800570a:	f7fb fa2f 	bl	8000b6c <__aeabi_dcmpun>
 800570e:	bb88      	cbnz	r0, 8005774 <_printf_float+0xd0>
 8005710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005714:	4b9a      	ldr	r3, [pc, #616]	; (8005980 <_printf_float+0x2dc>)
 8005716:	f04f 32ff 	mov.w	r2, #4294967295
 800571a:	f7fb fa09 	bl	8000b30 <__aeabi_dcmple>
 800571e:	bb48      	cbnz	r0, 8005774 <_printf_float+0xd0>
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	4640      	mov	r0, r8
 8005726:	4649      	mov	r1, r9
 8005728:	f7fb f9f8 	bl	8000b1c <__aeabi_dcmplt>
 800572c:	b110      	cbz	r0, 8005734 <_printf_float+0x90>
 800572e:	232d      	movs	r3, #45	; 0x2d
 8005730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005734:	4b93      	ldr	r3, [pc, #588]	; (8005984 <_printf_float+0x2e0>)
 8005736:	4894      	ldr	r0, [pc, #592]	; (8005988 <_printf_float+0x2e4>)
 8005738:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800573c:	bf94      	ite	ls
 800573e:	4698      	movls	r8, r3
 8005740:	4680      	movhi	r8, r0
 8005742:	2303      	movs	r3, #3
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	9b05      	ldr	r3, [sp, #20]
 8005748:	f023 0204 	bic.w	r2, r3, #4
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	f04f 0900 	mov.w	r9, #0
 8005752:	9700      	str	r7, [sp, #0]
 8005754:	4633      	mov	r3, r6
 8005756:	aa0b      	add	r2, sp, #44	; 0x2c
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 f9d8 	bl	8005b10 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	f040 8090 	bne.w	8005886 <_printf_float+0x1e2>
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	b00d      	add	sp, #52	; 0x34
 800576c:	ecbd 8b02 	vpop	{d8}
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	4640      	mov	r0, r8
 800577a:	4649      	mov	r1, r9
 800577c:	f7fb f9f6 	bl	8000b6c <__aeabi_dcmpun>
 8005780:	b140      	cbz	r0, 8005794 <_printf_float+0xf0>
 8005782:	464b      	mov	r3, r9
 8005784:	2b00      	cmp	r3, #0
 8005786:	bfbc      	itt	lt
 8005788:	232d      	movlt	r3, #45	; 0x2d
 800578a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800578e:	487f      	ldr	r0, [pc, #508]	; (800598c <_printf_float+0x2e8>)
 8005790:	4b7f      	ldr	r3, [pc, #508]	; (8005990 <_printf_float+0x2ec>)
 8005792:	e7d1      	b.n	8005738 <_printf_float+0x94>
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800579a:	9206      	str	r2, [sp, #24]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	d13f      	bne.n	8005820 <_printf_float+0x17c>
 80057a0:	2306      	movs	r3, #6
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	9b05      	ldr	r3, [sp, #20]
 80057a6:	6861      	ldr	r1, [r4, #4]
 80057a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057ac:	2300      	movs	r3, #0
 80057ae:	9303      	str	r3, [sp, #12]
 80057b0:	ab0a      	add	r3, sp, #40	; 0x28
 80057b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057b6:	ab09      	add	r3, sp, #36	; 0x24
 80057b8:	ec49 8b10 	vmov	d0, r8, r9
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff fecd 	bl	8005564 <__cvt>
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057ce:	2b47      	cmp	r3, #71	; 0x47
 80057d0:	4680      	mov	r8, r0
 80057d2:	d108      	bne.n	80057e6 <_printf_float+0x142>
 80057d4:	1cc8      	adds	r0, r1, #3
 80057d6:	db02      	blt.n	80057de <_printf_float+0x13a>
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	4299      	cmp	r1, r3
 80057dc:	dd41      	ble.n	8005862 <_printf_float+0x1be>
 80057de:	f1ab 0b02 	sub.w	fp, fp, #2
 80057e2:	fa5f fb8b 	uxtb.w	fp, fp
 80057e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057ea:	d820      	bhi.n	800582e <_printf_float+0x18a>
 80057ec:	3901      	subs	r1, #1
 80057ee:	465a      	mov	r2, fp
 80057f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057f4:	9109      	str	r1, [sp, #36]	; 0x24
 80057f6:	f7ff ff17 	bl	8005628 <__exponent>
 80057fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057fc:	1813      	adds	r3, r2, r0
 80057fe:	2a01      	cmp	r2, #1
 8005800:	4681      	mov	r9, r0
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	dc02      	bgt.n	800580c <_printf_float+0x168>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	07d2      	lsls	r2, r2, #31
 800580a:	d501      	bpl.n	8005810 <_printf_float+0x16c>
 800580c:	3301      	adds	r3, #1
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005814:	2b00      	cmp	r3, #0
 8005816:	d09c      	beq.n	8005752 <_printf_float+0xae>
 8005818:	232d      	movs	r3, #45	; 0x2d
 800581a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800581e:	e798      	b.n	8005752 <_printf_float+0xae>
 8005820:	9a06      	ldr	r2, [sp, #24]
 8005822:	2a47      	cmp	r2, #71	; 0x47
 8005824:	d1be      	bne.n	80057a4 <_printf_float+0x100>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1bc      	bne.n	80057a4 <_printf_float+0x100>
 800582a:	2301      	movs	r3, #1
 800582c:	e7b9      	b.n	80057a2 <_printf_float+0xfe>
 800582e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005832:	d118      	bne.n	8005866 <_printf_float+0x1c2>
 8005834:	2900      	cmp	r1, #0
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	dd0b      	ble.n	8005852 <_printf_float+0x1ae>
 800583a:	6121      	str	r1, [r4, #16]
 800583c:	b913      	cbnz	r3, 8005844 <_printf_float+0x1a0>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	07d0      	lsls	r0, r2, #31
 8005842:	d502      	bpl.n	800584a <_printf_float+0x1a6>
 8005844:	3301      	adds	r3, #1
 8005846:	440b      	add	r3, r1
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	65a1      	str	r1, [r4, #88]	; 0x58
 800584c:	f04f 0900 	mov.w	r9, #0
 8005850:	e7de      	b.n	8005810 <_printf_float+0x16c>
 8005852:	b913      	cbnz	r3, 800585a <_printf_float+0x1b6>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	07d2      	lsls	r2, r2, #31
 8005858:	d501      	bpl.n	800585e <_printf_float+0x1ba>
 800585a:	3302      	adds	r3, #2
 800585c:	e7f4      	b.n	8005848 <_printf_float+0x1a4>
 800585e:	2301      	movs	r3, #1
 8005860:	e7f2      	b.n	8005848 <_printf_float+0x1a4>
 8005862:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005868:	4299      	cmp	r1, r3
 800586a:	db05      	blt.n	8005878 <_printf_float+0x1d4>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	6121      	str	r1, [r4, #16]
 8005870:	07d8      	lsls	r0, r3, #31
 8005872:	d5ea      	bpl.n	800584a <_printf_float+0x1a6>
 8005874:	1c4b      	adds	r3, r1, #1
 8005876:	e7e7      	b.n	8005848 <_printf_float+0x1a4>
 8005878:	2900      	cmp	r1, #0
 800587a:	bfd4      	ite	le
 800587c:	f1c1 0202 	rsble	r2, r1, #2
 8005880:	2201      	movgt	r2, #1
 8005882:	4413      	add	r3, r2
 8005884:	e7e0      	b.n	8005848 <_printf_float+0x1a4>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	055a      	lsls	r2, r3, #21
 800588a:	d407      	bmi.n	800589c <_printf_float+0x1f8>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	4642      	mov	r2, r8
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	d12c      	bne.n	80058f4 <_printf_float+0x250>
 800589a:	e764      	b.n	8005766 <_printf_float+0xc2>
 800589c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058a0:	f240 80e0 	bls.w	8005a64 <_printf_float+0x3c0>
 80058a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fb f92c 	bl	8000b08 <__aeabi_dcmpeq>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d034      	beq.n	800591e <_printf_float+0x27a>
 80058b4:	4a37      	ldr	r2, [pc, #220]	; (8005994 <_printf_float+0x2f0>)
 80058b6:	2301      	movs	r3, #1
 80058b8:	4631      	mov	r1, r6
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b8      	blx	r7
 80058be:	3001      	adds	r0, #1
 80058c0:	f43f af51 	beq.w	8005766 <_printf_float+0xc2>
 80058c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c8:	429a      	cmp	r2, r3
 80058ca:	db02      	blt.n	80058d2 <_printf_float+0x22e>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07d8      	lsls	r0, r3, #31
 80058d0:	d510      	bpl.n	80058f4 <_printf_float+0x250>
 80058d2:	ee18 3a10 	vmov	r3, s16
 80058d6:	4652      	mov	r2, sl
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f af41 	beq.w	8005766 <_printf_float+0xc2>
 80058e4:	f04f 0800 	mov.w	r8, #0
 80058e8:	f104 091a 	add.w	r9, r4, #26
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	3b01      	subs	r3, #1
 80058f0:	4543      	cmp	r3, r8
 80058f2:	dc09      	bgt.n	8005908 <_printf_float+0x264>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	079b      	lsls	r3, r3, #30
 80058f8:	f100 8105 	bmi.w	8005b06 <_printf_float+0x462>
 80058fc:	68e0      	ldr	r0, [r4, #12]
 80058fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005900:	4298      	cmp	r0, r3
 8005902:	bfb8      	it	lt
 8005904:	4618      	movlt	r0, r3
 8005906:	e730      	b.n	800576a <_printf_float+0xc6>
 8005908:	2301      	movs	r3, #1
 800590a:	464a      	mov	r2, r9
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	f43f af27 	beq.w	8005766 <_printf_float+0xc2>
 8005918:	f108 0801 	add.w	r8, r8, #1
 800591c:	e7e6      	b.n	80058ec <_printf_float+0x248>
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	dc39      	bgt.n	8005998 <_printf_float+0x2f4>
 8005924:	4a1b      	ldr	r2, [pc, #108]	; (8005994 <_printf_float+0x2f0>)
 8005926:	2301      	movs	r3, #1
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f af19 	beq.w	8005766 <_printf_float+0xc2>
 8005934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005938:	4313      	orrs	r3, r2
 800593a:	d102      	bne.n	8005942 <_printf_float+0x29e>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07d9      	lsls	r1, r3, #31
 8005940:	d5d8      	bpl.n	80058f4 <_printf_float+0x250>
 8005942:	ee18 3a10 	vmov	r3, s16
 8005946:	4652      	mov	r2, sl
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	f43f af09 	beq.w	8005766 <_printf_float+0xc2>
 8005954:	f04f 0900 	mov.w	r9, #0
 8005958:	f104 0a1a 	add.w	sl, r4, #26
 800595c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595e:	425b      	negs	r3, r3
 8005960:	454b      	cmp	r3, r9
 8005962:	dc01      	bgt.n	8005968 <_printf_float+0x2c4>
 8005964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005966:	e792      	b.n	800588e <_printf_float+0x1ea>
 8005968:	2301      	movs	r3, #1
 800596a:	4652      	mov	r2, sl
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f aef7 	beq.w	8005766 <_printf_float+0xc2>
 8005978:	f109 0901 	add.w	r9, r9, #1
 800597c:	e7ee      	b.n	800595c <_printf_float+0x2b8>
 800597e:	bf00      	nop
 8005980:	7fefffff 	.word	0x7fefffff
 8005984:	08009948 	.word	0x08009948
 8005988:	0800994c 	.word	0x0800994c
 800598c:	08009954 	.word	0x08009954
 8005990:	08009950 	.word	0x08009950
 8005994:	08009958 	.word	0x08009958
 8005998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800599a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800599c:	429a      	cmp	r2, r3
 800599e:	bfa8      	it	ge
 80059a0:	461a      	movge	r2, r3
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	4691      	mov	r9, r2
 80059a6:	dc37      	bgt.n	8005a18 <_printf_float+0x374>
 80059a8:	f04f 0b00 	mov.w	fp, #0
 80059ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059b0:	f104 021a 	add.w	r2, r4, #26
 80059b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059b6:	9305      	str	r3, [sp, #20]
 80059b8:	eba3 0309 	sub.w	r3, r3, r9
 80059bc:	455b      	cmp	r3, fp
 80059be:	dc33      	bgt.n	8005a28 <_printf_float+0x384>
 80059c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c4:	429a      	cmp	r2, r3
 80059c6:	db3b      	blt.n	8005a40 <_printf_float+0x39c>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	07da      	lsls	r2, r3, #31
 80059cc:	d438      	bmi.n	8005a40 <_printf_float+0x39c>
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	9a05      	ldr	r2, [sp, #20]
 80059d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d4:	1a9a      	subs	r2, r3, r2
 80059d6:	eba3 0901 	sub.w	r9, r3, r1
 80059da:	4591      	cmp	r9, r2
 80059dc:	bfa8      	it	ge
 80059de:	4691      	movge	r9, r2
 80059e0:	f1b9 0f00 	cmp.w	r9, #0
 80059e4:	dc35      	bgt.n	8005a52 <_printf_float+0x3ae>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ee:	f104 0a1a 	add.w	sl, r4, #26
 80059f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	eba3 0309 	sub.w	r3, r3, r9
 80059fc:	4543      	cmp	r3, r8
 80059fe:	f77f af79 	ble.w	80058f4 <_printf_float+0x250>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4652      	mov	r2, sl
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f43f aeaa 	beq.w	8005766 <_printf_float+0xc2>
 8005a12:	f108 0801 	add.w	r8, r8, #1
 8005a16:	e7ec      	b.n	80059f2 <_printf_float+0x34e>
 8005a18:	4613      	mov	r3, r2
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	d1c0      	bne.n	80059a8 <_printf_float+0x304>
 8005a26:	e69e      	b.n	8005766 <_printf_float+0xc2>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	9205      	str	r2, [sp, #20]
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f ae97 	beq.w	8005766 <_printf_float+0xc2>
 8005a38:	9a05      	ldr	r2, [sp, #20]
 8005a3a:	f10b 0b01 	add.w	fp, fp, #1
 8005a3e:	e7b9      	b.n	80059b4 <_printf_float+0x310>
 8005a40:	ee18 3a10 	vmov	r3, s16
 8005a44:	4652      	mov	r2, sl
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1be      	bne.n	80059ce <_printf_float+0x32a>
 8005a50:	e689      	b.n	8005766 <_printf_float+0xc2>
 8005a52:	9a05      	ldr	r2, [sp, #20]
 8005a54:	464b      	mov	r3, r9
 8005a56:	4442      	add	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d1c1      	bne.n	80059e6 <_printf_float+0x342>
 8005a62:	e680      	b.n	8005766 <_printf_float+0xc2>
 8005a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a66:	2a01      	cmp	r2, #1
 8005a68:	dc01      	bgt.n	8005a6e <_printf_float+0x3ca>
 8005a6a:	07db      	lsls	r3, r3, #31
 8005a6c:	d538      	bpl.n	8005ae0 <_printf_float+0x43c>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4642      	mov	r2, r8
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f ae74 	beq.w	8005766 <_printf_float+0xc2>
 8005a7e:	ee18 3a10 	vmov	r3, s16
 8005a82:	4652      	mov	r2, sl
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f ae6b 	beq.w	8005766 <_printf_float+0xc2>
 8005a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a94:	2200      	movs	r2, #0
 8005a96:	2300      	movs	r3, #0
 8005a98:	f7fb f836 	bl	8000b08 <__aeabi_dcmpeq>
 8005a9c:	b9d8      	cbnz	r0, 8005ad6 <_printf_float+0x432>
 8005a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa0:	f108 0201 	add.w	r2, r8, #1
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	d10e      	bne.n	8005ace <_printf_float+0x42a>
 8005ab0:	e659      	b.n	8005766 <_printf_float+0xc2>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f ae52 	beq.w	8005766 <_printf_float+0xc2>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	4543      	cmp	r3, r8
 8005acc:	dcf1      	bgt.n	8005ab2 <_printf_float+0x40e>
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ad4:	e6dc      	b.n	8005890 <_printf_float+0x1ec>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	f104 0a1a 	add.w	sl, r4, #26
 8005ade:	e7f2      	b.n	8005ac6 <_printf_float+0x422>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	e7df      	b.n	8005aa6 <_printf_float+0x402>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	464a      	mov	r2, r9
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f ae38 	beq.w	8005766 <_printf_float+0xc2>
 8005af6:	f108 0801 	add.w	r8, r8, #1
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005afe:	1a5b      	subs	r3, r3, r1
 8005b00:	4543      	cmp	r3, r8
 8005b02:	dcf0      	bgt.n	8005ae6 <_printf_float+0x442>
 8005b04:	e6fa      	b.n	80058fc <_printf_float+0x258>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	f104 0919 	add.w	r9, r4, #25
 8005b0e:	e7f4      	b.n	8005afa <_printf_float+0x456>

08005b10 <_printf_common>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	4616      	mov	r6, r2
 8005b16:	4699      	mov	r9, r3
 8005b18:	688a      	ldr	r2, [r1, #8]
 8005b1a:	690b      	ldr	r3, [r1, #16]
 8005b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	bfb8      	it	lt
 8005b24:	4613      	movlt	r3, r2
 8005b26:	6033      	str	r3, [r6, #0]
 8005b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b10a      	cbz	r2, 8005b36 <_printf_common+0x26>
 8005b32:	3301      	adds	r3, #1
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	0699      	lsls	r1, r3, #26
 8005b3a:	bf42      	ittt	mi
 8005b3c:	6833      	ldrmi	r3, [r6, #0]
 8005b3e:	3302      	addmi	r3, #2
 8005b40:	6033      	strmi	r3, [r6, #0]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	f015 0506 	ands.w	r5, r5, #6
 8005b48:	d106      	bne.n	8005b58 <_printf_common+0x48>
 8005b4a:	f104 0a19 	add.w	sl, r4, #25
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	6832      	ldr	r2, [r6, #0]
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	dc26      	bgt.n	8005ba6 <_printf_common+0x96>
 8005b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b5c:	1e13      	subs	r3, r2, #0
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	bf18      	it	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	0692      	lsls	r2, r2, #26
 8005b66:	d42b      	bmi.n	8005bc0 <_printf_common+0xb0>
 8005b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4638      	mov	r0, r7
 8005b70:	47c0      	blx	r8
 8005b72:	3001      	adds	r0, #1
 8005b74:	d01e      	beq.n	8005bb4 <_printf_common+0xa4>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	68e5      	ldr	r5, [r4, #12]
 8005b7a:	6832      	ldr	r2, [r6, #0]
 8005b7c:	f003 0306 	and.w	r3, r3, #6
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	bf08      	it	eq
 8005b84:	1aad      	subeq	r5, r5, r2
 8005b86:	68a3      	ldr	r3, [r4, #8]
 8005b88:	6922      	ldr	r2, [r4, #16]
 8005b8a:	bf0c      	ite	eq
 8005b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b90:	2500      	movne	r5, #0
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bfc4      	itt	gt
 8005b96:	1a9b      	subgt	r3, r3, r2
 8005b98:	18ed      	addgt	r5, r5, r3
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	341a      	adds	r4, #26
 8005b9e:	42b5      	cmp	r5, r6
 8005ba0:	d11a      	bne.n	8005bd8 <_printf_common+0xc8>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e008      	b.n	8005bb8 <_printf_common+0xa8>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4652      	mov	r2, sl
 8005baa:	4649      	mov	r1, r9
 8005bac:	4638      	mov	r0, r7
 8005bae:	47c0      	blx	r8
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d103      	bne.n	8005bbc <_printf_common+0xac>
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	e7c6      	b.n	8005b4e <_printf_common+0x3e>
 8005bc0:	18e1      	adds	r1, r4, r3
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	2030      	movs	r0, #48	; 0x30
 8005bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bca:	4422      	add	r2, r4
 8005bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	e7c7      	b.n	8005b68 <_printf_common+0x58>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0e6      	beq.n	8005bb4 <_printf_common+0xa4>
 8005be6:	3601      	adds	r6, #1
 8005be8:	e7d9      	b.n	8005b9e <_printf_common+0x8e>
	...

08005bec <_printf_i>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	7e0f      	ldrb	r7, [r1, #24]
 8005bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bf4:	2f78      	cmp	r7, #120	; 0x78
 8005bf6:	4691      	mov	r9, r2
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c02:	d807      	bhi.n	8005c14 <_printf_i+0x28>
 8005c04:	2f62      	cmp	r7, #98	; 0x62
 8005c06:	d80a      	bhi.n	8005c1e <_printf_i+0x32>
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	f000 80d8 	beq.w	8005dbe <_printf_i+0x1d2>
 8005c0e:	2f58      	cmp	r7, #88	; 0x58
 8005c10:	f000 80a3 	beq.w	8005d5a <_printf_i+0x16e>
 8005c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c1c:	e03a      	b.n	8005c94 <_printf_i+0xa8>
 8005c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c22:	2b15      	cmp	r3, #21
 8005c24:	d8f6      	bhi.n	8005c14 <_printf_i+0x28>
 8005c26:	a101      	add	r1, pc, #4	; (adr r1, 8005c2c <_printf_i+0x40>)
 8005c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c2c:	08005c85 	.word	0x08005c85
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005c15 	.word	0x08005c15
 8005c38:	08005c15 	.word	0x08005c15
 8005c3c:	08005c15 	.word	0x08005c15
 8005c40:	08005c15 	.word	0x08005c15
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005c15 	.word	0x08005c15
 8005c4c:	08005c15 	.word	0x08005c15
 8005c50:	08005c15 	.word	0x08005c15
 8005c54:	08005c15 	.word	0x08005c15
 8005c58:	08005da5 	.word	0x08005da5
 8005c5c:	08005cc9 	.word	0x08005cc9
 8005c60:	08005d87 	.word	0x08005d87
 8005c64:	08005c15 	.word	0x08005c15
 8005c68:	08005c15 	.word	0x08005c15
 8005c6c:	08005dc7 	.word	0x08005dc7
 8005c70:	08005c15 	.word	0x08005c15
 8005c74:	08005cc9 	.word	0x08005cc9
 8005c78:	08005c15 	.word	0x08005c15
 8005c7c:	08005c15 	.word	0x08005c15
 8005c80:	08005d8f 	.word	0x08005d8f
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	602a      	str	r2, [r5, #0]
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0a3      	b.n	8005de0 <_printf_i+0x1f4>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	6829      	ldr	r1, [r5, #0]
 8005c9c:	0606      	lsls	r6, r0, #24
 8005c9e:	f101 0304 	add.w	r3, r1, #4
 8005ca2:	d50a      	bpl.n	8005cba <_printf_i+0xce>
 8005ca4:	680e      	ldr	r6, [r1, #0]
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	2e00      	cmp	r6, #0
 8005caa:	da03      	bge.n	8005cb4 <_printf_i+0xc8>
 8005cac:	232d      	movs	r3, #45	; 0x2d
 8005cae:	4276      	negs	r6, r6
 8005cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb4:	485e      	ldr	r0, [pc, #376]	; (8005e30 <_printf_i+0x244>)
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	e019      	b.n	8005cee <_printf_i+0x102>
 8005cba:	680e      	ldr	r6, [r1, #0]
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cc2:	bf18      	it	ne
 8005cc4:	b236      	sxthne	r6, r6
 8005cc6:	e7ef      	b.n	8005ca8 <_printf_i+0xbc>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	1d19      	adds	r1, r3, #4
 8005cce:	6029      	str	r1, [r5, #0]
 8005cd0:	0601      	lsls	r1, r0, #24
 8005cd2:	d501      	bpl.n	8005cd8 <_printf_i+0xec>
 8005cd4:	681e      	ldr	r6, [r3, #0]
 8005cd6:	e002      	b.n	8005cde <_printf_i+0xf2>
 8005cd8:	0646      	lsls	r6, r0, #25
 8005cda:	d5fb      	bpl.n	8005cd4 <_printf_i+0xe8>
 8005cdc:	881e      	ldrh	r6, [r3, #0]
 8005cde:	4854      	ldr	r0, [pc, #336]	; (8005e30 <_printf_i+0x244>)
 8005ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2308      	moveq	r3, #8
 8005ce6:	230a      	movne	r3, #10
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cee:	6865      	ldr	r5, [r4, #4]
 8005cf0:	60a5      	str	r5, [r4, #8]
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	bfa2      	ittt	ge
 8005cf6:	6821      	ldrge	r1, [r4, #0]
 8005cf8:	f021 0104 	bicge.w	r1, r1, #4
 8005cfc:	6021      	strge	r1, [r4, #0]
 8005cfe:	b90e      	cbnz	r6, 8005d04 <_printf_i+0x118>
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	d04d      	beq.n	8005da0 <_printf_i+0x1b4>
 8005d04:	4615      	mov	r5, r2
 8005d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d0e:	5dc7      	ldrb	r7, [r0, r7]
 8005d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d14:	4637      	mov	r7, r6
 8005d16:	42bb      	cmp	r3, r7
 8005d18:	460e      	mov	r6, r1
 8005d1a:	d9f4      	bls.n	8005d06 <_printf_i+0x11a>
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d10b      	bne.n	8005d38 <_printf_i+0x14c>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	07de      	lsls	r6, r3, #31
 8005d24:	d508      	bpl.n	8005d38 <_printf_i+0x14c>
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	6861      	ldr	r1, [r4, #4]
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	bfde      	ittt	le
 8005d2e:	2330      	movle	r3, #48	; 0x30
 8005d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d38:	1b52      	subs	r2, r2, r5
 8005d3a:	6122      	str	r2, [r4, #16]
 8005d3c:	f8cd a000 	str.w	sl, [sp]
 8005d40:	464b      	mov	r3, r9
 8005d42:	aa03      	add	r2, sp, #12
 8005d44:	4621      	mov	r1, r4
 8005d46:	4640      	mov	r0, r8
 8005d48:	f7ff fee2 	bl	8005b10 <_printf_common>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d14c      	bne.n	8005dea <_printf_i+0x1fe>
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	b004      	add	sp, #16
 8005d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5a:	4835      	ldr	r0, [pc, #212]	; (8005e30 <_printf_i+0x244>)
 8005d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d60:	6829      	ldr	r1, [r5, #0]
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d68:	6029      	str	r1, [r5, #0]
 8005d6a:	061d      	lsls	r5, r3, #24
 8005d6c:	d514      	bpl.n	8005d98 <_printf_i+0x1ac>
 8005d6e:	07df      	lsls	r7, r3, #31
 8005d70:	bf44      	itt	mi
 8005d72:	f043 0320 	orrmi.w	r3, r3, #32
 8005d76:	6023      	strmi	r3, [r4, #0]
 8005d78:	b91e      	cbnz	r6, 8005d82 <_printf_i+0x196>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f023 0320 	bic.w	r3, r3, #32
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	2310      	movs	r3, #16
 8005d84:	e7b0      	b.n	8005ce8 <_printf_i+0xfc>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f043 0320 	orr.w	r3, r3, #32
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	2378      	movs	r3, #120	; 0x78
 8005d90:	4828      	ldr	r0, [pc, #160]	; (8005e34 <_printf_i+0x248>)
 8005d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d96:	e7e3      	b.n	8005d60 <_printf_i+0x174>
 8005d98:	0659      	lsls	r1, r3, #25
 8005d9a:	bf48      	it	mi
 8005d9c:	b2b6      	uxthmi	r6, r6
 8005d9e:	e7e6      	b.n	8005d6e <_printf_i+0x182>
 8005da0:	4615      	mov	r5, r2
 8005da2:	e7bb      	b.n	8005d1c <_printf_i+0x130>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	6826      	ldr	r6, [r4, #0]
 8005da8:	6961      	ldr	r1, [r4, #20]
 8005daa:	1d18      	adds	r0, r3, #4
 8005dac:	6028      	str	r0, [r5, #0]
 8005dae:	0635      	lsls	r5, r6, #24
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	d501      	bpl.n	8005db8 <_printf_i+0x1cc>
 8005db4:	6019      	str	r1, [r3, #0]
 8005db6:	e002      	b.n	8005dbe <_printf_i+0x1d2>
 8005db8:	0670      	lsls	r0, r6, #25
 8005dba:	d5fb      	bpl.n	8005db4 <_printf_i+0x1c8>
 8005dbc:	8019      	strh	r1, [r3, #0]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	4615      	mov	r5, r2
 8005dc4:	e7ba      	b.n	8005d3c <_printf_i+0x150>
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	602a      	str	r2, [r5, #0]
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f7fa fa24 	bl	8000220 <memchr>
 8005dd8:	b108      	cbz	r0, 8005dde <_printf_i+0x1f2>
 8005dda:	1b40      	subs	r0, r0, r5
 8005ddc:	6060      	str	r0, [r4, #4]
 8005dde:	6863      	ldr	r3, [r4, #4]
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	2300      	movs	r3, #0
 8005de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de8:	e7a8      	b.n	8005d3c <_printf_i+0x150>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	462a      	mov	r2, r5
 8005dee:	4649      	mov	r1, r9
 8005df0:	4640      	mov	r0, r8
 8005df2:	47d0      	blx	sl
 8005df4:	3001      	adds	r0, #1
 8005df6:	d0ab      	beq.n	8005d50 <_printf_i+0x164>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	079b      	lsls	r3, r3, #30
 8005dfc:	d413      	bmi.n	8005e26 <_printf_i+0x23a>
 8005dfe:	68e0      	ldr	r0, [r4, #12]
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	4298      	cmp	r0, r3
 8005e04:	bfb8      	it	lt
 8005e06:	4618      	movlt	r0, r3
 8005e08:	e7a4      	b.n	8005d54 <_printf_i+0x168>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	4649      	mov	r1, r9
 8005e10:	4640      	mov	r0, r8
 8005e12:	47d0      	blx	sl
 8005e14:	3001      	adds	r0, #1
 8005e16:	d09b      	beq.n	8005d50 <_printf_i+0x164>
 8005e18:	3501      	adds	r5, #1
 8005e1a:	68e3      	ldr	r3, [r4, #12]
 8005e1c:	9903      	ldr	r1, [sp, #12]
 8005e1e:	1a5b      	subs	r3, r3, r1
 8005e20:	42ab      	cmp	r3, r5
 8005e22:	dcf2      	bgt.n	8005e0a <_printf_i+0x21e>
 8005e24:	e7eb      	b.n	8005dfe <_printf_i+0x212>
 8005e26:	2500      	movs	r5, #0
 8005e28:	f104 0619 	add.w	r6, r4, #25
 8005e2c:	e7f5      	b.n	8005e1a <_printf_i+0x22e>
 8005e2e:	bf00      	nop
 8005e30:	0800995a 	.word	0x0800995a
 8005e34:	0800996b 	.word	0x0800996b

08005e38 <iprintf>:
 8005e38:	b40f      	push	{r0, r1, r2, r3}
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <iprintf+0x2c>)
 8005e3c:	b513      	push	{r0, r1, r4, lr}
 8005e3e:	681c      	ldr	r4, [r3, #0]
 8005e40:	b124      	cbz	r4, 8005e4c <iprintf+0x14>
 8005e42:	69a3      	ldr	r3, [r4, #24]
 8005e44:	b913      	cbnz	r3, 8005e4c <iprintf+0x14>
 8005e46:	4620      	mov	r0, r4
 8005e48:	f001 f8da 	bl	8007000 <__sinit>
 8005e4c:	ab05      	add	r3, sp, #20
 8005e4e:	9a04      	ldr	r2, [sp, #16]
 8005e50:	68a1      	ldr	r1, [r4, #8]
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	4620      	mov	r0, r4
 8005e56:	f001 fe97 	bl	8007b88 <_vfiprintf_r>
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr
 8005e64:	2000000c 	.word	0x2000000c

08005e68 <_puts_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	460e      	mov	r6, r1
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b118      	cbz	r0, 8005e78 <_puts_r+0x10>
 8005e70:	6983      	ldr	r3, [r0, #24]
 8005e72:	b90b      	cbnz	r3, 8005e78 <_puts_r+0x10>
 8005e74:	f001 f8c4 	bl	8007000 <__sinit>
 8005e78:	69ab      	ldr	r3, [r5, #24]
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	b913      	cbnz	r3, 8005e84 <_puts_r+0x1c>
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f001 f8be 	bl	8007000 <__sinit>
 8005e84:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <_puts_r+0xd0>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d120      	bne.n	8005ecc <_puts_r+0x64>
 8005e8a:	686c      	ldr	r4, [r5, #4]
 8005e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_puts_r+0x36>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	0598      	lsls	r0, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_puts_r+0x36>
 8005e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9a:	f001 f954 	bl	8007146 <__retarget_lock_acquire_recursive>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d51d      	bpl.n	8005ee0 <_puts_r+0x78>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	b1db      	cbz	r3, 8005ee0 <_puts_r+0x78>
 8005ea8:	3e01      	subs	r6, #1
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60a3      	str	r3, [r4, #8]
 8005eb4:	bb39      	cbnz	r1, 8005f06 <_puts_r+0x9e>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da38      	bge.n	8005f2c <_puts_r+0xc4>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	210a      	movs	r1, #10
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f848 	bl	8005f54 <__swbuf_r>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d011      	beq.n	8005eec <_puts_r+0x84>
 8005ec8:	250a      	movs	r5, #10
 8005eca:	e011      	b.n	8005ef0 <_puts_r+0x88>
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <_puts_r+0xd4>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d101      	bne.n	8005ed6 <_puts_r+0x6e>
 8005ed2:	68ac      	ldr	r4, [r5, #8]
 8005ed4:	e7da      	b.n	8005e8c <_puts_r+0x24>
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <_puts_r+0xd8>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	bf08      	it	eq
 8005edc:	68ec      	ldreq	r4, [r5, #12]
 8005ede:	e7d5      	b.n	8005e8c <_puts_r+0x24>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f888 	bl	8005ff8 <__swsetup_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d0dd      	beq.n	8005ea8 <_puts_r+0x40>
 8005eec:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d405      	bmi.n	8005f02 <_puts_r+0x9a>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	d402      	bmi.n	8005f02 <_puts_r+0x9a>
 8005efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efe:	f001 f923 	bl	8007148 <__retarget_lock_release_recursive>
 8005f02:	4628      	mov	r0, r5
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da04      	bge.n	8005f14 <_puts_r+0xac>
 8005f0a:	69a2      	ldr	r2, [r4, #24]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dc06      	bgt.n	8005f1e <_puts_r+0xb6>
 8005f10:	290a      	cmp	r1, #10
 8005f12:	d004      	beq.n	8005f1e <_puts_r+0xb6>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	7019      	strb	r1, [r3, #0]
 8005f1c:	e7c5      	b.n	8005eaa <_puts_r+0x42>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f817 	bl	8005f54 <__swbuf_r>
 8005f26:	3001      	adds	r0, #1
 8005f28:	d1bf      	bne.n	8005eaa <_puts_r+0x42>
 8005f2a:	e7df      	b.n	8005eec <_puts_r+0x84>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	250a      	movs	r5, #10
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	701d      	strb	r5, [r3, #0]
 8005f36:	e7db      	b.n	8005ef0 <_puts_r+0x88>
 8005f38:	08009a2c 	.word	0x08009a2c
 8005f3c:	08009a4c 	.word	0x08009a4c
 8005f40:	08009a0c 	.word	0x08009a0c

08005f44 <puts>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <puts+0xc>)
 8005f46:	4601      	mov	r1, r0
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	f7ff bf8d 	b.w	8005e68 <_puts_r>
 8005f4e:	bf00      	nop
 8005f50:	2000000c 	.word	0x2000000c

08005f54 <__swbuf_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	460e      	mov	r6, r1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b118      	cbz	r0, 8005f66 <__swbuf_r+0x12>
 8005f5e:	6983      	ldr	r3, [r0, #24]
 8005f60:	b90b      	cbnz	r3, 8005f66 <__swbuf_r+0x12>
 8005f62:	f001 f84d 	bl	8007000 <__sinit>
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <__swbuf_r+0x98>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d12b      	bne.n	8005fc4 <__swbuf_r+0x70>
 8005f6c:	686c      	ldr	r4, [r5, #4]
 8005f6e:	69a3      	ldr	r3, [r4, #24]
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	071a      	lsls	r2, r3, #28
 8005f76:	d52f      	bpl.n	8005fd8 <__swbuf_r+0x84>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	b36b      	cbz	r3, 8005fd8 <__swbuf_r+0x84>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1ac0      	subs	r0, r0, r3
 8005f82:	6963      	ldr	r3, [r4, #20]
 8005f84:	b2f6      	uxtb	r6, r6
 8005f86:	4283      	cmp	r3, r0
 8005f88:	4637      	mov	r7, r6
 8005f8a:	dc04      	bgt.n	8005f96 <__swbuf_r+0x42>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 ffa2 	bl	8006ed8 <_fflush_r>
 8005f94:	bb30      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	6022      	str	r2, [r4, #0]
 8005fa2:	701e      	strb	r6, [r3, #0]
 8005fa4:	6963      	ldr	r3, [r4, #20]
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	d004      	beq.n	8005fb6 <__swbuf_r+0x62>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d506      	bpl.n	8005fc0 <__swbuf_r+0x6c>
 8005fb2:	2e0a      	cmp	r6, #10
 8005fb4:	d104      	bne.n	8005fc0 <__swbuf_r+0x6c>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 ff8d 	bl	8006ed8 <_fflush_r>
 8005fbe:	b988      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <__swbuf_r+0x9c>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d101      	bne.n	8005fce <__swbuf_r+0x7a>
 8005fca:	68ac      	ldr	r4, [r5, #8]
 8005fcc:	e7cf      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <__swbuf_r+0xa0>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	bf08      	it	eq
 8005fd4:	68ec      	ldreq	r4, [r5, #12]
 8005fd6:	e7ca      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 f80c 	bl	8005ff8 <__swsetup_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d0cb      	beq.n	8005f7c <__swbuf_r+0x28>
 8005fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8005fe8:	e7ea      	b.n	8005fc0 <__swbuf_r+0x6c>
 8005fea:	bf00      	nop
 8005fec:	08009a2c 	.word	0x08009a2c
 8005ff0:	08009a4c 	.word	0x08009a4c
 8005ff4:	08009a0c 	.word	0x08009a0c

08005ff8 <__swsetup_r>:
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <__swsetup_r+0xcc>)
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	4606      	mov	r6, r0
 8006000:	460c      	mov	r4, r1
 8006002:	b125      	cbz	r5, 800600e <__swsetup_r+0x16>
 8006004:	69ab      	ldr	r3, [r5, #24]
 8006006:	b913      	cbnz	r3, 800600e <__swsetup_r+0x16>
 8006008:	4628      	mov	r0, r5
 800600a:	f000 fff9 	bl	8007000 <__sinit>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <__swsetup_r+0xd0>)
 8006010:	429c      	cmp	r4, r3
 8006012:	d10f      	bne.n	8006034 <__swsetup_r+0x3c>
 8006014:	686c      	ldr	r4, [r5, #4]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601c:	0719      	lsls	r1, r3, #28
 800601e:	d42c      	bmi.n	800607a <__swsetup_r+0x82>
 8006020:	06dd      	lsls	r5, r3, #27
 8006022:	d411      	bmi.n	8006048 <__swsetup_r+0x50>
 8006024:	2309      	movs	r3, #9
 8006026:	6033      	str	r3, [r6, #0]
 8006028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	e03e      	b.n	80060b2 <__swsetup_r+0xba>
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <__swsetup_r+0xd4>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d101      	bne.n	800603e <__swsetup_r+0x46>
 800603a:	68ac      	ldr	r4, [r5, #8]
 800603c:	e7eb      	b.n	8006016 <__swsetup_r+0x1e>
 800603e:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <__swsetup_r+0xd8>)
 8006040:	429c      	cmp	r4, r3
 8006042:	bf08      	it	eq
 8006044:	68ec      	ldreq	r4, [r5, #12]
 8006046:	e7e6      	b.n	8006016 <__swsetup_r+0x1e>
 8006048:	0758      	lsls	r0, r3, #29
 800604a:	d512      	bpl.n	8006072 <__swsetup_r+0x7a>
 800604c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800604e:	b141      	cbz	r1, 8006062 <__swsetup_r+0x6a>
 8006050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006054:	4299      	cmp	r1, r3
 8006056:	d002      	beq.n	800605e <__swsetup_r+0x66>
 8006058:	4630      	mov	r0, r6
 800605a:	f001 fc8b 	bl	8007974 <_free_r>
 800605e:	2300      	movs	r3, #0
 8006060:	6363      	str	r3, [r4, #52]	; 0x34
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	2300      	movs	r3, #0
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	b94b      	cbnz	r3, 8006092 <__swsetup_r+0x9a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d003      	beq.n	8006092 <__swsetup_r+0x9a>
 800608a:	4621      	mov	r1, r4
 800608c:	4630      	mov	r0, r6
 800608e:	f001 f881 	bl	8007194 <__smakebuf_r>
 8006092:	89a0      	ldrh	r0, [r4, #12]
 8006094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006098:	f010 0301 	ands.w	r3, r0, #1
 800609c:	d00a      	beq.n	80060b4 <__swsetup_r+0xbc>
 800609e:	2300      	movs	r3, #0
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	6963      	ldr	r3, [r4, #20]
 80060a4:	425b      	negs	r3, r3
 80060a6:	61a3      	str	r3, [r4, #24]
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	b943      	cbnz	r3, 80060be <__swsetup_r+0xc6>
 80060ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060b0:	d1ba      	bne.n	8006028 <__swsetup_r+0x30>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	0781      	lsls	r1, r0, #30
 80060b6:	bf58      	it	pl
 80060b8:	6963      	ldrpl	r3, [r4, #20]
 80060ba:	60a3      	str	r3, [r4, #8]
 80060bc:	e7f4      	b.n	80060a8 <__swsetup_r+0xb0>
 80060be:	2000      	movs	r0, #0
 80060c0:	e7f7      	b.n	80060b2 <__swsetup_r+0xba>
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c
 80060c8:	08009a2c 	.word	0x08009a2c
 80060cc:	08009a4c 	.word	0x08009a4c
 80060d0:	08009a0c 	.word	0x08009a0c

080060d4 <quorem>:
 80060d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	6903      	ldr	r3, [r0, #16]
 80060da:	690c      	ldr	r4, [r1, #16]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	4607      	mov	r7, r0
 80060e0:	f2c0 8081 	blt.w	80061e6 <quorem+0x112>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	f101 0814 	add.w	r8, r1, #20
 80060ea:	f100 0514 	add.w	r5, r0, #20
 80060ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060fc:	3301      	adds	r3, #1
 80060fe:	429a      	cmp	r2, r3
 8006100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006108:	fbb2 f6f3 	udiv	r6, r2, r3
 800610c:	d331      	bcc.n	8006172 <quorem+0x9e>
 800610e:	f04f 0e00 	mov.w	lr, #0
 8006112:	4640      	mov	r0, r8
 8006114:	46ac      	mov	ip, r5
 8006116:	46f2      	mov	sl, lr
 8006118:	f850 2b04 	ldr.w	r2, [r0], #4
 800611c:	b293      	uxth	r3, r2
 800611e:	fb06 e303 	mla	r3, r6, r3, lr
 8006122:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006126:	b29b      	uxth	r3, r3
 8006128:	ebaa 0303 	sub.w	r3, sl, r3
 800612c:	f8dc a000 	ldr.w	sl, [ip]
 8006130:	0c12      	lsrs	r2, r2, #16
 8006132:	fa13 f38a 	uxtah	r3, r3, sl
 8006136:	fb06 e202 	mla	r2, r6, r2, lr
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006142:	b292      	uxth	r2, r2
 8006144:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800614c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006150:	4581      	cmp	r9, r0
 8006152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006156:	f84c 3b04 	str.w	r3, [ip], #4
 800615a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800615e:	d2db      	bcs.n	8006118 <quorem+0x44>
 8006160:	f855 300b 	ldr.w	r3, [r5, fp]
 8006164:	b92b      	cbnz	r3, 8006172 <quorem+0x9e>
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	3b04      	subs	r3, #4
 800616a:	429d      	cmp	r5, r3
 800616c:	461a      	mov	r2, r3
 800616e:	d32e      	bcc.n	80061ce <quorem+0xfa>
 8006170:	613c      	str	r4, [r7, #16]
 8006172:	4638      	mov	r0, r7
 8006174:	f001 fae6 	bl	8007744 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	db24      	blt.n	80061c6 <quorem+0xf2>
 800617c:	3601      	adds	r6, #1
 800617e:	4628      	mov	r0, r5
 8006180:	f04f 0c00 	mov.w	ip, #0
 8006184:	f858 2b04 	ldr.w	r2, [r8], #4
 8006188:	f8d0 e000 	ldr.w	lr, [r0]
 800618c:	b293      	uxth	r3, r2
 800618e:	ebac 0303 	sub.w	r3, ip, r3
 8006192:	0c12      	lsrs	r2, r2, #16
 8006194:	fa13 f38e 	uxtah	r3, r3, lr
 8006198:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800619c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a6:	45c1      	cmp	r9, r8
 80061a8:	f840 3b04 	str.w	r3, [r0], #4
 80061ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061b0:	d2e8      	bcs.n	8006184 <quorem+0xb0>
 80061b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ba:	b922      	cbnz	r2, 80061c6 <quorem+0xf2>
 80061bc:	3b04      	subs	r3, #4
 80061be:	429d      	cmp	r5, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	d30a      	bcc.n	80061da <quorem+0x106>
 80061c4:	613c      	str	r4, [r7, #16]
 80061c6:	4630      	mov	r0, r6
 80061c8:	b003      	add	sp, #12
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1cc      	bne.n	8006170 <quorem+0x9c>
 80061d6:	3c01      	subs	r4, #1
 80061d8:	e7c7      	b.n	800616a <quorem+0x96>
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	3b04      	subs	r3, #4
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d1f0      	bne.n	80061c4 <quorem+0xf0>
 80061e2:	3c01      	subs	r4, #1
 80061e4:	e7eb      	b.n	80061be <quorem+0xea>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e7ee      	b.n	80061c8 <quorem+0xf4>
 80061ea:	0000      	movs	r0, r0
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ed2d 8b04 	vpush	{d8-d9}
 80061f8:	ec57 6b10 	vmov	r6, r7, d0
 80061fc:	b093      	sub	sp, #76	; 0x4c
 80061fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006200:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006204:	9106      	str	r1, [sp, #24]
 8006206:	ee10 aa10 	vmov	sl, s0
 800620a:	4604      	mov	r4, r0
 800620c:	9209      	str	r2, [sp, #36]	; 0x24
 800620e:	930c      	str	r3, [sp, #48]	; 0x30
 8006210:	46bb      	mov	fp, r7
 8006212:	b975      	cbnz	r5, 8006232 <_dtoa_r+0x42>
 8006214:	2010      	movs	r0, #16
 8006216:	f000 fffd 	bl	8007214 <malloc>
 800621a:	4602      	mov	r2, r0
 800621c:	6260      	str	r0, [r4, #36]	; 0x24
 800621e:	b920      	cbnz	r0, 800622a <_dtoa_r+0x3a>
 8006220:	4ba7      	ldr	r3, [pc, #668]	; (80064c0 <_dtoa_r+0x2d0>)
 8006222:	21ea      	movs	r1, #234	; 0xea
 8006224:	48a7      	ldr	r0, [pc, #668]	; (80064c4 <_dtoa_r+0x2d4>)
 8006226:	f001 fe45 	bl	8007eb4 <__assert_func>
 800622a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800622e:	6005      	str	r5, [r0, #0]
 8006230:	60c5      	str	r5, [r0, #12]
 8006232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	b151      	cbz	r1, 800624e <_dtoa_r+0x5e>
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	604a      	str	r2, [r1, #4]
 800623c:	2301      	movs	r3, #1
 800623e:	4093      	lsls	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
 8006242:	4620      	mov	r0, r4
 8006244:	f001 f83c 	bl	80072c0 <_Bfree>
 8006248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	1e3b      	subs	r3, r7, #0
 8006250:	bfaa      	itet	ge
 8006252:	2300      	movge	r3, #0
 8006254:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006258:	f8c8 3000 	strge.w	r3, [r8]
 800625c:	4b9a      	ldr	r3, [pc, #616]	; (80064c8 <_dtoa_r+0x2d8>)
 800625e:	bfbc      	itt	lt
 8006260:	2201      	movlt	r2, #1
 8006262:	f8c8 2000 	strlt.w	r2, [r8]
 8006266:	ea33 030b 	bics.w	r3, r3, fp
 800626a:	d11b      	bne.n	80062a4 <_dtoa_r+0xb4>
 800626c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800626e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006278:	4333      	orrs	r3, r6
 800627a:	f000 8592 	beq.w	8006da2 <_dtoa_r+0xbb2>
 800627e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006280:	b963      	cbnz	r3, 800629c <_dtoa_r+0xac>
 8006282:	4b92      	ldr	r3, [pc, #584]	; (80064cc <_dtoa_r+0x2dc>)
 8006284:	e022      	b.n	80062cc <_dtoa_r+0xdc>
 8006286:	4b92      	ldr	r3, [pc, #584]	; (80064d0 <_dtoa_r+0x2e0>)
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	3308      	adds	r3, #8
 800628c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	b013      	add	sp, #76	; 0x4c
 8006294:	ecbd 8b04 	vpop	{d8-d9}
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4b8b      	ldr	r3, [pc, #556]	; (80064cc <_dtoa_r+0x2dc>)
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	3303      	adds	r3, #3
 80062a2:	e7f3      	b.n	800628c <_dtoa_r+0x9c>
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 80062b0:	ec4b ab19 	vmov	d9, sl, fp
 80062b4:	4680      	mov	r8, r0
 80062b6:	b158      	cbz	r0, 80062d0 <_dtoa_r+0xe0>
 80062b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ba:	2301      	movs	r3, #1
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 856b 	beq.w	8006d9c <_dtoa_r+0xbac>
 80062c6:	4883      	ldr	r0, [pc, #524]	; (80064d4 <_dtoa_r+0x2e4>)
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	1e43      	subs	r3, r0, #1
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	e7df      	b.n	8006290 <_dtoa_r+0xa0>
 80062d0:	ec4b ab10 	vmov	d0, sl, fp
 80062d4:	aa10      	add	r2, sp, #64	; 0x40
 80062d6:	a911      	add	r1, sp, #68	; 0x44
 80062d8:	4620      	mov	r0, r4
 80062da:	f001 fad9 	bl	8007890 <__d2b>
 80062de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80062e2:	ee08 0a10 	vmov	s16, r0
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 8084 	beq.w	80063f4 <_dtoa_r+0x204>
 80062ec:	ee19 3a90 	vmov	r3, s19
 80062f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062f8:	4656      	mov	r6, sl
 80062fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006302:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006306:	4b74      	ldr	r3, [pc, #464]	; (80064d8 <_dtoa_r+0x2e8>)
 8006308:	2200      	movs	r2, #0
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7f9 ffdb 	bl	80002c8 <__aeabi_dsub>
 8006312:	a365      	add	r3, pc, #404	; (adr r3, 80064a8 <_dtoa_r+0x2b8>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	f7fa f98e 	bl	8000638 <__aeabi_dmul>
 800631c:	a364      	add	r3, pc, #400	; (adr r3, 80064b0 <_dtoa_r+0x2c0>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7f9 ffd3 	bl	80002cc <__adddf3>
 8006326:	4606      	mov	r6, r0
 8006328:	4628      	mov	r0, r5
 800632a:	460f      	mov	r7, r1
 800632c:	f7fa f91a 	bl	8000564 <__aeabi_i2d>
 8006330:	a361      	add	r3, pc, #388	; (adr r3, 80064b8 <_dtoa_r+0x2c8>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f97f 	bl	8000638 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7f9 ffc3 	bl	80002cc <__adddf3>
 8006346:	4606      	mov	r6, r0
 8006348:	460f      	mov	r7, r1
 800634a:	f7fa fc25 	bl	8000b98 <__aeabi_d2iz>
 800634e:	2200      	movs	r2, #0
 8006350:	9000      	str	r0, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	f7fa fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800635c:	b150      	cbz	r0, 8006374 <_dtoa_r+0x184>
 800635e:	9800      	ldr	r0, [sp, #0]
 8006360:	f7fa f900 	bl	8000564 <__aeabi_i2d>
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	f7fa fbce 	bl	8000b08 <__aeabi_dcmpeq>
 800636c:	b910      	cbnz	r0, 8006374 <_dtoa_r+0x184>
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	9b00      	ldr	r3, [sp, #0]
 8006376:	2b16      	cmp	r3, #22
 8006378:	d85a      	bhi.n	8006430 <_dtoa_r+0x240>
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	4b57      	ldr	r3, [pc, #348]	; (80064dc <_dtoa_r+0x2ec>)
 800637e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	ec51 0b19 	vmov	r0, r1, d9
 800638a:	f7fa fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	d050      	beq.n	8006434 <_dtoa_r+0x244>
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	930b      	str	r3, [sp, #44]	; 0x2c
 800639c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800639e:	1b5d      	subs	r5, r3, r5
 80063a0:	1e6b      	subs	r3, r5, #1
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	bf45      	ittet	mi
 80063a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80063aa:	9304      	strmi	r3, [sp, #16]
 80063ac:	2300      	movpl	r3, #0
 80063ae:	2300      	movmi	r3, #0
 80063b0:	bf4c      	ite	mi
 80063b2:	9305      	strmi	r3, [sp, #20]
 80063b4:	9304      	strpl	r3, [sp, #16]
 80063b6:	9b00      	ldr	r3, [sp, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	db3d      	blt.n	8006438 <_dtoa_r+0x248>
 80063bc:	9b05      	ldr	r3, [sp, #20]
 80063be:	9a00      	ldr	r2, [sp, #0]
 80063c0:	920a      	str	r2, [sp, #40]	; 0x28
 80063c2:	4413      	add	r3, r2
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	2300      	movs	r3, #0
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	f200 8089 	bhi.w	80064e4 <_dtoa_r+0x2f4>
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	bfc4      	itt	gt
 80063d6:	3b04      	subgt	r3, #4
 80063d8:	9306      	strgt	r3, [sp, #24]
 80063da:	9b06      	ldr	r3, [sp, #24]
 80063dc:	f1a3 0302 	sub.w	r3, r3, #2
 80063e0:	bfcc      	ite	gt
 80063e2:	2500      	movgt	r5, #0
 80063e4:	2501      	movle	r5, #1
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	f200 8087 	bhi.w	80064fa <_dtoa_r+0x30a>
 80063ec:	e8df f003 	tbb	[pc, r3]
 80063f0:	59383a2d 	.word	0x59383a2d
 80063f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80063f8:	441d      	add	r5, r3
 80063fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063fe:	2b20      	cmp	r3, #32
 8006400:	bfc1      	itttt	gt
 8006402:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006406:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800640a:	fa0b f303 	lslgt.w	r3, fp, r3
 800640e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006412:	bfda      	itte	le
 8006414:	f1c3 0320 	rsble	r3, r3, #32
 8006418:	fa06 f003 	lslle.w	r0, r6, r3
 800641c:	4318      	orrgt	r0, r3
 800641e:	f7fa f891 	bl	8000544 <__aeabi_ui2d>
 8006422:	2301      	movs	r3, #1
 8006424:	4606      	mov	r6, r0
 8006426:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800642a:	3d01      	subs	r5, #1
 800642c:	930e      	str	r3, [sp, #56]	; 0x38
 800642e:	e76a      	b.n	8006306 <_dtoa_r+0x116>
 8006430:	2301      	movs	r3, #1
 8006432:	e7b2      	b.n	800639a <_dtoa_r+0x1aa>
 8006434:	900b      	str	r0, [sp, #44]	; 0x2c
 8006436:	e7b1      	b.n	800639c <_dtoa_r+0x1ac>
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	9a00      	ldr	r2, [sp, #0]
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	4253      	negs	r3, r2
 8006442:	9307      	str	r3, [sp, #28]
 8006444:	2300      	movs	r3, #0
 8006446:	930a      	str	r3, [sp, #40]	; 0x28
 8006448:	e7bf      	b.n	80063ca <_dtoa_r+0x1da>
 800644a:	2300      	movs	r3, #0
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	dc55      	bgt.n	8006500 <_dtoa_r+0x310>
 8006454:	2301      	movs	r3, #1
 8006456:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800645a:	461a      	mov	r2, r3
 800645c:	9209      	str	r2, [sp, #36]	; 0x24
 800645e:	e00c      	b.n	800647a <_dtoa_r+0x28a>
 8006460:	2301      	movs	r3, #1
 8006462:	e7f3      	b.n	800644c <_dtoa_r+0x25c>
 8006464:	2300      	movs	r3, #0
 8006466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006468:	9308      	str	r3, [sp, #32]
 800646a:	9b00      	ldr	r3, [sp, #0]
 800646c:	4413      	add	r3, r2
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	9303      	str	r3, [sp, #12]
 8006476:	bfb8      	it	lt
 8006478:	2301      	movlt	r3, #1
 800647a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800647c:	2200      	movs	r2, #0
 800647e:	6042      	str	r2, [r0, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	f102 0614 	add.w	r6, r2, #20
 8006486:	429e      	cmp	r6, r3
 8006488:	6841      	ldr	r1, [r0, #4]
 800648a:	d93d      	bls.n	8006508 <_dtoa_r+0x318>
 800648c:	4620      	mov	r0, r4
 800648e:	f000 fed7 	bl	8007240 <_Balloc>
 8006492:	9001      	str	r0, [sp, #4]
 8006494:	2800      	cmp	r0, #0
 8006496:	d13b      	bne.n	8006510 <_dtoa_r+0x320>
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <_dtoa_r+0x2f0>)
 800649a:	4602      	mov	r2, r0
 800649c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064a0:	e6c0      	b.n	8006224 <_dtoa_r+0x34>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7df      	b.n	8006466 <_dtoa_r+0x276>
 80064a6:	bf00      	nop
 80064a8:	636f4361 	.word	0x636f4361
 80064ac:	3fd287a7 	.word	0x3fd287a7
 80064b0:	8b60c8b3 	.word	0x8b60c8b3
 80064b4:	3fc68a28 	.word	0x3fc68a28
 80064b8:	509f79fb 	.word	0x509f79fb
 80064bc:	3fd34413 	.word	0x3fd34413
 80064c0:	08009989 	.word	0x08009989
 80064c4:	080099a0 	.word	0x080099a0
 80064c8:	7ff00000 	.word	0x7ff00000
 80064cc:	08009985 	.word	0x08009985
 80064d0:	0800997c 	.word	0x0800997c
 80064d4:	08009959 	.word	0x08009959
 80064d8:	3ff80000 	.word	0x3ff80000
 80064dc:	08009af0 	.word	0x08009af0
 80064e0:	080099fb 	.word	0x080099fb
 80064e4:	2501      	movs	r5, #1
 80064e6:	2300      	movs	r3, #0
 80064e8:	9306      	str	r3, [sp, #24]
 80064ea:	9508      	str	r5, [sp, #32]
 80064ec:	f04f 33ff 	mov.w	r3, #4294967295
 80064f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2312      	movs	r3, #18
 80064f8:	e7b0      	b.n	800645c <_dtoa_r+0x26c>
 80064fa:	2301      	movs	r3, #1
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	e7f5      	b.n	80064ec <_dtoa_r+0x2fc>
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006506:	e7b8      	b.n	800647a <_dtoa_r+0x28a>
 8006508:	3101      	adds	r1, #1
 800650a:	6041      	str	r1, [r0, #4]
 800650c:	0052      	lsls	r2, r2, #1
 800650e:	e7b8      	b.n	8006482 <_dtoa_r+0x292>
 8006510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006512:	9a01      	ldr	r2, [sp, #4]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	2b0e      	cmp	r3, #14
 800651a:	f200 809d 	bhi.w	8006658 <_dtoa_r+0x468>
 800651e:	2d00      	cmp	r5, #0
 8006520:	f000 809a 	beq.w	8006658 <_dtoa_r+0x468>
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	dd32      	ble.n	8006590 <_dtoa_r+0x3a0>
 800652a:	4ab7      	ldr	r2, [pc, #732]	; (8006808 <_dtoa_r+0x618>)
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	05d8      	lsls	r0, r3, #23
 800653c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006540:	d516      	bpl.n	8006570 <_dtoa_r+0x380>
 8006542:	4bb2      	ldr	r3, [pc, #712]	; (800680c <_dtoa_r+0x61c>)
 8006544:	ec51 0b19 	vmov	r0, r1, d9
 8006548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800654c:	f7fa f99e 	bl	800088c <__aeabi_ddiv>
 8006550:	f007 070f 	and.w	r7, r7, #15
 8006554:	4682      	mov	sl, r0
 8006556:	468b      	mov	fp, r1
 8006558:	2503      	movs	r5, #3
 800655a:	4eac      	ldr	r6, [pc, #688]	; (800680c <_dtoa_r+0x61c>)
 800655c:	b957      	cbnz	r7, 8006574 <_dtoa_r+0x384>
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	4650      	mov	r0, sl
 8006564:	4659      	mov	r1, fp
 8006566:	f7fa f991 	bl	800088c <__aeabi_ddiv>
 800656a:	4682      	mov	sl, r0
 800656c:	468b      	mov	fp, r1
 800656e:	e028      	b.n	80065c2 <_dtoa_r+0x3d2>
 8006570:	2502      	movs	r5, #2
 8006572:	e7f2      	b.n	800655a <_dtoa_r+0x36a>
 8006574:	07f9      	lsls	r1, r7, #31
 8006576:	d508      	bpl.n	800658a <_dtoa_r+0x39a>
 8006578:	4640      	mov	r0, r8
 800657a:	4649      	mov	r1, r9
 800657c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006580:	f7fa f85a 	bl	8000638 <__aeabi_dmul>
 8006584:	3501      	adds	r5, #1
 8006586:	4680      	mov	r8, r0
 8006588:	4689      	mov	r9, r1
 800658a:	107f      	asrs	r7, r7, #1
 800658c:	3608      	adds	r6, #8
 800658e:	e7e5      	b.n	800655c <_dtoa_r+0x36c>
 8006590:	f000 809b 	beq.w	80066ca <_dtoa_r+0x4da>
 8006594:	9b00      	ldr	r3, [sp, #0]
 8006596:	4f9d      	ldr	r7, [pc, #628]	; (800680c <_dtoa_r+0x61c>)
 8006598:	425e      	negs	r6, r3
 800659a:	4b9b      	ldr	r3, [pc, #620]	; (8006808 <_dtoa_r+0x618>)
 800659c:	f006 020f 	and.w	r2, r6, #15
 80065a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	ec51 0b19 	vmov	r0, r1, d9
 80065ac:	f7fa f844 	bl	8000638 <__aeabi_dmul>
 80065b0:	1136      	asrs	r6, r6, #4
 80065b2:	4682      	mov	sl, r0
 80065b4:	468b      	mov	fp, r1
 80065b6:	2300      	movs	r3, #0
 80065b8:	2502      	movs	r5, #2
 80065ba:	2e00      	cmp	r6, #0
 80065bc:	d17a      	bne.n	80066b4 <_dtoa_r+0x4c4>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1d3      	bne.n	800656a <_dtoa_r+0x37a>
 80065c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8082 	beq.w	80066ce <_dtoa_r+0x4de>
 80065ca:	4b91      	ldr	r3, [pc, #580]	; (8006810 <_dtoa_r+0x620>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	4650      	mov	r0, sl
 80065d0:	4659      	mov	r1, fp
 80065d2:	f7fa faa3 	bl	8000b1c <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d079      	beq.n	80066ce <_dtoa_r+0x4de>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d076      	beq.n	80066ce <_dtoa_r+0x4de>
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd36      	ble.n	8006654 <_dtoa_r+0x464>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	4650      	mov	r0, sl
 80065ea:	4659      	mov	r1, fp
 80065ec:	1e5f      	subs	r7, r3, #1
 80065ee:	2200      	movs	r2, #0
 80065f0:	4b88      	ldr	r3, [pc, #544]	; (8006814 <_dtoa_r+0x624>)
 80065f2:	f7fa f821 	bl	8000638 <__aeabi_dmul>
 80065f6:	9e02      	ldr	r6, [sp, #8]
 80065f8:	4682      	mov	sl, r0
 80065fa:	468b      	mov	fp, r1
 80065fc:	3501      	adds	r5, #1
 80065fe:	4628      	mov	r0, r5
 8006600:	f7f9 ffb0 	bl	8000564 <__aeabi_i2d>
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	f7fa f816 	bl	8000638 <__aeabi_dmul>
 800660c:	4b82      	ldr	r3, [pc, #520]	; (8006818 <_dtoa_r+0x628>)
 800660e:	2200      	movs	r2, #0
 8006610:	f7f9 fe5c 	bl	80002cc <__adddf3>
 8006614:	46d0      	mov	r8, sl
 8006616:	46d9      	mov	r9, fp
 8006618:	4682      	mov	sl, r0
 800661a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800661e:	2e00      	cmp	r6, #0
 8006620:	d158      	bne.n	80066d4 <_dtoa_r+0x4e4>
 8006622:	4b7e      	ldr	r3, [pc, #504]	; (800681c <_dtoa_r+0x62c>)
 8006624:	2200      	movs	r2, #0
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7f9 fe4d 	bl	80002c8 <__aeabi_dsub>
 800662e:	4652      	mov	r2, sl
 8006630:	465b      	mov	r3, fp
 8006632:	4680      	mov	r8, r0
 8006634:	4689      	mov	r9, r1
 8006636:	f7fa fa8f 	bl	8000b58 <__aeabi_dcmpgt>
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 8295 	bne.w	8006b6a <_dtoa_r+0x97a>
 8006640:	4652      	mov	r2, sl
 8006642:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006646:	4640      	mov	r0, r8
 8006648:	4649      	mov	r1, r9
 800664a:	f7fa fa67 	bl	8000b1c <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 8289 	bne.w	8006b66 <_dtoa_r+0x976>
 8006654:	ec5b ab19 	vmov	sl, fp, d9
 8006658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800665a:	2b00      	cmp	r3, #0
 800665c:	f2c0 8148 	blt.w	80068f0 <_dtoa_r+0x700>
 8006660:	9a00      	ldr	r2, [sp, #0]
 8006662:	2a0e      	cmp	r2, #14
 8006664:	f300 8144 	bgt.w	80068f0 <_dtoa_r+0x700>
 8006668:	4b67      	ldr	r3, [pc, #412]	; (8006808 <_dtoa_r+0x618>)
 800666a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800666e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	f280 80d5 	bge.w	8006824 <_dtoa_r+0x634>
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f300 80d1 	bgt.w	8006824 <_dtoa_r+0x634>
 8006682:	f040 826f 	bne.w	8006b64 <_dtoa_r+0x974>
 8006686:	4b65      	ldr	r3, [pc, #404]	; (800681c <_dtoa_r+0x62c>)
 8006688:	2200      	movs	r2, #0
 800668a:	4640      	mov	r0, r8
 800668c:	4649      	mov	r1, r9
 800668e:	f7f9 ffd3 	bl	8000638 <__aeabi_dmul>
 8006692:	4652      	mov	r2, sl
 8006694:	465b      	mov	r3, fp
 8006696:	f7fa fa55 	bl	8000b44 <__aeabi_dcmpge>
 800669a:	9e03      	ldr	r6, [sp, #12]
 800669c:	4637      	mov	r7, r6
 800669e:	2800      	cmp	r0, #0
 80066a0:	f040 8245 	bne.w	8006b2e <_dtoa_r+0x93e>
 80066a4:	9d01      	ldr	r5, [sp, #4]
 80066a6:	2331      	movs	r3, #49	; 0x31
 80066a8:	f805 3b01 	strb.w	r3, [r5], #1
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	e240      	b.n	8006b36 <_dtoa_r+0x946>
 80066b4:	07f2      	lsls	r2, r6, #31
 80066b6:	d505      	bpl.n	80066c4 <_dtoa_r+0x4d4>
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	f7f9 ffbc 	bl	8000638 <__aeabi_dmul>
 80066c0:	3501      	adds	r5, #1
 80066c2:	2301      	movs	r3, #1
 80066c4:	1076      	asrs	r6, r6, #1
 80066c6:	3708      	adds	r7, #8
 80066c8:	e777      	b.n	80065ba <_dtoa_r+0x3ca>
 80066ca:	2502      	movs	r5, #2
 80066cc:	e779      	b.n	80065c2 <_dtoa_r+0x3d2>
 80066ce:	9f00      	ldr	r7, [sp, #0]
 80066d0:	9e03      	ldr	r6, [sp, #12]
 80066d2:	e794      	b.n	80065fe <_dtoa_r+0x40e>
 80066d4:	9901      	ldr	r1, [sp, #4]
 80066d6:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <_dtoa_r+0x618>)
 80066d8:	4431      	add	r1, r6
 80066da:	910d      	str	r1, [sp, #52]	; 0x34
 80066dc:	9908      	ldr	r1, [sp, #32]
 80066de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066e6:	2900      	cmp	r1, #0
 80066e8:	d043      	beq.n	8006772 <_dtoa_r+0x582>
 80066ea:	494d      	ldr	r1, [pc, #308]	; (8006820 <_dtoa_r+0x630>)
 80066ec:	2000      	movs	r0, #0
 80066ee:	f7fa f8cd 	bl	800088c <__aeabi_ddiv>
 80066f2:	4652      	mov	r2, sl
 80066f4:	465b      	mov	r3, fp
 80066f6:	f7f9 fde7 	bl	80002c8 <__aeabi_dsub>
 80066fa:	9d01      	ldr	r5, [sp, #4]
 80066fc:	4682      	mov	sl, r0
 80066fe:	468b      	mov	fp, r1
 8006700:	4649      	mov	r1, r9
 8006702:	4640      	mov	r0, r8
 8006704:	f7fa fa48 	bl	8000b98 <__aeabi_d2iz>
 8006708:	4606      	mov	r6, r0
 800670a:	f7f9 ff2b 	bl	8000564 <__aeabi_i2d>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdd7 	bl	80002c8 <__aeabi_dsub>
 800671a:	3630      	adds	r6, #48	; 0x30
 800671c:	f805 6b01 	strb.w	r6, [r5], #1
 8006720:	4652      	mov	r2, sl
 8006722:	465b      	mov	r3, fp
 8006724:	4680      	mov	r8, r0
 8006726:	4689      	mov	r9, r1
 8006728:	f7fa f9f8 	bl	8000b1c <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	d163      	bne.n	80067f8 <_dtoa_r+0x608>
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	4936      	ldr	r1, [pc, #216]	; (8006810 <_dtoa_r+0x620>)
 8006736:	2000      	movs	r0, #0
 8006738:	f7f9 fdc6 	bl	80002c8 <__aeabi_dsub>
 800673c:	4652      	mov	r2, sl
 800673e:	465b      	mov	r3, fp
 8006740:	f7fa f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8006744:	2800      	cmp	r0, #0
 8006746:	f040 80b5 	bne.w	80068b4 <_dtoa_r+0x6c4>
 800674a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674c:	429d      	cmp	r5, r3
 800674e:	d081      	beq.n	8006654 <_dtoa_r+0x464>
 8006750:	4b30      	ldr	r3, [pc, #192]	; (8006814 <_dtoa_r+0x624>)
 8006752:	2200      	movs	r2, #0
 8006754:	4650      	mov	r0, sl
 8006756:	4659      	mov	r1, fp
 8006758:	f7f9 ff6e 	bl	8000638 <__aeabi_dmul>
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <_dtoa_r+0x624>)
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	2200      	movs	r2, #0
 8006768:	f7f9 ff66 	bl	8000638 <__aeabi_dmul>
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	e7c6      	b.n	8006700 <_dtoa_r+0x510>
 8006772:	4650      	mov	r0, sl
 8006774:	4659      	mov	r1, fp
 8006776:	f7f9 ff5f 	bl	8000638 <__aeabi_dmul>
 800677a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006780:	4682      	mov	sl, r0
 8006782:	468b      	mov	fp, r1
 8006784:	4649      	mov	r1, r9
 8006786:	4640      	mov	r0, r8
 8006788:	f7fa fa06 	bl	8000b98 <__aeabi_d2iz>
 800678c:	4606      	mov	r6, r0
 800678e:	f7f9 fee9 	bl	8000564 <__aeabi_i2d>
 8006792:	3630      	adds	r6, #48	; 0x30
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4640      	mov	r0, r8
 800679a:	4649      	mov	r1, r9
 800679c:	f7f9 fd94 	bl	80002c8 <__aeabi_dsub>
 80067a0:	f805 6b01 	strb.w	r6, [r5], #1
 80067a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a6:	429d      	cmp	r5, r3
 80067a8:	4680      	mov	r8, r0
 80067aa:	4689      	mov	r9, r1
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	d124      	bne.n	80067fc <_dtoa_r+0x60c>
 80067b2:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <_dtoa_r+0x630>)
 80067b4:	4650      	mov	r0, sl
 80067b6:	4659      	mov	r1, fp
 80067b8:	f7f9 fd88 	bl	80002cc <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa f9c8 	bl	8000b58 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d173      	bne.n	80068b4 <_dtoa_r+0x6c4>
 80067cc:	4652      	mov	r2, sl
 80067ce:	465b      	mov	r3, fp
 80067d0:	4913      	ldr	r1, [pc, #76]	; (8006820 <_dtoa_r+0x630>)
 80067d2:	2000      	movs	r0, #0
 80067d4:	f7f9 fd78 	bl	80002c8 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa f99c 	bl	8000b1c <__aeabi_dcmplt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f43f af35 	beq.w	8006654 <_dtoa_r+0x464>
 80067ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80067ec:	1e6b      	subs	r3, r5, #1
 80067ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80067f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d0f8      	beq.n	80067ea <_dtoa_r+0x5fa>
 80067f8:	9700      	str	r7, [sp, #0]
 80067fa:	e049      	b.n	8006890 <_dtoa_r+0x6a0>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_dtoa_r+0x624>)
 80067fe:	f7f9 ff1b 	bl	8000638 <__aeabi_dmul>
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	e7bd      	b.n	8006784 <_dtoa_r+0x594>
 8006808:	08009af0 	.word	0x08009af0
 800680c:	08009ac8 	.word	0x08009ac8
 8006810:	3ff00000 	.word	0x3ff00000
 8006814:	40240000 	.word	0x40240000
 8006818:	401c0000 	.word	0x401c0000
 800681c:	40140000 	.word	0x40140000
 8006820:	3fe00000 	.word	0x3fe00000
 8006824:	9d01      	ldr	r5, [sp, #4]
 8006826:	4656      	mov	r6, sl
 8006828:	465f      	mov	r7, fp
 800682a:	4642      	mov	r2, r8
 800682c:	464b      	mov	r3, r9
 800682e:	4630      	mov	r0, r6
 8006830:	4639      	mov	r1, r7
 8006832:	f7fa f82b 	bl	800088c <__aeabi_ddiv>
 8006836:	f7fa f9af 	bl	8000b98 <__aeabi_d2iz>
 800683a:	4682      	mov	sl, r0
 800683c:	f7f9 fe92 	bl	8000564 <__aeabi_i2d>
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	f7f9 fef8 	bl	8000638 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006854:	f7f9 fd38 	bl	80002c8 <__aeabi_dsub>
 8006858:	f805 6b01 	strb.w	r6, [r5], #1
 800685c:	9e01      	ldr	r6, [sp, #4]
 800685e:	9f03      	ldr	r7, [sp, #12]
 8006860:	1bae      	subs	r6, r5, r6
 8006862:	42b7      	cmp	r7, r6
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	d135      	bne.n	80068d6 <_dtoa_r+0x6e6>
 800686a:	f7f9 fd2f 	bl	80002cc <__adddf3>
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	f7fa f96f 	bl	8000b58 <__aeabi_dcmpgt>
 800687a:	b9d0      	cbnz	r0, 80068b2 <_dtoa_r+0x6c2>
 800687c:	4642      	mov	r2, r8
 800687e:	464b      	mov	r3, r9
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	f7fa f940 	bl	8000b08 <__aeabi_dcmpeq>
 8006888:	b110      	cbz	r0, 8006890 <_dtoa_r+0x6a0>
 800688a:	f01a 0f01 	tst.w	sl, #1
 800688e:	d110      	bne.n	80068b2 <_dtoa_r+0x6c2>
 8006890:	4620      	mov	r0, r4
 8006892:	ee18 1a10 	vmov	r1, s16
 8006896:	f000 fd13 	bl	80072c0 <_Bfree>
 800689a:	2300      	movs	r3, #0
 800689c:	9800      	ldr	r0, [sp, #0]
 800689e:	702b      	strb	r3, [r5, #0]
 80068a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a2:	3001      	adds	r0, #1
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f43f acf1 	beq.w	8006290 <_dtoa_r+0xa0>
 80068ae:	601d      	str	r5, [r3, #0]
 80068b0:	e4ee      	b.n	8006290 <_dtoa_r+0xa0>
 80068b2:	9f00      	ldr	r7, [sp, #0]
 80068b4:	462b      	mov	r3, r5
 80068b6:	461d      	mov	r5, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a39      	cmp	r2, #57	; 0x39
 80068be:	d106      	bne.n	80068ce <_dtoa_r+0x6de>
 80068c0:	9a01      	ldr	r2, [sp, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d1f7      	bne.n	80068b6 <_dtoa_r+0x6c6>
 80068c6:	9901      	ldr	r1, [sp, #4]
 80068c8:	2230      	movs	r2, #48	; 0x30
 80068ca:	3701      	adds	r7, #1
 80068cc:	700a      	strb	r2, [r1, #0]
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	3201      	adds	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e790      	b.n	80067f8 <_dtoa_r+0x608>
 80068d6:	4ba6      	ldr	r3, [pc, #664]	; (8006b70 <_dtoa_r+0x980>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fead 	bl	8000638 <__aeabi_dmul>
 80068de:	2200      	movs	r2, #0
 80068e0:	2300      	movs	r3, #0
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	f7fa f90f 	bl	8000b08 <__aeabi_dcmpeq>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d09d      	beq.n	800682a <_dtoa_r+0x63a>
 80068ee:	e7cf      	b.n	8006890 <_dtoa_r+0x6a0>
 80068f0:	9a08      	ldr	r2, [sp, #32]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f000 80d7 	beq.w	8006aa6 <_dtoa_r+0x8b6>
 80068f8:	9a06      	ldr	r2, [sp, #24]
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	f300 80ba 	bgt.w	8006a74 <_dtoa_r+0x884>
 8006900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006902:	2a00      	cmp	r2, #0
 8006904:	f000 80b2 	beq.w	8006a6c <_dtoa_r+0x87c>
 8006908:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800690c:	9e07      	ldr	r6, [sp, #28]
 800690e:	9d04      	ldr	r5, [sp, #16]
 8006910:	9a04      	ldr	r2, [sp, #16]
 8006912:	441a      	add	r2, r3
 8006914:	9204      	str	r2, [sp, #16]
 8006916:	9a05      	ldr	r2, [sp, #20]
 8006918:	2101      	movs	r1, #1
 800691a:	441a      	add	r2, r3
 800691c:	4620      	mov	r0, r4
 800691e:	9205      	str	r2, [sp, #20]
 8006920:	f000 fd86 	bl	8007430 <__i2b>
 8006924:	4607      	mov	r7, r0
 8006926:	2d00      	cmp	r5, #0
 8006928:	dd0c      	ble.n	8006944 <_dtoa_r+0x754>
 800692a:	9b05      	ldr	r3, [sp, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd09      	ble.n	8006944 <_dtoa_r+0x754>
 8006930:	42ab      	cmp	r3, r5
 8006932:	9a04      	ldr	r2, [sp, #16]
 8006934:	bfa8      	it	ge
 8006936:	462b      	movge	r3, r5
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	9204      	str	r2, [sp, #16]
 800693c:	9a05      	ldr	r2, [sp, #20]
 800693e:	1aed      	subs	r5, r5, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	b31b      	cbz	r3, 8006990 <_dtoa_r+0x7a0>
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80af 	beq.w	8006aae <_dtoa_r+0x8be>
 8006950:	2e00      	cmp	r6, #0
 8006952:	dd13      	ble.n	800697c <_dtoa_r+0x78c>
 8006954:	4639      	mov	r1, r7
 8006956:	4632      	mov	r2, r6
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fe29 	bl	80075b0 <__pow5mult>
 800695e:	ee18 2a10 	vmov	r2, s16
 8006962:	4601      	mov	r1, r0
 8006964:	4607      	mov	r7, r0
 8006966:	4620      	mov	r0, r4
 8006968:	f000 fd78 	bl	800745c <__multiply>
 800696c:	ee18 1a10 	vmov	r1, s16
 8006970:	4680      	mov	r8, r0
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fca4 	bl	80072c0 <_Bfree>
 8006978:	ee08 8a10 	vmov	s16, r8
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	1b9a      	subs	r2, r3, r6
 8006980:	d006      	beq.n	8006990 <_dtoa_r+0x7a0>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	4620      	mov	r0, r4
 8006988:	f000 fe12 	bl	80075b0 <__pow5mult>
 800698c:	ee08 0a10 	vmov	s16, r0
 8006990:	2101      	movs	r1, #1
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fd4c 	bl	8007430 <__i2b>
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	4606      	mov	r6, r0
 800699e:	f340 8088 	ble.w	8006ab2 <_dtoa_r+0x8c2>
 80069a2:	461a      	mov	r2, r3
 80069a4:	4601      	mov	r1, r0
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 fe02 	bl	80075b0 <__pow5mult>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	4606      	mov	r6, r0
 80069b2:	f340 8081 	ble.w	8006ab8 <_dtoa_r+0x8c8>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	6933      	ldr	r3, [r6, #16]
 80069bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	f000 fce5 	bl	8007390 <__hi0bits>
 80069c6:	f1c0 0020 	rsb	r0, r0, #32
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	4418      	add	r0, r3
 80069ce:	f010 001f 	ands.w	r0, r0, #31
 80069d2:	f000 8092 	beq.w	8006afa <_dtoa_r+0x90a>
 80069d6:	f1c0 0320 	rsb	r3, r0, #32
 80069da:	2b04      	cmp	r3, #4
 80069dc:	f340 808a 	ble.w	8006af4 <_dtoa_r+0x904>
 80069e0:	f1c0 001c 	rsb	r0, r0, #28
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	4403      	add	r3, r0
 80069e8:	9304      	str	r3, [sp, #16]
 80069ea:	9b05      	ldr	r3, [sp, #20]
 80069ec:	4403      	add	r3, r0
 80069ee:	4405      	add	r5, r0
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd07      	ble.n	8006a08 <_dtoa_r+0x818>
 80069f8:	ee18 1a10 	vmov	r1, s16
 80069fc:	461a      	mov	r2, r3
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fe30 	bl	8007664 <__lshift>
 8006a04:	ee08 0a10 	vmov	s16, r0
 8006a08:	9b05      	ldr	r3, [sp, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd05      	ble.n	8006a1a <_dtoa_r+0x82a>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	461a      	mov	r2, r3
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fe26 	bl	8007664 <__lshift>
 8006a18:	4606      	mov	r6, r0
 8006a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d06e      	beq.n	8006afe <_dtoa_r+0x90e>
 8006a20:	ee18 0a10 	vmov	r0, s16
 8006a24:	4631      	mov	r1, r6
 8006a26:	f000 fe8d 	bl	8007744 <__mcmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	da67      	bge.n	8006afe <_dtoa_r+0x90e>
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	220a      	movs	r2, #10
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fc61 	bl	8007304 <__multadd>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	ee08 0a10 	vmov	s16, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 81b1 	beq.w	8006db0 <_dtoa_r+0xbc0>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4639      	mov	r1, r7
 8006a52:	220a      	movs	r2, #10
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fc55 	bl	8007304 <__multadd>
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f300 808e 	bgt.w	8006b80 <_dtoa_r+0x990>
 8006a64:	9b06      	ldr	r3, [sp, #24]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc51      	bgt.n	8006b0e <_dtoa_r+0x91e>
 8006a6a:	e089      	b.n	8006b80 <_dtoa_r+0x990>
 8006a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a72:	e74b      	b.n	800690c <_dtoa_r+0x71c>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	1e5e      	subs	r6, r3, #1
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	42b3      	cmp	r3, r6
 8006a7c:	bfbf      	itttt	lt
 8006a7e:	9b07      	ldrlt	r3, [sp, #28]
 8006a80:	9607      	strlt	r6, [sp, #28]
 8006a82:	1af2      	sublt	r2, r6, r3
 8006a84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a86:	bfb6      	itet	lt
 8006a88:	189b      	addlt	r3, r3, r2
 8006a8a:	1b9e      	subge	r6, r3, r6
 8006a8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	bfb8      	it	lt
 8006a92:	2600      	movlt	r6, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfb7      	itett	lt
 8006a98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006a9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006aa0:	1a9d      	sublt	r5, r3, r2
 8006aa2:	2300      	movlt	r3, #0
 8006aa4:	e734      	b.n	8006910 <_dtoa_r+0x720>
 8006aa6:	9e07      	ldr	r6, [sp, #28]
 8006aa8:	9d04      	ldr	r5, [sp, #16]
 8006aaa:	9f08      	ldr	r7, [sp, #32]
 8006aac:	e73b      	b.n	8006926 <_dtoa_r+0x736>
 8006aae:	9a07      	ldr	r2, [sp, #28]
 8006ab0:	e767      	b.n	8006982 <_dtoa_r+0x792>
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	dc18      	bgt.n	8006aea <_dtoa_r+0x8fa>
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d115      	bne.n	8006aea <_dtoa_r+0x8fa>
 8006abe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ac2:	b993      	cbnz	r3, 8006aea <_dtoa_r+0x8fa>
 8006ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	b183      	cbz	r3, 8006af0 <_dtoa_r+0x900>
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	f04f 0801 	mov.w	r8, #1
 8006ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af6a 	bne.w	80069ba <_dtoa_r+0x7ca>
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	e76f      	b.n	80069ca <_dtoa_r+0x7da>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	e7f6      	b.n	8006ade <_dtoa_r+0x8ee>
 8006af0:	4698      	mov	r8, r3
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x8ee>
 8006af4:	f43f af7d 	beq.w	80069f2 <_dtoa_r+0x802>
 8006af8:	4618      	mov	r0, r3
 8006afa:	301c      	adds	r0, #28
 8006afc:	e772      	b.n	80069e4 <_dtoa_r+0x7f4>
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dc37      	bgt.n	8006b74 <_dtoa_r+0x984>
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	dd34      	ble.n	8006b74 <_dtoa_r+0x984>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	b96b      	cbnz	r3, 8006b2e <_dtoa_r+0x93e>
 8006b12:	4631      	mov	r1, r6
 8006b14:	2205      	movs	r2, #5
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fbf4 	bl	8007304 <__multadd>
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4606      	mov	r6, r0
 8006b20:	ee18 0a10 	vmov	r0, s16
 8006b24:	f000 fe0e 	bl	8007744 <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f73f adbb 	bgt.w	80066a4 <_dtoa_r+0x4b4>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	9d01      	ldr	r5, [sp, #4]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fbbf 	bl	80072c0 <_Bfree>
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	f43f aea4 	beq.w	8006890 <_dtoa_r+0x6a0>
 8006b48:	f1b8 0f00 	cmp.w	r8, #0
 8006b4c:	d005      	beq.n	8006b5a <_dtoa_r+0x96a>
 8006b4e:	45b8      	cmp	r8, r7
 8006b50:	d003      	beq.n	8006b5a <_dtoa_r+0x96a>
 8006b52:	4641      	mov	r1, r8
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fbb3 	bl	80072c0 <_Bfree>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 fbaf 	bl	80072c0 <_Bfree>
 8006b62:	e695      	b.n	8006890 <_dtoa_r+0x6a0>
 8006b64:	2600      	movs	r6, #0
 8006b66:	4637      	mov	r7, r6
 8006b68:	e7e1      	b.n	8006b2e <_dtoa_r+0x93e>
 8006b6a:	9700      	str	r7, [sp, #0]
 8006b6c:	4637      	mov	r7, r6
 8006b6e:	e599      	b.n	80066a4 <_dtoa_r+0x4b4>
 8006b70:	40240000 	.word	0x40240000
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80ca 	beq.w	8006d10 <_dtoa_r+0xb20>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	dd05      	ble.n	8006b90 <_dtoa_r+0x9a0>
 8006b84:	4639      	mov	r1, r7
 8006b86:	462a      	mov	r2, r5
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fd6b 	bl	8007664 <__lshift>
 8006b8e:	4607      	mov	r7, r0
 8006b90:	f1b8 0f00 	cmp.w	r8, #0
 8006b94:	d05b      	beq.n	8006c4e <_dtoa_r+0xa5e>
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fb51 	bl	8007240 <_Balloc>
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <_dtoa_r+0x9be>
 8006ba2:	4b87      	ldr	r3, [pc, #540]	; (8006dc0 <_dtoa_r+0xbd0>)
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006baa:	f7ff bb3b 	b.w	8006224 <_dtoa_r+0x34>
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	f107 010c 	add.w	r1, r7, #12
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f000 fb33 	bl	8007224 <memcpy>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fd4e 	bl	8007664 <__lshift>
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	f103 0901 	add.w	r9, r3, #1
 8006bce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	f00a 0301 	and.w	r3, sl, #1
 8006bda:	46b8      	mov	r8, r7
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	4607      	mov	r7, r0
 8006be0:	4631      	mov	r1, r6
 8006be2:	ee18 0a10 	vmov	r0, s16
 8006be6:	f7ff fa75 	bl	80060d4 <quorem>
 8006bea:	4641      	mov	r1, r8
 8006bec:	9002      	str	r0, [sp, #8]
 8006bee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bf2:	ee18 0a10 	vmov	r0, s16
 8006bf6:	f000 fda5 	bl	8007744 <__mcmp>
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	9003      	str	r0, [sp, #12]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fdbb 	bl	800777c <__mdiff>
 8006c06:	68c2      	ldr	r2, [r0, #12]
 8006c08:	f109 3bff 	add.w	fp, r9, #4294967295
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	bb02      	cbnz	r2, 8006c52 <_dtoa_r+0xa62>
 8006c10:	4601      	mov	r1, r0
 8006c12:	ee18 0a10 	vmov	r0, s16
 8006c16:	f000 fd95 	bl	8007744 <__mcmp>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	9207      	str	r2, [sp, #28]
 8006c22:	f000 fb4d 	bl	80072c0 <_Bfree>
 8006c26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c2a:	ea43 0102 	orr.w	r1, r3, r2
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	464d      	mov	r5, r9
 8006c34:	d10f      	bne.n	8006c56 <_dtoa_r+0xa66>
 8006c36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c3a:	d02a      	beq.n	8006c92 <_dtoa_r+0xaa2>
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	dd02      	ble.n	8006c48 <_dtoa_r+0xa58>
 8006c42:	9b02      	ldr	r3, [sp, #8]
 8006c44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006c48:	f88b a000 	strb.w	sl, [fp]
 8006c4c:	e775      	b.n	8006b3a <_dtoa_r+0x94a>
 8006c4e:	4638      	mov	r0, r7
 8006c50:	e7ba      	b.n	8006bc8 <_dtoa_r+0x9d8>
 8006c52:	2201      	movs	r2, #1
 8006c54:	e7e2      	b.n	8006c1c <_dtoa_r+0xa2c>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db04      	blt.n	8006c66 <_dtoa_r+0xa76>
 8006c5c:	9906      	ldr	r1, [sp, #24]
 8006c5e:	430b      	orrs	r3, r1
 8006c60:	9904      	ldr	r1, [sp, #16]
 8006c62:	430b      	orrs	r3, r1
 8006c64:	d122      	bne.n	8006cac <_dtoa_r+0xabc>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	ddee      	ble.n	8006c48 <_dtoa_r+0xa58>
 8006c6a:	ee18 1a10 	vmov	r1, s16
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fcf7 	bl	8007664 <__lshift>
 8006c76:	4631      	mov	r1, r6
 8006c78:	ee08 0a10 	vmov	s16, r0
 8006c7c:	f000 fd62 	bl	8007744 <__mcmp>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	dc03      	bgt.n	8006c8c <_dtoa_r+0xa9c>
 8006c84:	d1e0      	bne.n	8006c48 <_dtoa_r+0xa58>
 8006c86:	f01a 0f01 	tst.w	sl, #1
 8006c8a:	d0dd      	beq.n	8006c48 <_dtoa_r+0xa58>
 8006c8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c90:	d1d7      	bne.n	8006c42 <_dtoa_r+0xa52>
 8006c92:	2339      	movs	r3, #57	; 0x39
 8006c94:	f88b 3000 	strb.w	r3, [fp]
 8006c98:	462b      	mov	r3, r5
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ca2:	2a39      	cmp	r2, #57	; 0x39
 8006ca4:	d071      	beq.n	8006d8a <_dtoa_r+0xb9a>
 8006ca6:	3201      	adds	r2, #1
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e746      	b.n	8006b3a <_dtoa_r+0x94a>
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	dd07      	ble.n	8006cc0 <_dtoa_r+0xad0>
 8006cb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cb4:	d0ed      	beq.n	8006c92 <_dtoa_r+0xaa2>
 8006cb6:	f10a 0301 	add.w	r3, sl, #1
 8006cba:	f88b 3000 	strb.w	r3, [fp]
 8006cbe:	e73c      	b.n	8006b3a <_dtoa_r+0x94a>
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006cc6:	4599      	cmp	r9, r3
 8006cc8:	d047      	beq.n	8006d5a <_dtoa_r+0xb6a>
 8006cca:	ee18 1a10 	vmov	r1, s16
 8006cce:	2300      	movs	r3, #0
 8006cd0:	220a      	movs	r2, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fb16 	bl	8007304 <__multadd>
 8006cd8:	45b8      	cmp	r8, r7
 8006cda:	ee08 0a10 	vmov	s16, r0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	f04f 020a 	mov.w	r2, #10
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	4620      	mov	r0, r4
 8006cea:	d106      	bne.n	8006cfa <_dtoa_r+0xb0a>
 8006cec:	f000 fb0a 	bl	8007304 <__multadd>
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	f109 0901 	add.w	r9, r9, #1
 8006cf8:	e772      	b.n	8006be0 <_dtoa_r+0x9f0>
 8006cfa:	f000 fb03 	bl	8007304 <__multadd>
 8006cfe:	4639      	mov	r1, r7
 8006d00:	4680      	mov	r8, r0
 8006d02:	2300      	movs	r3, #0
 8006d04:	220a      	movs	r2, #10
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fafc 	bl	8007304 <__multadd>
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	e7f1      	b.n	8006cf4 <_dtoa_r+0xb04>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	9d01      	ldr	r5, [sp, #4]
 8006d16:	ee18 0a10 	vmov	r0, s16
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	f7ff f9da 	bl	80060d4 <quorem>
 8006d20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	f805 ab01 	strb.w	sl, [r5], #1
 8006d2a:	1aea      	subs	r2, r5, r3
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	dd09      	ble.n	8006d46 <_dtoa_r+0xb56>
 8006d32:	ee18 1a10 	vmov	r1, s16
 8006d36:	2300      	movs	r3, #0
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fae2 	bl	8007304 <__multadd>
 8006d40:	ee08 0a10 	vmov	s16, r0
 8006d44:	e7e7      	b.n	8006d16 <_dtoa_r+0xb26>
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfc8      	it	gt
 8006d4c:	461d      	movgt	r5, r3
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	bfd8      	it	le
 8006d52:	2501      	movle	r5, #1
 8006d54:	441d      	add	r5, r3
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	ee18 1a10 	vmov	r1, s16
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fc7f 	bl	8007664 <__lshift>
 8006d66:	4631      	mov	r1, r6
 8006d68:	ee08 0a10 	vmov	s16, r0
 8006d6c:	f000 fcea 	bl	8007744 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	dc91      	bgt.n	8006c98 <_dtoa_r+0xaa8>
 8006d74:	d102      	bne.n	8006d7c <_dtoa_r+0xb8c>
 8006d76:	f01a 0f01 	tst.w	sl, #1
 8006d7a:	d18d      	bne.n	8006c98 <_dtoa_r+0xaa8>
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	461d      	mov	r5, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a30      	cmp	r2, #48	; 0x30
 8006d86:	d0fa      	beq.n	8006d7e <_dtoa_r+0xb8e>
 8006d88:	e6d7      	b.n	8006b3a <_dtoa_r+0x94a>
 8006d8a:	9a01      	ldr	r2, [sp, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d184      	bne.n	8006c9a <_dtoa_r+0xaaa>
 8006d90:	9b00      	ldr	r3, [sp, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2331      	movs	r3, #49	; 0x31
 8006d98:	7013      	strb	r3, [r2, #0]
 8006d9a:	e6ce      	b.n	8006b3a <_dtoa_r+0x94a>
 8006d9c:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <_dtoa_r+0xbd4>)
 8006d9e:	f7ff ba95 	b.w	80062cc <_dtoa_r+0xdc>
 8006da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f47f aa6e 	bne.w	8006286 <_dtoa_r+0x96>
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <_dtoa_r+0xbd8>)
 8006dac:	f7ff ba8e 	b.w	80062cc <_dtoa_r+0xdc>
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dcae      	bgt.n	8006d14 <_dtoa_r+0xb24>
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f73f aea8 	bgt.w	8006b0e <_dtoa_r+0x91e>
 8006dbe:	e7a9      	b.n	8006d14 <_dtoa_r+0xb24>
 8006dc0:	080099fb 	.word	0x080099fb
 8006dc4:	08009958 	.word	0x08009958
 8006dc8:	0800997c 	.word	0x0800997c

08006dcc <__sflush_r>:
 8006dcc:	898a      	ldrh	r2, [r1, #12]
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	0710      	lsls	r0, r2, #28
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	d458      	bmi.n	8006e8c <__sflush_r+0xc0>
 8006dda:	684b      	ldr	r3, [r1, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dc05      	bgt.n	8006dec <__sflush_r+0x20>
 8006de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dc02      	bgt.n	8006dec <__sflush_r+0x20>
 8006de6:	2000      	movs	r0, #0
 8006de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	d0f9      	beq.n	8006de6 <__sflush_r+0x1a>
 8006df2:	2300      	movs	r3, #0
 8006df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006df8:	682f      	ldr	r7, [r5, #0]
 8006dfa:	602b      	str	r3, [r5, #0]
 8006dfc:	d032      	beq.n	8006e64 <__sflush_r+0x98>
 8006dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	075a      	lsls	r2, r3, #29
 8006e04:	d505      	bpl.n	8006e12 <__sflush_r+0x46>
 8006e06:	6863      	ldr	r3, [r4, #4]
 8006e08:	1ac0      	subs	r0, r0, r3
 8006e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e0c:	b10b      	cbz	r3, 8006e12 <__sflush_r+0x46>
 8006e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e10:	1ac0      	subs	r0, r0, r3
 8006e12:	2300      	movs	r3, #0
 8006e14:	4602      	mov	r2, r0
 8006e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e18:	6a21      	ldr	r1, [r4, #32]
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b0      	blx	r6
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	d106      	bne.n	8006e32 <__sflush_r+0x66>
 8006e24:	6829      	ldr	r1, [r5, #0]
 8006e26:	291d      	cmp	r1, #29
 8006e28:	d82c      	bhi.n	8006e84 <__sflush_r+0xb8>
 8006e2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ed4 <__sflush_r+0x108>)
 8006e2c:	40ca      	lsrs	r2, r1
 8006e2e:	07d6      	lsls	r6, r2, #31
 8006e30:	d528      	bpl.n	8006e84 <__sflush_r+0xb8>
 8006e32:	2200      	movs	r2, #0
 8006e34:	6062      	str	r2, [r4, #4]
 8006e36:	04d9      	lsls	r1, r3, #19
 8006e38:	6922      	ldr	r2, [r4, #16]
 8006e3a:	6022      	str	r2, [r4, #0]
 8006e3c:	d504      	bpl.n	8006e48 <__sflush_r+0x7c>
 8006e3e:	1c42      	adds	r2, r0, #1
 8006e40:	d101      	bne.n	8006e46 <__sflush_r+0x7a>
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	b903      	cbnz	r3, 8006e48 <__sflush_r+0x7c>
 8006e46:	6560      	str	r0, [r4, #84]	; 0x54
 8006e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e4a:	602f      	str	r7, [r5, #0]
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d0ca      	beq.n	8006de6 <__sflush_r+0x1a>
 8006e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e54:	4299      	cmp	r1, r3
 8006e56:	d002      	beq.n	8006e5e <__sflush_r+0x92>
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fd8b 	bl	8007974 <_free_r>
 8006e5e:	2000      	movs	r0, #0
 8006e60:	6360      	str	r0, [r4, #52]	; 0x34
 8006e62:	e7c1      	b.n	8006de8 <__sflush_r+0x1c>
 8006e64:	6a21      	ldr	r1, [r4, #32]
 8006e66:	2301      	movs	r3, #1
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b0      	blx	r6
 8006e6c:	1c41      	adds	r1, r0, #1
 8006e6e:	d1c7      	bne.n	8006e00 <__sflush_r+0x34>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0c4      	beq.n	8006e00 <__sflush_r+0x34>
 8006e76:	2b1d      	cmp	r3, #29
 8006e78:	d001      	beq.n	8006e7e <__sflush_r+0xb2>
 8006e7a:	2b16      	cmp	r3, #22
 8006e7c:	d101      	bne.n	8006e82 <__sflush_r+0xb6>
 8006e7e:	602f      	str	r7, [r5, #0]
 8006e80:	e7b1      	b.n	8006de6 <__sflush_r+0x1a>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	e7ad      	b.n	8006de8 <__sflush_r+0x1c>
 8006e8c:	690f      	ldr	r7, [r1, #16]
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	d0a9      	beq.n	8006de6 <__sflush_r+0x1a>
 8006e92:	0793      	lsls	r3, r2, #30
 8006e94:	680e      	ldr	r6, [r1, #0]
 8006e96:	bf08      	it	eq
 8006e98:	694b      	ldreq	r3, [r1, #20]
 8006e9a:	600f      	str	r7, [r1, #0]
 8006e9c:	bf18      	it	ne
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	eba6 0807 	sub.w	r8, r6, r7
 8006ea4:	608b      	str	r3, [r1, #8]
 8006ea6:	f1b8 0f00 	cmp.w	r8, #0
 8006eaa:	dd9c      	ble.n	8006de6 <__sflush_r+0x1a>
 8006eac:	6a21      	ldr	r1, [r4, #32]
 8006eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b0      	blx	r6
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	dc06      	bgt.n	8006eca <__sflush_r+0xfe>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e78e      	b.n	8006de8 <__sflush_r+0x1c>
 8006eca:	4407      	add	r7, r0
 8006ecc:	eba8 0800 	sub.w	r8, r8, r0
 8006ed0:	e7e9      	b.n	8006ea6 <__sflush_r+0xda>
 8006ed2:	bf00      	nop
 8006ed4:	20400001 	.word	0x20400001

08006ed8 <_fflush_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	690b      	ldr	r3, [r1, #16]
 8006edc:	4605      	mov	r5, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	b913      	cbnz	r3, 8006ee8 <_fflush_r+0x10>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	b118      	cbz	r0, 8006ef2 <_fflush_r+0x1a>
 8006eea:	6983      	ldr	r3, [r0, #24]
 8006eec:	b90b      	cbnz	r3, 8006ef2 <_fflush_r+0x1a>
 8006eee:	f000 f887 	bl	8007000 <__sinit>
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <_fflush_r+0x6c>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	d11b      	bne.n	8006f30 <_fflush_r+0x58>
 8006ef8:	686c      	ldr	r4, [r5, #4]
 8006efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0ef      	beq.n	8006ee2 <_fflush_r+0xa>
 8006f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f04:	07d0      	lsls	r0, r2, #31
 8006f06:	d404      	bmi.n	8006f12 <_fflush_r+0x3a>
 8006f08:	0599      	lsls	r1, r3, #22
 8006f0a:	d402      	bmi.n	8006f12 <_fflush_r+0x3a>
 8006f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0e:	f000 f91a 	bl	8007146 <__retarget_lock_acquire_recursive>
 8006f12:	4628      	mov	r0, r5
 8006f14:	4621      	mov	r1, r4
 8006f16:	f7ff ff59 	bl	8006dcc <__sflush_r>
 8006f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f1c:	07da      	lsls	r2, r3, #31
 8006f1e:	4605      	mov	r5, r0
 8006f20:	d4e0      	bmi.n	8006ee4 <_fflush_r+0xc>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	059b      	lsls	r3, r3, #22
 8006f26:	d4dd      	bmi.n	8006ee4 <_fflush_r+0xc>
 8006f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f2a:	f000 f90d 	bl	8007148 <__retarget_lock_release_recursive>
 8006f2e:	e7d9      	b.n	8006ee4 <_fflush_r+0xc>
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <_fflush_r+0x70>)
 8006f32:	429c      	cmp	r4, r3
 8006f34:	d101      	bne.n	8006f3a <_fflush_r+0x62>
 8006f36:	68ac      	ldr	r4, [r5, #8]
 8006f38:	e7df      	b.n	8006efa <_fflush_r+0x22>
 8006f3a:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <_fflush_r+0x74>)
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	bf08      	it	eq
 8006f40:	68ec      	ldreq	r4, [r5, #12]
 8006f42:	e7da      	b.n	8006efa <_fflush_r+0x22>
 8006f44:	08009a2c 	.word	0x08009a2c
 8006f48:	08009a4c 	.word	0x08009a4c
 8006f4c:	08009a0c 	.word	0x08009a0c

08006f50 <std>:
 8006f50:	2300      	movs	r3, #0
 8006f52:	b510      	push	{r4, lr}
 8006f54:	4604      	mov	r4, r0
 8006f56:	e9c0 3300 	strd	r3, r3, [r0]
 8006f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f5e:	6083      	str	r3, [r0, #8]
 8006f60:	8181      	strh	r1, [r0, #12]
 8006f62:	6643      	str	r3, [r0, #100]	; 0x64
 8006f64:	81c2      	strh	r2, [r0, #14]
 8006f66:	6183      	str	r3, [r0, #24]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	305c      	adds	r0, #92	; 0x5c
 8006f6e:	f7fe faf1 	bl	8005554 <memset>
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <std+0x38>)
 8006f74:	6263      	str	r3, [r4, #36]	; 0x24
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <std+0x3c>)
 8006f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <std+0x40>)
 8006f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f7e:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <std+0x44>)
 8006f80:	6224      	str	r4, [r4, #32]
 8006f82:	6323      	str	r3, [r4, #48]	; 0x30
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	bf00      	nop
 8006f88:	08007e09 	.word	0x08007e09
 8006f8c:	08007e2b 	.word	0x08007e2b
 8006f90:	08007e63 	.word	0x08007e63
 8006f94:	08007e87 	.word	0x08007e87

08006f98 <_cleanup_r>:
 8006f98:	4901      	ldr	r1, [pc, #4]	; (8006fa0 <_cleanup_r+0x8>)
 8006f9a:	f000 b8af 	b.w	80070fc <_fwalk_reent>
 8006f9e:	bf00      	nop
 8006fa0:	08006ed9 	.word	0x08006ed9

08006fa4 <__sfmoreglue>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	2268      	movs	r2, #104	; 0x68
 8006fa8:	1e4d      	subs	r5, r1, #1
 8006faa:	4355      	muls	r5, r2
 8006fac:	460e      	mov	r6, r1
 8006fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fb2:	f000 fd4b 	bl	8007a4c <_malloc_r>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b140      	cbz	r0, 8006fcc <__sfmoreglue+0x28>
 8006fba:	2100      	movs	r1, #0
 8006fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8006fc0:	300c      	adds	r0, #12
 8006fc2:	60a0      	str	r0, [r4, #8]
 8006fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fc8:	f7fe fac4 	bl	8005554 <memset>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	bd70      	pop	{r4, r5, r6, pc}

08006fd0 <__sfp_lock_acquire>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sfp_lock_acquire+0x8>)
 8006fd2:	f000 b8b8 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20000299 	.word	0x20000299

08006fdc <__sfp_lock_release>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sfp_lock_release+0x8>)
 8006fde:	f000 b8b3 	b.w	8007148 <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20000299 	.word	0x20000299

08006fe8 <__sinit_lock_acquire>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__sinit_lock_acquire+0x8>)
 8006fea:	f000 b8ac 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	2000029a 	.word	0x2000029a

08006ff4 <__sinit_lock_release>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__sinit_lock_release+0x8>)
 8006ff6:	f000 b8a7 	b.w	8007148 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	2000029a 	.word	0x2000029a

08007000 <__sinit>:
 8007000:	b510      	push	{r4, lr}
 8007002:	4604      	mov	r4, r0
 8007004:	f7ff fff0 	bl	8006fe8 <__sinit_lock_acquire>
 8007008:	69a3      	ldr	r3, [r4, #24]
 800700a:	b11b      	cbz	r3, 8007014 <__sinit+0x14>
 800700c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007010:	f7ff bff0 	b.w	8006ff4 <__sinit_lock_release>
 8007014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007018:	6523      	str	r3, [r4, #80]	; 0x50
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <__sinit+0x68>)
 800701c:	4a13      	ldr	r2, [pc, #76]	; (800706c <__sinit+0x6c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	62a2      	str	r2, [r4, #40]	; 0x28
 8007022:	42a3      	cmp	r3, r4
 8007024:	bf04      	itt	eq
 8007026:	2301      	moveq	r3, #1
 8007028:	61a3      	streq	r3, [r4, #24]
 800702a:	4620      	mov	r0, r4
 800702c:	f000 f820 	bl	8007070 <__sfp>
 8007030:	6060      	str	r0, [r4, #4]
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f81c 	bl	8007070 <__sfp>
 8007038:	60a0      	str	r0, [r4, #8]
 800703a:	4620      	mov	r0, r4
 800703c:	f000 f818 	bl	8007070 <__sfp>
 8007040:	2200      	movs	r2, #0
 8007042:	60e0      	str	r0, [r4, #12]
 8007044:	2104      	movs	r1, #4
 8007046:	6860      	ldr	r0, [r4, #4]
 8007048:	f7ff ff82 	bl	8006f50 <std>
 800704c:	68a0      	ldr	r0, [r4, #8]
 800704e:	2201      	movs	r2, #1
 8007050:	2109      	movs	r1, #9
 8007052:	f7ff ff7d 	bl	8006f50 <std>
 8007056:	68e0      	ldr	r0, [r4, #12]
 8007058:	2202      	movs	r2, #2
 800705a:	2112      	movs	r1, #18
 800705c:	f7ff ff78 	bl	8006f50 <std>
 8007060:	2301      	movs	r3, #1
 8007062:	61a3      	str	r3, [r4, #24]
 8007064:	e7d2      	b.n	800700c <__sinit+0xc>
 8007066:	bf00      	nop
 8007068:	08009944 	.word	0x08009944
 800706c:	08006f99 	.word	0x08006f99

08007070 <__sfp>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	4607      	mov	r7, r0
 8007074:	f7ff ffac 	bl	8006fd0 <__sfp_lock_acquire>
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <__sfp+0x84>)
 800707a:	681e      	ldr	r6, [r3, #0]
 800707c:	69b3      	ldr	r3, [r6, #24]
 800707e:	b913      	cbnz	r3, 8007086 <__sfp+0x16>
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff ffbd 	bl	8007000 <__sinit>
 8007086:	3648      	adds	r6, #72	; 0x48
 8007088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800708c:	3b01      	subs	r3, #1
 800708e:	d503      	bpl.n	8007098 <__sfp+0x28>
 8007090:	6833      	ldr	r3, [r6, #0]
 8007092:	b30b      	cbz	r3, 80070d8 <__sfp+0x68>
 8007094:	6836      	ldr	r6, [r6, #0]
 8007096:	e7f7      	b.n	8007088 <__sfp+0x18>
 8007098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800709c:	b9d5      	cbnz	r5, 80070d4 <__sfp+0x64>
 800709e:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <__sfp+0x88>)
 80070a0:	60e3      	str	r3, [r4, #12]
 80070a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070a6:	6665      	str	r5, [r4, #100]	; 0x64
 80070a8:	f000 f84c 	bl	8007144 <__retarget_lock_init_recursive>
 80070ac:	f7ff ff96 	bl	8006fdc <__sfp_lock_release>
 80070b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070b8:	6025      	str	r5, [r4, #0]
 80070ba:	61a5      	str	r5, [r4, #24]
 80070bc:	2208      	movs	r2, #8
 80070be:	4629      	mov	r1, r5
 80070c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070c4:	f7fe fa46 	bl	8005554 <memset>
 80070c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070d0:	4620      	mov	r0, r4
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d4:	3468      	adds	r4, #104	; 0x68
 80070d6:	e7d9      	b.n	800708c <__sfp+0x1c>
 80070d8:	2104      	movs	r1, #4
 80070da:	4638      	mov	r0, r7
 80070dc:	f7ff ff62 	bl	8006fa4 <__sfmoreglue>
 80070e0:	4604      	mov	r4, r0
 80070e2:	6030      	str	r0, [r6, #0]
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1d5      	bne.n	8007094 <__sfp+0x24>
 80070e8:	f7ff ff78 	bl	8006fdc <__sfp_lock_release>
 80070ec:	230c      	movs	r3, #12
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	e7ee      	b.n	80070d0 <__sfp+0x60>
 80070f2:	bf00      	nop
 80070f4:	08009944 	.word	0x08009944
 80070f8:	ffff0001 	.word	0xffff0001

080070fc <_fwalk_reent>:
 80070fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007100:	4606      	mov	r6, r0
 8007102:	4688      	mov	r8, r1
 8007104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007108:	2700      	movs	r7, #0
 800710a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800710e:	f1b9 0901 	subs.w	r9, r9, #1
 8007112:	d505      	bpl.n	8007120 <_fwalk_reent+0x24>
 8007114:	6824      	ldr	r4, [r4, #0]
 8007116:	2c00      	cmp	r4, #0
 8007118:	d1f7      	bne.n	800710a <_fwalk_reent+0xe>
 800711a:	4638      	mov	r0, r7
 800711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007120:	89ab      	ldrh	r3, [r5, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d907      	bls.n	8007136 <_fwalk_reent+0x3a>
 8007126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800712a:	3301      	adds	r3, #1
 800712c:	d003      	beq.n	8007136 <_fwalk_reent+0x3a>
 800712e:	4629      	mov	r1, r5
 8007130:	4630      	mov	r0, r6
 8007132:	47c0      	blx	r8
 8007134:	4307      	orrs	r7, r0
 8007136:	3568      	adds	r5, #104	; 0x68
 8007138:	e7e9      	b.n	800710e <_fwalk_reent+0x12>
	...

0800713c <_localeconv_r>:
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_localeconv_r+0x4>)
 800713e:	4770      	bx	lr
 8007140:	20000160 	.word	0x20000160

08007144 <__retarget_lock_init_recursive>:
 8007144:	4770      	bx	lr

08007146 <__retarget_lock_acquire_recursive>:
 8007146:	4770      	bx	lr

08007148 <__retarget_lock_release_recursive>:
 8007148:	4770      	bx	lr

0800714a <__swhatbuf_r>:
 800714a:	b570      	push	{r4, r5, r6, lr}
 800714c:	460e      	mov	r6, r1
 800714e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007152:	2900      	cmp	r1, #0
 8007154:	b096      	sub	sp, #88	; 0x58
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	da08      	bge.n	800716e <__swhatbuf_r+0x24>
 800715c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	602a      	str	r2, [r5, #0]
 8007164:	061a      	lsls	r2, r3, #24
 8007166:	d410      	bmi.n	800718a <__swhatbuf_r+0x40>
 8007168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800716c:	e00e      	b.n	800718c <__swhatbuf_r+0x42>
 800716e:	466a      	mov	r2, sp
 8007170:	f000 fee0 	bl	8007f34 <_fstat_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	dbf1      	blt.n	800715c <__swhatbuf_r+0x12>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800717e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007182:	425a      	negs	r2, r3
 8007184:	415a      	adcs	r2, r3
 8007186:	602a      	str	r2, [r5, #0]
 8007188:	e7ee      	b.n	8007168 <__swhatbuf_r+0x1e>
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	2000      	movs	r0, #0
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	b016      	add	sp, #88	; 0x58
 8007192:	bd70      	pop	{r4, r5, r6, pc}

08007194 <__smakebuf_r>:
 8007194:	898b      	ldrh	r3, [r1, #12]
 8007196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007198:	079d      	lsls	r5, r3, #30
 800719a:	4606      	mov	r6, r0
 800719c:	460c      	mov	r4, r1
 800719e:	d507      	bpl.n	80071b0 <__smakebuf_r+0x1c>
 80071a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	2301      	movs	r3, #1
 80071aa:	6163      	str	r3, [r4, #20]
 80071ac:	b002      	add	sp, #8
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	ab01      	add	r3, sp, #4
 80071b2:	466a      	mov	r2, sp
 80071b4:	f7ff ffc9 	bl	800714a <__swhatbuf_r>
 80071b8:	9900      	ldr	r1, [sp, #0]
 80071ba:	4605      	mov	r5, r0
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 fc45 	bl	8007a4c <_malloc_r>
 80071c2:	b948      	cbnz	r0, 80071d8 <__smakebuf_r+0x44>
 80071c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c8:	059a      	lsls	r2, r3, #22
 80071ca:	d4ef      	bmi.n	80071ac <__smakebuf_r+0x18>
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	e7e3      	b.n	80071a0 <__smakebuf_r+0xc>
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <__smakebuf_r+0x7c>)
 80071da:	62b3      	str	r3, [r6, #40]	; 0x28
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	6020      	str	r0, [r4, #0]
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	6163      	str	r3, [r4, #20]
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	6120      	str	r0, [r4, #16]
 80071ee:	b15b      	cbz	r3, 8007208 <__smakebuf_r+0x74>
 80071f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071f4:	4630      	mov	r0, r6
 80071f6:	f000 feaf 	bl	8007f58 <_isatty_r>
 80071fa:	b128      	cbz	r0, 8007208 <__smakebuf_r+0x74>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	89a0      	ldrh	r0, [r4, #12]
 800720a:	4305      	orrs	r5, r0
 800720c:	81a5      	strh	r5, [r4, #12]
 800720e:	e7cd      	b.n	80071ac <__smakebuf_r+0x18>
 8007210:	08006f99 	.word	0x08006f99

08007214 <malloc>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <malloc+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f000 bc17 	b.w	8007a4c <_malloc_r>
 800721e:	bf00      	nop
 8007220:	2000000c 	.word	0x2000000c

08007224 <memcpy>:
 8007224:	440a      	add	r2, r1
 8007226:	4291      	cmp	r1, r2
 8007228:	f100 33ff 	add.w	r3, r0, #4294967295
 800722c:	d100      	bne.n	8007230 <memcpy+0xc>
 800722e:	4770      	bx	lr
 8007230:	b510      	push	{r4, lr}
 8007232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800723a:	4291      	cmp	r1, r2
 800723c:	d1f9      	bne.n	8007232 <memcpy+0xe>
 800723e:	bd10      	pop	{r4, pc}

08007240 <_Balloc>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	b976      	cbnz	r6, 8007268 <_Balloc+0x28>
 800724a:	2010      	movs	r0, #16
 800724c:	f7ff ffe2 	bl	8007214 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	6260      	str	r0, [r4, #36]	; 0x24
 8007254:	b920      	cbnz	r0, 8007260 <_Balloc+0x20>
 8007256:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <_Balloc+0x78>)
 8007258:	4818      	ldr	r0, [pc, #96]	; (80072bc <_Balloc+0x7c>)
 800725a:	2166      	movs	r1, #102	; 0x66
 800725c:	f000 fe2a 	bl	8007eb4 <__assert_func>
 8007260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007264:	6006      	str	r6, [r0, #0]
 8007266:	60c6      	str	r6, [r0, #12]
 8007268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800726a:	68f3      	ldr	r3, [r6, #12]
 800726c:	b183      	cbz	r3, 8007290 <_Balloc+0x50>
 800726e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007276:	b9b8      	cbnz	r0, 80072a8 <_Balloc+0x68>
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f605 	lsl.w	r6, r1, r5
 800727e:	1d72      	adds	r2, r6, #5
 8007280:	0092      	lsls	r2, r2, #2
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fb60 	bl	8007948 <_calloc_r>
 8007288:	b160      	cbz	r0, 80072a4 <_Balloc+0x64>
 800728a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800728e:	e00e      	b.n	80072ae <_Balloc+0x6e>
 8007290:	2221      	movs	r2, #33	; 0x21
 8007292:	2104      	movs	r1, #4
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fb57 	bl	8007948 <_calloc_r>
 800729a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800729c:	60f0      	str	r0, [r6, #12]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <_Balloc+0x2e>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	6802      	ldr	r2, [r0, #0]
 80072aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ae:	2300      	movs	r3, #0
 80072b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072b4:	e7f7      	b.n	80072a6 <_Balloc+0x66>
 80072b6:	bf00      	nop
 80072b8:	08009989 	.word	0x08009989
 80072bc:	08009a6c 	.word	0x08009a6c

080072c0 <_Bfree>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b976      	cbnz	r6, 80072e8 <_Bfree+0x28>
 80072ca:	2010      	movs	r0, #16
 80072cc:	f7ff ffa2 	bl	8007214 <malloc>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6268      	str	r0, [r5, #36]	; 0x24
 80072d4:	b920      	cbnz	r0, 80072e0 <_Bfree+0x20>
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <_Bfree+0x3c>)
 80072d8:	4809      	ldr	r0, [pc, #36]	; (8007300 <_Bfree+0x40>)
 80072da:	218a      	movs	r1, #138	; 0x8a
 80072dc:	f000 fdea 	bl	8007eb4 <__assert_func>
 80072e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072e4:	6006      	str	r6, [r0, #0]
 80072e6:	60c6      	str	r6, [r0, #12]
 80072e8:	b13c      	cbz	r4, 80072fa <_Bfree+0x3a>
 80072ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f4:	6021      	str	r1, [r4, #0]
 80072f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	08009989 	.word	0x08009989
 8007300:	08009a6c 	.word	0x08009a6c

08007304 <__multadd>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	690d      	ldr	r5, [r1, #16]
 800730a:	4607      	mov	r7, r0
 800730c:	460c      	mov	r4, r1
 800730e:	461e      	mov	r6, r3
 8007310:	f101 0c14 	add.w	ip, r1, #20
 8007314:	2000      	movs	r0, #0
 8007316:	f8dc 3000 	ldr.w	r3, [ip]
 800731a:	b299      	uxth	r1, r3
 800731c:	fb02 6101 	mla	r1, r2, r1, r6
 8007320:	0c1e      	lsrs	r6, r3, #16
 8007322:	0c0b      	lsrs	r3, r1, #16
 8007324:	fb02 3306 	mla	r3, r2, r6, r3
 8007328:	b289      	uxth	r1, r1
 800732a:	3001      	adds	r0, #1
 800732c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007330:	4285      	cmp	r5, r0
 8007332:	f84c 1b04 	str.w	r1, [ip], #4
 8007336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800733a:	dcec      	bgt.n	8007316 <__multadd+0x12>
 800733c:	b30e      	cbz	r6, 8007382 <__multadd+0x7e>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	42ab      	cmp	r3, r5
 8007342:	dc19      	bgt.n	8007378 <__multadd+0x74>
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	4638      	mov	r0, r7
 8007348:	3101      	adds	r1, #1
 800734a:	f7ff ff79 	bl	8007240 <_Balloc>
 800734e:	4680      	mov	r8, r0
 8007350:	b928      	cbnz	r0, 800735e <__multadd+0x5a>
 8007352:	4602      	mov	r2, r0
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <__multadd+0x84>)
 8007356:	480d      	ldr	r0, [pc, #52]	; (800738c <__multadd+0x88>)
 8007358:	21b5      	movs	r1, #181	; 0xb5
 800735a:	f000 fdab 	bl	8007eb4 <__assert_func>
 800735e:	6922      	ldr	r2, [r4, #16]
 8007360:	3202      	adds	r2, #2
 8007362:	f104 010c 	add.w	r1, r4, #12
 8007366:	0092      	lsls	r2, r2, #2
 8007368:	300c      	adds	r0, #12
 800736a:	f7ff ff5b 	bl	8007224 <memcpy>
 800736e:	4621      	mov	r1, r4
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ffa5 	bl	80072c0 <_Bfree>
 8007376:	4644      	mov	r4, r8
 8007378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800737c:	3501      	adds	r5, #1
 800737e:	615e      	str	r6, [r3, #20]
 8007380:	6125      	str	r5, [r4, #16]
 8007382:	4620      	mov	r0, r4
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	080099fb 	.word	0x080099fb
 800738c:	08009a6c 	.word	0x08009a6c

08007390 <__hi0bits>:
 8007390:	0c03      	lsrs	r3, r0, #16
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	b9d3      	cbnz	r3, 80073cc <__hi0bits+0x3c>
 8007396:	0400      	lsls	r0, r0, #16
 8007398:	2310      	movs	r3, #16
 800739a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800739e:	bf04      	itt	eq
 80073a0:	0200      	lsleq	r0, r0, #8
 80073a2:	3308      	addeq	r3, #8
 80073a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073a8:	bf04      	itt	eq
 80073aa:	0100      	lsleq	r0, r0, #4
 80073ac:	3304      	addeq	r3, #4
 80073ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073b2:	bf04      	itt	eq
 80073b4:	0080      	lsleq	r0, r0, #2
 80073b6:	3302      	addeq	r3, #2
 80073b8:	2800      	cmp	r0, #0
 80073ba:	db05      	blt.n	80073c8 <__hi0bits+0x38>
 80073bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073c0:	f103 0301 	add.w	r3, r3, #1
 80073c4:	bf08      	it	eq
 80073c6:	2320      	moveq	r3, #32
 80073c8:	4618      	mov	r0, r3
 80073ca:	4770      	bx	lr
 80073cc:	2300      	movs	r3, #0
 80073ce:	e7e4      	b.n	800739a <__hi0bits+0xa>

080073d0 <__lo0bits>:
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	f013 0207 	ands.w	r2, r3, #7
 80073d6:	4601      	mov	r1, r0
 80073d8:	d00b      	beq.n	80073f2 <__lo0bits+0x22>
 80073da:	07da      	lsls	r2, r3, #31
 80073dc:	d423      	bmi.n	8007426 <__lo0bits+0x56>
 80073de:	0798      	lsls	r0, r3, #30
 80073e0:	bf49      	itett	mi
 80073e2:	085b      	lsrmi	r3, r3, #1
 80073e4:	089b      	lsrpl	r3, r3, #2
 80073e6:	2001      	movmi	r0, #1
 80073e8:	600b      	strmi	r3, [r1, #0]
 80073ea:	bf5c      	itt	pl
 80073ec:	600b      	strpl	r3, [r1, #0]
 80073ee:	2002      	movpl	r0, #2
 80073f0:	4770      	bx	lr
 80073f2:	b298      	uxth	r0, r3
 80073f4:	b9a8      	cbnz	r0, 8007422 <__lo0bits+0x52>
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	2010      	movs	r0, #16
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	b90a      	cbnz	r2, 8007402 <__lo0bits+0x32>
 80073fe:	3008      	adds	r0, #8
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	071a      	lsls	r2, r3, #28
 8007404:	bf04      	itt	eq
 8007406:	091b      	lsreq	r3, r3, #4
 8007408:	3004      	addeq	r0, #4
 800740a:	079a      	lsls	r2, r3, #30
 800740c:	bf04      	itt	eq
 800740e:	089b      	lsreq	r3, r3, #2
 8007410:	3002      	addeq	r0, #2
 8007412:	07da      	lsls	r2, r3, #31
 8007414:	d403      	bmi.n	800741e <__lo0bits+0x4e>
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f100 0001 	add.w	r0, r0, #1
 800741c:	d005      	beq.n	800742a <__lo0bits+0x5a>
 800741e:	600b      	str	r3, [r1, #0]
 8007420:	4770      	bx	lr
 8007422:	4610      	mov	r0, r2
 8007424:	e7e9      	b.n	80073fa <__lo0bits+0x2a>
 8007426:	2000      	movs	r0, #0
 8007428:	4770      	bx	lr
 800742a:	2020      	movs	r0, #32
 800742c:	4770      	bx	lr
	...

08007430 <__i2b>:
 8007430:	b510      	push	{r4, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	2101      	movs	r1, #1
 8007436:	f7ff ff03 	bl	8007240 <_Balloc>
 800743a:	4602      	mov	r2, r0
 800743c:	b928      	cbnz	r0, 800744a <__i2b+0x1a>
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <__i2b+0x24>)
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <__i2b+0x28>)
 8007442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007446:	f000 fd35 	bl	8007eb4 <__assert_func>
 800744a:	2301      	movs	r3, #1
 800744c:	6144      	str	r4, [r0, #20]
 800744e:	6103      	str	r3, [r0, #16]
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	080099fb 	.word	0x080099fb
 8007458:	08009a6c 	.word	0x08009a6c

0800745c <__multiply>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4691      	mov	r9, r2
 8007462:	690a      	ldr	r2, [r1, #16]
 8007464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007468:	429a      	cmp	r2, r3
 800746a:	bfb8      	it	lt
 800746c:	460b      	movlt	r3, r1
 800746e:	460c      	mov	r4, r1
 8007470:	bfbc      	itt	lt
 8007472:	464c      	movlt	r4, r9
 8007474:	4699      	movlt	r9, r3
 8007476:	6927      	ldr	r7, [r4, #16]
 8007478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	6861      	ldr	r1, [r4, #4]
 8007480:	eb07 060a 	add.w	r6, r7, sl
 8007484:	42b3      	cmp	r3, r6
 8007486:	b085      	sub	sp, #20
 8007488:	bfb8      	it	lt
 800748a:	3101      	addlt	r1, #1
 800748c:	f7ff fed8 	bl	8007240 <_Balloc>
 8007490:	b930      	cbnz	r0, 80074a0 <__multiply+0x44>
 8007492:	4602      	mov	r2, r0
 8007494:	4b44      	ldr	r3, [pc, #272]	; (80075a8 <__multiply+0x14c>)
 8007496:	4845      	ldr	r0, [pc, #276]	; (80075ac <__multiply+0x150>)
 8007498:	f240 115d 	movw	r1, #349	; 0x15d
 800749c:	f000 fd0a 	bl	8007eb4 <__assert_func>
 80074a0:	f100 0514 	add.w	r5, r0, #20
 80074a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074a8:	462b      	mov	r3, r5
 80074aa:	2200      	movs	r2, #0
 80074ac:	4543      	cmp	r3, r8
 80074ae:	d321      	bcc.n	80074f4 <__multiply+0x98>
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074b8:	f109 0314 	add.w	r3, r9, #20
 80074bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	1b3a      	subs	r2, r7, r4
 80074c4:	3a15      	subs	r2, #21
 80074c6:	f022 0203 	bic.w	r2, r2, #3
 80074ca:	3204      	adds	r2, #4
 80074cc:	f104 0115 	add.w	r1, r4, #21
 80074d0:	428f      	cmp	r7, r1
 80074d2:	bf38      	it	cc
 80074d4:	2204      	movcc	r2, #4
 80074d6:	9201      	str	r2, [sp, #4]
 80074d8:	9a02      	ldr	r2, [sp, #8]
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d80c      	bhi.n	80074fa <__multiply+0x9e>
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	dd03      	ble.n	80074ec <__multiply+0x90>
 80074e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d05a      	beq.n	80075a2 <__multiply+0x146>
 80074ec:	6106      	str	r6, [r0, #16]
 80074ee:	b005      	add	sp, #20
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	f843 2b04 	str.w	r2, [r3], #4
 80074f8:	e7d8      	b.n	80074ac <__multiply+0x50>
 80074fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80074fe:	f1ba 0f00 	cmp.w	sl, #0
 8007502:	d024      	beq.n	800754e <__multiply+0xf2>
 8007504:	f104 0e14 	add.w	lr, r4, #20
 8007508:	46a9      	mov	r9, r5
 800750a:	f04f 0c00 	mov.w	ip, #0
 800750e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007512:	f8d9 1000 	ldr.w	r1, [r9]
 8007516:	fa1f fb82 	uxth.w	fp, r2
 800751a:	b289      	uxth	r1, r1
 800751c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007524:	f8d9 2000 	ldr.w	r2, [r9]
 8007528:	4461      	add	r1, ip
 800752a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800752e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007536:	b289      	uxth	r1, r1
 8007538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800753c:	4577      	cmp	r7, lr
 800753e:	f849 1b04 	str.w	r1, [r9], #4
 8007542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007546:	d8e2      	bhi.n	800750e <__multiply+0xb2>
 8007548:	9a01      	ldr	r2, [sp, #4]
 800754a:	f845 c002 	str.w	ip, [r5, r2]
 800754e:	9a03      	ldr	r2, [sp, #12]
 8007550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007554:	3304      	adds	r3, #4
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	d020      	beq.n	800759e <__multiply+0x142>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	f104 0c14 	add.w	ip, r4, #20
 8007562:	46ae      	mov	lr, r5
 8007564:	f04f 0a00 	mov.w	sl, #0
 8007568:	f8bc b000 	ldrh.w	fp, [ip]
 800756c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007570:	fb09 220b 	mla	r2, r9, fp, r2
 8007574:	4492      	add	sl, r2
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800757c:	f84e 1b04 	str.w	r1, [lr], #4
 8007580:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007584:	f8be 1000 	ldrh.w	r1, [lr]
 8007588:	0c12      	lsrs	r2, r2, #16
 800758a:	fb09 1102 	mla	r1, r9, r2, r1
 800758e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007592:	4567      	cmp	r7, ip
 8007594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007598:	d8e6      	bhi.n	8007568 <__multiply+0x10c>
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	50a9      	str	r1, [r5, r2]
 800759e:	3504      	adds	r5, #4
 80075a0:	e79a      	b.n	80074d8 <__multiply+0x7c>
 80075a2:	3e01      	subs	r6, #1
 80075a4:	e79c      	b.n	80074e0 <__multiply+0x84>
 80075a6:	bf00      	nop
 80075a8:	080099fb 	.word	0x080099fb
 80075ac:	08009a6c 	.word	0x08009a6c

080075b0 <__pow5mult>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4615      	mov	r5, r2
 80075b6:	f012 0203 	ands.w	r2, r2, #3
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	d007      	beq.n	80075d0 <__pow5mult+0x20>
 80075c0:	4c25      	ldr	r4, [pc, #148]	; (8007658 <__pow5mult+0xa8>)
 80075c2:	3a01      	subs	r2, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ca:	f7ff fe9b 	bl	8007304 <__multadd>
 80075ce:	4607      	mov	r7, r0
 80075d0:	10ad      	asrs	r5, r5, #2
 80075d2:	d03d      	beq.n	8007650 <__pow5mult+0xa0>
 80075d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075d6:	b97c      	cbnz	r4, 80075f8 <__pow5mult+0x48>
 80075d8:	2010      	movs	r0, #16
 80075da:	f7ff fe1b 	bl	8007214 <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	6270      	str	r0, [r6, #36]	; 0x24
 80075e2:	b928      	cbnz	r0, 80075f0 <__pow5mult+0x40>
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <__pow5mult+0xac>)
 80075e6:	481e      	ldr	r0, [pc, #120]	; (8007660 <__pow5mult+0xb0>)
 80075e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075ec:	f000 fc62 	bl	8007eb4 <__assert_func>
 80075f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	60c4      	str	r4, [r0, #12]
 80075f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007600:	b94c      	cbnz	r4, 8007616 <__pow5mult+0x66>
 8007602:	f240 2171 	movw	r1, #625	; 0x271
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff ff12 	bl	8007430 <__i2b>
 800760c:	2300      	movs	r3, #0
 800760e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007612:	4604      	mov	r4, r0
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	f04f 0900 	mov.w	r9, #0
 800761a:	07eb      	lsls	r3, r5, #31
 800761c:	d50a      	bpl.n	8007634 <__pow5mult+0x84>
 800761e:	4639      	mov	r1, r7
 8007620:	4622      	mov	r2, r4
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ff1a 	bl	800745c <__multiply>
 8007628:	4639      	mov	r1, r7
 800762a:	4680      	mov	r8, r0
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff fe47 	bl	80072c0 <_Bfree>
 8007632:	4647      	mov	r7, r8
 8007634:	106d      	asrs	r5, r5, #1
 8007636:	d00b      	beq.n	8007650 <__pow5mult+0xa0>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	b938      	cbnz	r0, 800764c <__pow5mult+0x9c>
 800763c:	4622      	mov	r2, r4
 800763e:	4621      	mov	r1, r4
 8007640:	4630      	mov	r0, r6
 8007642:	f7ff ff0b 	bl	800745c <__multiply>
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f8c0 9000 	str.w	r9, [r0]
 800764c:	4604      	mov	r4, r0
 800764e:	e7e4      	b.n	800761a <__pow5mult+0x6a>
 8007650:	4638      	mov	r0, r7
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	bf00      	nop
 8007658:	08009bb8 	.word	0x08009bb8
 800765c:	08009989 	.word	0x08009989
 8007660:	08009a6c 	.word	0x08009a6c

08007664 <__lshift>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	460c      	mov	r4, r1
 800766a:	6849      	ldr	r1, [r1, #4]
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	4607      	mov	r7, r0
 8007676:	4691      	mov	r9, r2
 8007678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800767c:	f108 0601 	add.w	r6, r8, #1
 8007680:	42b3      	cmp	r3, r6
 8007682:	db0b      	blt.n	800769c <__lshift+0x38>
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff fddb 	bl	8007240 <_Balloc>
 800768a:	4605      	mov	r5, r0
 800768c:	b948      	cbnz	r0, 80076a2 <__lshift+0x3e>
 800768e:	4602      	mov	r2, r0
 8007690:	4b2a      	ldr	r3, [pc, #168]	; (800773c <__lshift+0xd8>)
 8007692:	482b      	ldr	r0, [pc, #172]	; (8007740 <__lshift+0xdc>)
 8007694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007698:	f000 fc0c 	bl	8007eb4 <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	e7ee      	b.n	8007680 <__lshift+0x1c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f100 0114 	add.w	r1, r0, #20
 80076a8:	f100 0210 	add.w	r2, r0, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	4553      	cmp	r3, sl
 80076b0:	db37      	blt.n	8007722 <__lshift+0xbe>
 80076b2:	6920      	ldr	r0, [r4, #16]
 80076b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b8:	f104 0314 	add.w	r3, r4, #20
 80076bc:	f019 091f 	ands.w	r9, r9, #31
 80076c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076c8:	d02f      	beq.n	800772a <__lshift+0xc6>
 80076ca:	f1c9 0e20 	rsb	lr, r9, #32
 80076ce:	468a      	mov	sl, r1
 80076d0:	f04f 0c00 	mov.w	ip, #0
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	fa02 f209 	lsl.w	r2, r2, r9
 80076da:	ea42 020c 	orr.w	r2, r2, ip
 80076de:	f84a 2b04 	str.w	r2, [sl], #4
 80076e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e6:	4298      	cmp	r0, r3
 80076e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076ec:	d8f2      	bhi.n	80076d4 <__lshift+0x70>
 80076ee:	1b03      	subs	r3, r0, r4
 80076f0:	3b15      	subs	r3, #21
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	3304      	adds	r3, #4
 80076f8:	f104 0215 	add.w	r2, r4, #21
 80076fc:	4290      	cmp	r0, r2
 80076fe:	bf38      	it	cc
 8007700:	2304      	movcc	r3, #4
 8007702:	f841 c003 	str.w	ip, [r1, r3]
 8007706:	f1bc 0f00 	cmp.w	ip, #0
 800770a:	d001      	beq.n	8007710 <__lshift+0xac>
 800770c:	f108 0602 	add.w	r6, r8, #2
 8007710:	3e01      	subs	r6, #1
 8007712:	4638      	mov	r0, r7
 8007714:	612e      	str	r6, [r5, #16]
 8007716:	4621      	mov	r1, r4
 8007718:	f7ff fdd2 	bl	80072c0 <_Bfree>
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007722:	f842 0f04 	str.w	r0, [r2, #4]!
 8007726:	3301      	adds	r3, #1
 8007728:	e7c1      	b.n	80076ae <__lshift+0x4a>
 800772a:	3904      	subs	r1, #4
 800772c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007730:	f841 2f04 	str.w	r2, [r1, #4]!
 8007734:	4298      	cmp	r0, r3
 8007736:	d8f9      	bhi.n	800772c <__lshift+0xc8>
 8007738:	e7ea      	b.n	8007710 <__lshift+0xac>
 800773a:	bf00      	nop
 800773c:	080099fb 	.word	0x080099fb
 8007740:	08009a6c 	.word	0x08009a6c

08007744 <__mcmp>:
 8007744:	b530      	push	{r4, r5, lr}
 8007746:	6902      	ldr	r2, [r0, #16]
 8007748:	690c      	ldr	r4, [r1, #16]
 800774a:	1b12      	subs	r2, r2, r4
 800774c:	d10e      	bne.n	800776c <__mcmp+0x28>
 800774e:	f100 0314 	add.w	r3, r0, #20
 8007752:	3114      	adds	r1, #20
 8007754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800775c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007764:	42a5      	cmp	r5, r4
 8007766:	d003      	beq.n	8007770 <__mcmp+0x2c>
 8007768:	d305      	bcc.n	8007776 <__mcmp+0x32>
 800776a:	2201      	movs	r2, #1
 800776c:	4610      	mov	r0, r2
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	4283      	cmp	r3, r0
 8007772:	d3f3      	bcc.n	800775c <__mcmp+0x18>
 8007774:	e7fa      	b.n	800776c <__mcmp+0x28>
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	e7f7      	b.n	800776c <__mcmp+0x28>

0800777c <__mdiff>:
 800777c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	460c      	mov	r4, r1
 8007782:	4606      	mov	r6, r0
 8007784:	4611      	mov	r1, r2
 8007786:	4620      	mov	r0, r4
 8007788:	4690      	mov	r8, r2
 800778a:	f7ff ffdb 	bl	8007744 <__mcmp>
 800778e:	1e05      	subs	r5, r0, #0
 8007790:	d110      	bne.n	80077b4 <__mdiff+0x38>
 8007792:	4629      	mov	r1, r5
 8007794:	4630      	mov	r0, r6
 8007796:	f7ff fd53 	bl	8007240 <_Balloc>
 800779a:	b930      	cbnz	r0, 80077aa <__mdiff+0x2e>
 800779c:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <__mdiff+0x10c>)
 800779e:	4602      	mov	r2, r0
 80077a0:	f240 2132 	movw	r1, #562	; 0x232
 80077a4:	4839      	ldr	r0, [pc, #228]	; (800788c <__mdiff+0x110>)
 80077a6:	f000 fb85 	bl	8007eb4 <__assert_func>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b4:	bfa4      	itt	ge
 80077b6:	4643      	movge	r3, r8
 80077b8:	46a0      	movge	r8, r4
 80077ba:	4630      	mov	r0, r6
 80077bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077c0:	bfa6      	itte	ge
 80077c2:	461c      	movge	r4, r3
 80077c4:	2500      	movge	r5, #0
 80077c6:	2501      	movlt	r5, #1
 80077c8:	f7ff fd3a 	bl	8007240 <_Balloc>
 80077cc:	b920      	cbnz	r0, 80077d8 <__mdiff+0x5c>
 80077ce:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <__mdiff+0x10c>)
 80077d0:	4602      	mov	r2, r0
 80077d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077d6:	e7e5      	b.n	80077a4 <__mdiff+0x28>
 80077d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077dc:	6926      	ldr	r6, [r4, #16]
 80077de:	60c5      	str	r5, [r0, #12]
 80077e0:	f104 0914 	add.w	r9, r4, #20
 80077e4:	f108 0514 	add.w	r5, r8, #20
 80077e8:	f100 0e14 	add.w	lr, r0, #20
 80077ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077f4:	f108 0210 	add.w	r2, r8, #16
 80077f8:	46f2      	mov	sl, lr
 80077fa:	2100      	movs	r1, #0
 80077fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007804:	fa1f f883 	uxth.w	r8, r3
 8007808:	fa11 f18b 	uxtah	r1, r1, fp
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	eba1 0808 	sub.w	r8, r1, r8
 8007812:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007816:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800781a:	fa1f f888 	uxth.w	r8, r8
 800781e:	1419      	asrs	r1, r3, #16
 8007820:	454e      	cmp	r6, r9
 8007822:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007826:	f84a 3b04 	str.w	r3, [sl], #4
 800782a:	d8e7      	bhi.n	80077fc <__mdiff+0x80>
 800782c:	1b33      	subs	r3, r6, r4
 800782e:	3b15      	subs	r3, #21
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	3304      	adds	r3, #4
 8007836:	3415      	adds	r4, #21
 8007838:	42a6      	cmp	r6, r4
 800783a:	bf38      	it	cc
 800783c:	2304      	movcc	r3, #4
 800783e:	441d      	add	r5, r3
 8007840:	4473      	add	r3, lr
 8007842:	469e      	mov	lr, r3
 8007844:	462e      	mov	r6, r5
 8007846:	4566      	cmp	r6, ip
 8007848:	d30e      	bcc.n	8007868 <__mdiff+0xec>
 800784a:	f10c 0203 	add.w	r2, ip, #3
 800784e:	1b52      	subs	r2, r2, r5
 8007850:	f022 0203 	bic.w	r2, r2, #3
 8007854:	3d03      	subs	r5, #3
 8007856:	45ac      	cmp	ip, r5
 8007858:	bf38      	it	cc
 800785a:	2200      	movcc	r2, #0
 800785c:	441a      	add	r2, r3
 800785e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007862:	b17b      	cbz	r3, 8007884 <__mdiff+0x108>
 8007864:	6107      	str	r7, [r0, #16]
 8007866:	e7a3      	b.n	80077b0 <__mdiff+0x34>
 8007868:	f856 8b04 	ldr.w	r8, [r6], #4
 800786c:	fa11 f288 	uxtah	r2, r1, r8
 8007870:	1414      	asrs	r4, r2, #16
 8007872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007876:	b292      	uxth	r2, r2
 8007878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800787c:	f84e 2b04 	str.w	r2, [lr], #4
 8007880:	1421      	asrs	r1, r4, #16
 8007882:	e7e0      	b.n	8007846 <__mdiff+0xca>
 8007884:	3f01      	subs	r7, #1
 8007886:	e7ea      	b.n	800785e <__mdiff+0xe2>
 8007888:	080099fb 	.word	0x080099fb
 800788c:	08009a6c 	.word	0x08009a6c

08007890 <__d2b>:
 8007890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4689      	mov	r9, r1
 8007896:	2101      	movs	r1, #1
 8007898:	ec57 6b10 	vmov	r6, r7, d0
 800789c:	4690      	mov	r8, r2
 800789e:	f7ff fccf 	bl	8007240 <_Balloc>
 80078a2:	4604      	mov	r4, r0
 80078a4:	b930      	cbnz	r0, 80078b4 <__d2b+0x24>
 80078a6:	4602      	mov	r2, r0
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <__d2b+0xb0>)
 80078aa:	4826      	ldr	r0, [pc, #152]	; (8007944 <__d2b+0xb4>)
 80078ac:	f240 310a 	movw	r1, #778	; 0x30a
 80078b0:	f000 fb00 	bl	8007eb4 <__assert_func>
 80078b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078bc:	bb35      	cbnz	r5, 800790c <__d2b+0x7c>
 80078be:	2e00      	cmp	r6, #0
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	d028      	beq.n	8007916 <__d2b+0x86>
 80078c4:	4668      	mov	r0, sp
 80078c6:	9600      	str	r6, [sp, #0]
 80078c8:	f7ff fd82 	bl	80073d0 <__lo0bits>
 80078cc:	9900      	ldr	r1, [sp, #0]
 80078ce:	b300      	cbz	r0, 8007912 <__d2b+0x82>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	f1c0 0320 	rsb	r3, r0, #32
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	430b      	orrs	r3, r1
 80078dc:	40c2      	lsrs	r2, r0
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	9201      	str	r2, [sp, #4]
 80078e2:	9b01      	ldr	r3, [sp, #4]
 80078e4:	61a3      	str	r3, [r4, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bf14      	ite	ne
 80078ea:	2202      	movne	r2, #2
 80078ec:	2201      	moveq	r2, #1
 80078ee:	6122      	str	r2, [r4, #16]
 80078f0:	b1d5      	cbz	r5, 8007928 <__d2b+0x98>
 80078f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078f6:	4405      	add	r5, r0
 80078f8:	f8c9 5000 	str.w	r5, [r9]
 80078fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007900:	f8c8 0000 	str.w	r0, [r8]
 8007904:	4620      	mov	r0, r4
 8007906:	b003      	add	sp, #12
 8007908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800790c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007910:	e7d5      	b.n	80078be <__d2b+0x2e>
 8007912:	6161      	str	r1, [r4, #20]
 8007914:	e7e5      	b.n	80078e2 <__d2b+0x52>
 8007916:	a801      	add	r0, sp, #4
 8007918:	f7ff fd5a 	bl	80073d0 <__lo0bits>
 800791c:	9b01      	ldr	r3, [sp, #4]
 800791e:	6163      	str	r3, [r4, #20]
 8007920:	2201      	movs	r2, #1
 8007922:	6122      	str	r2, [r4, #16]
 8007924:	3020      	adds	r0, #32
 8007926:	e7e3      	b.n	80078f0 <__d2b+0x60>
 8007928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800792c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007930:	f8c9 0000 	str.w	r0, [r9]
 8007934:	6918      	ldr	r0, [r3, #16]
 8007936:	f7ff fd2b 	bl	8007390 <__hi0bits>
 800793a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800793e:	e7df      	b.n	8007900 <__d2b+0x70>
 8007940:	080099fb 	.word	0x080099fb
 8007944:	08009a6c 	.word	0x08009a6c

08007948 <_calloc_r>:
 8007948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800794a:	fba1 2402 	umull	r2, r4, r1, r2
 800794e:	b94c      	cbnz	r4, 8007964 <_calloc_r+0x1c>
 8007950:	4611      	mov	r1, r2
 8007952:	9201      	str	r2, [sp, #4]
 8007954:	f000 f87a 	bl	8007a4c <_malloc_r>
 8007958:	9a01      	ldr	r2, [sp, #4]
 800795a:	4605      	mov	r5, r0
 800795c:	b930      	cbnz	r0, 800796c <_calloc_r+0x24>
 800795e:	4628      	mov	r0, r5
 8007960:	b003      	add	sp, #12
 8007962:	bd30      	pop	{r4, r5, pc}
 8007964:	220c      	movs	r2, #12
 8007966:	6002      	str	r2, [r0, #0]
 8007968:	2500      	movs	r5, #0
 800796a:	e7f8      	b.n	800795e <_calloc_r+0x16>
 800796c:	4621      	mov	r1, r4
 800796e:	f7fd fdf1 	bl	8005554 <memset>
 8007972:	e7f4      	b.n	800795e <_calloc_r+0x16>

08007974 <_free_r>:
 8007974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007976:	2900      	cmp	r1, #0
 8007978:	d044      	beq.n	8007a04 <_free_r+0x90>
 800797a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797e:	9001      	str	r0, [sp, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	f1a1 0404 	sub.w	r4, r1, #4
 8007986:	bfb8      	it	lt
 8007988:	18e4      	addlt	r4, r4, r3
 800798a:	f000 fb19 	bl	8007fc0 <__malloc_lock>
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <_free_r+0x94>)
 8007990:	9801      	ldr	r0, [sp, #4]
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x30>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a0:	f000 bb14 	b.w	8007fcc <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x46>
 80079a8:	6825      	ldr	r5, [r4, #0]
 80079aa:	1961      	adds	r1, r4, r5
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1949      	addeq	r1, r1, r5
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x22>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x50>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x46>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1855      	adds	r5, r2, r1
 80079c8:	42a5      	cmp	r5, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x70>
 80079cc:	6824      	ldr	r4, [r4, #0]
 80079ce:	4421      	add	r1, r4
 80079d0:	1854      	adds	r4, r2, r1
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x26>
 80079d8:	681c      	ldr	r4, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	6053      	str	r3, [r2, #4]
 80079de:	4421      	add	r1, r4
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7da      	b.n	800799a <_free_r+0x26>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x78>
 80079e6:	230c      	movs	r3, #12
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x26>
 80079ec:	6825      	ldr	r5, [r4, #0]
 80079ee:	1961      	adds	r1, r4, r5
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf04      	itt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	bf04      	itt	eq
 80079fc:	1949      	addeq	r1, r1, r5
 80079fe:	6021      	streq	r1, [r4, #0]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7ca      	b.n	800799a <_free_r+0x26>
 8007a04:	b003      	add	sp, #12
 8007a06:	bd30      	pop	{r4, r5, pc}
 8007a08:	2000029c 	.word	0x2000029c

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0e      	ldr	r6, [pc, #56]	; (8007a48 <sbrk_aligned+0x3c>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f000 f9e6 	bl	8007de8 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f9e1 	bl	8007de8 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d00a      	beq.n	8007a40 <sbrk_aligned+0x34>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d007      	beq.n	8007a44 <sbrk_aligned+0x38>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f9d6 	bl	8007de8 <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d101      	bne.n	8007a44 <sbrk_aligned+0x38>
 8007a40:	f04f 34ff 	mov.w	r4, #4294967295
 8007a44:	4620      	mov	r0, r4
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	200002a0 	.word	0x200002a0

08007a4c <_malloc_r>:
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	1ccd      	adds	r5, r1, #3
 8007a52:	f025 0503 	bic.w	r5, r5, #3
 8007a56:	3508      	adds	r5, #8
 8007a58:	2d0c      	cmp	r5, #12
 8007a5a:	bf38      	it	cc
 8007a5c:	250c      	movcc	r5, #12
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	4607      	mov	r7, r0
 8007a62:	db01      	blt.n	8007a68 <_malloc_r+0x1c>
 8007a64:	42a9      	cmp	r1, r5
 8007a66:	d905      	bls.n	8007a74 <_malloc_r+0x28>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a74:	4e2e      	ldr	r6, [pc, #184]	; (8007b30 <_malloc_r+0xe4>)
 8007a76:	f000 faa3 	bl	8007fc0 <__malloc_lock>
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	bb34      	cbnz	r4, 8007ace <_malloc_r+0x82>
 8007a80:	4629      	mov	r1, r5
 8007a82:	4638      	mov	r0, r7
 8007a84:	f7ff ffc2 	bl	8007a0c <sbrk_aligned>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	d14d      	bne.n	8007b2a <_malloc_r+0xde>
 8007a8e:	6834      	ldr	r4, [r6, #0]
 8007a90:	4626      	mov	r6, r4
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d140      	bne.n	8007b18 <_malloc_r+0xcc>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	eb04 0803 	add.w	r8, r4, r3
 8007aa0:	f000 f9a2 	bl	8007de8 <_sbrk_r>
 8007aa4:	4580      	cmp	r8, r0
 8007aa6:	d13a      	bne.n	8007b1e <_malloc_r+0xd2>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	3503      	adds	r5, #3
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	f025 0503 	bic.w	r5, r5, #3
 8007ab2:	3508      	adds	r5, #8
 8007ab4:	2d0c      	cmp	r5, #12
 8007ab6:	bf38      	it	cc
 8007ab8:	250c      	movcc	r5, #12
 8007aba:	4629      	mov	r1, r5
 8007abc:	4638      	mov	r0, r7
 8007abe:	f7ff ffa5 	bl	8007a0c <sbrk_aligned>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d02b      	beq.n	8007b1e <_malloc_r+0xd2>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	442b      	add	r3, r5
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	e00e      	b.n	8007aec <_malloc_r+0xa0>
 8007ace:	6822      	ldr	r2, [r4, #0]
 8007ad0:	1b52      	subs	r2, r2, r5
 8007ad2:	d41e      	bmi.n	8007b12 <_malloc_r+0xc6>
 8007ad4:	2a0b      	cmp	r2, #11
 8007ad6:	d916      	bls.n	8007b06 <_malloc_r+0xba>
 8007ad8:	1961      	adds	r1, r4, r5
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	6025      	str	r5, [r4, #0]
 8007ade:	bf18      	it	ne
 8007ae0:	6059      	strne	r1, [r3, #4]
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	bf08      	it	eq
 8007ae6:	6031      	streq	r1, [r6, #0]
 8007ae8:	5162      	str	r2, [r4, r5]
 8007aea:	604b      	str	r3, [r1, #4]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f104 060b 	add.w	r6, r4, #11
 8007af2:	f000 fa6b 	bl	8007fcc <__malloc_unlock>
 8007af6:	f026 0607 	bic.w	r6, r6, #7
 8007afa:	1d23      	adds	r3, r4, #4
 8007afc:	1af2      	subs	r2, r6, r3
 8007afe:	d0b6      	beq.n	8007a6e <_malloc_r+0x22>
 8007b00:	1b9b      	subs	r3, r3, r6
 8007b02:	50a3      	str	r3, [r4, r2]
 8007b04:	e7b3      	b.n	8007a6e <_malloc_r+0x22>
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	bf0c      	ite	eq
 8007b0c:	6032      	streq	r2, [r6, #0]
 8007b0e:	605a      	strne	r2, [r3, #4]
 8007b10:	e7ec      	b.n	8007aec <_malloc_r+0xa0>
 8007b12:	4623      	mov	r3, r4
 8007b14:	6864      	ldr	r4, [r4, #4]
 8007b16:	e7b2      	b.n	8007a7e <_malloc_r+0x32>
 8007b18:	4634      	mov	r4, r6
 8007b1a:	6876      	ldr	r6, [r6, #4]
 8007b1c:	e7b9      	b.n	8007a92 <_malloc_r+0x46>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	603b      	str	r3, [r7, #0]
 8007b22:	4638      	mov	r0, r7
 8007b24:	f000 fa52 	bl	8007fcc <__malloc_unlock>
 8007b28:	e7a1      	b.n	8007a6e <_malloc_r+0x22>
 8007b2a:	6025      	str	r5, [r4, #0]
 8007b2c:	e7de      	b.n	8007aec <_malloc_r+0xa0>
 8007b2e:	bf00      	nop
 8007b30:	2000029c 	.word	0x2000029c

08007b34 <__sfputc_r>:
 8007b34:	6893      	ldr	r3, [r2, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	b410      	push	{r4}
 8007b3c:	6093      	str	r3, [r2, #8]
 8007b3e:	da08      	bge.n	8007b52 <__sfputc_r+0x1e>
 8007b40:	6994      	ldr	r4, [r2, #24]
 8007b42:	42a3      	cmp	r3, r4
 8007b44:	db01      	blt.n	8007b4a <__sfputc_r+0x16>
 8007b46:	290a      	cmp	r1, #10
 8007b48:	d103      	bne.n	8007b52 <__sfputc_r+0x1e>
 8007b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b4e:	f7fe ba01 	b.w	8005f54 <__swbuf_r>
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	1c58      	adds	r0, r3, #1
 8007b56:	6010      	str	r0, [r2, #0]
 8007b58:	7019      	strb	r1, [r3, #0]
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <__sfputs_r>:
 8007b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	4614      	mov	r4, r2
 8007b6a:	18d5      	adds	r5, r2, r3
 8007b6c:	42ac      	cmp	r4, r5
 8007b6e:	d101      	bne.n	8007b74 <__sfputs_r+0x12>
 8007b70:	2000      	movs	r0, #0
 8007b72:	e007      	b.n	8007b84 <__sfputs_r+0x22>
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	463a      	mov	r2, r7
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7ff ffda 	bl	8007b34 <__sfputc_r>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d1f3      	bne.n	8007b6c <__sfputs_r+0xa>
 8007b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b88 <_vfiprintf_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	b09d      	sub	sp, #116	; 0x74
 8007b90:	4614      	mov	r4, r2
 8007b92:	4698      	mov	r8, r3
 8007b94:	4606      	mov	r6, r0
 8007b96:	b118      	cbz	r0, 8007ba0 <_vfiprintf_r+0x18>
 8007b98:	6983      	ldr	r3, [r0, #24]
 8007b9a:	b90b      	cbnz	r3, 8007ba0 <_vfiprintf_r+0x18>
 8007b9c:	f7ff fa30 	bl	8007000 <__sinit>
 8007ba0:	4b89      	ldr	r3, [pc, #548]	; (8007dc8 <_vfiprintf_r+0x240>)
 8007ba2:	429d      	cmp	r5, r3
 8007ba4:	d11b      	bne.n	8007bde <_vfiprintf_r+0x56>
 8007ba6:	6875      	ldr	r5, [r6, #4]
 8007ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007baa:	07d9      	lsls	r1, r3, #31
 8007bac:	d405      	bmi.n	8007bba <_vfiprintf_r+0x32>
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	059a      	lsls	r2, r3, #22
 8007bb2:	d402      	bmi.n	8007bba <_vfiprintf_r+0x32>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb6:	f7ff fac6 	bl	8007146 <__retarget_lock_acquire_recursive>
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	071b      	lsls	r3, r3, #28
 8007bbe:	d501      	bpl.n	8007bc4 <_vfiprintf_r+0x3c>
 8007bc0:	692b      	ldr	r3, [r5, #16]
 8007bc2:	b9eb      	cbnz	r3, 8007c00 <_vfiprintf_r+0x78>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7fe fa16 	bl	8005ff8 <__swsetup_r>
 8007bcc:	b1c0      	cbz	r0, 8007c00 <_vfiprintf_r+0x78>
 8007bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bd0:	07dc      	lsls	r4, r3, #31
 8007bd2:	d50e      	bpl.n	8007bf2 <_vfiprintf_r+0x6a>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	; 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	4b7b      	ldr	r3, [pc, #492]	; (8007dcc <_vfiprintf_r+0x244>)
 8007be0:	429d      	cmp	r5, r3
 8007be2:	d101      	bne.n	8007be8 <_vfiprintf_r+0x60>
 8007be4:	68b5      	ldr	r5, [r6, #8]
 8007be6:	e7df      	b.n	8007ba8 <_vfiprintf_r+0x20>
 8007be8:	4b79      	ldr	r3, [pc, #484]	; (8007dd0 <_vfiprintf_r+0x248>)
 8007bea:	429d      	cmp	r5, r3
 8007bec:	bf08      	it	eq
 8007bee:	68f5      	ldreq	r5, [r6, #12]
 8007bf0:	e7da      	b.n	8007ba8 <_vfiprintf_r+0x20>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	0598      	lsls	r0, r3, #22
 8007bf6:	d4ed      	bmi.n	8007bd4 <_vfiprintf_r+0x4c>
 8007bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bfa:	f7ff faa5 	bl	8007148 <__retarget_lock_release_recursive>
 8007bfe:	e7e9      	b.n	8007bd4 <_vfiprintf_r+0x4c>
 8007c00:	2300      	movs	r3, #0
 8007c02:	9309      	str	r3, [sp, #36]	; 0x24
 8007c04:	2320      	movs	r3, #32
 8007c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0e:	2330      	movs	r3, #48	; 0x30
 8007c10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007dd4 <_vfiprintf_r+0x24c>
 8007c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c18:	f04f 0901 	mov.w	r9, #1
 8007c1c:	4623      	mov	r3, r4
 8007c1e:	469a      	mov	sl, r3
 8007c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c24:	b10a      	cbz	r2, 8007c2a <_vfiprintf_r+0xa2>
 8007c26:	2a25      	cmp	r2, #37	; 0x25
 8007c28:	d1f9      	bne.n	8007c1e <_vfiprintf_r+0x96>
 8007c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2e:	d00b      	beq.n	8007c48 <_vfiprintf_r+0xc0>
 8007c30:	465b      	mov	r3, fp
 8007c32:	4622      	mov	r2, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7ff ff93 	bl	8007b62 <__sfputs_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f000 80aa 	beq.w	8007d96 <_vfiprintf_r+0x20e>
 8007c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c44:	445a      	add	r2, fp
 8007c46:	9209      	str	r2, [sp, #36]	; 0x24
 8007c48:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80a2 	beq.w	8007d96 <_vfiprintf_r+0x20e>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f04f 32ff 	mov.w	r2, #4294967295
 8007c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5c:	f10a 0a01 	add.w	sl, sl, #1
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	9307      	str	r3, [sp, #28]
 8007c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c68:	931a      	str	r3, [sp, #104]	; 0x68
 8007c6a:	4654      	mov	r4, sl
 8007c6c:	2205      	movs	r2, #5
 8007c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c72:	4858      	ldr	r0, [pc, #352]	; (8007dd4 <_vfiprintf_r+0x24c>)
 8007c74:	f7f8 fad4 	bl	8000220 <memchr>
 8007c78:	9a04      	ldr	r2, [sp, #16]
 8007c7a:	b9d8      	cbnz	r0, 8007cb4 <_vfiprintf_r+0x12c>
 8007c7c:	06d1      	lsls	r1, r2, #27
 8007c7e:	bf44      	itt	mi
 8007c80:	2320      	movmi	r3, #32
 8007c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c86:	0713      	lsls	r3, r2, #28
 8007c88:	bf44      	itt	mi
 8007c8a:	232b      	movmi	r3, #43	; 0x2b
 8007c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c90:	f89a 3000 	ldrb.w	r3, [sl]
 8007c94:	2b2a      	cmp	r3, #42	; 0x2a
 8007c96:	d015      	beq.n	8007cc4 <_vfiprintf_r+0x13c>
 8007c98:	9a07      	ldr	r2, [sp, #28]
 8007c9a:	4654      	mov	r4, sl
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f04f 0c0a 	mov.w	ip, #10
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca8:	3b30      	subs	r3, #48	; 0x30
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d94e      	bls.n	8007d4c <_vfiprintf_r+0x1c4>
 8007cae:	b1b0      	cbz	r0, 8007cde <_vfiprintf_r+0x156>
 8007cb0:	9207      	str	r2, [sp, #28]
 8007cb2:	e014      	b.n	8007cde <_vfiprintf_r+0x156>
 8007cb4:	eba0 0308 	sub.w	r3, r0, r8
 8007cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	46a2      	mov	sl, r4
 8007cc2:	e7d2      	b.n	8007c6a <_vfiprintf_r+0xe2>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	1d19      	adds	r1, r3, #4
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	9103      	str	r1, [sp, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bfbb      	ittet	lt
 8007cd0:	425b      	neglt	r3, r3
 8007cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd6:	9307      	strge	r3, [sp, #28]
 8007cd8:	9307      	strlt	r3, [sp, #28]
 8007cda:	bfb8      	it	lt
 8007cdc:	9204      	strlt	r2, [sp, #16]
 8007cde:	7823      	ldrb	r3, [r4, #0]
 8007ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce2:	d10c      	bne.n	8007cfe <_vfiprintf_r+0x176>
 8007ce4:	7863      	ldrb	r3, [r4, #1]
 8007ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce8:	d135      	bne.n	8007d56 <_vfiprintf_r+0x1ce>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	1d1a      	adds	r2, r3, #4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	9203      	str	r2, [sp, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfb8      	it	lt
 8007cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cfa:	3402      	adds	r4, #2
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007de4 <_vfiprintf_r+0x25c>
 8007d02:	7821      	ldrb	r1, [r4, #0]
 8007d04:	2203      	movs	r2, #3
 8007d06:	4650      	mov	r0, sl
 8007d08:	f7f8 fa8a 	bl	8000220 <memchr>
 8007d0c:	b140      	cbz	r0, 8007d20 <_vfiprintf_r+0x198>
 8007d0e:	2340      	movs	r3, #64	; 0x40
 8007d10:	eba0 000a 	sub.w	r0, r0, sl
 8007d14:	fa03 f000 	lsl.w	r0, r3, r0
 8007d18:	9b04      	ldr	r3, [sp, #16]
 8007d1a:	4303      	orrs	r3, r0
 8007d1c:	3401      	adds	r4, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	482c      	ldr	r0, [pc, #176]	; (8007dd8 <_vfiprintf_r+0x250>)
 8007d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	f7f8 fa78 	bl	8000220 <memchr>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d03f      	beq.n	8007db4 <_vfiprintf_r+0x22c>
 8007d34:	4b29      	ldr	r3, [pc, #164]	; (8007ddc <_vfiprintf_r+0x254>)
 8007d36:	bb1b      	cbnz	r3, 8007d80 <_vfiprintf_r+0x1f8>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	3308      	adds	r3, #8
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	443b      	add	r3, r7
 8007d48:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4a:	e767      	b.n	8007c1c <_vfiprintf_r+0x94>
 8007d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d50:	460c      	mov	r4, r1
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7a5      	b.n	8007ca2 <_vfiprintf_r+0x11a>
 8007d56:	2300      	movs	r3, #0
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f04f 0c0a 	mov.w	ip, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d68:	3a30      	subs	r2, #48	; 0x30
 8007d6a:	2a09      	cmp	r2, #9
 8007d6c:	d903      	bls.n	8007d76 <_vfiprintf_r+0x1ee>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0c5      	beq.n	8007cfe <_vfiprintf_r+0x176>
 8007d72:	9105      	str	r1, [sp, #20]
 8007d74:	e7c3      	b.n	8007cfe <_vfiprintf_r+0x176>
 8007d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f0      	b.n	8007d62 <_vfiprintf_r+0x1da>
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <_vfiprintf_r+0x258>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7fd fc8a 	bl	80056a4 <_printf_float>
 8007d90:	4607      	mov	r7, r0
 8007d92:	1c78      	adds	r0, r7, #1
 8007d94:	d1d6      	bne.n	8007d44 <_vfiprintf_r+0x1bc>
 8007d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d98:	07d9      	lsls	r1, r3, #31
 8007d9a:	d405      	bmi.n	8007da8 <_vfiprintf_r+0x220>
 8007d9c:	89ab      	ldrh	r3, [r5, #12]
 8007d9e:	059a      	lsls	r2, r3, #22
 8007da0:	d402      	bmi.n	8007da8 <_vfiprintf_r+0x220>
 8007da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da4:	f7ff f9d0 	bl	8007148 <__retarget_lock_release_recursive>
 8007da8:	89ab      	ldrh	r3, [r5, #12]
 8007daa:	065b      	lsls	r3, r3, #25
 8007dac:	f53f af12 	bmi.w	8007bd4 <_vfiprintf_r+0x4c>
 8007db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007db2:	e711      	b.n	8007bd8 <_vfiprintf_r+0x50>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <_vfiprintf_r+0x258>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7fd ff14 	bl	8005bec <_printf_i>
 8007dc4:	e7e4      	b.n	8007d90 <_vfiprintf_r+0x208>
 8007dc6:	bf00      	nop
 8007dc8:	08009a2c 	.word	0x08009a2c
 8007dcc:	08009a4c 	.word	0x08009a4c
 8007dd0:	08009a0c 	.word	0x08009a0c
 8007dd4:	08009bc4 	.word	0x08009bc4
 8007dd8:	08009bce 	.word	0x08009bce
 8007ddc:	080056a5 	.word	0x080056a5
 8007de0:	08007b63 	.word	0x08007b63
 8007de4:	08009bca 	.word	0x08009bca

08007de8 <_sbrk_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	; (8007e04 <_sbrk_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7fa f91a 	bl	800202c <_sbrk>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_sbrk_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_sbrk_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	200002a4 	.word	0x200002a4

08007e08 <__sread>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e10:	f000 f8e2 	bl	8007fd8 <_read_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	bfab      	itete	ge
 8007e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e1c:	181b      	addge	r3, r3, r0
 8007e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e22:	bfac      	ite	ge
 8007e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e26:	81a3      	strhlt	r3, [r4, #12]
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <__swrite>:
 8007e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2e:	461f      	mov	r7, r3
 8007e30:	898b      	ldrh	r3, [r1, #12]
 8007e32:	05db      	lsls	r3, r3, #23
 8007e34:	4605      	mov	r5, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4616      	mov	r6, r2
 8007e3a:	d505      	bpl.n	8007e48 <__swrite+0x1e>
 8007e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e40:	2302      	movs	r3, #2
 8007e42:	2200      	movs	r2, #0
 8007e44:	f000 f898 	bl	8007f78 <_lseek_r>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	f000 b817 	b.w	8007e90 <_write_r>

08007e62 <__sseek>:
 8007e62:	b510      	push	{r4, lr}
 8007e64:	460c      	mov	r4, r1
 8007e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6a:	f000 f885 	bl	8007f78 <_lseek_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	bf15      	itete	ne
 8007e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e7e:	81a3      	strheq	r3, [r4, #12]
 8007e80:	bf18      	it	ne
 8007e82:	81a3      	strhne	r3, [r4, #12]
 8007e84:	bd10      	pop	{r4, pc}

08007e86 <__sclose>:
 8007e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8a:	f000 b831 	b.w	8007ef0 <_close_r>
	...

08007e90 <_write_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	; (8007eb0 <_write_r+0x20>)
 8007e94:	4604      	mov	r4, r0
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7fa f873 	bl	8001f8a <_write>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_write_r+0x1e>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_write_r+0x1e>
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	200002a4 	.word	0x200002a4

08007eb4 <__assert_func>:
 8007eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eb6:	4614      	mov	r4, r2
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <__assert_func+0x2c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	68d8      	ldr	r0, [r3, #12]
 8007ec2:	b14c      	cbz	r4, 8007ed8 <__assert_func+0x24>
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <__assert_func+0x30>)
 8007ec6:	9100      	str	r1, [sp, #0]
 8007ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ecc:	4906      	ldr	r1, [pc, #24]	; (8007ee8 <__assert_func+0x34>)
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f000 f81e 	bl	8007f10 <fiprintf>
 8007ed4:	f000 f89f 	bl	8008016 <abort>
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <__assert_func+0x38>)
 8007eda:	461c      	mov	r4, r3
 8007edc:	e7f3      	b.n	8007ec6 <__assert_func+0x12>
 8007ede:	bf00      	nop
 8007ee0:	2000000c 	.word	0x2000000c
 8007ee4:	08009bd5 	.word	0x08009bd5
 8007ee8:	08009be2 	.word	0x08009be2
 8007eec:	08009c10 	.word	0x08009c10

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	; (8007f0c <_close_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7fa f861 	bl	8001fc2 <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	200002a4 	.word	0x200002a4

08007f10 <fiprintf>:
 8007f10:	b40e      	push	{r1, r2, r3}
 8007f12:	b503      	push	{r0, r1, lr}
 8007f14:	4601      	mov	r1, r0
 8007f16:	ab03      	add	r3, sp, #12
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <fiprintf+0x20>)
 8007f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1e:	6800      	ldr	r0, [r0, #0]
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f7ff fe31 	bl	8007b88 <_vfiprintf_r>
 8007f26:	b002      	add	sp, #8
 8007f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f2c:	b003      	add	sp, #12
 8007f2e:	4770      	bx	lr
 8007f30:	2000000c 	.word	0x2000000c

08007f34 <_fstat_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	; (8007f54 <_fstat_r+0x20>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	4611      	mov	r1, r2
 8007f40:	602b      	str	r3, [r5, #0]
 8007f42:	f7fa f84a 	bl	8001fda <_fstat>
 8007f46:	1c43      	adds	r3, r0, #1
 8007f48:	d102      	bne.n	8007f50 <_fstat_r+0x1c>
 8007f4a:	682b      	ldr	r3, [r5, #0]
 8007f4c:	b103      	cbz	r3, 8007f50 <_fstat_r+0x1c>
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	bd38      	pop	{r3, r4, r5, pc}
 8007f52:	bf00      	nop
 8007f54:	200002a4 	.word	0x200002a4

08007f58 <_isatty_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_isatty_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7fa f849 	bl	8001ffa <_isatty>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_isatty_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_isatty_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	200002a4 	.word	0x200002a4

08007f78 <_lseek_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	; (8007f98 <_lseek_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7fa f842 	bl	8002010 <_lseek>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_lseek_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_lseek_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	200002a4 	.word	0x200002a4

08007f9c <__ascii_mbtowc>:
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	b901      	cbnz	r1, 8007fa2 <__ascii_mbtowc+0x6>
 8007fa0:	a901      	add	r1, sp, #4
 8007fa2:	b142      	cbz	r2, 8007fb6 <__ascii_mbtowc+0x1a>
 8007fa4:	b14b      	cbz	r3, 8007fba <__ascii_mbtowc+0x1e>
 8007fa6:	7813      	ldrb	r3, [r2, #0]
 8007fa8:	600b      	str	r3, [r1, #0]
 8007faa:	7812      	ldrb	r2, [r2, #0]
 8007fac:	1e10      	subs	r0, r2, #0
 8007fae:	bf18      	it	ne
 8007fb0:	2001      	movne	r0, #1
 8007fb2:	b002      	add	sp, #8
 8007fb4:	4770      	bx	lr
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	e7fb      	b.n	8007fb2 <__ascii_mbtowc+0x16>
 8007fba:	f06f 0001 	mvn.w	r0, #1
 8007fbe:	e7f8      	b.n	8007fb2 <__ascii_mbtowc+0x16>

08007fc0 <__malloc_lock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__malloc_lock+0x8>)
 8007fc2:	f7ff b8c0 	b.w	8007146 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	20000298 	.word	0x20000298

08007fcc <__malloc_unlock>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__malloc_unlock+0x8>)
 8007fce:	f7ff b8bb 	b.w	8007148 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	20000298 	.word	0x20000298

08007fd8 <_read_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_read_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7f9 ffb2 	bl	8001f50 <_read>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_read_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_read_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	200002a4 	.word	0x200002a4

08007ffc <__ascii_wctomb>:
 8007ffc:	b149      	cbz	r1, 8008012 <__ascii_wctomb+0x16>
 8007ffe:	2aff      	cmp	r2, #255	; 0xff
 8008000:	bf85      	ittet	hi
 8008002:	238a      	movhi	r3, #138	; 0x8a
 8008004:	6003      	strhi	r3, [r0, #0]
 8008006:	700a      	strbls	r2, [r1, #0]
 8008008:	f04f 30ff 	movhi.w	r0, #4294967295
 800800c:	bf98      	it	ls
 800800e:	2001      	movls	r0, #1
 8008010:	4770      	bx	lr
 8008012:	4608      	mov	r0, r1
 8008014:	4770      	bx	lr

08008016 <abort>:
 8008016:	b508      	push	{r3, lr}
 8008018:	2006      	movs	r0, #6
 800801a:	f000 f82b 	bl	8008074 <raise>
 800801e:	2001      	movs	r0, #1
 8008020:	f7f9 ff8c 	bl	8001f3c <_exit>

08008024 <_raise_r>:
 8008024:	291f      	cmp	r1, #31
 8008026:	b538      	push	{r3, r4, r5, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	460d      	mov	r5, r1
 800802c:	d904      	bls.n	8008038 <_raise_r+0x14>
 800802e:	2316      	movs	r3, #22
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800803a:	b112      	cbz	r2, 8008042 <_raise_r+0x1e>
 800803c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008040:	b94b      	cbnz	r3, 8008056 <_raise_r+0x32>
 8008042:	4620      	mov	r0, r4
 8008044:	f000 f830 	bl	80080a8 <_getpid_r>
 8008048:	462a      	mov	r2, r5
 800804a:	4601      	mov	r1, r0
 800804c:	4620      	mov	r0, r4
 800804e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008052:	f000 b817 	b.w	8008084 <_kill_r>
 8008056:	2b01      	cmp	r3, #1
 8008058:	d00a      	beq.n	8008070 <_raise_r+0x4c>
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	d103      	bne.n	8008066 <_raise_r+0x42>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	2001      	movs	r0, #1
 8008064:	e7e7      	b.n	8008036 <_raise_r+0x12>
 8008066:	2400      	movs	r4, #0
 8008068:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800806c:	4628      	mov	r0, r5
 800806e:	4798      	blx	r3
 8008070:	2000      	movs	r0, #0
 8008072:	e7e0      	b.n	8008036 <_raise_r+0x12>

08008074 <raise>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <raise+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bfd3 	b.w	8008024 <_raise_r>
 800807e:	bf00      	nop
 8008080:	2000000c 	.word	0x2000000c

08008084 <_kill_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	; (80080a4 <_kill_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7f9 ff43 	bl	8001f1c <_kill>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_kill_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_kill_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	200002a4 	.word	0x200002a4

080080a8 <_getpid_r>:
 80080a8:	f7f9 bf30 	b.w	8001f0c <_getpid>
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <atan>:
 80080b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ec55 4b10 	vmov	r4, r5, d0
 80080b8:	4bc3      	ldr	r3, [pc, #780]	; (80083c8 <atan+0x318>)
 80080ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80080be:	429e      	cmp	r6, r3
 80080c0:	46ab      	mov	fp, r5
 80080c2:	dd18      	ble.n	80080f6 <atan+0x46>
 80080c4:	4bc1      	ldr	r3, [pc, #772]	; (80083cc <atan+0x31c>)
 80080c6:	429e      	cmp	r6, r3
 80080c8:	dc01      	bgt.n	80080ce <atan+0x1e>
 80080ca:	d109      	bne.n	80080e0 <atan+0x30>
 80080cc:	b144      	cbz	r4, 80080e0 <atan+0x30>
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	4620      	mov	r0, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	f7f8 f8f9 	bl	80002cc <__adddf3>
 80080da:	4604      	mov	r4, r0
 80080dc:	460d      	mov	r5, r1
 80080de:	e006      	b.n	80080ee <atan+0x3e>
 80080e0:	f1bb 0f00 	cmp.w	fp, #0
 80080e4:	f300 8131 	bgt.w	800834a <atan+0x29a>
 80080e8:	a59b      	add	r5, pc, #620	; (adr r5, 8008358 <atan+0x2a8>)
 80080ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ee:	ec45 4b10 	vmov	d0, r4, r5
 80080f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f6:	4bb6      	ldr	r3, [pc, #728]	; (80083d0 <atan+0x320>)
 80080f8:	429e      	cmp	r6, r3
 80080fa:	dc14      	bgt.n	8008126 <atan+0x76>
 80080fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008100:	429e      	cmp	r6, r3
 8008102:	dc0d      	bgt.n	8008120 <atan+0x70>
 8008104:	a396      	add	r3, pc, #600	; (adr r3, 8008360 <atan+0x2b0>)
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	ee10 0a10 	vmov	r0, s0
 800810e:	4629      	mov	r1, r5
 8008110:	f7f8 f8dc 	bl	80002cc <__adddf3>
 8008114:	4baf      	ldr	r3, [pc, #700]	; (80083d4 <atan+0x324>)
 8008116:	2200      	movs	r2, #0
 8008118:	f7f8 fd1e 	bl	8000b58 <__aeabi_dcmpgt>
 800811c:	2800      	cmp	r0, #0
 800811e:	d1e6      	bne.n	80080ee <atan+0x3e>
 8008120:	f04f 3aff 	mov.w	sl, #4294967295
 8008124:	e02b      	b.n	800817e <atan+0xce>
 8008126:	f000 f963 	bl	80083f0 <fabs>
 800812a:	4bab      	ldr	r3, [pc, #684]	; (80083d8 <atan+0x328>)
 800812c:	429e      	cmp	r6, r3
 800812e:	ec55 4b10 	vmov	r4, r5, d0
 8008132:	f300 80bf 	bgt.w	80082b4 <atan+0x204>
 8008136:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800813a:	429e      	cmp	r6, r3
 800813c:	f300 80a0 	bgt.w	8008280 <atan+0x1d0>
 8008140:	ee10 2a10 	vmov	r2, s0
 8008144:	ee10 0a10 	vmov	r0, s0
 8008148:	462b      	mov	r3, r5
 800814a:	4629      	mov	r1, r5
 800814c:	f7f8 f8be 	bl	80002cc <__adddf3>
 8008150:	4ba0      	ldr	r3, [pc, #640]	; (80083d4 <atan+0x324>)
 8008152:	2200      	movs	r2, #0
 8008154:	f7f8 f8b8 	bl	80002c8 <__aeabi_dsub>
 8008158:	2200      	movs	r2, #0
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f8b1 	bl	80002cc <__adddf3>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fb8b 	bl	800088c <__aeabi_ddiv>
 8008176:	f04f 0a00 	mov.w	sl, #0
 800817a:	4604      	mov	r4, r0
 800817c:	460d      	mov	r5, r1
 800817e:	4622      	mov	r2, r4
 8008180:	462b      	mov	r3, r5
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4680      	mov	r8, r0
 8008190:	4689      	mov	r9, r1
 8008192:	f7f8 fa51 	bl	8000638 <__aeabi_dmul>
 8008196:	a374      	add	r3, pc, #464	; (adr r3, 8008368 <atan+0x2b8>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	a372      	add	r3, pc, #456	; (adr r3, 8008370 <atan+0x2c0>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f7f8 f88f 	bl	80002cc <__adddf3>
 80081ae:	4632      	mov	r2, r6
 80081b0:	463b      	mov	r3, r7
 80081b2:	f7f8 fa41 	bl	8000638 <__aeabi_dmul>
 80081b6:	a370      	add	r3, pc, #448	; (adr r3, 8008378 <atan+0x2c8>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 f886 	bl	80002cc <__adddf3>
 80081c0:	4632      	mov	r2, r6
 80081c2:	463b      	mov	r3, r7
 80081c4:	f7f8 fa38 	bl	8000638 <__aeabi_dmul>
 80081c8:	a36d      	add	r3, pc, #436	; (adr r3, 8008380 <atan+0x2d0>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f87d 	bl	80002cc <__adddf3>
 80081d2:	4632      	mov	r2, r6
 80081d4:	463b      	mov	r3, r7
 80081d6:	f7f8 fa2f 	bl	8000638 <__aeabi_dmul>
 80081da:	a36b      	add	r3, pc, #428	; (adr r3, 8008388 <atan+0x2d8>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 f874 	bl	80002cc <__adddf3>
 80081e4:	4632      	mov	r2, r6
 80081e6:	463b      	mov	r3, r7
 80081e8:	f7f8 fa26 	bl	8000638 <__aeabi_dmul>
 80081ec:	a368      	add	r3, pc, #416	; (adr r3, 8008390 <atan+0x2e0>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 f86b 	bl	80002cc <__adddf3>
 80081f6:	4642      	mov	r2, r8
 80081f8:	464b      	mov	r3, r9
 80081fa:	f7f8 fa1d 	bl	8000638 <__aeabi_dmul>
 80081fe:	a366      	add	r3, pc, #408	; (adr r3, 8008398 <atan+0x2e8>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	4680      	mov	r8, r0
 8008206:	4689      	mov	r9, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fa14 	bl	8000638 <__aeabi_dmul>
 8008210:	a363      	add	r3, pc, #396	; (adr r3, 80083a0 <atan+0x2f0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f857 	bl	80002c8 <__aeabi_dsub>
 800821a:	4632      	mov	r2, r6
 800821c:	463b      	mov	r3, r7
 800821e:	f7f8 fa0b 	bl	8000638 <__aeabi_dmul>
 8008222:	a361      	add	r3, pc, #388	; (adr r3, 80083a8 <atan+0x2f8>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f7f8 f84e 	bl	80002c8 <__aeabi_dsub>
 800822c:	4632      	mov	r2, r6
 800822e:	463b      	mov	r3, r7
 8008230:	f7f8 fa02 	bl	8000638 <__aeabi_dmul>
 8008234:	a35e      	add	r3, pc, #376	; (adr r3, 80083b0 <atan+0x300>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f845 	bl	80002c8 <__aeabi_dsub>
 800823e:	4632      	mov	r2, r6
 8008240:	463b      	mov	r3, r7
 8008242:	f7f8 f9f9 	bl	8000638 <__aeabi_dmul>
 8008246:	a35c      	add	r3, pc, #368	; (adr r3, 80083b8 <atan+0x308>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f83c 	bl	80002c8 <__aeabi_dsub>
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	f7f8 f9f0 	bl	8000638 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4640      	mov	r0, r8
 800825e:	4649      	mov	r1, r9
 8008260:	f7f8 f834 	bl	80002cc <__adddf3>
 8008264:	4622      	mov	r2, r4
 8008266:	462b      	mov	r3, r5
 8008268:	f7f8 f9e6 	bl	8000638 <__aeabi_dmul>
 800826c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	d14b      	bne.n	800830e <atan+0x25e>
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f8 f825 	bl	80002c8 <__aeabi_dsub>
 800827e:	e72c      	b.n	80080da <atan+0x2a>
 8008280:	ee10 0a10 	vmov	r0, s0
 8008284:	4b53      	ldr	r3, [pc, #332]	; (80083d4 <atan+0x324>)
 8008286:	2200      	movs	r2, #0
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 f81d 	bl	80002c8 <__aeabi_dsub>
 800828e:	4b51      	ldr	r3, [pc, #324]	; (80083d4 <atan+0x324>)
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	2200      	movs	r2, #0
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 f817 	bl	80002cc <__adddf3>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f8 faf1 	bl	800088c <__aeabi_ddiv>
 80082aa:	f04f 0a01 	mov.w	sl, #1
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	e764      	b.n	800817e <atan+0xce>
 80082b4:	4b49      	ldr	r3, [pc, #292]	; (80083dc <atan+0x32c>)
 80082b6:	429e      	cmp	r6, r3
 80082b8:	da1d      	bge.n	80082f6 <atan+0x246>
 80082ba:	ee10 0a10 	vmov	r0, s0
 80082be:	4b48      	ldr	r3, [pc, #288]	; (80083e0 <atan+0x330>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f8 f800 	bl	80002c8 <__aeabi_dsub>
 80082c8:	4b45      	ldr	r3, [pc, #276]	; (80083e0 <atan+0x330>)
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	2200      	movs	r2, #0
 80082d0:	4620      	mov	r0, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	f7f8 f9b0 	bl	8000638 <__aeabi_dmul>
 80082d8:	4b3e      	ldr	r3, [pc, #248]	; (80083d4 <atan+0x324>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f7 fff6 	bl	80002cc <__adddf3>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 fad0 	bl	800088c <__aeabi_ddiv>
 80082ec:	f04f 0a02 	mov.w	sl, #2
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	e743      	b.n	800817e <atan+0xce>
 80082f6:	462b      	mov	r3, r5
 80082f8:	ee10 2a10 	vmov	r2, s0
 80082fc:	4939      	ldr	r1, [pc, #228]	; (80083e4 <atan+0x334>)
 80082fe:	2000      	movs	r0, #0
 8008300:	f7f8 fac4 	bl	800088c <__aeabi_ddiv>
 8008304:	f04f 0a03 	mov.w	sl, #3
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	e737      	b.n	800817e <atan+0xce>
 800830e:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <atan+0x338>)
 8008310:	4e36      	ldr	r6, [pc, #216]	; (80083ec <atan+0x33c>)
 8008312:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008316:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800831a:	e9da 2300 	ldrd	r2, r3, [sl]
 800831e:	f7f7 ffd3 	bl	80002c8 <__aeabi_dsub>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	f7f7 ffcf 	bl	80002c8 <__aeabi_dsub>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008332:	f7f7 ffc9 	bl	80002c8 <__aeabi_dsub>
 8008336:	f1bb 0f00 	cmp.w	fp, #0
 800833a:	4604      	mov	r4, r0
 800833c:	460d      	mov	r5, r1
 800833e:	f6bf aed6 	bge.w	80080ee <atan+0x3e>
 8008342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008346:	461d      	mov	r5, r3
 8008348:	e6d1      	b.n	80080ee <atan+0x3e>
 800834a:	a51d      	add	r5, pc, #116	; (adr r5, 80083c0 <atan+0x310>)
 800834c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008350:	e6cd      	b.n	80080ee <atan+0x3e>
 8008352:	bf00      	nop
 8008354:	f3af 8000 	nop.w
 8008358:	54442d18 	.word	0x54442d18
 800835c:	bff921fb 	.word	0xbff921fb
 8008360:	8800759c 	.word	0x8800759c
 8008364:	7e37e43c 	.word	0x7e37e43c
 8008368:	e322da11 	.word	0xe322da11
 800836c:	3f90ad3a 	.word	0x3f90ad3a
 8008370:	24760deb 	.word	0x24760deb
 8008374:	3fa97b4b 	.word	0x3fa97b4b
 8008378:	a0d03d51 	.word	0xa0d03d51
 800837c:	3fb10d66 	.word	0x3fb10d66
 8008380:	c54c206e 	.word	0xc54c206e
 8008384:	3fb745cd 	.word	0x3fb745cd
 8008388:	920083ff 	.word	0x920083ff
 800838c:	3fc24924 	.word	0x3fc24924
 8008390:	5555550d 	.word	0x5555550d
 8008394:	3fd55555 	.word	0x3fd55555
 8008398:	2c6a6c2f 	.word	0x2c6a6c2f
 800839c:	bfa2b444 	.word	0xbfa2b444
 80083a0:	52defd9a 	.word	0x52defd9a
 80083a4:	3fadde2d 	.word	0x3fadde2d
 80083a8:	af749a6d 	.word	0xaf749a6d
 80083ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80083b0:	fe231671 	.word	0xfe231671
 80083b4:	3fbc71c6 	.word	0x3fbc71c6
 80083b8:	9998ebc4 	.word	0x9998ebc4
 80083bc:	3fc99999 	.word	0x3fc99999
 80083c0:	54442d18 	.word	0x54442d18
 80083c4:	3ff921fb 	.word	0x3ff921fb
 80083c8:	440fffff 	.word	0x440fffff
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	3fdbffff 	.word	0x3fdbffff
 80083d4:	3ff00000 	.word	0x3ff00000
 80083d8:	3ff2ffff 	.word	0x3ff2ffff
 80083dc:	40038000 	.word	0x40038000
 80083e0:	3ff80000 	.word	0x3ff80000
 80083e4:	bff00000 	.word	0xbff00000
 80083e8:	08009d40 	.word	0x08009d40
 80083ec:	08009d20 	.word	0x08009d20

080083f0 <fabs>:
 80083f0:	ec51 0b10 	vmov	r0, r1, d0
 80083f4:	ee10 2a10 	vmov	r2, s0
 80083f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083fc:	ec43 2b10 	vmov	d0, r2, r3
 8008400:	4770      	bx	lr
	...

08008404 <acos>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	ed2d 8b02 	vpush	{d8}
 800840a:	ec55 4b10 	vmov	r4, r5, d0
 800840e:	f000 f8cb 	bl	80085a8 <__ieee754_acos>
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	eeb0 8a40 	vmov.f32	s16, s0
 800841e:	eef0 8a60 	vmov.f32	s17, s1
 8008422:	f7f8 fba3 	bl	8000b6c <__aeabi_dcmpun>
 8008426:	b9a8      	cbnz	r0, 8008454 <acos+0x50>
 8008428:	ec45 4b10 	vmov	d0, r4, r5
 800842c:	f7ff ffe0 	bl	80083f0 <fabs>
 8008430:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <acos+0x60>)
 8008432:	ec51 0b10 	vmov	r0, r1, d0
 8008436:	2200      	movs	r2, #0
 8008438:	f7f8 fb8e 	bl	8000b58 <__aeabi_dcmpgt>
 800843c:	b150      	cbz	r0, 8008454 <acos+0x50>
 800843e:	f7fd f85f 	bl	8005500 <__errno>
 8008442:	ecbd 8b02 	vpop	{d8}
 8008446:	2321      	movs	r3, #33	; 0x21
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800844e:	4806      	ldr	r0, [pc, #24]	; (8008468 <acos+0x64>)
 8008450:	f001 b926 	b.w	80096a0 <nan>
 8008454:	eeb0 0a48 	vmov.f32	s0, s16
 8008458:	eef0 0a68 	vmov.f32	s1, s17
 800845c:	ecbd 8b02 	vpop	{d8}
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	bf00      	nop
 8008464:	3ff00000 	.word	0x3ff00000
 8008468:	08009c10 	.word	0x08009c10

0800846c <pow>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	ed2d 8b02 	vpush	{d8}
 8008472:	eeb0 8a40 	vmov.f32	s16, s0
 8008476:	eef0 8a60 	vmov.f32	s17, s1
 800847a:	ec55 4b11 	vmov	r4, r5, d1
 800847e:	f000 faf3 	bl	8008a68 <__ieee754_pow>
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	ec57 6b10 	vmov	r6, r7, d0
 800848e:	f7f8 fb6d 	bl	8000b6c <__aeabi_dcmpun>
 8008492:	2800      	cmp	r0, #0
 8008494:	d13b      	bne.n	800850e <pow+0xa2>
 8008496:	ec51 0b18 	vmov	r0, r1, d8
 800849a:	2200      	movs	r2, #0
 800849c:	2300      	movs	r3, #0
 800849e:	f7f8 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 80084a2:	b1b8      	cbz	r0, 80084d4 <pow+0x68>
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f8 fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d146      	bne.n	8008542 <pow+0xd6>
 80084b4:	ec45 4b10 	vmov	d0, r4, r5
 80084b8:	f001 f8e6 	bl	8009688 <finite>
 80084bc:	b338      	cbz	r0, 800850e <pow+0xa2>
 80084be:	2200      	movs	r2, #0
 80084c0:	2300      	movs	r3, #0
 80084c2:	4620      	mov	r0, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	f7f8 fb29 	bl	8000b1c <__aeabi_dcmplt>
 80084ca:	b300      	cbz	r0, 800850e <pow+0xa2>
 80084cc:	f7fd f818 	bl	8005500 <__errno>
 80084d0:	2322      	movs	r3, #34	; 0x22
 80084d2:	e01b      	b.n	800850c <pow+0xa0>
 80084d4:	ec47 6b10 	vmov	d0, r6, r7
 80084d8:	f001 f8d6 	bl	8009688 <finite>
 80084dc:	b9e0      	cbnz	r0, 8008518 <pow+0xac>
 80084de:	eeb0 0a48 	vmov.f32	s0, s16
 80084e2:	eef0 0a68 	vmov.f32	s1, s17
 80084e6:	f001 f8cf 	bl	8009688 <finite>
 80084ea:	b1a8      	cbz	r0, 8008518 <pow+0xac>
 80084ec:	ec45 4b10 	vmov	d0, r4, r5
 80084f0:	f001 f8ca 	bl	8009688 <finite>
 80084f4:	b180      	cbz	r0, 8008518 <pow+0xac>
 80084f6:	4632      	mov	r2, r6
 80084f8:	463b      	mov	r3, r7
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f8 fb35 	bl	8000b6c <__aeabi_dcmpun>
 8008502:	2800      	cmp	r0, #0
 8008504:	d0e2      	beq.n	80084cc <pow+0x60>
 8008506:	f7fc fffb 	bl	8005500 <__errno>
 800850a:	2321      	movs	r3, #33	; 0x21
 800850c:	6003      	str	r3, [r0, #0]
 800850e:	ecbd 8b02 	vpop	{d8}
 8008512:	ec47 6b10 	vmov	d0, r6, r7
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7f8 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 8008524:	2800      	cmp	r0, #0
 8008526:	d0f2      	beq.n	800850e <pow+0xa2>
 8008528:	eeb0 0a48 	vmov.f32	s0, s16
 800852c:	eef0 0a68 	vmov.f32	s1, s17
 8008530:	f001 f8aa 	bl	8009688 <finite>
 8008534:	2800      	cmp	r0, #0
 8008536:	d0ea      	beq.n	800850e <pow+0xa2>
 8008538:	ec45 4b10 	vmov	d0, r4, r5
 800853c:	f001 f8a4 	bl	8009688 <finite>
 8008540:	e7c3      	b.n	80084ca <pow+0x5e>
 8008542:	4f01      	ldr	r7, [pc, #4]	; (8008548 <pow+0xdc>)
 8008544:	2600      	movs	r6, #0
 8008546:	e7e2      	b.n	800850e <pow+0xa2>
 8008548:	3ff00000 	.word	0x3ff00000

0800854c <sqrt>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	ed2d 8b02 	vpush	{d8}
 8008552:	ec55 4b10 	vmov	r4, r5, d0
 8008556:	f000 ffb5 	bl	80094c4 <__ieee754_sqrt>
 800855a:	4622      	mov	r2, r4
 800855c:	462b      	mov	r3, r5
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	eeb0 8a40 	vmov.f32	s16, s0
 8008566:	eef0 8a60 	vmov.f32	s17, s1
 800856a:	f7f8 faff 	bl	8000b6c <__aeabi_dcmpun>
 800856e:	b990      	cbnz	r0, 8008596 <sqrt+0x4a>
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	f7f8 fad0 	bl	8000b1c <__aeabi_dcmplt>
 800857c:	b158      	cbz	r0, 8008596 <sqrt+0x4a>
 800857e:	f7fc ffbf 	bl	8005500 <__errno>
 8008582:	2321      	movs	r3, #33	; 0x21
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2200      	movs	r2, #0
 8008588:	2300      	movs	r3, #0
 800858a:	4610      	mov	r0, r2
 800858c:	4619      	mov	r1, r3
 800858e:	f7f8 f97d 	bl	800088c <__aeabi_ddiv>
 8008592:	ec41 0b18 	vmov	d8, r0, r1
 8008596:	eeb0 0a48 	vmov.f32	s0, s16
 800859a:	eef0 0a68 	vmov.f32	s1, s17
 800859e:	ecbd 8b02 	vpop	{d8}
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	0000      	movs	r0, r0
	...

080085a8 <__ieee754_acos>:
 80085a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	ec55 4b10 	vmov	r4, r5, d0
 80085b0:	49b7      	ldr	r1, [pc, #732]	; (8008890 <__ieee754_acos+0x2e8>)
 80085b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80085b6:	428b      	cmp	r3, r1
 80085b8:	dd1b      	ble.n	80085f2 <__ieee754_acos+0x4a>
 80085ba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80085be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085c2:	4323      	orrs	r3, r4
 80085c4:	d106      	bne.n	80085d4 <__ieee754_acos+0x2c>
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	f300 8211 	bgt.w	80089ee <__ieee754_acos+0x446>
 80085cc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8008828 <__ieee754_acos+0x280>
 80085d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d4:	ee10 2a10 	vmov	r2, s0
 80085d8:	462b      	mov	r3, r5
 80085da:	ee10 0a10 	vmov	r0, s0
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f7 fe72 	bl	80002c8 <__aeabi_dsub>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	f7f8 f950 	bl	800088c <__aeabi_ddiv>
 80085ec:	ec41 0b10 	vmov	d0, r0, r1
 80085f0:	e7ee      	b.n	80085d0 <__ieee754_acos+0x28>
 80085f2:	49a8      	ldr	r1, [pc, #672]	; (8008894 <__ieee754_acos+0x2ec>)
 80085f4:	428b      	cmp	r3, r1
 80085f6:	f300 8087 	bgt.w	8008708 <__ieee754_acos+0x160>
 80085fa:	4aa7      	ldr	r2, [pc, #668]	; (8008898 <__ieee754_acos+0x2f0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f340 81f9 	ble.w	80089f4 <__ieee754_acos+0x44c>
 8008602:	ee10 2a10 	vmov	r2, s0
 8008606:	ee10 0a10 	vmov	r0, s0
 800860a:	462b      	mov	r3, r5
 800860c:	4629      	mov	r1, r5
 800860e:	f7f8 f813 	bl	8000638 <__aeabi_dmul>
 8008612:	a387      	add	r3, pc, #540	; (adr r3, 8008830 <__ieee754_acos+0x288>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	4606      	mov	r6, r0
 800861a:	460f      	mov	r7, r1
 800861c:	f7f8 f80c 	bl	8000638 <__aeabi_dmul>
 8008620:	a385      	add	r3, pc, #532	; (adr r3, 8008838 <__ieee754_acos+0x290>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 fe51 	bl	80002cc <__adddf3>
 800862a:	4632      	mov	r2, r6
 800862c:	463b      	mov	r3, r7
 800862e:	f7f8 f803 	bl	8000638 <__aeabi_dmul>
 8008632:	a383      	add	r3, pc, #524	; (adr r3, 8008840 <__ieee754_acos+0x298>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe46 	bl	80002c8 <__aeabi_dsub>
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	f7f7 fffa 	bl	8000638 <__aeabi_dmul>
 8008644:	a380      	add	r3, pc, #512	; (adr r3, 8008848 <__ieee754_acos+0x2a0>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fe3f 	bl	80002cc <__adddf3>
 800864e:	4632      	mov	r2, r6
 8008650:	463b      	mov	r3, r7
 8008652:	f7f7 fff1 	bl	8000638 <__aeabi_dmul>
 8008656:	a37e      	add	r3, pc, #504	; (adr r3, 8008850 <__ieee754_acos+0x2a8>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	4632      	mov	r2, r6
 8008662:	463b      	mov	r3, r7
 8008664:	f7f7 ffe8 	bl	8000638 <__aeabi_dmul>
 8008668:	a37b      	add	r3, pc, #492	; (adr r3, 8008858 <__ieee754_acos+0x2b0>)
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f7f7 fe2d 	bl	80002cc <__adddf3>
 8008672:	4632      	mov	r2, r6
 8008674:	463b      	mov	r3, r7
 8008676:	f7f7 ffdf 	bl	8000638 <__aeabi_dmul>
 800867a:	a379      	add	r3, pc, #484	; (adr r3, 8008860 <__ieee754_acos+0x2b8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	4680      	mov	r8, r0
 8008682:	4689      	mov	r9, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f7 ffd6 	bl	8000638 <__aeabi_dmul>
 800868c:	a376      	add	r3, pc, #472	; (adr r3, 8008868 <__ieee754_acos+0x2c0>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 fe19 	bl	80002c8 <__aeabi_dsub>
 8008696:	4632      	mov	r2, r6
 8008698:	463b      	mov	r3, r7
 800869a:	f7f7 ffcd 	bl	8000638 <__aeabi_dmul>
 800869e:	a374      	add	r3, pc, #464	; (adr r3, 8008870 <__ieee754_acos+0x2c8>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f7 fe12 	bl	80002cc <__adddf3>
 80086a8:	4632      	mov	r2, r6
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f7 ffc4 	bl	8000638 <__aeabi_dmul>
 80086b0:	a371      	add	r3, pc, #452	; (adr r3, 8008878 <__ieee754_acos+0x2d0>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 fe07 	bl	80002c8 <__aeabi_dsub>
 80086ba:	4632      	mov	r2, r6
 80086bc:	463b      	mov	r3, r7
 80086be:	f7f7 ffbb 	bl	8000638 <__aeabi_dmul>
 80086c2:	4b76      	ldr	r3, [pc, #472]	; (800889c <__ieee754_acos+0x2f4>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	f7f7 fe01 	bl	80002cc <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 f8db 	bl	800088c <__aeabi_ddiv>
 80086d6:	4622      	mov	r2, r4
 80086d8:	462b      	mov	r3, r5
 80086da:	f7f7 ffad 	bl	8000638 <__aeabi_dmul>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	a167      	add	r1, pc, #412	; (adr r1, 8008880 <__ieee754_acos+0x2d8>)
 80086e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e8:	f7f7 fdee 	bl	80002c8 <__aeabi_dsub>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4620      	mov	r0, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	f7f7 fde8 	bl	80002c8 <__aeabi_dsub>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	a162      	add	r1, pc, #392	; (adr r1, 8008888 <__ieee754_acos+0x2e0>)
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	f7f7 fde1 	bl	80002c8 <__aeabi_dsub>
 8008706:	e771      	b.n	80085ec <__ieee754_acos+0x44>
 8008708:	2d00      	cmp	r5, #0
 800870a:	f280 80cb 	bge.w	80088a4 <__ieee754_acos+0x2fc>
 800870e:	ee10 0a10 	vmov	r0, s0
 8008712:	4b62      	ldr	r3, [pc, #392]	; (800889c <__ieee754_acos+0x2f4>)
 8008714:	2200      	movs	r2, #0
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fdd8 	bl	80002cc <__adddf3>
 800871c:	4b60      	ldr	r3, [pc, #384]	; (80088a0 <__ieee754_acos+0x2f8>)
 800871e:	2200      	movs	r2, #0
 8008720:	f7f7 ff8a 	bl	8000638 <__aeabi_dmul>
 8008724:	a342      	add	r3, pc, #264	; (adr r3, 8008830 <__ieee754_acos+0x288>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	a341      	add	r3, pc, #260	; (adr r3, 8008838 <__ieee754_acos+0x290>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdc8 	bl	80002cc <__adddf3>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 ff7a 	bl	8000638 <__aeabi_dmul>
 8008744:	a33e      	add	r3, pc, #248	; (adr r3, 8008840 <__ieee754_acos+0x298>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdbd 	bl	80002c8 <__aeabi_dsub>
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	a33c      	add	r3, pc, #240	; (adr r3, 8008848 <__ieee754_acos+0x2a0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fdb6 	bl	80002cc <__adddf3>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 ff68 	bl	8000638 <__aeabi_dmul>
 8008768:	a339      	add	r3, pc, #228	; (adr r3, 8008850 <__ieee754_acos+0x2a8>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fdab 	bl	80002c8 <__aeabi_dsub>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f7f7 ff5f 	bl	8000638 <__aeabi_dmul>
 800877a:	a337      	add	r3, pc, #220	; (adr r3, 8008858 <__ieee754_acos+0x2b0>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 fda4 	bl	80002cc <__adddf3>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 ff56 	bl	8000638 <__aeabi_dmul>
 800878c:	ec45 4b10 	vmov	d0, r4, r5
 8008790:	4680      	mov	r8, r0
 8008792:	4689      	mov	r9, r1
 8008794:	f000 fe96 	bl	80094c4 <__ieee754_sqrt>
 8008798:	a331      	add	r3, pc, #196	; (adr r3, 8008860 <__ieee754_acos+0x2b8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	ec57 6b10 	vmov	r6, r7, d0
 80087a6:	f7f7 ff47 	bl	8000638 <__aeabi_dmul>
 80087aa:	a32f      	add	r3, pc, #188	; (adr r3, 8008868 <__ieee754_acos+0x2c0>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f7f7 fd8a 	bl	80002c8 <__aeabi_dsub>
 80087b4:	4622      	mov	r2, r4
 80087b6:	462b      	mov	r3, r5
 80087b8:	f7f7 ff3e 	bl	8000638 <__aeabi_dmul>
 80087bc:	a32c      	add	r3, pc, #176	; (adr r3, 8008870 <__ieee754_acos+0x2c8>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fd83 	bl	80002cc <__adddf3>
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	f7f7 ff35 	bl	8000638 <__aeabi_dmul>
 80087ce:	a32a      	add	r3, pc, #168	; (adr r3, 8008878 <__ieee754_acos+0x2d0>)
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	f7f7 fd78 	bl	80002c8 <__aeabi_dsub>
 80087d8:	4622      	mov	r2, r4
 80087da:	462b      	mov	r3, r5
 80087dc:	f7f7 ff2c 	bl	8000638 <__aeabi_dmul>
 80087e0:	4b2e      	ldr	r3, [pc, #184]	; (800889c <__ieee754_acos+0x2f4>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	f7f7 fd72 	bl	80002cc <__adddf3>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f84c 	bl	800088c <__aeabi_ddiv>
 80087f4:	4632      	mov	r2, r6
 80087f6:	463b      	mov	r3, r7
 80087f8:	f7f7 ff1e 	bl	8000638 <__aeabi_dmul>
 80087fc:	a320      	add	r3, pc, #128	; (adr r3, 8008880 <__ieee754_acos+0x2d8>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fd61 	bl	80002c8 <__aeabi_dsub>
 8008806:	4632      	mov	r2, r6
 8008808:	463b      	mov	r3, r7
 800880a:	f7f7 fd5f 	bl	80002cc <__adddf3>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	f7f7 fd5b 	bl	80002cc <__adddf3>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	a103      	add	r1, pc, #12	; (adr r1, 8008828 <__ieee754_acos+0x280>)
 800881c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008820:	e76f      	b.n	8008702 <__ieee754_acos+0x15a>
 8008822:	bf00      	nop
 8008824:	f3af 8000 	nop.w
 8008828:	54442d18 	.word	0x54442d18
 800882c:	400921fb 	.word	0x400921fb
 8008830:	0dfdf709 	.word	0x0dfdf709
 8008834:	3f023de1 	.word	0x3f023de1
 8008838:	7501b288 	.word	0x7501b288
 800883c:	3f49efe0 	.word	0x3f49efe0
 8008840:	b5688f3b 	.word	0xb5688f3b
 8008844:	3fa48228 	.word	0x3fa48228
 8008848:	0e884455 	.word	0x0e884455
 800884c:	3fc9c155 	.word	0x3fc9c155
 8008850:	03eb6f7d 	.word	0x03eb6f7d
 8008854:	3fd4d612 	.word	0x3fd4d612
 8008858:	55555555 	.word	0x55555555
 800885c:	3fc55555 	.word	0x3fc55555
 8008860:	b12e9282 	.word	0xb12e9282
 8008864:	3fb3b8c5 	.word	0x3fb3b8c5
 8008868:	1b8d0159 	.word	0x1b8d0159
 800886c:	3fe6066c 	.word	0x3fe6066c
 8008870:	9c598ac8 	.word	0x9c598ac8
 8008874:	40002ae5 	.word	0x40002ae5
 8008878:	1c8a2d4b 	.word	0x1c8a2d4b
 800887c:	40033a27 	.word	0x40033a27
 8008880:	33145c07 	.word	0x33145c07
 8008884:	3c91a626 	.word	0x3c91a626
 8008888:	54442d18 	.word	0x54442d18
 800888c:	3ff921fb 	.word	0x3ff921fb
 8008890:	3fefffff 	.word	0x3fefffff
 8008894:	3fdfffff 	.word	0x3fdfffff
 8008898:	3c600000 	.word	0x3c600000
 800889c:	3ff00000 	.word	0x3ff00000
 80088a0:	3fe00000 	.word	0x3fe00000
 80088a4:	ee10 2a10 	vmov	r2, s0
 80088a8:	462b      	mov	r3, r5
 80088aa:	496d      	ldr	r1, [pc, #436]	; (8008a60 <__ieee754_acos+0x4b8>)
 80088ac:	2000      	movs	r0, #0
 80088ae:	f7f7 fd0b 	bl	80002c8 <__aeabi_dsub>
 80088b2:	4b6c      	ldr	r3, [pc, #432]	; (8008a64 <__ieee754_acos+0x4bc>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	f7f7 febf 	bl	8000638 <__aeabi_dmul>
 80088ba:	4604      	mov	r4, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	ec45 4b10 	vmov	d0, r4, r5
 80088c2:	f000 fdff 	bl	80094c4 <__ieee754_sqrt>
 80088c6:	a34e      	add	r3, pc, #312	; (adr r3, 8008a00 <__ieee754_acos+0x458>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	ec59 8b10 	vmov	r8, r9, d0
 80088d4:	f7f7 feb0 	bl	8000638 <__aeabi_dmul>
 80088d8:	a34b      	add	r3, pc, #300	; (adr r3, 8008a08 <__ieee754_acos+0x460>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fcf5 	bl	80002cc <__adddf3>
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	f7f7 fea7 	bl	8000638 <__aeabi_dmul>
 80088ea:	a349      	add	r3, pc, #292	; (adr r3, 8008a10 <__ieee754_acos+0x468>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fcea 	bl	80002c8 <__aeabi_dsub>
 80088f4:	4622      	mov	r2, r4
 80088f6:	462b      	mov	r3, r5
 80088f8:	f7f7 fe9e 	bl	8000638 <__aeabi_dmul>
 80088fc:	a346      	add	r3, pc, #280	; (adr r3, 8008a18 <__ieee754_acos+0x470>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fce3 	bl	80002cc <__adddf3>
 8008906:	4622      	mov	r2, r4
 8008908:	462b      	mov	r3, r5
 800890a:	f7f7 fe95 	bl	8000638 <__aeabi_dmul>
 800890e:	a344      	add	r3, pc, #272	; (adr r3, 8008a20 <__ieee754_acos+0x478>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 fcd8 	bl	80002c8 <__aeabi_dsub>
 8008918:	4622      	mov	r2, r4
 800891a:	462b      	mov	r3, r5
 800891c:	f7f7 fe8c 	bl	8000638 <__aeabi_dmul>
 8008920:	a341      	add	r3, pc, #260	; (adr r3, 8008a28 <__ieee754_acos+0x480>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fcd1 	bl	80002cc <__adddf3>
 800892a:	4622      	mov	r2, r4
 800892c:	462b      	mov	r3, r5
 800892e:	f7f7 fe83 	bl	8000638 <__aeabi_dmul>
 8008932:	a33f      	add	r3, pc, #252	; (adr r3, 8008a30 <__ieee754_acos+0x488>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4682      	mov	sl, r0
 800893a:	468b      	mov	fp, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fe7a 	bl	8000638 <__aeabi_dmul>
 8008944:	a33c      	add	r3, pc, #240	; (adr r3, 8008a38 <__ieee754_acos+0x490>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fcbd 	bl	80002c8 <__aeabi_dsub>
 800894e:	4622      	mov	r2, r4
 8008950:	462b      	mov	r3, r5
 8008952:	f7f7 fe71 	bl	8000638 <__aeabi_dmul>
 8008956:	a33a      	add	r3, pc, #232	; (adr r3, 8008a40 <__ieee754_acos+0x498>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fcb6 	bl	80002cc <__adddf3>
 8008960:	4622      	mov	r2, r4
 8008962:	462b      	mov	r3, r5
 8008964:	f7f7 fe68 	bl	8000638 <__aeabi_dmul>
 8008968:	a337      	add	r3, pc, #220	; (adr r3, 8008a48 <__ieee754_acos+0x4a0>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fcab 	bl	80002c8 <__aeabi_dsub>
 8008972:	4622      	mov	r2, r4
 8008974:	462b      	mov	r3, r5
 8008976:	f7f7 fe5f 	bl	8000638 <__aeabi_dmul>
 800897a:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <__ieee754_acos+0x4b8>)
 800897c:	2200      	movs	r2, #0
 800897e:	f7f7 fca5 	bl	80002cc <__adddf3>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4650      	mov	r0, sl
 8008988:	4659      	mov	r1, fp
 800898a:	f7f7 ff7f 	bl	800088c <__aeabi_ddiv>
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	f7f7 fe51 	bl	8000638 <__aeabi_dmul>
 8008996:	2600      	movs	r6, #0
 8008998:	4682      	mov	sl, r0
 800899a:	468b      	mov	fp, r1
 800899c:	4632      	mov	r2, r6
 800899e:	464b      	mov	r3, r9
 80089a0:	4630      	mov	r0, r6
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7f7 fe48 	bl	8000638 <__aeabi_dmul>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fc8a 	bl	80002c8 <__aeabi_dsub>
 80089b4:	4632      	mov	r2, r6
 80089b6:	4604      	mov	r4, r0
 80089b8:	460d      	mov	r5, r1
 80089ba:	464b      	mov	r3, r9
 80089bc:	4640      	mov	r0, r8
 80089be:	4649      	mov	r1, r9
 80089c0:	f7f7 fc84 	bl	80002cc <__adddf3>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7f7 ff5e 	bl	800088c <__aeabi_ddiv>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4650      	mov	r0, sl
 80089d6:	4659      	mov	r1, fp
 80089d8:	f7f7 fc78 	bl	80002cc <__adddf3>
 80089dc:	4632      	mov	r2, r6
 80089de:	464b      	mov	r3, r9
 80089e0:	f7f7 fc74 	bl	80002cc <__adddf3>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	f7f7 fc70 	bl	80002cc <__adddf3>
 80089ec:	e5fe      	b.n	80085ec <__ieee754_acos+0x44>
 80089ee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008a50 <__ieee754_acos+0x4a8>
 80089f2:	e5ed      	b.n	80085d0 <__ieee754_acos+0x28>
 80089f4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8008a58 <__ieee754_acos+0x4b0>
 80089f8:	e5ea      	b.n	80085d0 <__ieee754_acos+0x28>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	0dfdf709 	.word	0x0dfdf709
 8008a04:	3f023de1 	.word	0x3f023de1
 8008a08:	7501b288 	.word	0x7501b288
 8008a0c:	3f49efe0 	.word	0x3f49efe0
 8008a10:	b5688f3b 	.word	0xb5688f3b
 8008a14:	3fa48228 	.word	0x3fa48228
 8008a18:	0e884455 	.word	0x0e884455
 8008a1c:	3fc9c155 	.word	0x3fc9c155
 8008a20:	03eb6f7d 	.word	0x03eb6f7d
 8008a24:	3fd4d612 	.word	0x3fd4d612
 8008a28:	55555555 	.word	0x55555555
 8008a2c:	3fc55555 	.word	0x3fc55555
 8008a30:	b12e9282 	.word	0xb12e9282
 8008a34:	3fb3b8c5 	.word	0x3fb3b8c5
 8008a38:	1b8d0159 	.word	0x1b8d0159
 8008a3c:	3fe6066c 	.word	0x3fe6066c
 8008a40:	9c598ac8 	.word	0x9c598ac8
 8008a44:	40002ae5 	.word	0x40002ae5
 8008a48:	1c8a2d4b 	.word	0x1c8a2d4b
 8008a4c:	40033a27 	.word	0x40033a27
	...
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	3ff921fb 	.word	0x3ff921fb
 8008a60:	3ff00000 	.word	0x3ff00000
 8008a64:	3fe00000 	.word	0x3fe00000

08008a68 <__ieee754_pow>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	ed2d 8b06 	vpush	{d8-d10}
 8008a70:	b089      	sub	sp, #36	; 0x24
 8008a72:	ed8d 1b00 	vstr	d1, [sp]
 8008a76:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008a7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008a7e:	ea58 0102 	orrs.w	r1, r8, r2
 8008a82:	ec57 6b10 	vmov	r6, r7, d0
 8008a86:	d115      	bne.n	8008ab4 <__ieee754_pow+0x4c>
 8008a88:	19b3      	adds	r3, r6, r6
 8008a8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008a8e:	4152      	adcs	r2, r2
 8008a90:	4299      	cmp	r1, r3
 8008a92:	4b89      	ldr	r3, [pc, #548]	; (8008cb8 <__ieee754_pow+0x250>)
 8008a94:	4193      	sbcs	r3, r2
 8008a96:	f080 84d2 	bcs.w	800943e <__ieee754_pow+0x9d6>
 8008a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fc13 	bl	80002cc <__adddf3>
 8008aa6:	ec41 0b10 	vmov	d0, r0, r1
 8008aaa:	b009      	add	sp, #36	; 0x24
 8008aac:	ecbd 8b06 	vpop	{d8-d10}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	4b81      	ldr	r3, [pc, #516]	; (8008cbc <__ieee754_pow+0x254>)
 8008ab6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008aba:	429c      	cmp	r4, r3
 8008abc:	ee10 aa10 	vmov	sl, s0
 8008ac0:	463d      	mov	r5, r7
 8008ac2:	dc06      	bgt.n	8008ad2 <__ieee754_pow+0x6a>
 8008ac4:	d101      	bne.n	8008aca <__ieee754_pow+0x62>
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	d1e7      	bne.n	8008a9a <__ieee754_pow+0x32>
 8008aca:	4598      	cmp	r8, r3
 8008acc:	dc01      	bgt.n	8008ad2 <__ieee754_pow+0x6a>
 8008ace:	d10f      	bne.n	8008af0 <__ieee754_pow+0x88>
 8008ad0:	b172      	cbz	r2, 8008af0 <__ieee754_pow+0x88>
 8008ad2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008ad6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008ada:	ea55 050a 	orrs.w	r5, r5, sl
 8008ade:	d1dc      	bne.n	8008a9a <__ieee754_pow+0x32>
 8008ae0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ae4:	18db      	adds	r3, r3, r3
 8008ae6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008aea:	4152      	adcs	r2, r2
 8008aec:	429d      	cmp	r5, r3
 8008aee:	e7d0      	b.n	8008a92 <__ieee754_pow+0x2a>
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	da3b      	bge.n	8008b6c <__ieee754_pow+0x104>
 8008af4:	4b72      	ldr	r3, [pc, #456]	; (8008cc0 <__ieee754_pow+0x258>)
 8008af6:	4598      	cmp	r8, r3
 8008af8:	dc51      	bgt.n	8008b9e <__ieee754_pow+0x136>
 8008afa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008afe:	4598      	cmp	r8, r3
 8008b00:	f340 84ac 	ble.w	800945c <__ieee754_pow+0x9f4>
 8008b04:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b0c:	2b14      	cmp	r3, #20
 8008b0e:	dd0f      	ble.n	8008b30 <__ieee754_pow+0xc8>
 8008b10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b14:	fa22 f103 	lsr.w	r1, r2, r3
 8008b18:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	f040 849d 	bne.w	800945c <__ieee754_pow+0x9f4>
 8008b22:	f001 0101 	and.w	r1, r1, #1
 8008b26:	f1c1 0302 	rsb	r3, r1, #2
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	b182      	cbz	r2, 8008b50 <__ieee754_pow+0xe8>
 8008b2e:	e05f      	b.n	8008bf0 <__ieee754_pow+0x188>
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	d15b      	bne.n	8008bec <__ieee754_pow+0x184>
 8008b34:	f1c3 0314 	rsb	r3, r3, #20
 8008b38:	fa48 f103 	asr.w	r1, r8, r3
 8008b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b40:	4543      	cmp	r3, r8
 8008b42:	f040 8488 	bne.w	8009456 <__ieee754_pow+0x9ee>
 8008b46:	f001 0101 	and.w	r1, r1, #1
 8008b4a:	f1c1 0302 	rsb	r3, r1, #2
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	4b5c      	ldr	r3, [pc, #368]	; (8008cc4 <__ieee754_pow+0x25c>)
 8008b52:	4598      	cmp	r8, r3
 8008b54:	d132      	bne.n	8008bbc <__ieee754_pow+0x154>
 8008b56:	f1b9 0f00 	cmp.w	r9, #0
 8008b5a:	f280 8478 	bge.w	800944e <__ieee754_pow+0x9e6>
 8008b5e:	4959      	ldr	r1, [pc, #356]	; (8008cc4 <__ieee754_pow+0x25c>)
 8008b60:	4632      	mov	r2, r6
 8008b62:	463b      	mov	r3, r7
 8008b64:	2000      	movs	r0, #0
 8008b66:	f7f7 fe91 	bl	800088c <__aeabi_ddiv>
 8008b6a:	e79c      	b.n	8008aa6 <__ieee754_pow+0x3e>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d13d      	bne.n	8008bf0 <__ieee754_pow+0x188>
 8008b74:	4b51      	ldr	r3, [pc, #324]	; (8008cbc <__ieee754_pow+0x254>)
 8008b76:	4598      	cmp	r8, r3
 8008b78:	d1ea      	bne.n	8008b50 <__ieee754_pow+0xe8>
 8008b7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008b7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008b82:	ea53 030a 	orrs.w	r3, r3, sl
 8008b86:	f000 845a 	beq.w	800943e <__ieee754_pow+0x9d6>
 8008b8a:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <__ieee754_pow+0x260>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	dd08      	ble.n	8008ba2 <__ieee754_pow+0x13a>
 8008b90:	f1b9 0f00 	cmp.w	r9, #0
 8008b94:	f2c0 8457 	blt.w	8009446 <__ieee754_pow+0x9de>
 8008b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b9c:	e783      	b.n	8008aa6 <__ieee754_pow+0x3e>
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e7e5      	b.n	8008b6e <__ieee754_pow+0x106>
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	f04f 0000 	mov.w	r0, #0
 8008baa:	f04f 0100 	mov.w	r1, #0
 8008bae:	f6bf af7a 	bge.w	8008aa6 <__ieee754_pow+0x3e>
 8008bb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008bb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008bba:	e774      	b.n	8008aa6 <__ieee754_pow+0x3e>
 8008bbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008bc0:	d106      	bne.n	8008bd0 <__ieee754_pow+0x168>
 8008bc2:	4632      	mov	r2, r6
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4639      	mov	r1, r7
 8008bca:	f7f7 fd35 	bl	8000638 <__aeabi_dmul>
 8008bce:	e76a      	b.n	8008aa6 <__ieee754_pow+0x3e>
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <__ieee754_pow+0x264>)
 8008bd2:	4599      	cmp	r9, r3
 8008bd4:	d10c      	bne.n	8008bf0 <__ieee754_pow+0x188>
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	db0a      	blt.n	8008bf0 <__ieee754_pow+0x188>
 8008bda:	ec47 6b10 	vmov	d0, r6, r7
 8008bde:	b009      	add	sp, #36	; 0x24
 8008be0:	ecbd 8b06 	vpop	{d8-d10}
 8008be4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	f000 bc6c 	b.w	80094c4 <__ieee754_sqrt>
 8008bec:	2300      	movs	r3, #0
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	ec47 6b10 	vmov	d0, r6, r7
 8008bf4:	f7ff fbfc 	bl	80083f0 <fabs>
 8008bf8:	ec51 0b10 	vmov	r0, r1, d0
 8008bfc:	f1ba 0f00 	cmp.w	sl, #0
 8008c00:	d129      	bne.n	8008c56 <__ieee754_pow+0x1ee>
 8008c02:	b124      	cbz	r4, 8008c0e <__ieee754_pow+0x1a6>
 8008c04:	4b2f      	ldr	r3, [pc, #188]	; (8008cc4 <__ieee754_pow+0x25c>)
 8008c06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d123      	bne.n	8008c56 <__ieee754_pow+0x1ee>
 8008c0e:	f1b9 0f00 	cmp.w	r9, #0
 8008c12:	da05      	bge.n	8008c20 <__ieee754_pow+0x1b8>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	2000      	movs	r0, #0
 8008c1a:	492a      	ldr	r1, [pc, #168]	; (8008cc4 <__ieee754_pow+0x25c>)
 8008c1c:	f7f7 fe36 	bl	800088c <__aeabi_ddiv>
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	f6bf af40 	bge.w	8008aa6 <__ieee754_pow+0x3e>
 8008c26:	9b04      	ldr	r3, [sp, #16]
 8008c28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c30:	4323      	orrs	r3, r4
 8008c32:	d108      	bne.n	8008c46 <__ieee754_pow+0x1de>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	f7f7 fb44 	bl	80002c8 <__aeabi_dsub>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	e78f      	b.n	8008b66 <__ieee754_pow+0xfe>
 8008c46:	9b04      	ldr	r3, [sp, #16]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	f47f af2c 	bne.w	8008aa6 <__ieee754_pow+0x3e>
 8008c4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c52:	4619      	mov	r1, r3
 8008c54:	e727      	b.n	8008aa6 <__ieee754_pow+0x3e>
 8008c56:	0feb      	lsrs	r3, r5, #31
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9306      	str	r3, [sp, #24]
 8008c5c:	9a06      	ldr	r2, [sp, #24]
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	d102      	bne.n	8008c6a <__ieee754_pow+0x202>
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	e7e6      	b.n	8008c38 <__ieee754_pow+0x1d0>
 8008c6a:	4b19      	ldr	r3, [pc, #100]	; (8008cd0 <__ieee754_pow+0x268>)
 8008c6c:	4598      	cmp	r8, r3
 8008c6e:	f340 80fb 	ble.w	8008e68 <__ieee754_pow+0x400>
 8008c72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008c76:	4598      	cmp	r8, r3
 8008c78:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <__ieee754_pow+0x260>)
 8008c7a:	dd0c      	ble.n	8008c96 <__ieee754_pow+0x22e>
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	dc0f      	bgt.n	8008ca0 <__ieee754_pow+0x238>
 8008c80:	f1b9 0f00 	cmp.w	r9, #0
 8008c84:	da0f      	bge.n	8008ca6 <__ieee754_pow+0x23e>
 8008c86:	2000      	movs	r0, #0
 8008c88:	b009      	add	sp, #36	; 0x24
 8008c8a:	ecbd 8b06 	vpop	{d8-d10}
 8008c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c92:	f000 bcf0 	b.w	8009676 <__math_oflow>
 8008c96:	429c      	cmp	r4, r3
 8008c98:	dbf2      	blt.n	8008c80 <__ieee754_pow+0x218>
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <__ieee754_pow+0x25c>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	dd19      	ble.n	8008cd4 <__ieee754_pow+0x26c>
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	dcef      	bgt.n	8008c86 <__ieee754_pow+0x21e>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	b009      	add	sp, #36	; 0x24
 8008caa:	ecbd 8b06 	vpop	{d8-d10}
 8008cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb2:	f000 bcd7 	b.w	8009664 <__math_uflow>
 8008cb6:	bf00      	nop
 8008cb8:	fff00000 	.word	0xfff00000
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	433fffff 	.word	0x433fffff
 8008cc4:	3ff00000 	.word	0x3ff00000
 8008cc8:	3fefffff 	.word	0x3fefffff
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	41e00000 	.word	0x41e00000
 8008cd4:	4b60      	ldr	r3, [pc, #384]	; (8008e58 <__ieee754_pow+0x3f0>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f7f7 faf6 	bl	80002c8 <__aeabi_dsub>
 8008cdc:	a354      	add	r3, pc, #336	; (adr r3, 8008e30 <__ieee754_pow+0x3c8>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	f7f7 fca7 	bl	8000638 <__aeabi_dmul>
 8008cea:	a353      	add	r3, pc, #332	; (adr r3, 8008e38 <__ieee754_pow+0x3d0>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f7f7 fc9e 	bl	8000638 <__aeabi_dmul>
 8008cfc:	4b57      	ldr	r3, [pc, #348]	; (8008e5c <__ieee754_pow+0x3f4>)
 8008cfe:	4682      	mov	sl, r0
 8008d00:	468b      	mov	fp, r1
 8008d02:	2200      	movs	r2, #0
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f7f7 fc96 	bl	8000638 <__aeabi_dmul>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	a14b      	add	r1, pc, #300	; (adr r1, 8008e40 <__ieee754_pow+0x3d8>)
 8008d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d16:	f7f7 fad7 	bl	80002c8 <__aeabi_dsub>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fc8b 	bl	8000638 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	2000      	movs	r0, #0
 8008d28:	494d      	ldr	r1, [pc, #308]	; (8008e60 <__ieee754_pow+0x3f8>)
 8008d2a:	f7f7 facd 	bl	80002c8 <__aeabi_dsub>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	4680      	mov	r8, r0
 8008d32:	4689      	mov	r9, r1
 8008d34:	462b      	mov	r3, r5
 8008d36:	4620      	mov	r0, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 fc7d 	bl	8000638 <__aeabi_dmul>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fc77 	bl	8000638 <__aeabi_dmul>
 8008d4a:	a33f      	add	r3, pc, #252	; (adr r3, 8008e48 <__ieee754_pow+0x3e0>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fc72 	bl	8000638 <__aeabi_dmul>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4659      	mov	r1, fp
 8008d5c:	f7f7 fab4 	bl	80002c8 <__aeabi_dsub>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4680      	mov	r8, r0
 8008d66:	4689      	mov	r9, r1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 faae 	bl	80002cc <__adddf3>
 8008d70:	2000      	movs	r0, #0
 8008d72:	4632      	mov	r2, r6
 8008d74:	463b      	mov	r3, r7
 8008d76:	4604      	mov	r4, r0
 8008d78:	460d      	mov	r5, r1
 8008d7a:	f7f7 faa5 	bl	80002c8 <__aeabi_dsub>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4640      	mov	r0, r8
 8008d84:	4649      	mov	r1, r9
 8008d86:	f7f7 fa9f 	bl	80002c8 <__aeabi_dsub>
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	9a06      	ldr	r2, [sp, #24]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4313      	orrs	r3, r2
 8008d92:	4682      	mov	sl, r0
 8008d94:	468b      	mov	fp, r1
 8008d96:	f040 81e7 	bne.w	8009168 <__ieee754_pow+0x700>
 8008d9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008e50 <__ieee754_pow+0x3e8>
 8008d9e:	eeb0 8a47 	vmov.f32	s16, s14
 8008da2:	eef0 8a67 	vmov.f32	s17, s15
 8008da6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008daa:	2600      	movs	r6, #0
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008db4:	f7f7 fa88 	bl	80002c8 <__aeabi_dsub>
 8008db8:	4622      	mov	r2, r4
 8008dba:	462b      	mov	r3, r5
 8008dbc:	f7f7 fc3c 	bl	8000638 <__aeabi_dmul>
 8008dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	4689      	mov	r9, r1
 8008dc8:	4650      	mov	r0, sl
 8008dca:	4659      	mov	r1, fp
 8008dcc:	f7f7 fc34 	bl	8000638 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7f7 fa78 	bl	80002cc <__adddf3>
 8008ddc:	4632      	mov	r2, r6
 8008dde:	463b      	mov	r3, r7
 8008de0:	4680      	mov	r8, r0
 8008de2:	4689      	mov	r9, r1
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fc26 	bl	8000638 <__aeabi_dmul>
 8008dec:	460b      	mov	r3, r1
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
 8008df2:	4602      	mov	r2, r0
 8008df4:	4649      	mov	r1, r9
 8008df6:	4640      	mov	r0, r8
 8008df8:	f7f7 fa68 	bl	80002cc <__adddf3>
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <__ieee754_pow+0x3fc>)
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	ec45 4b19 	vmov	d9, r4, r5
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	468b      	mov	fp, r1
 8008e0a:	f340 82f1 	ble.w	80093f0 <__ieee754_pow+0x988>
 8008e0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008e16:	4303      	orrs	r3, r0
 8008e18:	f000 81e4 	beq.w	80091e4 <__ieee754_pow+0x77c>
 8008e1c:	ec51 0b18 	vmov	r0, r1, d8
 8008e20:	2200      	movs	r2, #0
 8008e22:	2300      	movs	r3, #0
 8008e24:	f7f7 fe7a 	bl	8000b1c <__aeabi_dcmplt>
 8008e28:	3800      	subs	r0, #0
 8008e2a:	bf18      	it	ne
 8008e2c:	2001      	movne	r0, #1
 8008e2e:	e72b      	b.n	8008c88 <__ieee754_pow+0x220>
 8008e30:	60000000 	.word	0x60000000
 8008e34:	3ff71547 	.word	0x3ff71547
 8008e38:	f85ddf44 	.word	0xf85ddf44
 8008e3c:	3e54ae0b 	.word	0x3e54ae0b
 8008e40:	55555555 	.word	0x55555555
 8008e44:	3fd55555 	.word	0x3fd55555
 8008e48:	652b82fe 	.word	0x652b82fe
 8008e4c:	3ff71547 	.word	0x3ff71547
 8008e50:	00000000 	.word	0x00000000
 8008e54:	bff00000 	.word	0xbff00000
 8008e58:	3ff00000 	.word	0x3ff00000
 8008e5c:	3fd00000 	.word	0x3fd00000
 8008e60:	3fe00000 	.word	0x3fe00000
 8008e64:	408fffff 	.word	0x408fffff
 8008e68:	4bd5      	ldr	r3, [pc, #852]	; (80091c0 <__ieee754_pow+0x758>)
 8008e6a:	402b      	ands	r3, r5
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	b92b      	cbnz	r3, 8008e7c <__ieee754_pow+0x414>
 8008e70:	4bd4      	ldr	r3, [pc, #848]	; (80091c4 <__ieee754_pow+0x75c>)
 8008e72:	f7f7 fbe1 	bl	8000638 <__aeabi_dmul>
 8008e76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	1523      	asrs	r3, r4, #20
 8008e7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008e82:	4413      	add	r3, r2
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	4bd0      	ldr	r3, [pc, #832]	; (80091c8 <__ieee754_pow+0x760>)
 8008e88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008e90:	429c      	cmp	r4, r3
 8008e92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e96:	dd08      	ble.n	8008eaa <__ieee754_pow+0x442>
 8008e98:	4bcc      	ldr	r3, [pc, #816]	; (80091cc <__ieee754_pow+0x764>)
 8008e9a:	429c      	cmp	r4, r3
 8008e9c:	f340 8162 	ble.w	8009164 <__ieee754_pow+0x6fc>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008eaa:	2400      	movs	r4, #0
 8008eac:	00e3      	lsls	r3, r4, #3
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	4bc7      	ldr	r3, [pc, #796]	; (80091d0 <__ieee754_pow+0x768>)
 8008eb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eb6:	ed93 7b00 	vldr	d7, [r3]
 8008eba:	4629      	mov	r1, r5
 8008ebc:	ec53 2b17 	vmov	r2, r3, d7
 8008ec0:	eeb0 9a47 	vmov.f32	s18, s14
 8008ec4:	eef0 9a67 	vmov.f32	s19, s15
 8008ec8:	4682      	mov	sl, r0
 8008eca:	f7f7 f9fd 	bl	80002c8 <__aeabi_dsub>
 8008ece:	4652      	mov	r2, sl
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	460f      	mov	r7, r1
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	ec51 0b19 	vmov	r0, r1, d9
 8008eda:	f7f7 f9f7 	bl	80002cc <__adddf3>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	49bb      	ldr	r1, [pc, #748]	; (80091d4 <__ieee754_pow+0x76c>)
 8008ee6:	f7f7 fcd1 	bl	800088c <__aeabi_ddiv>
 8008eea:	ec41 0b1a 	vmov	d10, r0, r1
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	f7f7 fb9f 	bl	8000638 <__aeabi_dmul>
 8008efa:	2300      	movs	r3, #0
 8008efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f06:	46ab      	mov	fp, r5
 8008f08:	106d      	asrs	r5, r5, #1
 8008f0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008f0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008f12:	ec41 0b18 	vmov	d8, r0, r1
 8008f16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4649      	mov	r1, r9
 8008f20:	4614      	mov	r4, r2
 8008f22:	461d      	mov	r5, r3
 8008f24:	f7f7 fb88 	bl	8000638 <__aeabi_dmul>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f7f7 f9ca 	bl	80002c8 <__aeabi_dsub>
 8008f34:	ec53 2b19 	vmov	r2, r3, d9
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460f      	mov	r7, r1
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 f9c2 	bl	80002c8 <__aeabi_dsub>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4650      	mov	r0, sl
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	f7f7 f9bc 	bl	80002c8 <__aeabi_dsub>
 8008f50:	4642      	mov	r2, r8
 8008f52:	464b      	mov	r3, r9
 8008f54:	f7f7 fb70 	bl	8000638 <__aeabi_dmul>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 f9b2 	bl	80002c8 <__aeabi_dsub>
 8008f64:	ec53 2b1a 	vmov	r2, r3, d10
 8008f68:	f7f7 fb66 	bl	8000638 <__aeabi_dmul>
 8008f6c:	ec53 2b18 	vmov	r2, r3, d8
 8008f70:	ec41 0b19 	vmov	d9, r0, r1
 8008f74:	ec51 0b18 	vmov	r0, r1, d8
 8008f78:	f7f7 fb5e 	bl	8000638 <__aeabi_dmul>
 8008f7c:	a37c      	add	r3, pc, #496	; (adr r3, 8009170 <__ieee754_pow+0x708>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	4604      	mov	r4, r0
 8008f84:	460d      	mov	r5, r1
 8008f86:	f7f7 fb57 	bl	8000638 <__aeabi_dmul>
 8008f8a:	a37b      	add	r3, pc, #492	; (adr r3, 8009178 <__ieee754_pow+0x710>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f7f7 f99c 	bl	80002cc <__adddf3>
 8008f94:	4622      	mov	r2, r4
 8008f96:	462b      	mov	r3, r5
 8008f98:	f7f7 fb4e 	bl	8000638 <__aeabi_dmul>
 8008f9c:	a378      	add	r3, pc, #480	; (adr r3, 8009180 <__ieee754_pow+0x718>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f993 	bl	80002cc <__adddf3>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f7f7 fb45 	bl	8000638 <__aeabi_dmul>
 8008fae:	a376      	add	r3, pc, #472	; (adr r3, 8009188 <__ieee754_pow+0x720>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 f98a 	bl	80002cc <__adddf3>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	f7f7 fb3c 	bl	8000638 <__aeabi_dmul>
 8008fc0:	a373      	add	r3, pc, #460	; (adr r3, 8009190 <__ieee754_pow+0x728>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 f981 	bl	80002cc <__adddf3>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	462b      	mov	r3, r5
 8008fce:	f7f7 fb33 	bl	8000638 <__aeabi_dmul>
 8008fd2:	a371      	add	r3, pc, #452	; (adr r3, 8009198 <__ieee754_pow+0x730>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 f978 	bl	80002cc <__adddf3>
 8008fdc:	4622      	mov	r2, r4
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460f      	mov	r7, r1
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 fb26 	bl	8000638 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	f7f7 fb20 	bl	8000638 <__aeabi_dmul>
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	464b      	mov	r3, r9
 8009000:	ec51 0b18 	vmov	r0, r1, d8
 8009004:	f7f7 f962 	bl	80002cc <__adddf3>
 8009008:	ec53 2b19 	vmov	r2, r3, d9
 800900c:	f7f7 fb14 	bl	8000638 <__aeabi_dmul>
 8009010:	4622      	mov	r2, r4
 8009012:	462b      	mov	r3, r5
 8009014:	f7f7 f95a 	bl	80002cc <__adddf3>
 8009018:	4642      	mov	r2, r8
 800901a:	4682      	mov	sl, r0
 800901c:	468b      	mov	fp, r1
 800901e:	464b      	mov	r3, r9
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	f7f7 fb08 	bl	8000638 <__aeabi_dmul>
 8009028:	4b6b      	ldr	r3, [pc, #428]	; (80091d8 <__ieee754_pow+0x770>)
 800902a:	2200      	movs	r2, #0
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	f7f7 f94c 	bl	80002cc <__adddf3>
 8009034:	4652      	mov	r2, sl
 8009036:	465b      	mov	r3, fp
 8009038:	f7f7 f948 	bl	80002cc <__adddf3>
 800903c:	2000      	movs	r0, #0
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4640      	mov	r0, r8
 8009048:	4649      	mov	r1, r9
 800904a:	f7f7 faf5 	bl	8000638 <__aeabi_dmul>
 800904e:	4b62      	ldr	r3, [pc, #392]	; (80091d8 <__ieee754_pow+0x770>)
 8009050:	4680      	mov	r8, r0
 8009052:	4689      	mov	r9, r1
 8009054:	2200      	movs	r2, #0
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 f935 	bl	80002c8 <__aeabi_dsub>
 800905e:	4632      	mov	r2, r6
 8009060:	463b      	mov	r3, r7
 8009062:	f7f7 f931 	bl	80002c8 <__aeabi_dsub>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	f7f7 f92b 	bl	80002c8 <__aeabi_dsub>
 8009072:	ec53 2b18 	vmov	r2, r3, d8
 8009076:	f7f7 fadf 	bl	8000638 <__aeabi_dmul>
 800907a:	4622      	mov	r2, r4
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	462b      	mov	r3, r5
 8009082:	ec51 0b19 	vmov	r0, r1, d9
 8009086:	f7f7 fad7 	bl	8000638 <__aeabi_dmul>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4630      	mov	r0, r6
 8009090:	4639      	mov	r1, r7
 8009092:	f7f7 f91b 	bl	80002cc <__adddf3>
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 f913 	bl	80002cc <__adddf3>
 80090a6:	a33e      	add	r3, pc, #248	; (adr r3, 80091a0 <__ieee754_pow+0x738>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	2000      	movs	r0, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	f7f7 fac1 	bl	8000638 <__aeabi_dmul>
 80090b6:	4642      	mov	r2, r8
 80090b8:	ec41 0b18 	vmov	d8, r0, r1
 80090bc:	464b      	mov	r3, r9
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 f901 	bl	80002c8 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 f8fb 	bl	80002c8 <__aeabi_dsub>
 80090d2:	a335      	add	r3, pc, #212	; (adr r3, 80091a8 <__ieee754_pow+0x740>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 faae 	bl	8000638 <__aeabi_dmul>
 80090dc:	a334      	add	r3, pc, #208	; (adr r3, 80091b0 <__ieee754_pow+0x748>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	4620      	mov	r0, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 faa5 	bl	8000638 <__aeabi_dmul>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	f7f7 f8e9 	bl	80002cc <__adddf3>
 80090fa:	9a07      	ldr	r2, [sp, #28]
 80090fc:	4b37      	ldr	r3, [pc, #220]	; (80091dc <__ieee754_pow+0x774>)
 80090fe:	4413      	add	r3, r2
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f8e2 	bl	80002cc <__adddf3>
 8009108:	4682      	mov	sl, r0
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	468b      	mov	fp, r1
 800910e:	f7f7 fa29 	bl	8000564 <__aeabi_i2d>
 8009112:	9a07      	ldr	r2, [sp, #28]
 8009114:	4b32      	ldr	r3, [pc, #200]	; (80091e0 <__ieee754_pow+0x778>)
 8009116:	4413      	add	r3, r2
 8009118:	e9d3 8900 	ldrd	r8, r9, [r3]
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	4652      	mov	r2, sl
 8009122:	465b      	mov	r3, fp
 8009124:	ec51 0b18 	vmov	r0, r1, d8
 8009128:	f7f7 f8d0 	bl	80002cc <__adddf3>
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	f7f7 f8cc 	bl	80002cc <__adddf3>
 8009134:	4632      	mov	r2, r6
 8009136:	463b      	mov	r3, r7
 8009138:	f7f7 f8c8 	bl	80002cc <__adddf3>
 800913c:	2000      	movs	r0, #0
 800913e:	4632      	mov	r2, r6
 8009140:	463b      	mov	r3, r7
 8009142:	4604      	mov	r4, r0
 8009144:	460d      	mov	r5, r1
 8009146:	f7f7 f8bf 	bl	80002c8 <__aeabi_dsub>
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	f7f7 f8bb 	bl	80002c8 <__aeabi_dsub>
 8009152:	ec53 2b18 	vmov	r2, r3, d8
 8009156:	f7f7 f8b7 	bl	80002c8 <__aeabi_dsub>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4650      	mov	r0, sl
 8009160:	4659      	mov	r1, fp
 8009162:	e610      	b.n	8008d86 <__ieee754_pow+0x31e>
 8009164:	2401      	movs	r4, #1
 8009166:	e6a1      	b.n	8008eac <__ieee754_pow+0x444>
 8009168:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80091b8 <__ieee754_pow+0x750>
 800916c:	e617      	b.n	8008d9e <__ieee754_pow+0x336>
 800916e:	bf00      	nop
 8009170:	4a454eef 	.word	0x4a454eef
 8009174:	3fca7e28 	.word	0x3fca7e28
 8009178:	93c9db65 	.word	0x93c9db65
 800917c:	3fcd864a 	.word	0x3fcd864a
 8009180:	a91d4101 	.word	0xa91d4101
 8009184:	3fd17460 	.word	0x3fd17460
 8009188:	518f264d 	.word	0x518f264d
 800918c:	3fd55555 	.word	0x3fd55555
 8009190:	db6fabff 	.word	0xdb6fabff
 8009194:	3fdb6db6 	.word	0x3fdb6db6
 8009198:	33333303 	.word	0x33333303
 800919c:	3fe33333 	.word	0x3fe33333
 80091a0:	e0000000 	.word	0xe0000000
 80091a4:	3feec709 	.word	0x3feec709
 80091a8:	dc3a03fd 	.word	0xdc3a03fd
 80091ac:	3feec709 	.word	0x3feec709
 80091b0:	145b01f5 	.word	0x145b01f5
 80091b4:	be3e2fe0 	.word	0xbe3e2fe0
 80091b8:	00000000 	.word	0x00000000
 80091bc:	3ff00000 	.word	0x3ff00000
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	43400000 	.word	0x43400000
 80091c8:	0003988e 	.word	0x0003988e
 80091cc:	000bb679 	.word	0x000bb679
 80091d0:	08009d60 	.word	0x08009d60
 80091d4:	3ff00000 	.word	0x3ff00000
 80091d8:	40080000 	.word	0x40080000
 80091dc:	08009d80 	.word	0x08009d80
 80091e0:	08009d70 	.word	0x08009d70
 80091e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80094bc <__ieee754_pow+0xa54>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 f86d 	bl	80002cc <__adddf3>
 80091f2:	4622      	mov	r2, r4
 80091f4:	ec41 0b1a 	vmov	d10, r0, r1
 80091f8:	462b      	mov	r3, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f7f7 f863 	bl	80002c8 <__aeabi_dsub>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	ec51 0b1a 	vmov	r0, r1, d10
 800920a:	f7f7 fca5 	bl	8000b58 <__aeabi_dcmpgt>
 800920e:	2800      	cmp	r0, #0
 8009210:	f47f ae04 	bne.w	8008e1c <__ieee754_pow+0x3b4>
 8009214:	4aa4      	ldr	r2, [pc, #656]	; (80094a8 <__ieee754_pow+0xa40>)
 8009216:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800921a:	4293      	cmp	r3, r2
 800921c:	f340 8108 	ble.w	8009430 <__ieee754_pow+0x9c8>
 8009220:	151b      	asrs	r3, r3, #20
 8009222:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009226:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800922a:	fa4a f303 	asr.w	r3, sl, r3
 800922e:	445b      	add	r3, fp
 8009230:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009234:	4e9d      	ldr	r6, [pc, #628]	; (80094ac <__ieee754_pow+0xa44>)
 8009236:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800923a:	4116      	asrs	r6, r2
 800923c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009240:	2000      	movs	r0, #0
 8009242:	ea23 0106 	bic.w	r1, r3, r6
 8009246:	f1c2 0214 	rsb	r2, r2, #20
 800924a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800924e:	fa4a fa02 	asr.w	sl, sl, r2
 8009252:	f1bb 0f00 	cmp.w	fp, #0
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4620      	mov	r0, r4
 800925c:	4629      	mov	r1, r5
 800925e:	bfb8      	it	lt
 8009260:	f1ca 0a00 	rsblt	sl, sl, #0
 8009264:	f7f7 f830 	bl	80002c8 <__aeabi_dsub>
 8009268:	ec41 0b19 	vmov	d9, r0, r1
 800926c:	4642      	mov	r2, r8
 800926e:	464b      	mov	r3, r9
 8009270:	ec51 0b19 	vmov	r0, r1, d9
 8009274:	f7f7 f82a 	bl	80002cc <__adddf3>
 8009278:	a37b      	add	r3, pc, #492	; (adr r3, 8009468 <__ieee754_pow+0xa00>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	2000      	movs	r0, #0
 8009280:	4604      	mov	r4, r0
 8009282:	460d      	mov	r5, r1
 8009284:	f7f7 f9d8 	bl	8000638 <__aeabi_dmul>
 8009288:	ec53 2b19 	vmov	r2, r3, d9
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f7 f818 	bl	80002c8 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 f812 	bl	80002c8 <__aeabi_dsub>
 80092a4:	a372      	add	r3, pc, #456	; (adr r3, 8009470 <__ieee754_pow+0xa08>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f7 f9c5 	bl	8000638 <__aeabi_dmul>
 80092ae:	a372      	add	r3, pc, #456	; (adr r3, 8009478 <__ieee754_pow+0xa10>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	4680      	mov	r8, r0
 80092b6:	4689      	mov	r9, r1
 80092b8:	4620      	mov	r0, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	f7f7 f9bc 	bl	8000638 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f7 f800 	bl	80002cc <__adddf3>
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f6 fff8 	bl	80002cc <__adddf3>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	4680      	mov	r8, r0
 80092e2:	4689      	mov	r9, r1
 80092e4:	f7f6 fff0 	bl	80002c8 <__aeabi_dsub>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4620      	mov	r0, r4
 80092ee:	4629      	mov	r1, r5
 80092f0:	f7f6 ffea 	bl	80002c8 <__aeabi_dsub>
 80092f4:	4642      	mov	r2, r8
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	464b      	mov	r3, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 f99a 	bl	8000638 <__aeabi_dmul>
 8009304:	a35e      	add	r3, pc, #376	; (adr r3, 8009480 <__ieee754_pow+0xa18>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	4604      	mov	r4, r0
 800930c:	460d      	mov	r5, r1
 800930e:	f7f7 f993 	bl	8000638 <__aeabi_dmul>
 8009312:	a35d      	add	r3, pc, #372	; (adr r3, 8009488 <__ieee754_pow+0xa20>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffd6 	bl	80002c8 <__aeabi_dsub>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f98a 	bl	8000638 <__aeabi_dmul>
 8009324:	a35a      	add	r3, pc, #360	; (adr r3, 8009490 <__ieee754_pow+0xa28>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffcf 	bl	80002cc <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f981 	bl	8000638 <__aeabi_dmul>
 8009336:	a358      	add	r3, pc, #352	; (adr r3, 8009498 <__ieee754_pow+0xa30>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffc4 	bl	80002c8 <__aeabi_dsub>
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	a355      	add	r3, pc, #340	; (adr r3, 80094a0 <__ieee754_pow+0xa38>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f6 ffbd 	bl	80002cc <__adddf3>
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	f7f7 f96f 	bl	8000638 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4640      	mov	r0, r8
 8009360:	4649      	mov	r1, r9
 8009362:	f7f6 ffb1 	bl	80002c8 <__aeabi_dsub>
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4640      	mov	r0, r8
 8009370:	4649      	mov	r1, r9
 8009372:	f7f7 f961 	bl	8000638 <__aeabi_dmul>
 8009376:	2200      	movs	r2, #0
 8009378:	ec41 0b19 	vmov	d9, r0, r1
 800937c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009380:	4620      	mov	r0, r4
 8009382:	4629      	mov	r1, r5
 8009384:	f7f6 ffa0 	bl	80002c8 <__aeabi_dsub>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	ec51 0b19 	vmov	r0, r1, d9
 8009390:	f7f7 fa7c 	bl	800088c <__aeabi_ddiv>
 8009394:	4632      	mov	r2, r6
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	463b      	mov	r3, r7
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 f94a 	bl	8000638 <__aeabi_dmul>
 80093a4:	4632      	mov	r2, r6
 80093a6:	463b      	mov	r3, r7
 80093a8:	f7f6 ff90 	bl	80002cc <__adddf3>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f6 ff88 	bl	80002c8 <__aeabi_dsub>
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	f7f6 ff84 	bl	80002c8 <__aeabi_dsub>
 80093c0:	460b      	mov	r3, r1
 80093c2:	4602      	mov	r2, r0
 80093c4:	493a      	ldr	r1, [pc, #232]	; (80094b0 <__ieee754_pow+0xa48>)
 80093c6:	2000      	movs	r0, #0
 80093c8:	f7f6 ff7e 	bl	80002c8 <__aeabi_dsub>
 80093cc:	ec41 0b10 	vmov	d0, r0, r1
 80093d0:	ee10 3a90 	vmov	r3, s1
 80093d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80093d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093dc:	da2b      	bge.n	8009436 <__ieee754_pow+0x9ce>
 80093de:	4650      	mov	r0, sl
 80093e0:	f000 f966 	bl	80096b0 <scalbn>
 80093e4:	ec51 0b10 	vmov	r0, r1, d0
 80093e8:	ec53 2b18 	vmov	r2, r3, d8
 80093ec:	f7ff bbed 	b.w	8008bca <__ieee754_pow+0x162>
 80093f0:	4b30      	ldr	r3, [pc, #192]	; (80094b4 <__ieee754_pow+0xa4c>)
 80093f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80093f6:	429e      	cmp	r6, r3
 80093f8:	f77f af0c 	ble.w	8009214 <__ieee754_pow+0x7ac>
 80093fc:	4b2e      	ldr	r3, [pc, #184]	; (80094b8 <__ieee754_pow+0xa50>)
 80093fe:	440b      	add	r3, r1
 8009400:	4303      	orrs	r3, r0
 8009402:	d009      	beq.n	8009418 <__ieee754_pow+0x9b0>
 8009404:	ec51 0b18 	vmov	r0, r1, d8
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	f7f7 fb86 	bl	8000b1c <__aeabi_dcmplt>
 8009410:	3800      	subs	r0, #0
 8009412:	bf18      	it	ne
 8009414:	2001      	movne	r0, #1
 8009416:	e447      	b.n	8008ca8 <__ieee754_pow+0x240>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f6 ff54 	bl	80002c8 <__aeabi_dsub>
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	f7f7 fb8e 	bl	8000b44 <__aeabi_dcmpge>
 8009428:	2800      	cmp	r0, #0
 800942a:	f43f aef3 	beq.w	8009214 <__ieee754_pow+0x7ac>
 800942e:	e7e9      	b.n	8009404 <__ieee754_pow+0x99c>
 8009430:	f04f 0a00 	mov.w	sl, #0
 8009434:	e71a      	b.n	800926c <__ieee754_pow+0x804>
 8009436:	ec51 0b10 	vmov	r0, r1, d0
 800943a:	4619      	mov	r1, r3
 800943c:	e7d4      	b.n	80093e8 <__ieee754_pow+0x980>
 800943e:	491c      	ldr	r1, [pc, #112]	; (80094b0 <__ieee754_pow+0xa48>)
 8009440:	2000      	movs	r0, #0
 8009442:	f7ff bb30 	b.w	8008aa6 <__ieee754_pow+0x3e>
 8009446:	2000      	movs	r0, #0
 8009448:	2100      	movs	r1, #0
 800944a:	f7ff bb2c 	b.w	8008aa6 <__ieee754_pow+0x3e>
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7ff bb28 	b.w	8008aa6 <__ieee754_pow+0x3e>
 8009456:	9204      	str	r2, [sp, #16]
 8009458:	f7ff bb7a 	b.w	8008b50 <__ieee754_pow+0xe8>
 800945c:	2300      	movs	r3, #0
 800945e:	f7ff bb64 	b.w	8008b2a <__ieee754_pow+0xc2>
 8009462:	bf00      	nop
 8009464:	f3af 8000 	nop.w
 8009468:	00000000 	.word	0x00000000
 800946c:	3fe62e43 	.word	0x3fe62e43
 8009470:	fefa39ef 	.word	0xfefa39ef
 8009474:	3fe62e42 	.word	0x3fe62e42
 8009478:	0ca86c39 	.word	0x0ca86c39
 800947c:	be205c61 	.word	0xbe205c61
 8009480:	72bea4d0 	.word	0x72bea4d0
 8009484:	3e663769 	.word	0x3e663769
 8009488:	c5d26bf1 	.word	0xc5d26bf1
 800948c:	3ebbbd41 	.word	0x3ebbbd41
 8009490:	af25de2c 	.word	0xaf25de2c
 8009494:	3f11566a 	.word	0x3f11566a
 8009498:	16bebd93 	.word	0x16bebd93
 800949c:	3f66c16c 	.word	0x3f66c16c
 80094a0:	5555553e 	.word	0x5555553e
 80094a4:	3fc55555 	.word	0x3fc55555
 80094a8:	3fe00000 	.word	0x3fe00000
 80094ac:	000fffff 	.word	0x000fffff
 80094b0:	3ff00000 	.word	0x3ff00000
 80094b4:	4090cbff 	.word	0x4090cbff
 80094b8:	3f6f3400 	.word	0x3f6f3400
 80094bc:	652b82fe 	.word	0x652b82fe
 80094c0:	3c971547 	.word	0x3c971547

080094c4 <__ieee754_sqrt>:
 80094c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	ec55 4b10 	vmov	r4, r5, d0
 80094cc:	4e55      	ldr	r6, [pc, #340]	; (8009624 <__ieee754_sqrt+0x160>)
 80094ce:	43ae      	bics	r6, r5
 80094d0:	ee10 0a10 	vmov	r0, s0
 80094d4:	ee10 3a10 	vmov	r3, s0
 80094d8:	462a      	mov	r2, r5
 80094da:	4629      	mov	r1, r5
 80094dc:	d110      	bne.n	8009500 <__ieee754_sqrt+0x3c>
 80094de:	ee10 2a10 	vmov	r2, s0
 80094e2:	462b      	mov	r3, r5
 80094e4:	f7f7 f8a8 	bl	8000638 <__aeabi_dmul>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f6 feec 	bl	80002cc <__adddf3>
 80094f4:	4604      	mov	r4, r0
 80094f6:	460d      	mov	r5, r1
 80094f8:	ec45 4b10 	vmov	d0, r4, r5
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	2d00      	cmp	r5, #0
 8009502:	dc10      	bgt.n	8009526 <__ieee754_sqrt+0x62>
 8009504:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009508:	4330      	orrs	r0, r6
 800950a:	d0f5      	beq.n	80094f8 <__ieee754_sqrt+0x34>
 800950c:	b15d      	cbz	r5, 8009526 <__ieee754_sqrt+0x62>
 800950e:	ee10 2a10 	vmov	r2, s0
 8009512:	462b      	mov	r3, r5
 8009514:	ee10 0a10 	vmov	r0, s0
 8009518:	f7f6 fed6 	bl	80002c8 <__aeabi_dsub>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	f7f7 f9b4 	bl	800088c <__aeabi_ddiv>
 8009524:	e7e6      	b.n	80094f4 <__ieee754_sqrt+0x30>
 8009526:	1512      	asrs	r2, r2, #20
 8009528:	d074      	beq.n	8009614 <__ieee754_sqrt+0x150>
 800952a:	07d4      	lsls	r4, r2, #31
 800952c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009530:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009538:	bf5e      	ittt	pl
 800953a:	0fda      	lsrpl	r2, r3, #31
 800953c:	005b      	lslpl	r3, r3, #1
 800953e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009542:	2400      	movs	r4, #0
 8009544:	0fda      	lsrs	r2, r3, #31
 8009546:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800954a:	107f      	asrs	r7, r7, #1
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	2516      	movs	r5, #22
 8009550:	4620      	mov	r0, r4
 8009552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009556:	1886      	adds	r6, r0, r2
 8009558:	428e      	cmp	r6, r1
 800955a:	bfde      	ittt	le
 800955c:	1b89      	suble	r1, r1, r6
 800955e:	18b0      	addle	r0, r6, r2
 8009560:	18a4      	addle	r4, r4, r2
 8009562:	0049      	lsls	r1, r1, #1
 8009564:	3d01      	subs	r5, #1
 8009566:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800956a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800956e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009572:	d1f0      	bne.n	8009556 <__ieee754_sqrt+0x92>
 8009574:	462a      	mov	r2, r5
 8009576:	f04f 0e20 	mov.w	lr, #32
 800957a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800957e:	4281      	cmp	r1, r0
 8009580:	eb06 0c05 	add.w	ip, r6, r5
 8009584:	dc02      	bgt.n	800958c <__ieee754_sqrt+0xc8>
 8009586:	d113      	bne.n	80095b0 <__ieee754_sqrt+0xec>
 8009588:	459c      	cmp	ip, r3
 800958a:	d811      	bhi.n	80095b0 <__ieee754_sqrt+0xec>
 800958c:	f1bc 0f00 	cmp.w	ip, #0
 8009590:	eb0c 0506 	add.w	r5, ip, r6
 8009594:	da43      	bge.n	800961e <__ieee754_sqrt+0x15a>
 8009596:	2d00      	cmp	r5, #0
 8009598:	db41      	blt.n	800961e <__ieee754_sqrt+0x15a>
 800959a:	f100 0801 	add.w	r8, r0, #1
 800959e:	1a09      	subs	r1, r1, r0
 80095a0:	459c      	cmp	ip, r3
 80095a2:	bf88      	it	hi
 80095a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80095a8:	eba3 030c 	sub.w	r3, r3, ip
 80095ac:	4432      	add	r2, r6
 80095ae:	4640      	mov	r0, r8
 80095b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80095b4:	f1be 0e01 	subs.w	lr, lr, #1
 80095b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80095bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80095c4:	d1db      	bne.n	800957e <__ieee754_sqrt+0xba>
 80095c6:	430b      	orrs	r3, r1
 80095c8:	d006      	beq.n	80095d8 <__ieee754_sqrt+0x114>
 80095ca:	1c50      	adds	r0, r2, #1
 80095cc:	bf13      	iteet	ne
 80095ce:	3201      	addne	r2, #1
 80095d0:	3401      	addeq	r4, #1
 80095d2:	4672      	moveq	r2, lr
 80095d4:	f022 0201 	bicne.w	r2, r2, #1
 80095d8:	1063      	asrs	r3, r4, #1
 80095da:	0852      	lsrs	r2, r2, #1
 80095dc:	07e1      	lsls	r1, r4, #31
 80095de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80095e6:	bf48      	it	mi
 80095e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80095ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80095f0:	4614      	mov	r4, r2
 80095f2:	e781      	b.n	80094f8 <__ieee754_sqrt+0x34>
 80095f4:	0ad9      	lsrs	r1, r3, #11
 80095f6:	3815      	subs	r0, #21
 80095f8:	055b      	lsls	r3, r3, #21
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d0fa      	beq.n	80095f4 <__ieee754_sqrt+0x130>
 80095fe:	02cd      	lsls	r5, r1, #11
 8009600:	d50a      	bpl.n	8009618 <__ieee754_sqrt+0x154>
 8009602:	f1c2 0420 	rsb	r4, r2, #32
 8009606:	fa23 f404 	lsr.w	r4, r3, r4
 800960a:	1e55      	subs	r5, r2, #1
 800960c:	4093      	lsls	r3, r2
 800960e:	4321      	orrs	r1, r4
 8009610:	1b42      	subs	r2, r0, r5
 8009612:	e78a      	b.n	800952a <__ieee754_sqrt+0x66>
 8009614:	4610      	mov	r0, r2
 8009616:	e7f0      	b.n	80095fa <__ieee754_sqrt+0x136>
 8009618:	0049      	lsls	r1, r1, #1
 800961a:	3201      	adds	r2, #1
 800961c:	e7ef      	b.n	80095fe <__ieee754_sqrt+0x13a>
 800961e:	4680      	mov	r8, r0
 8009620:	e7bd      	b.n	800959e <__ieee754_sqrt+0xda>
 8009622:	bf00      	nop
 8009624:	7ff00000 	.word	0x7ff00000

08009628 <with_errno>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	460d      	mov	r5, r1
 800962e:	4616      	mov	r6, r2
 8009630:	f7fb ff66 	bl	8005500 <__errno>
 8009634:	4629      	mov	r1, r5
 8009636:	6006      	str	r6, [r0, #0]
 8009638:	4620      	mov	r0, r4
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <xflow>:
 800963c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963e:	4614      	mov	r4, r2
 8009640:	461d      	mov	r5, r3
 8009642:	b108      	cbz	r0, 8009648 <xflow+0xc>
 8009644:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009648:	e9cd 2300 	strd	r2, r3, [sp]
 800964c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f6 fff0 	bl	8000638 <__aeabi_dmul>
 8009658:	2222      	movs	r2, #34	; 0x22
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009660:	f7ff bfe2 	b.w	8009628 <with_errno>

08009664 <__math_uflow>:
 8009664:	b508      	push	{r3, lr}
 8009666:	2200      	movs	r2, #0
 8009668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800966c:	f7ff ffe6 	bl	800963c <xflow>
 8009670:	ec41 0b10 	vmov	d0, r0, r1
 8009674:	bd08      	pop	{r3, pc}

08009676 <__math_oflow>:
 8009676:	b508      	push	{r3, lr}
 8009678:	2200      	movs	r2, #0
 800967a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800967e:	f7ff ffdd 	bl	800963c <xflow>
 8009682:	ec41 0b10 	vmov	d0, r0, r1
 8009686:	bd08      	pop	{r3, pc}

08009688 <finite>:
 8009688:	b082      	sub	sp, #8
 800968a:	ed8d 0b00 	vstr	d0, [sp]
 800968e:	9801      	ldr	r0, [sp, #4]
 8009690:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009694:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009698:	0fc0      	lsrs	r0, r0, #31
 800969a:	b002      	add	sp, #8
 800969c:	4770      	bx	lr
	...

080096a0 <nan>:
 80096a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096a8 <nan+0x8>
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	00000000 	.word	0x00000000
 80096ac:	7ff80000 	.word	0x7ff80000

080096b0 <scalbn>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	ec55 4b10 	vmov	r4, r5, d0
 80096b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80096ba:	4606      	mov	r6, r0
 80096bc:	462b      	mov	r3, r5
 80096be:	b99a      	cbnz	r2, 80096e8 <scalbn+0x38>
 80096c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096c4:	4323      	orrs	r3, r4
 80096c6:	d036      	beq.n	8009736 <scalbn+0x86>
 80096c8:	4b39      	ldr	r3, [pc, #228]	; (80097b0 <scalbn+0x100>)
 80096ca:	4629      	mov	r1, r5
 80096cc:	ee10 0a10 	vmov	r0, s0
 80096d0:	2200      	movs	r2, #0
 80096d2:	f7f6 ffb1 	bl	8000638 <__aeabi_dmul>
 80096d6:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <scalbn+0x104>)
 80096d8:	429e      	cmp	r6, r3
 80096da:	4604      	mov	r4, r0
 80096dc:	460d      	mov	r5, r1
 80096de:	da10      	bge.n	8009702 <scalbn+0x52>
 80096e0:	a32b      	add	r3, pc, #172	; (adr r3, 8009790 <scalbn+0xe0>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	e03a      	b.n	800975e <scalbn+0xae>
 80096e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096ec:	428a      	cmp	r2, r1
 80096ee:	d10c      	bne.n	800970a <scalbn+0x5a>
 80096f0:	ee10 2a10 	vmov	r2, s0
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 fde8 	bl	80002cc <__adddf3>
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	e019      	b.n	8009736 <scalbn+0x86>
 8009702:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009706:	460b      	mov	r3, r1
 8009708:	3a36      	subs	r2, #54	; 0x36
 800970a:	4432      	add	r2, r6
 800970c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009710:	428a      	cmp	r2, r1
 8009712:	dd08      	ble.n	8009726 <scalbn+0x76>
 8009714:	2d00      	cmp	r5, #0
 8009716:	a120      	add	r1, pc, #128	; (adr r1, 8009798 <scalbn+0xe8>)
 8009718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971c:	da1c      	bge.n	8009758 <scalbn+0xa8>
 800971e:	a120      	add	r1, pc, #128	; (adr r1, 80097a0 <scalbn+0xf0>)
 8009720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009724:	e018      	b.n	8009758 <scalbn+0xa8>
 8009726:	2a00      	cmp	r2, #0
 8009728:	dd08      	ble.n	800973c <scalbn+0x8c>
 800972a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800972e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009732:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009736:	ec45 4b10 	vmov	d0, r4, r5
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009740:	da19      	bge.n	8009776 <scalbn+0xc6>
 8009742:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009746:	429e      	cmp	r6, r3
 8009748:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800974c:	dd0a      	ble.n	8009764 <scalbn+0xb4>
 800974e:	a112      	add	r1, pc, #72	; (adr r1, 8009798 <scalbn+0xe8>)
 8009750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e2      	bne.n	800971e <scalbn+0x6e>
 8009758:	a30f      	add	r3, pc, #60	; (adr r3, 8009798 <scalbn+0xe8>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 ff6b 	bl	8000638 <__aeabi_dmul>
 8009762:	e7cb      	b.n	80096fc <scalbn+0x4c>
 8009764:	a10a      	add	r1, pc, #40	; (adr r1, 8009790 <scalbn+0xe0>)
 8009766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0b8      	beq.n	80096e0 <scalbn+0x30>
 800976e:	a10e      	add	r1, pc, #56	; (adr r1, 80097a8 <scalbn+0xf8>)
 8009770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009774:	e7b4      	b.n	80096e0 <scalbn+0x30>
 8009776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800977a:	3236      	adds	r2, #54	; 0x36
 800977c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009784:	4620      	mov	r0, r4
 8009786:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <scalbn+0x108>)
 8009788:	2200      	movs	r2, #0
 800978a:	e7e8      	b.n	800975e <scalbn+0xae>
 800978c:	f3af 8000 	nop.w
 8009790:	c2f8f359 	.word	0xc2f8f359
 8009794:	01a56e1f 	.word	0x01a56e1f
 8009798:	8800759c 	.word	0x8800759c
 800979c:	7e37e43c 	.word	0x7e37e43c
 80097a0:	8800759c 	.word	0x8800759c
 80097a4:	fe37e43c 	.word	0xfe37e43c
 80097a8:	c2f8f359 	.word	0xc2f8f359
 80097ac:	81a56e1f 	.word	0x81a56e1f
 80097b0:	43500000 	.word	0x43500000
 80097b4:	ffff3cb0 	.word	0xffff3cb0
 80097b8:	3c900000 	.word	0x3c900000

080097bc <_init>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr

080097c8 <_fini>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr
