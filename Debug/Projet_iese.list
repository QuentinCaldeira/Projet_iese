
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08005354  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08005354  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dac  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224ef  00000000  00000000  0002fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5fb  00000000  00000000  00051f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc056  00000000  00000000  00060542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000325c  00000000  00000000  0012c5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005148 	.word	0x08005148

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005148 	.word	0x08005148

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f000 ff54 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fdb2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fda4 	bl	80011c4 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 ff27 	bl	8001520 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fa6e 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fd3c 	bl	80011c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 800078a:	f107 010f 	add.w	r1, r7, #15
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_putchar+0x28>)
 8000794:	f003 f92d 	bl	80039f2 <HAL_UART_Transmit>
	return ch;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80007ae:	230f      	movs	r3, #15
 80007b0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2132      	movs	r1, #50	; 0x32
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <who_am_i_sensors+0xc0>)
 80007c0:	f000 fff2 	bl	80017a8 <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <who_am_i_sensors+0xc4>)
 80007d0:	f003 fd3c 	bl	800424c <puts>
 80007d4:	e017      	b.n	8000806 <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <who_am_i_sensors+0xc0>)
 80007e4:	f001 f8de 	bl	80019a4 <HAL_I2C_Master_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <who_am_i_sensors+0xc8>)
 80007f4:	f003 fd2a 	bl	800424c <puts>
 80007f8:	e005      	b.n	8000806 <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b33      	cmp	r3, #51	; 0x33
 80007fe:	d102      	bne.n	8000806 <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <who_am_i_sensors+0xcc>)
 8000802:	f003 fc9d 	bl	8004140 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000806:	234f      	movs	r3, #79	; 0x4f
 8000808:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	213c      	movs	r1, #60	; 0x3c
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <who_am_i_sensors+0xc0>)
 8000818:	f000 ffc6 	bl	80017a8 <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <who_am_i_sensors+0xc4>)
 8000828:	f003 fd10 	bl	800424c <puts>
 800082c:	e017      	b.n	800085e <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <who_am_i_sensors+0xc0>)
 800083c:	f001 f8b2 	bl	80019a4 <HAL_I2C_Master_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <who_am_i_sensors+0xc8>)
 800084c:	f003 fcfe 	bl	800424c <puts>
 8000850:	e005      	b.n	800085e <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d102      	bne.n	800085e <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <who_am_i_sensors+0xd0>)
 800085a:	f003 fc71 	bl	8004140 <iprintf>
    	}
    }
  }
}
 800085e:	bf00      	nop
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	08005160 	.word	0x08005160
 8000870:	0800516c 	.word	0x0800516c
 8000874:	08005178 	.word	0x08005178
 8000878:	08005198 	.word	0x08005198

0800087c <reset_acc>:

int reset_acc(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  
 8000882:	2324      	movs	r3, #36	; 0x24
 8000884:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  //Data de reset
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	2132      	movs	r1, #50	; 0x32
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <reset_acc+0x3c>)
 8000898:	f000 ff86 	bl	80017a8 <HAL_I2C_Master_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <reset_acc+0x30>
		printf("Error Tx\r\n");
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <reset_acc+0x40>)
 80008a8:	f003 fcd0 	bl	800424c <puts>
	}
}
 80008ac:	bf00      	nop
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	08005160 	.word	0x08005160

080008c0 <config_acc>:

int config_acc(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x27;//Valeur a mettre dans ctrm_reg_1
 80008c6:	2327      	movs	r3, #39	; 0x27
 80008c8:	723b      	strb	r3, [r7, #8]
	buf[1]=0x21;//Valeur a mettre dans ctrm_reg_2
 80008ca:	2321      	movs	r3, #33	; 0x21
 80008cc:	727b      	strb	r3, [r7, #9]
	buf[2]=0x22;//Valeur a mettre dans ctrm_reg_3
 80008ce:	2322      	movs	r3, #34	; 0x22
 80008d0:	72bb      	strb	r3, [r7, #10]
	buf[3]=0x23;//Valeur a mettre dans ctrm_reg_4
 80008d2:	2323      	movs	r3, #35	; 0x23
 80008d4:	72fb      	strb	r3, [r7, #11]
	buf[4]=0x00;//Valeur a mettre dans ctrm_reg_5
 80008d6:	2300      	movs	r3, #0
 80008d8:	733b      	strb	r3, [r7, #12]
	buf[5]=0x25;//Valeur a mettre dans ctrm_reg_6
 80008da:	2325      	movs	r3, #37	; 0x25
 80008dc:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	2306      	movs	r3, #6
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	22a0      	movs	r2, #160	; 0xa0
 80008f2:	2132      	movs	r1, #50	; 0x32
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <config_acc+0xc8>)
 80008f6:	f001 fa7b 	bl	8001df0 <HAL_I2C_Mem_Write>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <config_acc+0x4a>
		printf("Error Tx\r\n");
 8000904:	4821      	ldr	r0, [pc, #132]	; (800098c <config_acc+0xcc>)
 8000906:	f003 fca1 	bl	800424c <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 6, HAL_MAX_DELAY);
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9302      	str	r3, [sp, #8]
 8000910:	2306      	movs	r3, #6
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	463b      	mov	r3, r7
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2301      	movs	r3, #1
 800091a:	22a0      	movs	r2, #160	; 0xa0
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	481a      	ldr	r0, [pc, #104]	; (8000988 <config_acc+0xc8>)
 8000920:	f001 fb60 	bl	8001fe4 <HAL_I2C_Mem_Read>
 8000924:	4603      	mov	r3, r0
 8000926:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<6;i++){
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e021      	b.n	8000976 <config_acc+0xb6>
		if(buf[i]==res[i]){
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	3310      	adds	r3, #16
 8000936:	443b      	add	r3, r7
 8000938:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	3310      	adds	r3, #16
 8000940:	443b      	add	r3, r7
 8000942:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000946:	429a      	cmp	r2, r3
 8000948:	d10c      	bne.n	8000964 <config_acc+0xa4>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3310      	adds	r3, #16
 800094e:	443b      	add	r3, r7
 8000950:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000954:	4619      	mov	r1, r3
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	461a      	mov	r2, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <config_acc+0xd0>)
 800095e:	f003 fbef 	bl	8004140 <iprintf>
 8000962:	e005      	b.n	8000970 <config_acc+0xb0>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	4619      	mov	r1, r3
 800096a:	480a      	ldr	r0, [pc, #40]	; (8000994 <config_acc+0xd4>)
 800096c:	f003 fbe8 	bl	8004140 <iprintf>
	for(i=0;i<6;i++){
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	3301      	adds	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d9da      	bls.n	8000932 <config_acc+0x72>
		}
	}
}
 800097c:	bf00      	nop
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000008c 	.word	0x2000008c
 800098c:	08005160 	.word	0x08005160
 8000990:	080051b0 	.word	0x080051b0
 8000994:	080051e0 	.word	0x080051e0

08000998 <reset_mag>:

int reset_mag(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af04      	add	r7, sp, #16
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = 0x40;//1 sur reboot
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CTRL_REG_A_M, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	2260      	movs	r2, #96	; 0x60
 80009b4:	213c      	movs	r1, #60	; 0x3c
 80009b6:	4808      	ldr	r0, [pc, #32]	; (80009d8 <reset_mag+0x40>)
 80009b8:	f001 fa1a 	bl	8001df0 <HAL_I2C_Mem_Write>
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <reset_mag+0x34>
		printf("Error Tx\r\n");
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <reset_mag+0x44>)
 80009c8:	f003 fc40 	bl	800424c <puts>
	}
}
 80009cc:	bf00      	nop
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	08005160 	.word	0x08005160

080009e0 <config_mag>:

int config_mag(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x80;//Valeur a mettre dans ctrm_reg_a
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	723b      	strb	r3, [r7, #8]
	buf[1]=0x03;//Valeur a mettre dans ctrm_reg_b
 80009ea:	2303      	movs	r3, #3
 80009ec:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_c
 80009ee:	2300      	movs	r3, #0
 80009f0:	72bb      	strb	r3, [r7, #10]
	ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 3, HAL_MAX_DELAY);
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2303      	movs	r3, #3
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	22a0      	movs	r2, #160	; 0xa0
 8000a06:	2132      	movs	r1, #50	; 0x32
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <config_mag+0xbc>)
 8000a0a:	f001 f9f1 	bl	8001df0 <HAL_I2C_Mem_Write>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <config_mag+0x3e>
		printf("Error Tx\r\n");
 8000a18:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <config_mag+0xc0>)
 8000a1a:	f003 fc17 	bl	800424c <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 3, HAL_MAX_DELAY);
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2303      	movs	r3, #3
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	463b      	mov	r3, r7
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	22a0      	movs	r2, #160	; 0xa0
 8000a30:	2132      	movs	r1, #50	; 0x32
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <config_mag+0xbc>)
 8000a34:	f001 fad6 	bl	8001fe4 <HAL_I2C_Mem_Read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<3;i++){
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e021      	b.n	8000a8a <config_mag+0xaa>
		if(buf[i]==res[i]){
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3310      	adds	r3, #16
 8000a4a:	443b      	add	r3, r7
 8000a4c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3310      	adds	r3, #16
 8000a54:	443b      	add	r3, r7
 8000a56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d10c      	bne.n	8000a78 <config_mag+0x98>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3310      	adds	r3, #16
 8000a62:	443b      	add	r3, r7
 8000a64:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	461a      	mov	r2, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <config_mag+0xc4>)
 8000a72:	f003 fb65 	bl	8004140 <iprintf>
 8000a76:	e005      	b.n	8000a84 <config_mag+0xa4>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <config_mag+0xc8>)
 8000a80:	f003 fb5e 	bl	8004140 <iprintf>
	for(i=0;i<3;i++){
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3301      	adds	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d9da      	bls.n	8000a46 <config_mag+0x66>
		}
	}
}
 8000a90:	bf00      	nop
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	08005160 	.word	0x08005160
 8000aa4:	080051b0 	.word	0x080051b0
 8000aa8:	080051e0 	.word	0x080051e0

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 fa30 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f812 	bl	8000adc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f7ff fd7c 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000abc:	f000 f98e 	bl	8000ddc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ac0:	f7ff fde6 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  who_am_i_sensors();
 8000ac4:	f7ff fe70 	bl	80007a8 <who_am_i_sensors>
	  reset_acc();
 8000ac8:	f7ff fed8 	bl	800087c <reset_acc>
	  reset_mag();
 8000acc:	f7ff ff64 	bl	8000998 <reset_mag>
	  config_acc();
 8000ad0:	f7ff fef6 	bl	80008c0 <config_acc>
	  config_mag();
 8000ad4:	f7ff ff84 	bl	80009e0 <config_mag>
	  who_am_i_sensors();
 8000ad8:	e7f4      	b.n	8000ac4 <main+0x18>
	...

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fb20 	bl	8004130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <SystemClock_Config+0xd8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2310      	movs	r3, #16
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b50:	2310      	movs	r3, #16
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fc56 	bl	800341c <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b76:	f000 f81f 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2102      	movs	r1, #2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 f8f6 	bl	8002d88 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ba2:	f000 f809 	bl	8000bb8 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3750      	adds	r7, #80	; 0x50
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8000bc0:	4801      	ldr	r0, [pc, #4]	; (8000bc8 <Error_Handler+0x10>)
 8000bc2:	f003 fabd 	bl	8004140 <iprintf>
  {
 8000bc6:	e7fb      	b.n	8000bc0 <Error_Handler+0x8>
 8000bc8:	08005218 	.word	0x08005218

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0a:	2007      	movs	r0, #7
 8000c0c:	f000 faa6 	bl	800115c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f9a6 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00a      	b.n	8000c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c82:	f3af 8000 	nop.w
 8000c86:	4601      	mov	r1, r0
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf0      	blt.n	8000c82 <_read+0x12>
	}

return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e009      	b.n	8000cd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd59 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf1      	blt.n	8000cbc <_write+0x12>
	}
	return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f003 f9ae 	bl	80040dc <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	20000140 	.word	0x20000140

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f002 fda0 	bl	8003958 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f7ff fecb 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000e4 	.word	0x200000e4
 8000e2c:	40004400 	.word	0x40004400

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12b      	bne.n	8000eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000ea6:	f000 f98d 	bl	80011c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec6:	490e      	ldr	r1, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000edc:	4c0b      	ldr	r4, [pc, #44]	; (8000f0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eea:	f7ff ff65 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f003 f8fb 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fddb 	bl	8000aac <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f04:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8000f08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f0c:	2000013c 	.word	0x2000013c

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f90d 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe40 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f917 	bl	80011aa <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f8ed 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000128 	.word	0x20000128

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000128 	.word	0x20000128

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff47 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff5c 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb0 	bl	8001118 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e165      	b.n	80014ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8154 	bne.w	80014a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d005      	beq.n	8001216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	2b02      	cmp	r3, #2
 8001214:	d130      	bne.n	8001278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 0201 	and.w	r2, r3, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b03      	cmp	r3, #3
 8001282:	d017      	beq.n	80012b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d123      	bne.n	8001308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80ae 	beq.w	80014a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a5c      	ldr	r2, [pc, #368]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b5a      	ldr	r3, [pc, #360]	; (80014c4 <HAL_GPIO_Init+0x300>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_GPIO_Init+0x304>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x308>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x21a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_GPIO_Init+0x30c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x216>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x310>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x212>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x314>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x20e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x318>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x20a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x31c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x206>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <HAL_GPIO_Init+0x320>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x202>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x21c>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x304>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_GPIO_Init+0x324>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a26      	ldr	r2, [pc, #152]	; (80014e8 <HAL_GPIO_Init+0x324>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <HAL_GPIO_Init+0x324>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_GPIO_Init+0x324>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_GPIO_Init+0x324>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f ae96 	bls.w	80011e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e12b      	b.n	800178a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff f8d0 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001584:	f001 fcf2 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8001588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a81      	ldr	r2, [pc, #516]	; (8001794 <HAL_I2C_Init+0x274>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d807      	bhi.n	80015a4 <HAL_I2C_Init+0x84>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_I2C_Init+0x278>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	e006      	b.n	80015b2 <HAL_I2C_Init+0x92>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a7d      	ldr	r2, [pc, #500]	; (800179c <HAL_I2C_Init+0x27c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	bf94      	ite	ls
 80015ac:	2301      	movls	r3, #1
 80015ae:	2300      	movhi	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0e7      	b.n	800178a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a78      	ldr	r2, [pc, #480]	; (80017a0 <HAL_I2C_Init+0x280>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	; (8001794 <HAL_I2C_Init+0x274>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d802      	bhi.n	80015f4 <HAL_I2C_Init+0xd4>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	e009      	b.n	8001608 <HAL_I2C_Init+0xe8>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4a69      	ldr	r2, [pc, #420]	; (80017a4 <HAL_I2C_Init+0x284>)
 8001600:	fba2 2303 	umull	r2, r3, r2, r3
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	3301      	adds	r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	430b      	orrs	r3, r1
 800160e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800161a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	495c      	ldr	r1, [pc, #368]	; (8001794 <HAL_I2C_Init+0x274>)
 8001624:	428b      	cmp	r3, r1
 8001626:	d819      	bhi.n	800165c <HAL_I2C_Init+0x13c>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e59      	subs	r1, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fbb1 f3f3 	udiv	r3, r1, r3
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800163c:	400b      	ands	r3, r1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <HAL_I2C_Init+0x138>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1e59      	subs	r1, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001650:	3301      	adds	r3, #1
 8001652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001656:	e051      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 8001658:	2304      	movs	r3, #4
 800165a:	e04f      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_I2C_Init+0x168>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	e012      	b.n	80016ae <HAL_I2C_Init+0x18e>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	0099      	lsls	r1, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	fbb0 f3f3 	udiv	r3, r0, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Init+0x196>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e022      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10e      	bne.n	80016dc <HAL_I2C_Init+0x1bc>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e58      	subs	r0, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	440b      	add	r3, r1
 80016cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016da:	e00f      	b.n	80016fc <HAL_I2C_Init+0x1dc>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	0099      	lsls	r1, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	6809      	ldr	r1, [r1, #0]
 8001700:	4313      	orrs	r3, r2
 8001702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800172a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6911      	ldr	r1, [r2, #16]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68d2      	ldr	r2, [r2, #12]
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	000186a0 	.word	0x000186a0
 8001798:	001e847f 	.word	0x001e847f
 800179c:	003d08ff 	.word	0x003d08ff
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	10624dd3 	.word	0x10624dd3

080017a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	460b      	mov	r3, r1
 80017b6:	817b      	strh	r3, [r7, #10]
 80017b8:	4613      	mov	r3, r2
 80017ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fc10 	bl	8000fe0 <HAL_GetTick>
 80017c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 80e0 	bne.w	8001990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	4970      	ldr	r1, [pc, #448]	; (800199c <HAL_I2C_Master_Transmit+0x1f4>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f001 f8f6 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0d3      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2C_Master_Transmit+0x50>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0cc      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d007      	beq.n	800181e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2210      	movs	r2, #16
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fde2 	bl	8002430 <I2C_MasterRequestWrite>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08d      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800188c:	e066      	b.n	800195c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f001 f970 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d107      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11b      	bne.n	8001930 <HAL_I2C_Master_Transmit+0x188>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d017      	beq.n	8001930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	6a39      	ldr	r1, [r7, #32]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f001 f960 	bl	8002bfa <I2C_WaitOnBTFFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	2b04      	cmp	r3, #4
 8001946:	d107      	bne.n	8001958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01a      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	d194      	bne.n	800188e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	00100002 	.word	0x00100002
 80019a0:	ffff0000 	.word	0xffff0000

080019a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	461a      	mov	r2, r3
 80019b0:	460b      	mov	r3, r1
 80019b2:	817b      	strh	r3, [r7, #10]
 80019b4:	4613      	mov	r3, r2
 80019b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff fb12 	bl	8000fe0 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	f040 820b 	bne.w	8001de2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2319      	movs	r3, #25
 80019d2:	2201      	movs	r2, #1
 80019d4:	497c      	ldr	r1, [pc, #496]	; (8001bc8 <HAL_I2C_Master_Receive+0x224>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fff8 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
 80019e4:	e1fe      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_I2C_Master_Receive+0x50>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e1f7      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d007      	beq.n	8001a1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2222      	movs	r2, #34	; 0x22
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2210      	movs	r2, #16
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	893a      	ldrh	r2, [r7, #8]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4a5c      	ldr	r2, [pc, #368]	; (8001bcc <HAL_I2C_Master_Receive+0x228>)
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a5c:	8979      	ldrh	r1, [r7, #10]
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fd66 	bl	8002534 <I2C_MasterRequestRead>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e1b8      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d113      	bne.n	8001aa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e18c      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d11b      	bne.n	8001ae2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e16c      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d11b      	bne.n	8001b22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	e14c      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b48:	e138      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	f200 80f1 	bhi.w	8001d36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d123      	bne.n	8001ba4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f001 f88b 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e139      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba2:	e10b      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d14e      	bne.n	8001c4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <HAL_I2C_Master_Receive+0x22c>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 ff08 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e10e      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
 8001bc6:	bf00      	nop
 8001bc8:	00100002 	.word	0x00100002
 8001bcc:	ffff0000 	.word	0xffff0000
 8001bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c48:	e0b8      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	2200      	movs	r2, #0
 8001c52:	4966      	ldr	r1, [pc, #408]	; (8001dec <HAL_I2C_Master_Receive+0x448>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 feb9 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0bf      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cac:	2200      	movs	r2, #0
 8001cae:	494f      	ldr	r1, [pc, #316]	; (8001dec <HAL_I2C_Master_Receive+0x448>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fe8b 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e091      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d34:	e042      	b.n	8001dbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 ff9e 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e04c      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d118      	bne.n	8001dbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aec2 	bne.w	8001b4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010004 	.word	0x00010004

08001df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	460b      	mov	r3, r1
 8001e04:	813b      	strh	r3, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e0a:	f7ff f8e9 	bl	8000fe0 <HAL_GetTick>
 8001e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	f040 80d9 	bne.w	8001fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2319      	movs	r3, #25
 8001e24:	2201      	movs	r2, #1
 8001e26:	496d      	ldr	r1, [pc, #436]	; (8001fdc <HAL_I2C_Mem_Write+0x1ec>)
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fdcf 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0cc      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Mem_Write+0x56>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0c5      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d007      	beq.n	8001e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2221      	movs	r2, #33	; 0x21
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eae:	88f8      	ldrh	r0, [r7, #6]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 fc06 	bl	80026d0 <I2C_RequestMemoryWrite>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d052      	beq.n	8001f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e081      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fe50 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d107      	bne.n	8001ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06b      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d11b      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x180>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1aa      	bne.n	8001ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fe3c 	bl	8002bfa <I2C_WaitOnBTFFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e016      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	00100002 	.word	0x00100002
 8001fe0:	ffff0000 	.word	0xffff0000

08001fe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	817b      	strh	r3, [r7, #10]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	813b      	strh	r3, [r7, #8]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ffe:	f7fe ffef 	bl	8000fe0 <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b20      	cmp	r3, #32
 800200e:	f040 8208 	bne.w	8002422 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2319      	movs	r3, #25
 8002018:	2201      	movs	r2, #1
 800201a:	497b      	ldr	r1, [pc, #492]	; (8002208 <HAL_I2C_Mem_Read+0x224>)
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fcd5 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
 800202a:	e1fb      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_I2C_Mem_Read+0x56>
 8002036:	2302      	movs	r3, #2
 8002038:	e1f4      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d007      	beq.n	8002060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2222      	movs	r2, #34	; 0x22
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_I2C_Mem_Read+0x228>)
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a2:	88f8      	ldrh	r0, [r7, #6]
 80020a4:	893a      	ldrh	r2, [r7, #8]
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4603      	mov	r3, r0
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fba2 	bl	80027fc <I2C_RequestMemoryRead>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1b0      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d113      	bne.n	80020f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	623b      	str	r3, [r7, #32]
 80020de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e184      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d11b      	bne.n	8002132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e164      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b02      	cmp	r3, #2
 8002138:	d11b      	bne.n	8002172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	e144      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002188:	e138      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	2b03      	cmp	r3, #3
 8002190:	f200 80f1 	bhi.w	8002376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	2b01      	cmp	r3, #1
 800219a:	d123      	bne.n	80021e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fd6b 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e139      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e2:	e10b      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d14e      	bne.n	800228a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	2200      	movs	r2, #0
 80021f4:	4906      	ldr	r1, [pc, #24]	; (8002210 <HAL_I2C_Mem_Read+0x22c>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fbe8 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e10e      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
 8002206:	bf00      	nop
 8002208:	00100002 	.word	0x00100002
 800220c:	ffff0000 	.word	0xffff0000
 8002210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002288:	e0b8      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	2200      	movs	r2, #0
 8002292:	4966      	ldr	r1, [pc, #408]	; (800242c <HAL_I2C_Mem_Read+0x448>)
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fb99 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0bf      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	2200      	movs	r2, #0
 80022ee:	494f      	ldr	r1, [pc, #316]	; (800242c <HAL_I2C_Mem_Read+0x448>)
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fb6b 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e091      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002374:	e042      	b.n	80023fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fc7e 	bl	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e04c      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d118      	bne.n	80023fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	f47f aec2 	bne.w	800218a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	00010004 	.word	0x00010004

08002430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	460b      	mov	r3, r1
 800243e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d006      	beq.n	800245a <I2C_MasterRequestWrite+0x2a>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d003      	beq.n	800245a <I2C_MasterRequestWrite+0x2a>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002458:	d108      	bne.n	800246c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e00b      	b.n	8002484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	2b12      	cmp	r3, #18
 8002472:	d107      	bne.n	8002484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fa9b 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024aa:	d103      	bne.n	80024b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e035      	b.n	8002524 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c0:	d108      	bne.n	80024d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	e01b      	b.n	800250c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024d4:	897b      	ldrh	r3, [r7, #10]
 80024d6:	11db      	asrs	r3, r3, #7
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0306 	and.w	r3, r3, #6
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f063 030f 	orn	r3, r3, #15
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <I2C_MasterRequestWrite+0xfc>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fac1 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e010      	b.n	8002524 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <I2C_MasterRequestWrite+0x100>)
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fab1 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	00010008 	.word	0x00010008
 8002530:	00010002 	.word	0x00010002

08002534 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	460b      	mov	r3, r1
 8002542:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d006      	beq.n	800256e <I2C_MasterRequestRead+0x3a>
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d003      	beq.n	800256e <I2C_MasterRequestRead+0x3a>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800256c:	d108      	bne.n	8002580 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e00b      	b.n	8002598 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	2b11      	cmp	r3, #17
 8002586:	d107      	bne.n	8002598 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fa11 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d103      	bne.n	80025c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e079      	b.n	80026c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d4:	d108      	bne.n	80025e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	e05f      	b.n	80026a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025e8:	897b      	ldrh	r3, [r7, #10]
 80025ea:	11db      	asrs	r3, r3, #7
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f003 0306 	and.w	r3, r3, #6
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f063 030f 	orn	r3, r3, #15
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4930      	ldr	r1, [pc, #192]	; (80026c8 <I2C_MasterRequestRead+0x194>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa37 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e054      	b.n	80026c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4929      	ldr	r1, [pc, #164]	; (80026cc <I2C_MasterRequestRead+0x198>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa27 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e044      	b.n	80026c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f9af 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002682:	d103      	bne.n	800268c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e017      	b.n	80026c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	11db      	asrs	r3, r3, #7
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 0306 	and.w	r3, r3, #6
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f063 030e 	orn	r3, r3, #14
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <I2C_MasterRequestRead+0x198>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9e3 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	00010008 	.word	0x00010008
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2200      	movs	r2, #0
 8002702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f960 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002720:	d103      	bne.n	800272a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e05f      	b.n	80027ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800273c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	492d      	ldr	r1, [pc, #180]	; (80027f8 <I2C_RequestMemoryWrite+0x128>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f998 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e04c      	b.n	80027ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6a39      	ldr	r1, [r7, #32]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fa02 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b04      	cmp	r3, #4
 8002780:	d107      	bne.n	8002792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02b      	b.n	80027ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800279c:	893b      	ldrh	r3, [r7, #8]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	e021      	b.n	80027ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027a8:	893b      	ldrh	r3, [r7, #8]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9dc 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d107      	bne.n	80027de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e005      	b.n	80027ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00010002 	.word	0x00010002

080027fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	817b      	strh	r3, [r7, #10]
 800280e:	460b      	mov	r3, r1
 8002810:	813b      	strh	r3, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2200      	movs	r2, #0
 800283e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8c2 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285c:	d103      	bne.n	8002866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0aa      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286a:	897b      	ldrh	r3, [r7, #10]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	4952      	ldr	r1, [pc, #328]	; (80029c8 <I2C_RequestMemoryRead+0x1cc>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f8fa 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e097      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	6a39      	ldr	r1, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f964 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d107      	bne.n	80028ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e076      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d8:	893b      	ldrh	r3, [r7, #8]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	e021      	b.n	8002928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028e4:	893b      	ldrh	r3, [r7, #8]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f93e 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e050      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291e:	893b      	ldrh	r3, [r7, #8]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	6a39      	ldr	r1, [r7, #32]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f923 	bl	8002b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e035      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2200      	movs	r2, #0
 800296c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f82b 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298a:	d103      	bne.n	8002994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e013      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002998:	897b      	ldrh	r3, [r7, #10]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	6a3a      	ldr	r2, [r7, #32]
 80029ac:	4906      	ldr	r1, [pc, #24]	; (80029c8 <I2C_RequestMemoryRead+0x1cc>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f863 	bl	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010002 	.word	0x00010002

080029cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029dc:	e025      	b.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d021      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fe fafb 	bl	8000fe0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e023      	b.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10d      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	e00c      	b.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0b6      	beq.n	80029de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a88:	e051      	b.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a98:	d123      	bne.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e046      	b.n	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d021      	beq.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aea:	f7fe fa79 	bl	8000fe0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e020      	b.n	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10c      	bne.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e00b      	b.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d18d      	bne.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b84:	e02d      	b.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8ce 	bl	8002d28 <I2C_IsAcknowledgeFailed>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e02d      	b.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d021      	beq.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe fa1f 	bl	8000fe0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e007      	b.n	8002bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d1ca      	bne.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c06:	e02d      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f88d 	bl	8002d28 <I2C_IsAcknowledgeFailed>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e02d      	b.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d021      	beq.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe f9de 	bl	8000fe0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d116      	bne.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e007      	b.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d1ca      	bne.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c88:	e042      	b.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d119      	bne.n	8002ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0210 	mvn.w	r2, #16
 8002ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e029      	b.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fe f988 	bl	8000fe0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d1b5      	bne.n	8002c8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3e:	d11b      	bne.n	8002d78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe f8b2 	bl	8000fe0 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe f8ae 	bl	8000fe0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f855 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f812 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08005224 	.word	0x08005224
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	08005234 	.word	0x08005234

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffdc 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08005234 	.word	0x08005234

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0ae      	sub	sp, #184	; 0xb8
 8002fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe2:	4bcb      	ldr	r3, [pc, #812]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	f200 8206 	bhi.w	80033fc <HAL_RCC_GetSysClockFreq+0x440>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	080033fd 	.word	0x080033fd
 8003000:	080033fd 	.word	0x080033fd
 8003004:	080033fd 	.word	0x080033fd
 8003008:	08003035 	.word	0x08003035
 800300c:	080033fd 	.word	0x080033fd
 8003010:	080033fd 	.word	0x080033fd
 8003014:	080033fd 	.word	0x080033fd
 8003018:	0800303d 	.word	0x0800303d
 800301c:	080033fd 	.word	0x080033fd
 8003020:	080033fd 	.word	0x080033fd
 8003024:	080033fd 	.word	0x080033fd
 8003028:	0800322d 	.word	0x0800322d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4bb9      	ldr	r3, [pc, #740]	; (8003314 <HAL_RCC_GetSysClockFreq+0x358>)
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003032:	e1e7      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4bb8      	ldr	r3, [pc, #736]	; (8003318 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800303a:	e1e3      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4bb4      	ldr	r3, [pc, #720]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003048:	4bb1      	ldr	r3, [pc, #708]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d071      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003054:	4bae      	ldr	r3, [pc, #696]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003060:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	0159      	lsls	r1, r3, #5
 8003088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308c:	0150      	lsls	r0, r2, #5
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4621      	mov	r1, r4
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	6439      	str	r1, [r7, #64]	; 0x40
 8003098:	4629      	mov	r1, r5
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030ac:	4649      	mov	r1, r9
 80030ae:	018b      	lsls	r3, r1, #6
 80030b0:	4641      	mov	r1, r8
 80030b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b6:	4641      	mov	r1, r8
 80030b8:	018a      	lsls	r2, r1, #6
 80030ba:	4641      	mov	r1, r8
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c0:	4649      	mov	r1, r9
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80030d4:	4649      	mov	r1, r9
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4641      	mov	r1, r8
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4641      	mov	r1, r8
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4622      	mov	r2, r4
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	462b      	mov	r3, r5
 80030f0:	460a      	mov	r2, r1
 80030f2:	eb42 0303 	adc.w	r3, r2, r3
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003104:	4629      	mov	r1, r5
 8003106:	024b      	lsls	r3, r1, #9
 8003108:	4621      	mov	r1, r4
 800310a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800310e:	4621      	mov	r1, r4
 8003110:	024a      	lsls	r2, r1, #9
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003124:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003128:	f7fd f8c2 	bl	80002b0 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003136:	e067      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b75      	ldr	r3, [pc, #468]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003144:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	67bb      	str	r3, [r7, #120]	; 0x78
 8003152:	2300      	movs	r3, #0
 8003154:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003156:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	62b9      	str	r1, [r7, #40]	; 0x28
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800318c:	4649      	mov	r1, r9
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4641      	mov	r1, r8
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4641      	mov	r1, r8
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4641      	mov	r1, r8
 800319c:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a0:	4649      	mov	r1, r9
 80031a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ba:	4692      	mov	sl, r2
 80031bc:	469b      	mov	fp, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb1a 0303 	adds.w	r3, sl, r3
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	462b      	mov	r3, r5
 80031c8:	eb4b 0303 	adc.w	r3, fp, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f0:	2200      	movs	r2, #0
 80031f2:	673b      	str	r3, [r7, #112]	; 0x70
 80031f4:	677a      	str	r2, [r7, #116]	; 0x74
 80031f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80031fa:	f7fd f859 	bl	80002b0 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4613      	mov	r3, r2
 8003204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800321a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800321e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800322a:	e0eb      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d06b      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_GetSysClockFreq+0x354>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	2200      	movs	r2, #0
 800324c:	66bb      	str	r3, [r7, #104]	; 0x68
 800324e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	2300      	movs	r3, #0
 800325a:	667b      	str	r3, [r7, #100]	; 0x64
 800325c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003272:	0150      	lsls	r0, r2, #5
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4621      	mov	r1, r4
 800327a:	1a51      	subs	r1, r2, r1
 800327c:	61b9      	str	r1, [r7, #24]
 800327e:	4629      	mov	r1, r5
 8003280:	eb63 0301 	sbc.w	r3, r3, r1
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003292:	4659      	mov	r1, fp
 8003294:	018b      	lsls	r3, r1, #6
 8003296:	4651      	mov	r1, sl
 8003298:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329c:	4651      	mov	r1, sl
 800329e:	018a      	lsls	r2, r1, #6
 80032a0:	4651      	mov	r1, sl
 80032a2:	ebb2 0801 	subs.w	r8, r2, r1
 80032a6:	4659      	mov	r1, fp
 80032a8:	eb63 0901 	sbc.w	r9, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c0:	4690      	mov	r8, r2
 80032c2:	4699      	mov	r9, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	eb18 0303 	adds.w	r3, r8, r3
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	462b      	mov	r3, r5
 80032ce:	eb49 0303 	adc.w	r3, r9, r3
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032e0:	4629      	mov	r1, r5
 80032e2:	024b      	lsls	r3, r1, #9
 80032e4:	4621      	mov	r1, r4
 80032e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ea:	4621      	mov	r1, r4
 80032ec:	024a      	lsls	r2, r1, #9
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f6:	2200      	movs	r2, #0
 80032f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003300:	f7fc ffd6 	bl	80002b0 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4613      	mov	r3, r2
 800330a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800330e:	e065      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x420>
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400
 8003318:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_GetSysClockFreq+0x458>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	2200      	movs	r2, #0
 8003324:	4618      	mov	r0, r3
 8003326:	4611      	mov	r1, r2
 8003328:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
 800332e:	2300      	movs	r3, #0
 8003330:	657b      	str	r3, [r7, #84]	; 0x54
 8003332:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003336:	4642      	mov	r2, r8
 8003338:	464b      	mov	r3, r9
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	0159      	lsls	r1, r3, #5
 8003344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003348:	0150      	lsls	r0, r2, #5
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4641      	mov	r1, r8
 8003350:	1a51      	subs	r1, r2, r1
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	4649      	mov	r1, r9
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003368:	4659      	mov	r1, fp
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003372:	4651      	mov	r1, sl
 8003374:	018a      	lsls	r2, r1, #6
 8003376:	4651      	mov	r1, sl
 8003378:	1a54      	subs	r4, r2, r1
 800337a:	4659      	mov	r1, fp
 800337c:	eb63 0501 	sbc.w	r5, r3, r1
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	00eb      	lsls	r3, r5, #3
 800338a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338e:	00e2      	lsls	r2, r4, #3
 8003390:	4614      	mov	r4, r2
 8003392:	461d      	mov	r5, r3
 8003394:	4643      	mov	r3, r8
 8003396:	18e3      	adds	r3, r4, r3
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	464b      	mov	r3, r9
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033c4:	2200      	movs	r2, #0
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ce:	f7fc ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4613      	mov	r3, r2
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_GetSysClockFreq+0x458>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0f1b      	lsrs	r3, r3, #28
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80033ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033fa:	e003      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003408:	4618      	mov	r0, r3
 800340a:	37b8      	adds	r7, #184	; 0xb8
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400

0800341c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e28d      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8083 	beq.w	8003542 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b04      	cmp	r3, #4
 8003446:	d019      	beq.n	800347c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003448:	4b91      	ldr	r3, [pc, #580]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003450:	2b08      	cmp	r3, #8
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003454:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346e:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b84      	ldr	r3, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x124>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e25a      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x90>
 800349e:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7b      	ldr	r2, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xcc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0xb4>
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a72      	ldr	r2, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xcc>
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6b      	ldr	r2, [pc, #428]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fd76 	bl	8000fe0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fd fd72 	bl	8000fe0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e21f      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b61      	ldr	r3, [pc, #388]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xdc>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fd62 	bl	8000fe0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003520:	f7fd fd5e 	bl	8000fe0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e20b      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x104>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d06f      	beq.n	800362e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800354e:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003562:	2b08      	cmp	r3, #8
 8003564:	d105      	bne.n	8003572 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x186>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1d3      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4937      	ldr	r1, [pc, #220]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e03a      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fd0b 	bl	8000fe0 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fd fd07 	bl	8000fe0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1b4      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4925      	ldr	r1, [pc, #148]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fcea 	bl	8000fe0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003610:	f7fd fce6 	bl	8000fe0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e193      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d036      	beq.n	80036a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fcca 	bl	8000fe0 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fcc6 	bl	8000fe0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e173      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x234>
 800366e:	e01b      	b.n	80036a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fd fcb3 	bl	8000fe0 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	e00e      	b.n	800369c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367e:	f7fd fcaf 	bl	8000fe0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d907      	bls.n	800369c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e15c      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
 8003690:	40023800 	.word	0x40023800
 8003694:	42470000 	.word	0x42470000
 8003698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b8a      	ldr	r3, [pc, #552]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ea      	bne.n	800367e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8097 	beq.w	80037e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	4b7f      	ldr	r3, [pc, #508]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a7e      	ldr	r2, [pc, #504]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b7c      	ldr	r3, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b79      	ldr	r3, [pc, #484]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fc6f 	bl	8000fe0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fd fc6b 	bl	8000fe0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e118      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x4b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x31e>
 800372c:	4b66      	ldr	r3, [pc, #408]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x358>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x340>
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x358>
 800375c:	4b5a      	ldr	r3, [pc, #360]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a59      	ldr	r2, [pc, #356]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a56      	ldr	r2, [pc, #344]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fc30 	bl	8000fe0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fd fc2c 	bl	8000fe0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0d7      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ee      	beq.n	8003784 <HAL_RCC_OscConfig+0x368>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fc1a 	bl	8000fe0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd fc16 	bl	8000fe0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0c1      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a3a      	ldr	r2, [pc, #232]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80ad 	beq.w	8003948 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d060      	beq.n	80038bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d145      	bne.n	800388e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd fbea 	bl	8000fe0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd fbe6 	bl	8000fe0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e093      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	071b      	lsls	r3, r3, #28
 800385a:	491b      	ldr	r1, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd fbbb 	bl	8000fe0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386e:	f7fd fbb7 	bl	8000fe0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e064      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x452>
 800388c:	e05c      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x4b4>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fba4 	bl	8000fe0 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fba0 	bl	8000fe0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e04d      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x480>
 80038ba:	e045      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e040      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
 80038d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x538>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d030      	beq.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d129      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d122      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	4293      	cmp	r3, r2
 800390e:	d119      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d10f      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e03f      	b.n	80039ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fa56 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f929 	bl	8003bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b08a      	sub	sp, #40	; 0x28
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d17c      	bne.n	8003b0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_Transmit+0x2c>
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e075      	b.n	8003b0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x3e>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e06e      	b.n	8003b0e <HAL_UART_Transmit+0x11c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2221      	movs	r2, #33	; 0x21
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fd facb 	bl	8000fe0 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d108      	bne.n	8003a74 <HAL_UART_Transmit+0x82>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a84:	e02a      	b.n	8003adc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f840 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e036      	b.n	8003b0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3302      	adds	r3, #2
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e007      	b.n	8003ace <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1cf      	bne.n	8003a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2140      	movs	r1, #64	; 0x40
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f810 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e006      	b.n	8003b0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b090      	sub	sp, #64	; 0x40
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	e050      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d04c      	beq.n	8003bca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	f7fd fa53 	bl	8000fe0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d241      	bcs.n	8003bca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b66:	637a      	str	r2, [r7, #52]	; 0x34
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9a:	623a      	str	r2, [r7, #32]
 8003b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	69f9      	ldr	r1, [r7, #28]
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d09f      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3740      	adds	r7, #64	; 0x40
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf8:	b0c0      	sub	sp, #256	; 0x100
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	68d9      	ldr	r1, [r3, #12]
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	ea40 0301 	orr.w	r3, r0, r1
 8003c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c4c:	f021 010c 	bic.w	r1, r1, #12
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6e:	6999      	ldr	r1, [r3, #24]
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	ea40 0301 	orr.w	r3, r0, r1
 8003c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b8f      	ldr	r3, [pc, #572]	; (8003ec0 <UART_SetConfig+0x2cc>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d005      	beq.n	8003c94 <UART_SetConfig+0xa0>
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b8d      	ldr	r3, [pc, #564]	; (8003ec4 <UART_SetConfig+0x2d0>)
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d104      	bne.n	8003c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7ff f97e 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8003c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c9c:	e003      	b.n	8003ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7ff f965 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8003ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	f040 810c 	bne.w	8003ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	1891      	adds	r1, r2, r2
 8003ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cce:	415b      	adcs	r3, r3
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	eb12 0801 	adds.w	r8, r2, r1
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb43 0901 	adc.w	r9, r3, r1
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	eb18 0303 	adds.w	r3, r8, r3
 8003d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d04:	462b      	mov	r3, r5
 8003d06:	eb49 0303 	adc.w	r3, r9, r3
 8003d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d22:	460b      	mov	r3, r1
 8003d24:	18db      	adds	r3, r3, r3
 8003d26:	653b      	str	r3, [r7, #80]	; 0x50
 8003d28:	4613      	mov	r3, r2
 8003d2a:	eb42 0303 	adc.w	r3, r2, r3
 8003d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d38:	f7fc faba 	bl	80002b0 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <UART_SetConfig+0x2d4>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	011c      	lsls	r4, r3, #4
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d64:	415b      	adcs	r3, r3
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb43 0b01 	adc.w	fp, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	469b      	mov	fp, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	eb1a 0303 	adds.w	r3, sl, r3
 8003d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003db0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003db8:	460b      	mov	r3, r1
 8003dba:	18db      	adds	r3, r3, r3
 8003dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dce:	f7fc fa6f 	bl	80002b0 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <UART_SetConfig+0x2d4>)
 8003dda:	fba3 2301 	umull	r2, r3, r3, r1
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2264      	movs	r2, #100	; 0x64
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	1acb      	subs	r3, r1, r3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <UART_SetConfig+0x2d4>)
 8003df0:	fba3 2302 	umull	r2, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dfc:	441c      	add	r4, r3
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6339      	str	r1, [r7, #48]	; 0x30
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	464b      	mov	r3, r9
 8003e56:	460a      	mov	r2, r1
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e74:	460b      	mov	r3, r1
 8003e76:	18db      	adds	r3, r3, r3
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e8a:	f7fc fa11 	bl	80002b0 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <UART_SetConfig+0x2d4>)
 8003e94:	fba3 1302 	umull	r1, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	2164      	movs	r1, #100	; 0x64
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	3332      	adds	r3, #50	; 0x32
 8003ea6:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <UART_SetConfig+0x2d4>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4422      	add	r2, r4
 8003eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ebc:	e105      	b.n	80040ca <UART_SetConfig+0x4d6>
 8003ebe:	bf00      	nop
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	40011400 	.word	0x40011400
 8003ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ede:	4642      	mov	r2, r8
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	1891      	adds	r1, r2, r2
 8003ee4:	6239      	str	r1, [r7, #32]
 8003ee6:	415b      	adcs	r3, r3
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eee:	4641      	mov	r1, r8
 8003ef0:	1854      	adds	r4, r2, r1
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	eb43 0501 	adc.w	r5, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f14:	464b      	mov	r3, r9
 8003f16:	eb45 0303 	adc.w	r3, r5, r3
 8003f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	008b      	lsls	r3, r1, #2
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f44:	4621      	mov	r1, r4
 8003f46:	008a      	lsls	r2, r1, #2
 8003f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f4c:	f7fc f9b0 	bl	80002b0 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b60      	ldr	r3, [pc, #384]	; (80040d8 <UART_SetConfig+0x4e4>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011c      	lsls	r4, r3, #4
 8003f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	61b9      	str	r1, [r7, #24]
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f80:	4641      	mov	r1, r8
 8003f82:	1851      	adds	r1, r2, r1
 8003f84:	6139      	str	r1, [r7, #16]
 8003f86:	4649      	mov	r1, r9
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f98:	4659      	mov	r1, fp
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4642      	mov	r2, r8
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fd8:	4649      	mov	r1, r9
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fea:	f7fc f961 	bl	80002b0 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <UART_SetConfig+0x4e4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a34      	ldr	r2, [pc, #208]	; (80040d8 <UART_SetConfig+0x4e4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004012:	441c      	add	r4, r3
 8004014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004018:	2200      	movs	r2, #0
 800401a:	673b      	str	r3, [r7, #112]	; 0x70
 800401c:	677a      	str	r2, [r7, #116]	; 0x74
 800401e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	1891      	adds	r1, r2, r2
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	415b      	adcs	r3, r3
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004032:	4641      	mov	r1, r8
 8004034:	1851      	adds	r1, r2, r1
 8004036:	6039      	str	r1, [r7, #0]
 8004038:	4649      	mov	r1, r9
 800403a:	414b      	adcs	r3, r1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800404a:	4659      	mov	r1, fp
 800404c:	00cb      	lsls	r3, r1, #3
 800404e:	4651      	mov	r1, sl
 8004050:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004054:	4651      	mov	r1, sl
 8004056:	00ca      	lsls	r2, r1, #3
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	4603      	mov	r3, r0
 800405e:	4642      	mov	r2, r8
 8004060:	189b      	adds	r3, r3, r2
 8004062:	66bb      	str	r3, [r7, #104]	; 0x68
 8004064:	464b      	mov	r3, r9
 8004066:	460a      	mov	r2, r1
 8004068:	eb42 0303 	adc.w	r3, r2, r3
 800406c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	663b      	str	r3, [r7, #96]	; 0x60
 8004078:	667a      	str	r2, [r7, #100]	; 0x64
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004086:	4649      	mov	r1, r9
 8004088:	008b      	lsls	r3, r1, #2
 800408a:	4641      	mov	r1, r8
 800408c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004090:	4641      	mov	r1, r8
 8004092:	008a      	lsls	r2, r1, #2
 8004094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004098:	f7fc f90a 	bl	80002b0 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <UART_SetConfig+0x4e4>)
 80040a2:	fba3 1302 	umull	r1, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <UART_SetConfig+0x4e4>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4422      	add	r2, r4
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d6:	bf00      	nop
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4d0d      	ldr	r5, [pc, #52]	; (8004120 <__libc_init_array+0x38>)
 80040ec:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	2600      	movs	r6, #0
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	4d0b      	ldr	r5, [pc, #44]	; (8004128 <__libc_init_array+0x40>)
 80040fa:	4c0c      	ldr	r4, [pc, #48]	; (800412c <__libc_init_array+0x44>)
 80040fc:	f001 f824 	bl	8005148 <_init>
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	2600      	movs	r6, #0
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f855 3b04 	ldr.w	r3, [r5], #4
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	080052dc 	.word	0x080052dc
 8004124:	080052dc 	.word	0x080052dc
 8004128:	080052dc 	.word	0x080052dc
 800412c:	080052e0 	.word	0x080052e0

08004130 <memset>:
 8004130:	4402      	add	r2, r0
 8004132:	4603      	mov	r3, r0
 8004134:	4293      	cmp	r3, r2
 8004136:	d100      	bne.n	800413a <memset+0xa>
 8004138:	4770      	bx	lr
 800413a:	f803 1b01 	strb.w	r1, [r3], #1
 800413e:	e7f9      	b.n	8004134 <memset+0x4>

08004140 <iprintf>:
 8004140:	b40f      	push	{r0, r1, r2, r3}
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <iprintf+0x2c>)
 8004144:	b513      	push	{r0, r1, r4, lr}
 8004146:	681c      	ldr	r4, [r3, #0]
 8004148:	b124      	cbz	r4, 8004154 <iprintf+0x14>
 800414a:	69a3      	ldr	r3, [r4, #24]
 800414c:	b913      	cbnz	r3, 8004154 <iprintf+0x14>
 800414e:	4620      	mov	r0, r4
 8004150:	f000 fa5e 	bl	8004610 <__sinit>
 8004154:	ab05      	add	r3, sp, #20
 8004156:	9a04      	ldr	r2, [sp, #16]
 8004158:	68a1      	ldr	r1, [r4, #8]
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	4620      	mov	r0, r4
 800415e:	f000 fc67 	bl	8004a30 <_vfiprintf_r>
 8004162:	b002      	add	sp, #8
 8004164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004168:	b004      	add	sp, #16
 800416a:	4770      	bx	lr
 800416c:	2000000c 	.word	0x2000000c

08004170 <_puts_r>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	460e      	mov	r6, r1
 8004174:	4605      	mov	r5, r0
 8004176:	b118      	cbz	r0, 8004180 <_puts_r+0x10>
 8004178:	6983      	ldr	r3, [r0, #24]
 800417a:	b90b      	cbnz	r3, 8004180 <_puts_r+0x10>
 800417c:	f000 fa48 	bl	8004610 <__sinit>
 8004180:	69ab      	ldr	r3, [r5, #24]
 8004182:	68ac      	ldr	r4, [r5, #8]
 8004184:	b913      	cbnz	r3, 800418c <_puts_r+0x1c>
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fa42 	bl	8004610 <__sinit>
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <_puts_r+0xd0>)
 800418e:	429c      	cmp	r4, r3
 8004190:	d120      	bne.n	80041d4 <_puts_r+0x64>
 8004192:	686c      	ldr	r4, [r5, #4]
 8004194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004196:	07db      	lsls	r3, r3, #31
 8004198:	d405      	bmi.n	80041a6 <_puts_r+0x36>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	0598      	lsls	r0, r3, #22
 800419e:	d402      	bmi.n	80041a6 <_puts_r+0x36>
 80041a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a2:	f000 fad3 	bl	800474c <__retarget_lock_acquire_recursive>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	0719      	lsls	r1, r3, #28
 80041aa:	d51d      	bpl.n	80041e8 <_puts_r+0x78>
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	b1db      	cbz	r3, 80041e8 <_puts_r+0x78>
 80041b0:	3e01      	subs	r6, #1
 80041b2:	68a3      	ldr	r3, [r4, #8]
 80041b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60a3      	str	r3, [r4, #8]
 80041bc:	bb39      	cbnz	r1, 800420e <_puts_r+0x9e>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da38      	bge.n	8004234 <_puts_r+0xc4>
 80041c2:	4622      	mov	r2, r4
 80041c4:	210a      	movs	r1, #10
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 f848 	bl	800425c <__swbuf_r>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d011      	beq.n	80041f4 <_puts_r+0x84>
 80041d0:	250a      	movs	r5, #10
 80041d2:	e011      	b.n	80041f8 <_puts_r+0x88>
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <_puts_r+0xd4>)
 80041d6:	429c      	cmp	r4, r3
 80041d8:	d101      	bne.n	80041de <_puts_r+0x6e>
 80041da:	68ac      	ldr	r4, [r5, #8]
 80041dc:	e7da      	b.n	8004194 <_puts_r+0x24>
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <_puts_r+0xd8>)
 80041e0:	429c      	cmp	r4, r3
 80041e2:	bf08      	it	eq
 80041e4:	68ec      	ldreq	r4, [r5, #12]
 80041e6:	e7d5      	b.n	8004194 <_puts_r+0x24>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f888 	bl	8004300 <__swsetup_r>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d0dd      	beq.n	80041b0 <_puts_r+0x40>
 80041f4:	f04f 35ff 	mov.w	r5, #4294967295
 80041f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041fa:	07da      	lsls	r2, r3, #31
 80041fc:	d405      	bmi.n	800420a <_puts_r+0x9a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	059b      	lsls	r3, r3, #22
 8004202:	d402      	bmi.n	800420a <_puts_r+0x9a>
 8004204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004206:	f000 faa2 	bl	800474e <__retarget_lock_release_recursive>
 800420a:	4628      	mov	r0, r5
 800420c:	bd70      	pop	{r4, r5, r6, pc}
 800420e:	2b00      	cmp	r3, #0
 8004210:	da04      	bge.n	800421c <_puts_r+0xac>
 8004212:	69a2      	ldr	r2, [r4, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	dc06      	bgt.n	8004226 <_puts_r+0xb6>
 8004218:	290a      	cmp	r1, #10
 800421a:	d004      	beq.n	8004226 <_puts_r+0xb6>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	7019      	strb	r1, [r3, #0]
 8004224:	e7c5      	b.n	80041b2 <_puts_r+0x42>
 8004226:	4622      	mov	r2, r4
 8004228:	4628      	mov	r0, r5
 800422a:	f000 f817 	bl	800425c <__swbuf_r>
 800422e:	3001      	adds	r0, #1
 8004230:	d1bf      	bne.n	80041b2 <_puts_r+0x42>
 8004232:	e7df      	b.n	80041f4 <_puts_r+0x84>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	250a      	movs	r5, #10
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	701d      	strb	r5, [r3, #0]
 800423e:	e7db      	b.n	80041f8 <_puts_r+0x88>
 8004240:	08005260 	.word	0x08005260
 8004244:	08005280 	.word	0x08005280
 8004248:	08005240 	.word	0x08005240

0800424c <puts>:
 800424c:	4b02      	ldr	r3, [pc, #8]	; (8004258 <puts+0xc>)
 800424e:	4601      	mov	r1, r0
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	f7ff bf8d 	b.w	8004170 <_puts_r>
 8004256:	bf00      	nop
 8004258:	2000000c 	.word	0x2000000c

0800425c <__swbuf_r>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	460e      	mov	r6, r1
 8004260:	4614      	mov	r4, r2
 8004262:	4605      	mov	r5, r0
 8004264:	b118      	cbz	r0, 800426e <__swbuf_r+0x12>
 8004266:	6983      	ldr	r3, [r0, #24]
 8004268:	b90b      	cbnz	r3, 800426e <__swbuf_r+0x12>
 800426a:	f000 f9d1 	bl	8004610 <__sinit>
 800426e:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <__swbuf_r+0x98>)
 8004270:	429c      	cmp	r4, r3
 8004272:	d12b      	bne.n	80042cc <__swbuf_r+0x70>
 8004274:	686c      	ldr	r4, [r5, #4]
 8004276:	69a3      	ldr	r3, [r4, #24]
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	071a      	lsls	r2, r3, #28
 800427e:	d52f      	bpl.n	80042e0 <__swbuf_r+0x84>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	b36b      	cbz	r3, 80042e0 <__swbuf_r+0x84>
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	1ac0      	subs	r0, r0, r3
 800428a:	6963      	ldr	r3, [r4, #20]
 800428c:	b2f6      	uxtb	r6, r6
 800428e:	4283      	cmp	r3, r0
 8004290:	4637      	mov	r7, r6
 8004292:	dc04      	bgt.n	800429e <__swbuf_r+0x42>
 8004294:	4621      	mov	r1, r4
 8004296:	4628      	mov	r0, r5
 8004298:	f000 f926 	bl	80044e8 <_fflush_r>
 800429c:	bb30      	cbnz	r0, 80042ec <__swbuf_r+0x90>
 800429e:	68a3      	ldr	r3, [r4, #8]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	60a3      	str	r3, [r4, #8]
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	6022      	str	r2, [r4, #0]
 80042aa:	701e      	strb	r6, [r3, #0]
 80042ac:	6963      	ldr	r3, [r4, #20]
 80042ae:	3001      	adds	r0, #1
 80042b0:	4283      	cmp	r3, r0
 80042b2:	d004      	beq.n	80042be <__swbuf_r+0x62>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	07db      	lsls	r3, r3, #31
 80042b8:	d506      	bpl.n	80042c8 <__swbuf_r+0x6c>
 80042ba:	2e0a      	cmp	r6, #10
 80042bc:	d104      	bne.n	80042c8 <__swbuf_r+0x6c>
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 f911 	bl	80044e8 <_fflush_r>
 80042c6:	b988      	cbnz	r0, 80042ec <__swbuf_r+0x90>
 80042c8:	4638      	mov	r0, r7
 80042ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <__swbuf_r+0x9c>)
 80042ce:	429c      	cmp	r4, r3
 80042d0:	d101      	bne.n	80042d6 <__swbuf_r+0x7a>
 80042d2:	68ac      	ldr	r4, [r5, #8]
 80042d4:	e7cf      	b.n	8004276 <__swbuf_r+0x1a>
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <__swbuf_r+0xa0>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	bf08      	it	eq
 80042dc:	68ec      	ldreq	r4, [r5, #12]
 80042de:	e7ca      	b.n	8004276 <__swbuf_r+0x1a>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 f80c 	bl	8004300 <__swsetup_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d0cb      	beq.n	8004284 <__swbuf_r+0x28>
 80042ec:	f04f 37ff 	mov.w	r7, #4294967295
 80042f0:	e7ea      	b.n	80042c8 <__swbuf_r+0x6c>
 80042f2:	bf00      	nop
 80042f4:	08005260 	.word	0x08005260
 80042f8:	08005280 	.word	0x08005280
 80042fc:	08005240 	.word	0x08005240

08004300 <__swsetup_r>:
 8004300:	4b32      	ldr	r3, [pc, #200]	; (80043cc <__swsetup_r+0xcc>)
 8004302:	b570      	push	{r4, r5, r6, lr}
 8004304:	681d      	ldr	r5, [r3, #0]
 8004306:	4606      	mov	r6, r0
 8004308:	460c      	mov	r4, r1
 800430a:	b125      	cbz	r5, 8004316 <__swsetup_r+0x16>
 800430c:	69ab      	ldr	r3, [r5, #24]
 800430e:	b913      	cbnz	r3, 8004316 <__swsetup_r+0x16>
 8004310:	4628      	mov	r0, r5
 8004312:	f000 f97d 	bl	8004610 <__sinit>
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <__swsetup_r+0xd0>)
 8004318:	429c      	cmp	r4, r3
 800431a:	d10f      	bne.n	800433c <__swsetup_r+0x3c>
 800431c:	686c      	ldr	r4, [r5, #4]
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004324:	0719      	lsls	r1, r3, #28
 8004326:	d42c      	bmi.n	8004382 <__swsetup_r+0x82>
 8004328:	06dd      	lsls	r5, r3, #27
 800432a:	d411      	bmi.n	8004350 <__swsetup_r+0x50>
 800432c:	2309      	movs	r3, #9
 800432e:	6033      	str	r3, [r6, #0]
 8004330:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	e03e      	b.n	80043ba <__swsetup_r+0xba>
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <__swsetup_r+0xd4>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d101      	bne.n	8004346 <__swsetup_r+0x46>
 8004342:	68ac      	ldr	r4, [r5, #8]
 8004344:	e7eb      	b.n	800431e <__swsetup_r+0x1e>
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <__swsetup_r+0xd8>)
 8004348:	429c      	cmp	r4, r3
 800434a:	bf08      	it	eq
 800434c:	68ec      	ldreq	r4, [r5, #12]
 800434e:	e7e6      	b.n	800431e <__swsetup_r+0x1e>
 8004350:	0758      	lsls	r0, r3, #29
 8004352:	d512      	bpl.n	800437a <__swsetup_r+0x7a>
 8004354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004356:	b141      	cbz	r1, 800436a <__swsetup_r+0x6a>
 8004358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <__swsetup_r+0x66>
 8004360:	4630      	mov	r0, r6
 8004362:	f000 fa5b 	bl	800481c <_free_r>
 8004366:	2300      	movs	r3, #0
 8004368:	6363      	str	r3, [r4, #52]	; 0x34
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	2300      	movs	r3, #0
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	81a3      	strh	r3, [r4, #12]
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	b94b      	cbnz	r3, 800439a <__swsetup_r+0x9a>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004390:	d003      	beq.n	800439a <__swsetup_r+0x9a>
 8004392:	4621      	mov	r1, r4
 8004394:	4630      	mov	r0, r6
 8004396:	f000 fa01 	bl	800479c <__smakebuf_r>
 800439a:	89a0      	ldrh	r0, [r4, #12]
 800439c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043a0:	f010 0301 	ands.w	r3, r0, #1
 80043a4:	d00a      	beq.n	80043bc <__swsetup_r+0xbc>
 80043a6:	2300      	movs	r3, #0
 80043a8:	60a3      	str	r3, [r4, #8]
 80043aa:	6963      	ldr	r3, [r4, #20]
 80043ac:	425b      	negs	r3, r3
 80043ae:	61a3      	str	r3, [r4, #24]
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	b943      	cbnz	r3, 80043c6 <__swsetup_r+0xc6>
 80043b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043b8:	d1ba      	bne.n	8004330 <__swsetup_r+0x30>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	0781      	lsls	r1, r0, #30
 80043be:	bf58      	it	pl
 80043c0:	6963      	ldrpl	r3, [r4, #20]
 80043c2:	60a3      	str	r3, [r4, #8]
 80043c4:	e7f4      	b.n	80043b0 <__swsetup_r+0xb0>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e7f7      	b.n	80043ba <__swsetup_r+0xba>
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c
 80043d0:	08005260 	.word	0x08005260
 80043d4:	08005280 	.word	0x08005280
 80043d8:	08005240 	.word	0x08005240

080043dc <__sflush_r>:
 80043dc:	898a      	ldrh	r2, [r1, #12]
 80043de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	4605      	mov	r5, r0
 80043e4:	0710      	lsls	r0, r2, #28
 80043e6:	460c      	mov	r4, r1
 80043e8:	d458      	bmi.n	800449c <__sflush_r+0xc0>
 80043ea:	684b      	ldr	r3, [r1, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dc05      	bgt.n	80043fc <__sflush_r+0x20>
 80043f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	dc02      	bgt.n	80043fc <__sflush_r+0x20>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d0f9      	beq.n	80043f6 <__sflush_r+0x1a>
 8004402:	2300      	movs	r3, #0
 8004404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004408:	682f      	ldr	r7, [r5, #0]
 800440a:	602b      	str	r3, [r5, #0]
 800440c:	d032      	beq.n	8004474 <__sflush_r+0x98>
 800440e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	075a      	lsls	r2, r3, #29
 8004414:	d505      	bpl.n	8004422 <__sflush_r+0x46>
 8004416:	6863      	ldr	r3, [r4, #4]
 8004418:	1ac0      	subs	r0, r0, r3
 800441a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800441c:	b10b      	cbz	r3, 8004422 <__sflush_r+0x46>
 800441e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004420:	1ac0      	subs	r0, r0, r3
 8004422:	2300      	movs	r3, #0
 8004424:	4602      	mov	r2, r0
 8004426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004428:	6a21      	ldr	r1, [r4, #32]
 800442a:	4628      	mov	r0, r5
 800442c:	47b0      	blx	r6
 800442e:	1c43      	adds	r3, r0, #1
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	d106      	bne.n	8004442 <__sflush_r+0x66>
 8004434:	6829      	ldr	r1, [r5, #0]
 8004436:	291d      	cmp	r1, #29
 8004438:	d82c      	bhi.n	8004494 <__sflush_r+0xb8>
 800443a:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <__sflush_r+0x108>)
 800443c:	40ca      	lsrs	r2, r1
 800443e:	07d6      	lsls	r6, r2, #31
 8004440:	d528      	bpl.n	8004494 <__sflush_r+0xb8>
 8004442:	2200      	movs	r2, #0
 8004444:	6062      	str	r2, [r4, #4]
 8004446:	04d9      	lsls	r1, r3, #19
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	6022      	str	r2, [r4, #0]
 800444c:	d504      	bpl.n	8004458 <__sflush_r+0x7c>
 800444e:	1c42      	adds	r2, r0, #1
 8004450:	d101      	bne.n	8004456 <__sflush_r+0x7a>
 8004452:	682b      	ldr	r3, [r5, #0]
 8004454:	b903      	cbnz	r3, 8004458 <__sflush_r+0x7c>
 8004456:	6560      	str	r0, [r4, #84]	; 0x54
 8004458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800445a:	602f      	str	r7, [r5, #0]
 800445c:	2900      	cmp	r1, #0
 800445e:	d0ca      	beq.n	80043f6 <__sflush_r+0x1a>
 8004460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004464:	4299      	cmp	r1, r3
 8004466:	d002      	beq.n	800446e <__sflush_r+0x92>
 8004468:	4628      	mov	r0, r5
 800446a:	f000 f9d7 	bl	800481c <_free_r>
 800446e:	2000      	movs	r0, #0
 8004470:	6360      	str	r0, [r4, #52]	; 0x34
 8004472:	e7c1      	b.n	80043f8 <__sflush_r+0x1c>
 8004474:	6a21      	ldr	r1, [r4, #32]
 8004476:	2301      	movs	r3, #1
 8004478:	4628      	mov	r0, r5
 800447a:	47b0      	blx	r6
 800447c:	1c41      	adds	r1, r0, #1
 800447e:	d1c7      	bne.n	8004410 <__sflush_r+0x34>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0c4      	beq.n	8004410 <__sflush_r+0x34>
 8004486:	2b1d      	cmp	r3, #29
 8004488:	d001      	beq.n	800448e <__sflush_r+0xb2>
 800448a:	2b16      	cmp	r3, #22
 800448c:	d101      	bne.n	8004492 <__sflush_r+0xb6>
 800448e:	602f      	str	r7, [r5, #0]
 8004490:	e7b1      	b.n	80043f6 <__sflush_r+0x1a>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	e7ad      	b.n	80043f8 <__sflush_r+0x1c>
 800449c:	690f      	ldr	r7, [r1, #16]
 800449e:	2f00      	cmp	r7, #0
 80044a0:	d0a9      	beq.n	80043f6 <__sflush_r+0x1a>
 80044a2:	0793      	lsls	r3, r2, #30
 80044a4:	680e      	ldr	r6, [r1, #0]
 80044a6:	bf08      	it	eq
 80044a8:	694b      	ldreq	r3, [r1, #20]
 80044aa:	600f      	str	r7, [r1, #0]
 80044ac:	bf18      	it	ne
 80044ae:	2300      	movne	r3, #0
 80044b0:	eba6 0807 	sub.w	r8, r6, r7
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	f1b8 0f00 	cmp.w	r8, #0
 80044ba:	dd9c      	ble.n	80043f6 <__sflush_r+0x1a>
 80044bc:	6a21      	ldr	r1, [r4, #32]
 80044be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044c0:	4643      	mov	r3, r8
 80044c2:	463a      	mov	r2, r7
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	2800      	cmp	r0, #0
 80044ca:	dc06      	bgt.n	80044da <__sflush_r+0xfe>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	e78e      	b.n	80043f8 <__sflush_r+0x1c>
 80044da:	4407      	add	r7, r0
 80044dc:	eba8 0800 	sub.w	r8, r8, r0
 80044e0:	e7e9      	b.n	80044b6 <__sflush_r+0xda>
 80044e2:	bf00      	nop
 80044e4:	20400001 	.word	0x20400001

080044e8 <_fflush_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	690b      	ldr	r3, [r1, #16]
 80044ec:	4605      	mov	r5, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	b913      	cbnz	r3, 80044f8 <_fflush_r+0x10>
 80044f2:	2500      	movs	r5, #0
 80044f4:	4628      	mov	r0, r5
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	b118      	cbz	r0, 8004502 <_fflush_r+0x1a>
 80044fa:	6983      	ldr	r3, [r0, #24]
 80044fc:	b90b      	cbnz	r3, 8004502 <_fflush_r+0x1a>
 80044fe:	f000 f887 	bl	8004610 <__sinit>
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <_fflush_r+0x6c>)
 8004504:	429c      	cmp	r4, r3
 8004506:	d11b      	bne.n	8004540 <_fflush_r+0x58>
 8004508:	686c      	ldr	r4, [r5, #4]
 800450a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <_fflush_r+0xa>
 8004512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004514:	07d0      	lsls	r0, r2, #31
 8004516:	d404      	bmi.n	8004522 <_fflush_r+0x3a>
 8004518:	0599      	lsls	r1, r3, #22
 800451a:	d402      	bmi.n	8004522 <_fflush_r+0x3a>
 800451c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800451e:	f000 f915 	bl	800474c <__retarget_lock_acquire_recursive>
 8004522:	4628      	mov	r0, r5
 8004524:	4621      	mov	r1, r4
 8004526:	f7ff ff59 	bl	80043dc <__sflush_r>
 800452a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452c:	07da      	lsls	r2, r3, #31
 800452e:	4605      	mov	r5, r0
 8004530:	d4e0      	bmi.n	80044f4 <_fflush_r+0xc>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	d4dd      	bmi.n	80044f4 <_fflush_r+0xc>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f000 f908 	bl	800474e <__retarget_lock_release_recursive>
 800453e:	e7d9      	b.n	80044f4 <_fflush_r+0xc>
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <_fflush_r+0x70>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d101      	bne.n	800454a <_fflush_r+0x62>
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	e7df      	b.n	800450a <_fflush_r+0x22>
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <_fflush_r+0x74>)
 800454c:	429c      	cmp	r4, r3
 800454e:	bf08      	it	eq
 8004550:	68ec      	ldreq	r4, [r5, #12]
 8004552:	e7da      	b.n	800450a <_fflush_r+0x22>
 8004554:	08005260 	.word	0x08005260
 8004558:	08005280 	.word	0x08005280
 800455c:	08005240 	.word	0x08005240

08004560 <std>:
 8004560:	2300      	movs	r3, #0
 8004562:	b510      	push	{r4, lr}
 8004564:	4604      	mov	r4, r0
 8004566:	e9c0 3300 	strd	r3, r3, [r0]
 800456a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800456e:	6083      	str	r3, [r0, #8]
 8004570:	8181      	strh	r1, [r0, #12]
 8004572:	6643      	str	r3, [r0, #100]	; 0x64
 8004574:	81c2      	strh	r2, [r0, #14]
 8004576:	6183      	str	r3, [r0, #24]
 8004578:	4619      	mov	r1, r3
 800457a:	2208      	movs	r2, #8
 800457c:	305c      	adds	r0, #92	; 0x5c
 800457e:	f7ff fdd7 	bl	8004130 <memset>
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <std+0x38>)
 8004584:	6263      	str	r3, [r4, #36]	; 0x24
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <std+0x3c>)
 8004588:	62a3      	str	r3, [r4, #40]	; 0x28
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <std+0x40>)
 800458c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <std+0x44>)
 8004590:	6224      	str	r4, [r4, #32]
 8004592:	6323      	str	r3, [r4, #48]	; 0x30
 8004594:	bd10      	pop	{r4, pc}
 8004596:	bf00      	nop
 8004598:	08004fd9 	.word	0x08004fd9
 800459c:	08004ffb 	.word	0x08004ffb
 80045a0:	08005033 	.word	0x08005033
 80045a4:	08005057 	.word	0x08005057

080045a8 <_cleanup_r>:
 80045a8:	4901      	ldr	r1, [pc, #4]	; (80045b0 <_cleanup_r+0x8>)
 80045aa:	f000 b8af 	b.w	800470c <_fwalk_reent>
 80045ae:	bf00      	nop
 80045b0:	080044e9 	.word	0x080044e9

080045b4 <__sfmoreglue>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	2268      	movs	r2, #104	; 0x68
 80045b8:	1e4d      	subs	r5, r1, #1
 80045ba:	4355      	muls	r5, r2
 80045bc:	460e      	mov	r6, r1
 80045be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045c2:	f000 f997 	bl	80048f4 <_malloc_r>
 80045c6:	4604      	mov	r4, r0
 80045c8:	b140      	cbz	r0, 80045dc <__sfmoreglue+0x28>
 80045ca:	2100      	movs	r1, #0
 80045cc:	e9c0 1600 	strd	r1, r6, [r0]
 80045d0:	300c      	adds	r0, #12
 80045d2:	60a0      	str	r0, [r4, #8]
 80045d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045d8:	f7ff fdaa 	bl	8004130 <memset>
 80045dc:	4620      	mov	r0, r4
 80045de:	bd70      	pop	{r4, r5, r6, pc}

080045e0 <__sfp_lock_acquire>:
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <__sfp_lock_acquire+0x8>)
 80045e2:	f000 b8b3 	b.w	800474c <__retarget_lock_acquire_recursive>
 80045e6:	bf00      	nop
 80045e8:	2000012d 	.word	0x2000012d

080045ec <__sfp_lock_release>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__sfp_lock_release+0x8>)
 80045ee:	f000 b8ae 	b.w	800474e <__retarget_lock_release_recursive>
 80045f2:	bf00      	nop
 80045f4:	2000012d 	.word	0x2000012d

080045f8 <__sinit_lock_acquire>:
 80045f8:	4801      	ldr	r0, [pc, #4]	; (8004600 <__sinit_lock_acquire+0x8>)
 80045fa:	f000 b8a7 	b.w	800474c <__retarget_lock_acquire_recursive>
 80045fe:	bf00      	nop
 8004600:	2000012e 	.word	0x2000012e

08004604 <__sinit_lock_release>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__sinit_lock_release+0x8>)
 8004606:	f000 b8a2 	b.w	800474e <__retarget_lock_release_recursive>
 800460a:	bf00      	nop
 800460c:	2000012e 	.word	0x2000012e

08004610 <__sinit>:
 8004610:	b510      	push	{r4, lr}
 8004612:	4604      	mov	r4, r0
 8004614:	f7ff fff0 	bl	80045f8 <__sinit_lock_acquire>
 8004618:	69a3      	ldr	r3, [r4, #24]
 800461a:	b11b      	cbz	r3, 8004624 <__sinit+0x14>
 800461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004620:	f7ff bff0 	b.w	8004604 <__sinit_lock_release>
 8004624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004628:	6523      	str	r3, [r4, #80]	; 0x50
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <__sinit+0x68>)
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <__sinit+0x6c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	62a2      	str	r2, [r4, #40]	; 0x28
 8004632:	42a3      	cmp	r3, r4
 8004634:	bf04      	itt	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	61a3      	streq	r3, [r4, #24]
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f820 	bl	8004680 <__sfp>
 8004640:	6060      	str	r0, [r4, #4]
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f81c 	bl	8004680 <__sfp>
 8004648:	60a0      	str	r0, [r4, #8]
 800464a:	4620      	mov	r0, r4
 800464c:	f000 f818 	bl	8004680 <__sfp>
 8004650:	2200      	movs	r2, #0
 8004652:	60e0      	str	r0, [r4, #12]
 8004654:	2104      	movs	r1, #4
 8004656:	6860      	ldr	r0, [r4, #4]
 8004658:	f7ff ff82 	bl	8004560 <std>
 800465c:	68a0      	ldr	r0, [r4, #8]
 800465e:	2201      	movs	r2, #1
 8004660:	2109      	movs	r1, #9
 8004662:	f7ff ff7d 	bl	8004560 <std>
 8004666:	68e0      	ldr	r0, [r4, #12]
 8004668:	2202      	movs	r2, #2
 800466a:	2112      	movs	r1, #18
 800466c:	f7ff ff78 	bl	8004560 <std>
 8004670:	2301      	movs	r3, #1
 8004672:	61a3      	str	r3, [r4, #24]
 8004674:	e7d2      	b.n	800461c <__sinit+0xc>
 8004676:	bf00      	nop
 8004678:	0800523c 	.word	0x0800523c
 800467c:	080045a9 	.word	0x080045a9

08004680 <__sfp>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	4607      	mov	r7, r0
 8004684:	f7ff ffac 	bl	80045e0 <__sfp_lock_acquire>
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <__sfp+0x84>)
 800468a:	681e      	ldr	r6, [r3, #0]
 800468c:	69b3      	ldr	r3, [r6, #24]
 800468e:	b913      	cbnz	r3, 8004696 <__sfp+0x16>
 8004690:	4630      	mov	r0, r6
 8004692:	f7ff ffbd 	bl	8004610 <__sinit>
 8004696:	3648      	adds	r6, #72	; 0x48
 8004698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800469c:	3b01      	subs	r3, #1
 800469e:	d503      	bpl.n	80046a8 <__sfp+0x28>
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	b30b      	cbz	r3, 80046e8 <__sfp+0x68>
 80046a4:	6836      	ldr	r6, [r6, #0]
 80046a6:	e7f7      	b.n	8004698 <__sfp+0x18>
 80046a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046ac:	b9d5      	cbnz	r5, 80046e4 <__sfp+0x64>
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <__sfp+0x88>)
 80046b0:	60e3      	str	r3, [r4, #12]
 80046b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046b6:	6665      	str	r5, [r4, #100]	; 0x64
 80046b8:	f000 f847 	bl	800474a <__retarget_lock_init_recursive>
 80046bc:	f7ff ff96 	bl	80045ec <__sfp_lock_release>
 80046c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046c8:	6025      	str	r5, [r4, #0]
 80046ca:	61a5      	str	r5, [r4, #24]
 80046cc:	2208      	movs	r2, #8
 80046ce:	4629      	mov	r1, r5
 80046d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046d4:	f7ff fd2c 	bl	8004130 <memset>
 80046d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046e0:	4620      	mov	r0, r4
 80046e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e4:	3468      	adds	r4, #104	; 0x68
 80046e6:	e7d9      	b.n	800469c <__sfp+0x1c>
 80046e8:	2104      	movs	r1, #4
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7ff ff62 	bl	80045b4 <__sfmoreglue>
 80046f0:	4604      	mov	r4, r0
 80046f2:	6030      	str	r0, [r6, #0]
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d1d5      	bne.n	80046a4 <__sfp+0x24>
 80046f8:	f7ff ff78 	bl	80045ec <__sfp_lock_release>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	e7ee      	b.n	80046e0 <__sfp+0x60>
 8004702:	bf00      	nop
 8004704:	0800523c 	.word	0x0800523c
 8004708:	ffff0001 	.word	0xffff0001

0800470c <_fwalk_reent>:
 800470c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004710:	4606      	mov	r6, r0
 8004712:	4688      	mov	r8, r1
 8004714:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004718:	2700      	movs	r7, #0
 800471a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800471e:	f1b9 0901 	subs.w	r9, r9, #1
 8004722:	d505      	bpl.n	8004730 <_fwalk_reent+0x24>
 8004724:	6824      	ldr	r4, [r4, #0]
 8004726:	2c00      	cmp	r4, #0
 8004728:	d1f7      	bne.n	800471a <_fwalk_reent+0xe>
 800472a:	4638      	mov	r0, r7
 800472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004730:	89ab      	ldrh	r3, [r5, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d907      	bls.n	8004746 <_fwalk_reent+0x3a>
 8004736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800473a:	3301      	adds	r3, #1
 800473c:	d003      	beq.n	8004746 <_fwalk_reent+0x3a>
 800473e:	4629      	mov	r1, r5
 8004740:	4630      	mov	r0, r6
 8004742:	47c0      	blx	r8
 8004744:	4307      	orrs	r7, r0
 8004746:	3568      	adds	r5, #104	; 0x68
 8004748:	e7e9      	b.n	800471e <_fwalk_reent+0x12>

0800474a <__retarget_lock_init_recursive>:
 800474a:	4770      	bx	lr

0800474c <__retarget_lock_acquire_recursive>:
 800474c:	4770      	bx	lr

0800474e <__retarget_lock_release_recursive>:
 800474e:	4770      	bx	lr

08004750 <__swhatbuf_r>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	460e      	mov	r6, r1
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	2900      	cmp	r1, #0
 800475a:	b096      	sub	sp, #88	; 0x58
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	da08      	bge.n	8004774 <__swhatbuf_r+0x24>
 8004762:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	061a      	lsls	r2, r3, #24
 800476c:	d410      	bmi.n	8004790 <__swhatbuf_r+0x40>
 800476e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004772:	e00e      	b.n	8004792 <__swhatbuf_r+0x42>
 8004774:	466a      	mov	r2, sp
 8004776:	f000 fc95 	bl	80050a4 <_fstat_r>
 800477a:	2800      	cmp	r0, #0
 800477c:	dbf1      	blt.n	8004762 <__swhatbuf_r+0x12>
 800477e:	9a01      	ldr	r2, [sp, #4]
 8004780:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004784:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004788:	425a      	negs	r2, r3
 800478a:	415a      	adcs	r2, r3
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	e7ee      	b.n	800476e <__swhatbuf_r+0x1e>
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	2000      	movs	r0, #0
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	b016      	add	sp, #88	; 0x58
 8004798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800479c <__smakebuf_r>:
 800479c:	898b      	ldrh	r3, [r1, #12]
 800479e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047a0:	079d      	lsls	r5, r3, #30
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	d507      	bpl.n	80047b8 <__smakebuf_r+0x1c>
 80047a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	2301      	movs	r3, #1
 80047b2:	6163      	str	r3, [r4, #20]
 80047b4:	b002      	add	sp, #8
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	ab01      	add	r3, sp, #4
 80047ba:	466a      	mov	r2, sp
 80047bc:	f7ff ffc8 	bl	8004750 <__swhatbuf_r>
 80047c0:	9900      	ldr	r1, [sp, #0]
 80047c2:	4605      	mov	r5, r0
 80047c4:	4630      	mov	r0, r6
 80047c6:	f000 f895 	bl	80048f4 <_malloc_r>
 80047ca:	b948      	cbnz	r0, 80047e0 <__smakebuf_r+0x44>
 80047cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d0:	059a      	lsls	r2, r3, #22
 80047d2:	d4ef      	bmi.n	80047b4 <__smakebuf_r+0x18>
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	e7e3      	b.n	80047a8 <__smakebuf_r+0xc>
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <__smakebuf_r+0x7c>)
 80047e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	6020      	str	r0, [r4, #0]
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	9b00      	ldr	r3, [sp, #0]
 80047f0:	6163      	str	r3, [r4, #20]
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	6120      	str	r0, [r4, #16]
 80047f6:	b15b      	cbz	r3, 8004810 <__smakebuf_r+0x74>
 80047f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 fc63 	bl	80050c8 <_isatty_r>
 8004802:	b128      	cbz	r0, 8004810 <__smakebuf_r+0x74>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	81a3      	strh	r3, [r4, #12]
 8004810:	89a0      	ldrh	r0, [r4, #12]
 8004812:	4305      	orrs	r5, r0
 8004814:	81a5      	strh	r5, [r4, #12]
 8004816:	e7cd      	b.n	80047b4 <__smakebuf_r+0x18>
 8004818:	080045a9 	.word	0x080045a9

0800481c <_free_r>:
 800481c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800481e:	2900      	cmp	r1, #0
 8004820:	d044      	beq.n	80048ac <_free_r+0x90>
 8004822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004826:	9001      	str	r0, [sp, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f1a1 0404 	sub.w	r4, r1, #4
 800482e:	bfb8      	it	lt
 8004830:	18e4      	addlt	r4, r4, r3
 8004832:	f000 fc6b 	bl	800510c <__malloc_lock>
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <_free_r+0x94>)
 8004838:	9801      	ldr	r0, [sp, #4]
 800483a:	6813      	ldr	r3, [r2, #0]
 800483c:	b933      	cbnz	r3, 800484c <_free_r+0x30>
 800483e:	6063      	str	r3, [r4, #4]
 8004840:	6014      	str	r4, [r2, #0]
 8004842:	b003      	add	sp, #12
 8004844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004848:	f000 bc66 	b.w	8005118 <__malloc_unlock>
 800484c:	42a3      	cmp	r3, r4
 800484e:	d908      	bls.n	8004862 <_free_r+0x46>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1961      	adds	r1, r4, r5
 8004854:	428b      	cmp	r3, r1
 8004856:	bf01      	itttt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	1949      	addeq	r1, r1, r5
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	e7ed      	b.n	800483e <_free_r+0x22>
 8004862:	461a      	mov	r2, r3
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b10b      	cbz	r3, 800486c <_free_r+0x50>
 8004868:	42a3      	cmp	r3, r4
 800486a:	d9fa      	bls.n	8004862 <_free_r+0x46>
 800486c:	6811      	ldr	r1, [r2, #0]
 800486e:	1855      	adds	r5, r2, r1
 8004870:	42a5      	cmp	r5, r4
 8004872:	d10b      	bne.n	800488c <_free_r+0x70>
 8004874:	6824      	ldr	r4, [r4, #0]
 8004876:	4421      	add	r1, r4
 8004878:	1854      	adds	r4, r2, r1
 800487a:	42a3      	cmp	r3, r4
 800487c:	6011      	str	r1, [r2, #0]
 800487e:	d1e0      	bne.n	8004842 <_free_r+0x26>
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	6053      	str	r3, [r2, #4]
 8004886:	4421      	add	r1, r4
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	e7da      	b.n	8004842 <_free_r+0x26>
 800488c:	d902      	bls.n	8004894 <_free_r+0x78>
 800488e:	230c      	movs	r3, #12
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	e7d6      	b.n	8004842 <_free_r+0x26>
 8004894:	6825      	ldr	r5, [r4, #0]
 8004896:	1961      	adds	r1, r4, r5
 8004898:	428b      	cmp	r3, r1
 800489a:	bf04      	itt	eq
 800489c:	6819      	ldreq	r1, [r3, #0]
 800489e:	685b      	ldreq	r3, [r3, #4]
 80048a0:	6063      	str	r3, [r4, #4]
 80048a2:	bf04      	itt	eq
 80048a4:	1949      	addeq	r1, r1, r5
 80048a6:	6021      	streq	r1, [r4, #0]
 80048a8:	6054      	str	r4, [r2, #4]
 80048aa:	e7ca      	b.n	8004842 <_free_r+0x26>
 80048ac:	b003      	add	sp, #12
 80048ae:	bd30      	pop	{r4, r5, pc}
 80048b0:	20000130 	.word	0x20000130

080048b4 <sbrk_aligned>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4e0e      	ldr	r6, [pc, #56]	; (80048f0 <sbrk_aligned+0x3c>)
 80048b8:	460c      	mov	r4, r1
 80048ba:	6831      	ldr	r1, [r6, #0]
 80048bc:	4605      	mov	r5, r0
 80048be:	b911      	cbnz	r1, 80048c6 <sbrk_aligned+0x12>
 80048c0:	f000 fb7a 	bl	8004fb8 <_sbrk_r>
 80048c4:	6030      	str	r0, [r6, #0]
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 fb75 	bl	8004fb8 <_sbrk_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d00a      	beq.n	80048e8 <sbrk_aligned+0x34>
 80048d2:	1cc4      	adds	r4, r0, #3
 80048d4:	f024 0403 	bic.w	r4, r4, #3
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d007      	beq.n	80048ec <sbrk_aligned+0x38>
 80048dc:	1a21      	subs	r1, r4, r0
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 fb6a 	bl	8004fb8 <_sbrk_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d101      	bne.n	80048ec <sbrk_aligned+0x38>
 80048e8:	f04f 34ff 	mov.w	r4, #4294967295
 80048ec:	4620      	mov	r0, r4
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	20000134 	.word	0x20000134

080048f4 <_malloc_r>:
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	1ccd      	adds	r5, r1, #3
 80048fa:	f025 0503 	bic.w	r5, r5, #3
 80048fe:	3508      	adds	r5, #8
 8004900:	2d0c      	cmp	r5, #12
 8004902:	bf38      	it	cc
 8004904:	250c      	movcc	r5, #12
 8004906:	2d00      	cmp	r5, #0
 8004908:	4607      	mov	r7, r0
 800490a:	db01      	blt.n	8004910 <_malloc_r+0x1c>
 800490c:	42a9      	cmp	r1, r5
 800490e:	d905      	bls.n	800491c <_malloc_r+0x28>
 8004910:	230c      	movs	r3, #12
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	2600      	movs	r6, #0
 8004916:	4630      	mov	r0, r6
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	4e2e      	ldr	r6, [pc, #184]	; (80049d8 <_malloc_r+0xe4>)
 800491e:	f000 fbf5 	bl	800510c <__malloc_lock>
 8004922:	6833      	ldr	r3, [r6, #0]
 8004924:	461c      	mov	r4, r3
 8004926:	bb34      	cbnz	r4, 8004976 <_malloc_r+0x82>
 8004928:	4629      	mov	r1, r5
 800492a:	4638      	mov	r0, r7
 800492c:	f7ff ffc2 	bl	80048b4 <sbrk_aligned>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	4604      	mov	r4, r0
 8004934:	d14d      	bne.n	80049d2 <_malloc_r+0xde>
 8004936:	6834      	ldr	r4, [r6, #0]
 8004938:	4626      	mov	r6, r4
 800493a:	2e00      	cmp	r6, #0
 800493c:	d140      	bne.n	80049c0 <_malloc_r+0xcc>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	4631      	mov	r1, r6
 8004942:	4638      	mov	r0, r7
 8004944:	eb04 0803 	add.w	r8, r4, r3
 8004948:	f000 fb36 	bl	8004fb8 <_sbrk_r>
 800494c:	4580      	cmp	r8, r0
 800494e:	d13a      	bne.n	80049c6 <_malloc_r+0xd2>
 8004950:	6821      	ldr	r1, [r4, #0]
 8004952:	3503      	adds	r5, #3
 8004954:	1a6d      	subs	r5, r5, r1
 8004956:	f025 0503 	bic.w	r5, r5, #3
 800495a:	3508      	adds	r5, #8
 800495c:	2d0c      	cmp	r5, #12
 800495e:	bf38      	it	cc
 8004960:	250c      	movcc	r5, #12
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ffa5 	bl	80048b4 <sbrk_aligned>
 800496a:	3001      	adds	r0, #1
 800496c:	d02b      	beq.n	80049c6 <_malloc_r+0xd2>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	442b      	add	r3, r5
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	e00e      	b.n	8004994 <_malloc_r+0xa0>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	1b52      	subs	r2, r2, r5
 800497a:	d41e      	bmi.n	80049ba <_malloc_r+0xc6>
 800497c:	2a0b      	cmp	r2, #11
 800497e:	d916      	bls.n	80049ae <_malloc_r+0xba>
 8004980:	1961      	adds	r1, r4, r5
 8004982:	42a3      	cmp	r3, r4
 8004984:	6025      	str	r5, [r4, #0]
 8004986:	bf18      	it	ne
 8004988:	6059      	strne	r1, [r3, #4]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	bf08      	it	eq
 800498e:	6031      	streq	r1, [r6, #0]
 8004990:	5162      	str	r2, [r4, r5]
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	4638      	mov	r0, r7
 8004996:	f104 060b 	add.w	r6, r4, #11
 800499a:	f000 fbbd 	bl	8005118 <__malloc_unlock>
 800499e:	f026 0607 	bic.w	r6, r6, #7
 80049a2:	1d23      	adds	r3, r4, #4
 80049a4:	1af2      	subs	r2, r6, r3
 80049a6:	d0b6      	beq.n	8004916 <_malloc_r+0x22>
 80049a8:	1b9b      	subs	r3, r3, r6
 80049aa:	50a3      	str	r3, [r4, r2]
 80049ac:	e7b3      	b.n	8004916 <_malloc_r+0x22>
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	bf0c      	ite	eq
 80049b4:	6032      	streq	r2, [r6, #0]
 80049b6:	605a      	strne	r2, [r3, #4]
 80049b8:	e7ec      	b.n	8004994 <_malloc_r+0xa0>
 80049ba:	4623      	mov	r3, r4
 80049bc:	6864      	ldr	r4, [r4, #4]
 80049be:	e7b2      	b.n	8004926 <_malloc_r+0x32>
 80049c0:	4634      	mov	r4, r6
 80049c2:	6876      	ldr	r6, [r6, #4]
 80049c4:	e7b9      	b.n	800493a <_malloc_r+0x46>
 80049c6:	230c      	movs	r3, #12
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4638      	mov	r0, r7
 80049cc:	f000 fba4 	bl	8005118 <__malloc_unlock>
 80049d0:	e7a1      	b.n	8004916 <_malloc_r+0x22>
 80049d2:	6025      	str	r5, [r4, #0]
 80049d4:	e7de      	b.n	8004994 <_malloc_r+0xa0>
 80049d6:	bf00      	nop
 80049d8:	20000130 	.word	0x20000130

080049dc <__sfputc_r>:
 80049dc:	6893      	ldr	r3, [r2, #8]
 80049de:	3b01      	subs	r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	b410      	push	{r4}
 80049e4:	6093      	str	r3, [r2, #8]
 80049e6:	da08      	bge.n	80049fa <__sfputc_r+0x1e>
 80049e8:	6994      	ldr	r4, [r2, #24]
 80049ea:	42a3      	cmp	r3, r4
 80049ec:	db01      	blt.n	80049f2 <__sfputc_r+0x16>
 80049ee:	290a      	cmp	r1, #10
 80049f0:	d103      	bne.n	80049fa <__sfputc_r+0x1e>
 80049f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f6:	f7ff bc31 	b.w	800425c <__swbuf_r>
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	1c58      	adds	r0, r3, #1
 80049fe:	6010      	str	r0, [r2, #0]
 8004a00:	7019      	strb	r1, [r3, #0]
 8004a02:	4608      	mov	r0, r1
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <__sfputs_r>:
 8004a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	18d5      	adds	r5, r2, r3
 8004a14:	42ac      	cmp	r4, r5
 8004a16:	d101      	bne.n	8004a1c <__sfputs_r+0x12>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e007      	b.n	8004a2c <__sfputs_r+0x22>
 8004a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a20:	463a      	mov	r2, r7
 8004a22:	4630      	mov	r0, r6
 8004a24:	f7ff ffda 	bl	80049dc <__sfputc_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d1f3      	bne.n	8004a14 <__sfputs_r+0xa>
 8004a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a30 <_vfiprintf_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	460d      	mov	r5, r1
 8004a36:	b09d      	sub	sp, #116	; 0x74
 8004a38:	4614      	mov	r4, r2
 8004a3a:	4698      	mov	r8, r3
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	b118      	cbz	r0, 8004a48 <_vfiprintf_r+0x18>
 8004a40:	6983      	ldr	r3, [r0, #24]
 8004a42:	b90b      	cbnz	r3, 8004a48 <_vfiprintf_r+0x18>
 8004a44:	f7ff fde4 	bl	8004610 <__sinit>
 8004a48:	4b89      	ldr	r3, [pc, #548]	; (8004c70 <_vfiprintf_r+0x240>)
 8004a4a:	429d      	cmp	r5, r3
 8004a4c:	d11b      	bne.n	8004a86 <_vfiprintf_r+0x56>
 8004a4e:	6875      	ldr	r5, [r6, #4]
 8004a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a52:	07d9      	lsls	r1, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <_vfiprintf_r+0x32>
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	059a      	lsls	r2, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_vfiprintf_r+0x32>
 8004a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a5e:	f7ff fe75 	bl	800474c <__retarget_lock_acquire_recursive>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	d501      	bpl.n	8004a6c <_vfiprintf_r+0x3c>
 8004a68:	692b      	ldr	r3, [r5, #16]
 8004a6a:	b9eb      	cbnz	r3, 8004aa8 <_vfiprintf_r+0x78>
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f7ff fc46 	bl	8004300 <__swsetup_r>
 8004a74:	b1c0      	cbz	r0, 8004aa8 <_vfiprintf_r+0x78>
 8004a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a78:	07dc      	lsls	r4, r3, #31
 8004a7a:	d50e      	bpl.n	8004a9a <_vfiprintf_r+0x6a>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	b01d      	add	sp, #116	; 0x74
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	4b7b      	ldr	r3, [pc, #492]	; (8004c74 <_vfiprintf_r+0x244>)
 8004a88:	429d      	cmp	r5, r3
 8004a8a:	d101      	bne.n	8004a90 <_vfiprintf_r+0x60>
 8004a8c:	68b5      	ldr	r5, [r6, #8]
 8004a8e:	e7df      	b.n	8004a50 <_vfiprintf_r+0x20>
 8004a90:	4b79      	ldr	r3, [pc, #484]	; (8004c78 <_vfiprintf_r+0x248>)
 8004a92:	429d      	cmp	r5, r3
 8004a94:	bf08      	it	eq
 8004a96:	68f5      	ldreq	r5, [r6, #12]
 8004a98:	e7da      	b.n	8004a50 <_vfiprintf_r+0x20>
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	0598      	lsls	r0, r3, #22
 8004a9e:	d4ed      	bmi.n	8004a7c <_vfiprintf_r+0x4c>
 8004aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa2:	f7ff fe54 	bl	800474e <__retarget_lock_release_recursive>
 8004aa6:	e7e9      	b.n	8004a7c <_vfiprintf_r+0x4c>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8004aac:	2320      	movs	r3, #32
 8004aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ab6:	2330      	movs	r3, #48	; 0x30
 8004ab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c7c <_vfiprintf_r+0x24c>
 8004abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac0:	f04f 0901 	mov.w	r9, #1
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	469a      	mov	sl, r3
 8004ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004acc:	b10a      	cbz	r2, 8004ad2 <_vfiprintf_r+0xa2>
 8004ace:	2a25      	cmp	r2, #37	; 0x25
 8004ad0:	d1f9      	bne.n	8004ac6 <_vfiprintf_r+0x96>
 8004ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ad6:	d00b      	beq.n	8004af0 <_vfiprintf_r+0xc0>
 8004ad8:	465b      	mov	r3, fp
 8004ada:	4622      	mov	r2, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f7ff ff93 	bl	8004a0a <__sfputs_r>
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f000 80aa 	beq.w	8004c3e <_vfiprintf_r+0x20e>
 8004aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aec:	445a      	add	r2, fp
 8004aee:	9209      	str	r2, [sp, #36]	; 0x24
 8004af0:	f89a 3000 	ldrb.w	r3, [sl]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80a2 	beq.w	8004c3e <_vfiprintf_r+0x20e>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295
 8004b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b04:	f10a 0a01 	add.w	sl, sl, #1
 8004b08:	9304      	str	r3, [sp, #16]
 8004b0a:	9307      	str	r3, [sp, #28]
 8004b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b10:	931a      	str	r3, [sp, #104]	; 0x68
 8004b12:	4654      	mov	r4, sl
 8004b14:	2205      	movs	r2, #5
 8004b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1a:	4858      	ldr	r0, [pc, #352]	; (8004c7c <_vfiprintf_r+0x24c>)
 8004b1c:	f7fb fb78 	bl	8000210 <memchr>
 8004b20:	9a04      	ldr	r2, [sp, #16]
 8004b22:	b9d8      	cbnz	r0, 8004b5c <_vfiprintf_r+0x12c>
 8004b24:	06d1      	lsls	r1, r2, #27
 8004b26:	bf44      	itt	mi
 8004b28:	2320      	movmi	r3, #32
 8004b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b2e:	0713      	lsls	r3, r2, #28
 8004b30:	bf44      	itt	mi
 8004b32:	232b      	movmi	r3, #43	; 0x2b
 8004b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b38:	f89a 3000 	ldrb.w	r3, [sl]
 8004b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b3e:	d015      	beq.n	8004b6c <_vfiprintf_r+0x13c>
 8004b40:	9a07      	ldr	r2, [sp, #28]
 8004b42:	4654      	mov	r4, sl
 8004b44:	2000      	movs	r0, #0
 8004b46:	f04f 0c0a 	mov.w	ip, #10
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b50:	3b30      	subs	r3, #48	; 0x30
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d94e      	bls.n	8004bf4 <_vfiprintf_r+0x1c4>
 8004b56:	b1b0      	cbz	r0, 8004b86 <_vfiprintf_r+0x156>
 8004b58:	9207      	str	r2, [sp, #28]
 8004b5a:	e014      	b.n	8004b86 <_vfiprintf_r+0x156>
 8004b5c:	eba0 0308 	sub.w	r3, r0, r8
 8004b60:	fa09 f303 	lsl.w	r3, r9, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	9304      	str	r3, [sp, #16]
 8004b68:	46a2      	mov	sl, r4
 8004b6a:	e7d2      	b.n	8004b12 <_vfiprintf_r+0xe2>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	1d19      	adds	r1, r3, #4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	9103      	str	r1, [sp, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bfbb      	ittet	lt
 8004b78:	425b      	neglt	r3, r3
 8004b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b7e:	9307      	strge	r3, [sp, #28]
 8004b80:	9307      	strlt	r3, [sp, #28]
 8004b82:	bfb8      	it	lt
 8004b84:	9204      	strlt	r2, [sp, #16]
 8004b86:	7823      	ldrb	r3, [r4, #0]
 8004b88:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8a:	d10c      	bne.n	8004ba6 <_vfiprintf_r+0x176>
 8004b8c:	7863      	ldrb	r3, [r4, #1]
 8004b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b90:	d135      	bne.n	8004bfe <_vfiprintf_r+0x1ce>
 8004b92:	9b03      	ldr	r3, [sp, #12]
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	9203      	str	r2, [sp, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfb8      	it	lt
 8004b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ba2:	3402      	adds	r4, #2
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c8c <_vfiprintf_r+0x25c>
 8004baa:	7821      	ldrb	r1, [r4, #0]
 8004bac:	2203      	movs	r2, #3
 8004bae:	4650      	mov	r0, sl
 8004bb0:	f7fb fb2e 	bl	8000210 <memchr>
 8004bb4:	b140      	cbz	r0, 8004bc8 <_vfiprintf_r+0x198>
 8004bb6:	2340      	movs	r3, #64	; 0x40
 8004bb8:	eba0 000a 	sub.w	r0, r0, sl
 8004bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc0:	9b04      	ldr	r3, [sp, #16]
 8004bc2:	4303      	orrs	r3, r0
 8004bc4:	3401      	adds	r4, #1
 8004bc6:	9304      	str	r3, [sp, #16]
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	482c      	ldr	r0, [pc, #176]	; (8004c80 <_vfiprintf_r+0x250>)
 8004bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd2:	2206      	movs	r2, #6
 8004bd4:	f7fb fb1c 	bl	8000210 <memchr>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d03f      	beq.n	8004c5c <_vfiprintf_r+0x22c>
 8004bdc:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <_vfiprintf_r+0x254>)
 8004bde:	bb1b      	cbnz	r3, 8004c28 <_vfiprintf_r+0x1f8>
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	3307      	adds	r3, #7
 8004be4:	f023 0307 	bic.w	r3, r3, #7
 8004be8:	3308      	adds	r3, #8
 8004bea:	9303      	str	r3, [sp, #12]
 8004bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bee:	443b      	add	r3, r7
 8004bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf2:	e767      	b.n	8004ac4 <_vfiprintf_r+0x94>
 8004bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	e7a5      	b.n	8004b4a <_vfiprintf_r+0x11a>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	3401      	adds	r4, #1
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c10:	3a30      	subs	r2, #48	; 0x30
 8004c12:	2a09      	cmp	r2, #9
 8004c14:	d903      	bls.n	8004c1e <_vfiprintf_r+0x1ee>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0c5      	beq.n	8004ba6 <_vfiprintf_r+0x176>
 8004c1a:	9105      	str	r1, [sp, #20]
 8004c1c:	e7c3      	b.n	8004ba6 <_vfiprintf_r+0x176>
 8004c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c22:	4604      	mov	r4, r0
 8004c24:	2301      	movs	r3, #1
 8004c26:	e7f0      	b.n	8004c0a <_vfiprintf_r+0x1da>
 8004c28:	ab03      	add	r3, sp, #12
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <_vfiprintf_r+0x258>)
 8004c30:	a904      	add	r1, sp, #16
 8004c32:	4630      	mov	r0, r6
 8004c34:	f3af 8000 	nop.w
 8004c38:	4607      	mov	r7, r0
 8004c3a:	1c78      	adds	r0, r7, #1
 8004c3c:	d1d6      	bne.n	8004bec <_vfiprintf_r+0x1bc>
 8004c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c40:	07d9      	lsls	r1, r3, #31
 8004c42:	d405      	bmi.n	8004c50 <_vfiprintf_r+0x220>
 8004c44:	89ab      	ldrh	r3, [r5, #12]
 8004c46:	059a      	lsls	r2, r3, #22
 8004c48:	d402      	bmi.n	8004c50 <_vfiprintf_r+0x220>
 8004c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c4c:	f7ff fd7f 	bl	800474e <__retarget_lock_release_recursive>
 8004c50:	89ab      	ldrh	r3, [r5, #12]
 8004c52:	065b      	lsls	r3, r3, #25
 8004c54:	f53f af12 	bmi.w	8004a7c <_vfiprintf_r+0x4c>
 8004c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5a:	e711      	b.n	8004a80 <_vfiprintf_r+0x50>
 8004c5c:	ab03      	add	r3, sp, #12
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	462a      	mov	r2, r5
 8004c62:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <_vfiprintf_r+0x258>)
 8004c64:	a904      	add	r1, sp, #16
 8004c66:	4630      	mov	r0, r6
 8004c68:	f000 f880 	bl	8004d6c <_printf_i>
 8004c6c:	e7e4      	b.n	8004c38 <_vfiprintf_r+0x208>
 8004c6e:	bf00      	nop
 8004c70:	08005260 	.word	0x08005260
 8004c74:	08005280 	.word	0x08005280
 8004c78:	08005240 	.word	0x08005240
 8004c7c:	080052a0 	.word	0x080052a0
 8004c80:	080052aa 	.word	0x080052aa
 8004c84:	00000000 	.word	0x00000000
 8004c88:	08004a0b 	.word	0x08004a0b
 8004c8c:	080052a6 	.word	0x080052a6

08004c90 <_printf_common>:
 8004c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c94:	4616      	mov	r6, r2
 8004c96:	4699      	mov	r9, r3
 8004c98:	688a      	ldr	r2, [r1, #8]
 8004c9a:	690b      	ldr	r3, [r1, #16]
 8004c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	bfb8      	it	lt
 8004ca4:	4613      	movlt	r3, r2
 8004ca6:	6033      	str	r3, [r6, #0]
 8004ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cac:	4607      	mov	r7, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	b10a      	cbz	r2, 8004cb6 <_printf_common+0x26>
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	6033      	str	r3, [r6, #0]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	0699      	lsls	r1, r3, #26
 8004cba:	bf42      	ittt	mi
 8004cbc:	6833      	ldrmi	r3, [r6, #0]
 8004cbe:	3302      	addmi	r3, #2
 8004cc0:	6033      	strmi	r3, [r6, #0]
 8004cc2:	6825      	ldr	r5, [r4, #0]
 8004cc4:	f015 0506 	ands.w	r5, r5, #6
 8004cc8:	d106      	bne.n	8004cd8 <_printf_common+0x48>
 8004cca:	f104 0a19 	add.w	sl, r4, #25
 8004cce:	68e3      	ldr	r3, [r4, #12]
 8004cd0:	6832      	ldr	r2, [r6, #0]
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	42ab      	cmp	r3, r5
 8004cd6:	dc26      	bgt.n	8004d26 <_printf_common+0x96>
 8004cd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cdc:	1e13      	subs	r3, r2, #0
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	bf18      	it	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	0692      	lsls	r2, r2, #26
 8004ce6:	d42b      	bmi.n	8004d40 <_printf_common+0xb0>
 8004ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d01e      	beq.n	8004d34 <_printf_common+0xa4>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	68e5      	ldr	r5, [r4, #12]
 8004cfa:	6832      	ldr	r2, [r6, #0]
 8004cfc:	f003 0306 	and.w	r3, r3, #6
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	bf08      	it	eq
 8004d04:	1aad      	subeq	r5, r5, r2
 8004d06:	68a3      	ldr	r3, [r4, #8]
 8004d08:	6922      	ldr	r2, [r4, #16]
 8004d0a:	bf0c      	ite	eq
 8004d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d10:	2500      	movne	r5, #0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bfc4      	itt	gt
 8004d16:	1a9b      	subgt	r3, r3, r2
 8004d18:	18ed      	addgt	r5, r5, r3
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	341a      	adds	r4, #26
 8004d1e:	42b5      	cmp	r5, r6
 8004d20:	d11a      	bne.n	8004d58 <_printf_common+0xc8>
 8004d22:	2000      	movs	r0, #0
 8004d24:	e008      	b.n	8004d38 <_printf_common+0xa8>
 8004d26:	2301      	movs	r3, #1
 8004d28:	4652      	mov	r2, sl
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	47c0      	blx	r8
 8004d30:	3001      	adds	r0, #1
 8004d32:	d103      	bne.n	8004d3c <_printf_common+0xac>
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	e7c6      	b.n	8004cce <_printf_common+0x3e>
 8004d40:	18e1      	adds	r1, r4, r3
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	2030      	movs	r0, #48	; 0x30
 8004d46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d4a:	4422      	add	r2, r4
 8004d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d54:	3302      	adds	r3, #2
 8004d56:	e7c7      	b.n	8004ce8 <_printf_common+0x58>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4638      	mov	r0, r7
 8004d60:	47c0      	blx	r8
 8004d62:	3001      	adds	r0, #1
 8004d64:	d0e6      	beq.n	8004d34 <_printf_common+0xa4>
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7d9      	b.n	8004d1e <_printf_common+0x8e>
	...

08004d6c <_printf_i>:
 8004d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	7e0f      	ldrb	r7, [r1, #24]
 8004d72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d74:	2f78      	cmp	r7, #120	; 0x78
 8004d76:	4691      	mov	r9, r2
 8004d78:	4680      	mov	r8, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	469a      	mov	sl, r3
 8004d7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d82:	d807      	bhi.n	8004d94 <_printf_i+0x28>
 8004d84:	2f62      	cmp	r7, #98	; 0x62
 8004d86:	d80a      	bhi.n	8004d9e <_printf_i+0x32>
 8004d88:	2f00      	cmp	r7, #0
 8004d8a:	f000 80d8 	beq.w	8004f3e <_printf_i+0x1d2>
 8004d8e:	2f58      	cmp	r7, #88	; 0x58
 8004d90:	f000 80a3 	beq.w	8004eda <_printf_i+0x16e>
 8004d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d9c:	e03a      	b.n	8004e14 <_printf_i+0xa8>
 8004d9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004da2:	2b15      	cmp	r3, #21
 8004da4:	d8f6      	bhi.n	8004d94 <_printf_i+0x28>
 8004da6:	a101      	add	r1, pc, #4	; (adr r1, 8004dac <_printf_i+0x40>)
 8004da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e19 	.word	0x08004e19
 8004db4:	08004d95 	.word	0x08004d95
 8004db8:	08004d95 	.word	0x08004d95
 8004dbc:	08004d95 	.word	0x08004d95
 8004dc0:	08004d95 	.word	0x08004d95
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004d95 	.word	0x08004d95
 8004dcc:	08004d95 	.word	0x08004d95
 8004dd0:	08004d95 	.word	0x08004d95
 8004dd4:	08004d95 	.word	0x08004d95
 8004dd8:	08004f25 	.word	0x08004f25
 8004ddc:	08004e49 	.word	0x08004e49
 8004de0:	08004f07 	.word	0x08004f07
 8004de4:	08004d95 	.word	0x08004d95
 8004de8:	08004d95 	.word	0x08004d95
 8004dec:	08004f47 	.word	0x08004f47
 8004df0:	08004d95 	.word	0x08004d95
 8004df4:	08004e49 	.word	0x08004e49
 8004df8:	08004d95 	.word	0x08004d95
 8004dfc:	08004d95 	.word	0x08004d95
 8004e00:	08004f0f 	.word	0x08004f0f
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	602a      	str	r2, [r5, #0]
 8004e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0a3      	b.n	8004f60 <_printf_i+0x1f4>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	6829      	ldr	r1, [r5, #0]
 8004e1c:	0606      	lsls	r6, r0, #24
 8004e1e:	f101 0304 	add.w	r3, r1, #4
 8004e22:	d50a      	bpl.n	8004e3a <_printf_i+0xce>
 8004e24:	680e      	ldr	r6, [r1, #0]
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	2e00      	cmp	r6, #0
 8004e2a:	da03      	bge.n	8004e34 <_printf_i+0xc8>
 8004e2c:	232d      	movs	r3, #45	; 0x2d
 8004e2e:	4276      	negs	r6, r6
 8004e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e34:	485e      	ldr	r0, [pc, #376]	; (8004fb0 <_printf_i+0x244>)
 8004e36:	230a      	movs	r3, #10
 8004e38:	e019      	b.n	8004e6e <_printf_i+0x102>
 8004e3a:	680e      	ldr	r6, [r1, #0]
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e42:	bf18      	it	ne
 8004e44:	b236      	sxthne	r6, r6
 8004e46:	e7ef      	b.n	8004e28 <_printf_i+0xbc>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	1d19      	adds	r1, r3, #4
 8004e4e:	6029      	str	r1, [r5, #0]
 8004e50:	0601      	lsls	r1, r0, #24
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0xec>
 8004e54:	681e      	ldr	r6, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <_printf_i+0xf2>
 8004e58:	0646      	lsls	r6, r0, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0xe8>
 8004e5c:	881e      	ldrh	r6, [r3, #0]
 8004e5e:	4854      	ldr	r0, [pc, #336]	; (8004fb0 <_printf_i+0x244>)
 8004e60:	2f6f      	cmp	r7, #111	; 0x6f
 8004e62:	bf0c      	ite	eq
 8004e64:	2308      	moveq	r3, #8
 8004e66:	230a      	movne	r3, #10
 8004e68:	2100      	movs	r1, #0
 8004e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6e:	6865      	ldr	r5, [r4, #4]
 8004e70:	60a5      	str	r5, [r4, #8]
 8004e72:	2d00      	cmp	r5, #0
 8004e74:	bfa2      	ittt	ge
 8004e76:	6821      	ldrge	r1, [r4, #0]
 8004e78:	f021 0104 	bicge.w	r1, r1, #4
 8004e7c:	6021      	strge	r1, [r4, #0]
 8004e7e:	b90e      	cbnz	r6, 8004e84 <_printf_i+0x118>
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	d04d      	beq.n	8004f20 <_printf_i+0x1b4>
 8004e84:	4615      	mov	r5, r2
 8004e86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e8e:	5dc7      	ldrb	r7, [r0, r7]
 8004e90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e94:	4637      	mov	r7, r6
 8004e96:	42bb      	cmp	r3, r7
 8004e98:	460e      	mov	r6, r1
 8004e9a:	d9f4      	bls.n	8004e86 <_printf_i+0x11a>
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d10b      	bne.n	8004eb8 <_printf_i+0x14c>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	07de      	lsls	r6, r3, #31
 8004ea4:	d508      	bpl.n	8004eb8 <_printf_i+0x14c>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6861      	ldr	r1, [r4, #4]
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	bfde      	ittt	le
 8004eae:	2330      	movle	r3, #48	; 0x30
 8004eb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eb8:	1b52      	subs	r2, r2, r5
 8004eba:	6122      	str	r2, [r4, #16]
 8004ebc:	f8cd a000 	str.w	sl, [sp]
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	aa03      	add	r2, sp, #12
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fee2 	bl	8004c90 <_printf_common>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d14c      	bne.n	8004f6a <_printf_i+0x1fe>
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	b004      	add	sp, #16
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	4835      	ldr	r0, [pc, #212]	; (8004fb0 <_printf_i+0x244>)
 8004edc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ee0:	6829      	ldr	r1, [r5, #0]
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee8:	6029      	str	r1, [r5, #0]
 8004eea:	061d      	lsls	r5, r3, #24
 8004eec:	d514      	bpl.n	8004f18 <_printf_i+0x1ac>
 8004eee:	07df      	lsls	r7, r3, #31
 8004ef0:	bf44      	itt	mi
 8004ef2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef6:	6023      	strmi	r3, [r4, #0]
 8004ef8:	b91e      	cbnz	r6, 8004f02 <_printf_i+0x196>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f023 0320 	bic.w	r3, r3, #32
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	2310      	movs	r3, #16
 8004f04:	e7b0      	b.n	8004e68 <_printf_i+0xfc>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	f043 0320 	orr.w	r3, r3, #32
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	2378      	movs	r3, #120	; 0x78
 8004f10:	4828      	ldr	r0, [pc, #160]	; (8004fb4 <_printf_i+0x248>)
 8004f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f16:	e7e3      	b.n	8004ee0 <_printf_i+0x174>
 8004f18:	0659      	lsls	r1, r3, #25
 8004f1a:	bf48      	it	mi
 8004f1c:	b2b6      	uxthmi	r6, r6
 8004f1e:	e7e6      	b.n	8004eee <_printf_i+0x182>
 8004f20:	4615      	mov	r5, r2
 8004f22:	e7bb      	b.n	8004e9c <_printf_i+0x130>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	6826      	ldr	r6, [r4, #0]
 8004f28:	6961      	ldr	r1, [r4, #20]
 8004f2a:	1d18      	adds	r0, r3, #4
 8004f2c:	6028      	str	r0, [r5, #0]
 8004f2e:	0635      	lsls	r5, r6, #24
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	d501      	bpl.n	8004f38 <_printf_i+0x1cc>
 8004f34:	6019      	str	r1, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <_printf_i+0x1d2>
 8004f38:	0670      	lsls	r0, r6, #25
 8004f3a:	d5fb      	bpl.n	8004f34 <_printf_i+0x1c8>
 8004f3c:	8019      	strh	r1, [r3, #0]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	4615      	mov	r5, r2
 8004f44:	e7ba      	b.n	8004ebc <_printf_i+0x150>
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	1d1a      	adds	r2, r3, #4
 8004f4a:	602a      	str	r2, [r5, #0]
 8004f4c:	681d      	ldr	r5, [r3, #0]
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7fb f95c 	bl	8000210 <memchr>
 8004f58:	b108      	cbz	r0, 8004f5e <_printf_i+0x1f2>
 8004f5a:	1b40      	subs	r0, r0, r5
 8004f5c:	6060      	str	r0, [r4, #4]
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	2300      	movs	r3, #0
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f68:	e7a8      	b.n	8004ebc <_printf_i+0x150>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4640      	mov	r0, r8
 8004f72:	47d0      	blx	sl
 8004f74:	3001      	adds	r0, #1
 8004f76:	d0ab      	beq.n	8004ed0 <_printf_i+0x164>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	079b      	lsls	r3, r3, #30
 8004f7c:	d413      	bmi.n	8004fa6 <_printf_i+0x23a>
 8004f7e:	68e0      	ldr	r0, [r4, #12]
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	4298      	cmp	r0, r3
 8004f84:	bfb8      	it	lt
 8004f86:	4618      	movlt	r0, r3
 8004f88:	e7a4      	b.n	8004ed4 <_printf_i+0x168>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	47d0      	blx	sl
 8004f94:	3001      	adds	r0, #1
 8004f96:	d09b      	beq.n	8004ed0 <_printf_i+0x164>
 8004f98:	3501      	adds	r5, #1
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	9903      	ldr	r1, [sp, #12]
 8004f9e:	1a5b      	subs	r3, r3, r1
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dcf2      	bgt.n	8004f8a <_printf_i+0x21e>
 8004fa4:	e7eb      	b.n	8004f7e <_printf_i+0x212>
 8004fa6:	2500      	movs	r5, #0
 8004fa8:	f104 0619 	add.w	r6, r4, #25
 8004fac:	e7f5      	b.n	8004f9a <_printf_i+0x22e>
 8004fae:	bf00      	nop
 8004fb0:	080052b1 	.word	0x080052b1
 8004fb4:	080052c2 	.word	0x080052c2

08004fb8 <_sbrk_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d06      	ldr	r5, [pc, #24]	; (8004fd4 <_sbrk_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	f7fb fec2 	bl	8000d4c <_sbrk>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_sbrk_r+0x1a>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_sbrk_r+0x1a>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000138 	.word	0x20000138

08004fd8 <__sread>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	460c      	mov	r4, r1
 8004fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe0:	f000 f8a0 	bl	8005124 <_read_r>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	bfab      	itete	ge
 8004fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fea:	89a3      	ldrhlt	r3, [r4, #12]
 8004fec:	181b      	addge	r3, r3, r0
 8004fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ff2:	bfac      	ite	ge
 8004ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ff6:	81a3      	strhlt	r3, [r4, #12]
 8004ff8:	bd10      	pop	{r4, pc}

08004ffa <__swrite>:
 8004ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	461f      	mov	r7, r3
 8005000:	898b      	ldrh	r3, [r1, #12]
 8005002:	05db      	lsls	r3, r3, #23
 8005004:	4605      	mov	r5, r0
 8005006:	460c      	mov	r4, r1
 8005008:	4616      	mov	r6, r2
 800500a:	d505      	bpl.n	8005018 <__swrite+0x1e>
 800500c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005010:	2302      	movs	r3, #2
 8005012:	2200      	movs	r2, #0
 8005014:	f000 f868 	bl	80050e8 <_lseek_r>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	4632      	mov	r2, r6
 8005026:	463b      	mov	r3, r7
 8005028:	4628      	mov	r0, r5
 800502a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800502e:	f000 b817 	b.w	8005060 <_write_r>

08005032 <__sseek>:
 8005032:	b510      	push	{r4, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503a:	f000 f855 	bl	80050e8 <_lseek_r>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	bf15      	itete	ne
 8005044:	6560      	strne	r0, [r4, #84]	; 0x54
 8005046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800504a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800504e:	81a3      	strheq	r3, [r4, #12]
 8005050:	bf18      	it	ne
 8005052:	81a3      	strhne	r3, [r4, #12]
 8005054:	bd10      	pop	{r4, pc}

08005056 <__sclose>:
 8005056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505a:	f000 b813 	b.w	8005084 <_close_r>
	...

08005060 <_write_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d07      	ldr	r5, [pc, #28]	; (8005080 <_write_r+0x20>)
 8005064:	4604      	mov	r4, r0
 8005066:	4608      	mov	r0, r1
 8005068:	4611      	mov	r1, r2
 800506a:	2200      	movs	r2, #0
 800506c:	602a      	str	r2, [r5, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	f7fb fe1b 	bl	8000caa <_write>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_write_r+0x1e>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_write_r+0x1e>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	20000138 	.word	0x20000138

08005084 <_close_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d06      	ldr	r5, [pc, #24]	; (80050a0 <_close_r+0x1c>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fb fe27 	bl	8000ce2 <_close>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_close_r+0x1a>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_close_r+0x1a>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20000138 	.word	0x20000138

080050a4 <_fstat_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4d07      	ldr	r5, [pc, #28]	; (80050c4 <_fstat_r+0x20>)
 80050a8:	2300      	movs	r3, #0
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	f7fb fe22 	bl	8000cfa <_fstat>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d102      	bne.n	80050c0 <_fstat_r+0x1c>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	b103      	cbz	r3, 80050c0 <_fstat_r+0x1c>
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20000138 	.word	0x20000138

080050c8 <_isatty_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d06      	ldr	r5, [pc, #24]	; (80050e4 <_isatty_r+0x1c>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fb fe21 	bl	8000d1a <_isatty>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_isatty_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_isatty_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000138 	.word	0x20000138

080050e8 <_lseek_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	; (8005108 <_lseek_r+0x20>)
 80050ec:	4604      	mov	r4, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fb fe1a 	bl	8000d30 <_lseek>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_lseek_r+0x1e>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_lseek_r+0x1e>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000138 	.word	0x20000138

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_lock+0x8>)
 800510e:	f7ff bb1d 	b.w	800474c <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	2000012c 	.word	0x2000012c

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_unlock+0x8>)
 800511a:	f7ff bb18 	b.w	800474e <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	2000012c 	.word	0x2000012c

08005124 <_read_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_read_r+0x20>)
 8005128:	4604      	mov	r4, r0
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	2200      	movs	r2, #0
 8005130:	602a      	str	r2, [r5, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f7fb fd9c 	bl	8000c70 <_read>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_read_r+0x1e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_read_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	20000138 	.word	0x20000138

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
