
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004800  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004800  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5e5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d90  00000000  00000000  0002c685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224e3  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e543  00000000  00000000  00051cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc011  00000000  00000000  0006023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c24f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  0012c2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800465c 	.word	0x0800465c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800465c 	.word	0x0800465c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f000 fe7c 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fcda 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fccc 	bl	8001014 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 fe4f 	bl	8001370 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 f996 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fc64 	bl	8001014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 800078a:	f107 010f 	add.w	r1, r7, #15
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_putchar+0x28>)
 8000794:	f002 fbb7 	bl	8002f06 <HAL_UART_Transmit>
	return ch;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80007ae:	230f      	movs	r3, #15
 80007b0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2132      	movs	r1, #50	; 0x32
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <who_am_i_sensors+0xc0>)
 80007c0:	f000 ff1a 	bl	80015f8 <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <who_am_i_sensors+0xc4>)
 80007d0:	f002 ffc6 	bl	8003760 <puts>
 80007d4:	e017      	b.n	8000806 <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <who_am_i_sensors+0xc0>)
 80007e4:	f001 f806 	bl	80017f4 <HAL_I2C_Master_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <who_am_i_sensors+0xc8>)
 80007f4:	f002 ffb4 	bl	8003760 <puts>
 80007f8:	e005      	b.n	8000806 <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b33      	cmp	r3, #51	; 0x33
 80007fe:	d102      	bne.n	8000806 <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <who_am_i_sensors+0xcc>)
 8000802:	f002 ff27 	bl	8003654 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000806:	234f      	movs	r3, #79	; 0x4f
 8000808:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	213c      	movs	r1, #60	; 0x3c
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <who_am_i_sensors+0xc0>)
 8000818:	f000 feee 	bl	80015f8 <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <who_am_i_sensors+0xc4>)
 8000828:	f002 ff9a 	bl	8003760 <puts>
 800082c:	e017      	b.n	800085e <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <who_am_i_sensors+0xc0>)
 800083c:	f000 ffda 	bl	80017f4 <HAL_I2C_Master_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <who_am_i_sensors+0xc8>)
 800084c:	f002 ff88 	bl	8003760 <puts>
 8000850:	e005      	b.n	800085e <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d102      	bne.n	800085e <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <who_am_i_sensors+0xd0>)
 800085a:	f002 fefb 	bl	8003654 <iprintf>
    	}
    }
  }
}
 800085e:	bf00      	nop
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	08004674 	.word	0x08004674
 8000870:	08004680 	.word	0x08004680
 8000874:	0800468c 	.word	0x0800468c
 8000878:	080046ac 	.word	0x080046ac

0800087c <reset_acc>:

int reset_acc(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  
 8000882:	2324      	movs	r3, #36	; 0x24
 8000884:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  //Data de reset
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	2132      	movs	r1, #50	; 0x32
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <reset_acc+0x80>)
 8000898:	f000 feae 	bl	80015f8 <HAL_I2C_Master_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <reset_acc+0x30>
		printf("Error Tx\r\n");
 80008a6:	4816      	ldr	r0, [pc, #88]	; (8000900 <reset_acc+0x84>)
 80008a8:	f002 ff5a 	bl	8003760 <puts>
	}
	                                                                             //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80008ac:	1d3a      	adds	r2, r7, #4
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2132      	movs	r1, #50	; 0x32
 80008b8:	4810      	ldr	r0, [pc, #64]	; (80008fc <reset_acc+0x80>)
 80008ba:	f000 fe9d 	bl	80015f8 <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <reset_acc+0x54>
		printf("Error Tx\r\n");
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <reset_acc+0x84>)
 80008ca:	f002 ff49 	bl	8003760 <puts>
 80008ce:	e010      	b.n	80008f2 <reset_acc+0x76>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	2132      	movs	r1, #50	; 0x32
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <reset_acc+0x80>)
 80008de:	f000 ff89 	bl	80017f4 <HAL_I2C_Master_Receive>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <reset_acc+0x76>
	      printf("Error Rx\r\n");
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <reset_acc+0x88>)
 80008ee:	f002 ff37 	bl	8003760 <puts>
	    }
  }
}
 80008f2:	bf00      	nop
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	08004674 	.word	0x08004674
 8000904:	08004680 	.word	0x08004680

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 fa2a 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f80c 	bl	800092c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f7ff fe4e 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000918:	f000 f988 	bl	8000c2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800091c:	f7ff feb8 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  who_am_i_sensors();
 8000920:	f7ff ff42 	bl	80007a8 <who_am_i_sensors>
	  reset_acc();
 8000924:	f7ff ffaa 	bl	800087c <reset_acc>
	  who_am_i_sensors();
 8000928:	e7fa      	b.n	8000920 <main+0x18>
	...

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fe82 	bl	8003644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <SystemClock_Config+0xd4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <SystemClock_Config+0xd4>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <SystemClock_Config+0xd4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <SystemClock_Config+0xd8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <SystemClock_Config+0xd8>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <SystemClock_Config+0xd8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000994:	2310      	movs	r3, #16
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009a0:	2310      	movs	r3, #16
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 ffb8 	bl	8002930 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009c6:	f000 f81f 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2102      	movs	r1, #2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fc58 	bl	800229c <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009f2:	f000 f809 	bl	8000a08 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	; 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8000a10:	4801      	ldr	r0, [pc, #4]	; (8000a18 <Error_Handler+0x10>)
 8000a12:	f002 fe1f 	bl	8003654 <iprintf>
  {
 8000a16:	e7fb      	b.n	8000a10 <Error_Handler+0x8>
 8000a18:	080046c4 	.word	0x080046c4

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 faa6 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f9a6 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
	}

return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e009      	b.n	8000b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe31 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf1      	blt.n	8000b0c <_write+0x12>
	}
	return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:

int _close(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_isatty>:

int _isatty(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f002 fd10 	bl	80035f0 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20020000 	.word	0x20020000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200000e0 	.word	0x200000e0
 8000c04:	20000140 	.word	0x20000140

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART2_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f002 f902 	bl	8002e6c <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f7ff fecb 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000e4 	.word	0x200000e4
 8000c7c:	40004400 	.word	0x40004400

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12b      	bne.n	8000cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cea:	2307      	movs	r3, #7
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0x8c>)
 8000cf6:	f000 f98d 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ff65 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 fc5d 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fde1 	bl	8000908 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d54:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8000d58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d5c:	2000013c 	.word	0x2000013c

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f90d 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe40 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f917 	bl	8000ffa <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f8ed 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000128 	.word	0x20000128

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000128 	.word	0x20000128

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff47 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5c 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb0 	bl	8000f68 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e165      	b.n	80012fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 8154 	bne.w	80012f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80ae 	beq.w	80012f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x300>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <HAL_GPIO_Init+0x300>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_GPIO_Init+0x300>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_GPIO_Init+0x304>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x308>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x20a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x206>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	; (8001334 <HAL_GPIO_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x202>
 8001212:	2306      	movs	r3, #6
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001216:	2307      	movs	r3, #7
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x304>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a31      	ldr	r2, [pc, #196]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <HAL_GPIO_Init+0x324>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x324>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_GPIO_Init+0x324>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_GPIO_Init+0x324>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_GPIO_Init+0x324>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_GPIO_Init+0x324>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae96 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e12b      	b.n	80015da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff f9a8 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2224      	movs	r2, #36	; 0x24
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d4:	f001 f854 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a81      	ldr	r2, [pc, #516]	; (80015e4 <HAL_I2C_Init+0x274>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d807      	bhi.n	80013f4 <HAL_I2C_Init+0x84>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a80      	ldr	r2, [pc, #512]	; (80015e8 <HAL_I2C_Init+0x278>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	e006      	b.n	8001402 <HAL_I2C_Init+0x92>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a7d      	ldr	r2, [pc, #500]	; (80015ec <HAL_I2C_Init+0x27c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	bf94      	ite	ls
 80013fc:	2301      	movls	r3, #1
 80013fe:	2300      	movhi	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0e7      	b.n	80015da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4a78      	ldr	r2, [pc, #480]	; (80015f0 <HAL_I2C_Init+0x280>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	430a      	orrs	r2, r1
 8001428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a6a      	ldr	r2, [pc, #424]	; (80015e4 <HAL_I2C_Init+0x274>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d802      	bhi.n	8001444 <HAL_I2C_Init+0xd4>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3301      	adds	r3, #1
 8001442:	e009      	b.n	8001458 <HAL_I2C_Init+0xe8>
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a69      	ldr	r2, [pc, #420]	; (80015f4 <HAL_I2C_Init+0x284>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	3301      	adds	r3, #1
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	430b      	orrs	r3, r1
 800145e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800146a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	495c      	ldr	r1, [pc, #368]	; (80015e4 <HAL_I2C_Init+0x274>)
 8001474:	428b      	cmp	r3, r1
 8001476:	d819      	bhi.n	80014ac <HAL_I2C_Init+0x13c>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e59      	subs	r1, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fbb1 f3f3 	udiv	r3, r1, r3
 8001486:	1c59      	adds	r1, r3, #1
 8001488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800148c:	400b      	ands	r3, r1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00a      	beq.n	80014a8 <HAL_I2C_Init+0x138>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e59      	subs	r1, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a6:	e051      	b.n	800154c <HAL_I2C_Init+0x1dc>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e04f      	b.n	800154c <HAL_I2C_Init+0x1dc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d111      	bne.n	80014d8 <HAL_I2C_Init+0x168>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	440b      	add	r3, r1
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e012      	b.n	80014fe <HAL_I2C_Init+0x18e>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e58      	subs	r0, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	0099      	lsls	r1, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Init+0x196>
 8001502:	2301      	movs	r3, #1
 8001504:	e022      	b.n	800154c <HAL_I2C_Init+0x1dc>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10e      	bne.n	800152c <HAL_I2C_Init+0x1bc>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e58      	subs	r0, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6859      	ldr	r1, [r3, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	440b      	add	r3, r1
 800151c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001520:	3301      	adds	r3, #1
 8001522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152a:	e00f      	b.n	800154c <HAL_I2C_Init+0x1dc>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1e58      	subs	r0, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	0099      	lsls	r1, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	6809      	ldr	r1, [r1, #0]
 8001550:	4313      	orrs	r3, r2
 8001552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800157a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6911      	ldr	r1, [r2, #16]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68d2      	ldr	r2, [r2, #12]
 8001586:	4311      	orrs	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	000186a0 	.word	0x000186a0
 80015e8:	001e847f 	.word	0x001e847f
 80015ec:	003d08ff 	.word	0x003d08ff
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	10624dd3 	.word	0x10624dd3

080015f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	817b      	strh	r3, [r7, #10]
 8001608:	4613      	mov	r3, r2
 800160a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff fc10 	bl	8000e30 <HAL_GetTick>
 8001610:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b20      	cmp	r3, #32
 800161c:	f040 80e0 	bne.w	80017e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2319      	movs	r3, #25
 8001626:	2201      	movs	r2, #1
 8001628:	4970      	ldr	r1, [pc, #448]	; (80017ec <HAL_I2C_Master_Transmit+0x1f4>)
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 fc58 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001636:	2302      	movs	r3, #2
 8001638:	e0d3      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_I2C_Master_Transmit+0x50>
 8001644:	2302      	movs	r3, #2
 8001646:	e0cc      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d007      	beq.n	800166e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2221      	movs	r2, #33	; 0x21
 8001682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2210      	movs	r2, #16
 800168a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	893a      	ldrh	r2, [r7, #8]
 800169e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	6a3a      	ldr	r2, [r7, #32]
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fac2 	bl	8001c40 <I2C_MasterRequestWrite>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e08d      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016dc:	e066      	b.n	80017ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fcd2 	bl	800208c <I2C_WaitOnTXEFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06b      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b04      	cmp	r3, #4
 8001746:	d11b      	bne.n	8001780 <HAL_I2C_Master_Transmit+0x188>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d017      	beq.n	8001780 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	6a39      	ldr	r1, [r7, #32]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fcc2 	bl	800210e <I2C_WaitOnBTFFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e01a      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d194      	bne.n	80016de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e000      	b.n	80017e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	00100002 	.word	0x00100002
 80017f0:	ffff0000 	.word	0xffff0000

080017f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	461a      	mov	r2, r3
 8001800:	460b      	mov	r3, r1
 8001802:	817b      	strh	r3, [r7, #10]
 8001804:	4613      	mov	r3, r2
 8001806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fb12 	bl	8000e30 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b20      	cmp	r3, #32
 8001818:	f040 820b 	bne.w	8001c32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2319      	movs	r3, #25
 8001822:	2201      	movs	r2, #1
 8001824:	497c      	ldr	r1, [pc, #496]	; (8001a18 <HAL_I2C_Master_Receive+0x224>)
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fb5a 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
 8001834:	e1fe      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2C_Master_Receive+0x50>
 8001840:	2302      	movs	r3, #2
 8001842:	e1f7      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d007      	beq.n	800186a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2222      	movs	r2, #34	; 0x22
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2210      	movs	r2, #16
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_I2C_Master_Receive+0x228>)
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fa46 	bl	8001d44 <I2C_MasterRequestRead>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1b8      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d113      	bne.n	80018f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e18c      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11b      	bne.n	8001932 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e16c      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b02      	cmp	r3, #2
 8001938:	d11b      	bne.n	8001972 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	e14c      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001998:	e138      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199e:	2b03      	cmp	r3, #3
 80019a0:	f200 80f1 	bhi.w	8001b86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d123      	bne.n	80019f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 fbed 	bl	8002190 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e139      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019f2:	e10b      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d14e      	bne.n	8001a9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	2200      	movs	r2, #0
 8001a04:	4906      	ldr	r1, [pc, #24]	; (8001a20 <HAL_I2C_Master_Receive+0x22c>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa6a 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e10e      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
 8001a16:	bf00      	nop
 8001a18:	00100002 	.word	0x00100002
 8001a1c:	ffff0000 	.word	0xffff0000
 8001a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a98:	e0b8      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4966      	ldr	r1, [pc, #408]	; (8001c3c <HAL_I2C_Master_Receive+0x448>)
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fa1b 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0bf      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afc:	2200      	movs	r2, #0
 8001afe:	494f      	ldr	r1, [pc, #316]	; (8001c3c <HAL_I2C_Master_Receive+0x448>)
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f9ed 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e091      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b84:	e042      	b.n	8001c0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fb00 	bl	8002190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e04c      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d118      	bne.n	8001c0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f aec2 	bne.w	800199a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	00010004 	.word	0x00010004

08001c40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d006      	beq.n	8001c6a <I2C_MasterRequestWrite+0x2a>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d003      	beq.n	8001c6a <I2C_MasterRequestWrite+0x2a>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c68:	d108      	bne.n	8001c7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e00b      	b.n	8001c94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d107      	bne.n	8001c94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f91d 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00d      	beq.n	8001cc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cba:	d103      	bne.n	8001cc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e035      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd0:	d108      	bne.n	8001ce4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	e01b      	b.n	8001d1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	11db      	asrs	r3, r3, #7
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 0306 	and.w	r3, r3, #6
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f063 030f 	orn	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <I2C_MasterRequestWrite+0xfc>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f943 	bl	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e010      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <I2C_MasterRequestWrite+0x100>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f933 	bl	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	00010008 	.word	0x00010008
 8001d40:	00010002 	.word	0x00010002

08001d44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d006      	beq.n	8001d7e <I2C_MasterRequestRead+0x3a>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d003      	beq.n	8001d7e <I2C_MasterRequestRead+0x3a>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d7c:	d108      	bne.n	8001d90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e00b      	b.n	8001da8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	2b11      	cmp	r3, #17
 8001d96:	d107      	bne.n	8001da8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f893 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00d      	beq.n	8001ddc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dce:	d103      	bne.n	8001dd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e079      	b.n	8001ed0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001de4:	d108      	bne.n	8001df8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	e05f      	b.n	8001eb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	11db      	asrs	r3, r3, #7
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 0306 	and.w	r3, r3, #6
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f063 030f 	orn	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4930      	ldr	r1, [pc, #192]	; (8001ed8 <I2C_MasterRequestRead+0x194>)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f8b9 	bl	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e054      	b.n	8001ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4929      	ldr	r1, [pc, #164]	; (8001edc <I2C_MasterRequestRead+0x198>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f8a9 	bl	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e044      	b.n	8001ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f831 	bl	8001ee0 <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d103      	bne.n	8001e9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e017      	b.n	8001ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	11db      	asrs	r3, r3, #7
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 0306 	and.w	r3, r3, #6
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f063 030e 	orn	r3, r3, #14
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <I2C_MasterRequestRead+0x198>)
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f865 	bl	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00010008 	.word	0x00010008
 8001edc:	00010002 	.word	0x00010002

08001ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef0:	e025      	b.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d021      	beq.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7fe ff99 	bl	8000e30 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d116      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e023      	b.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10d      	bne.n	8001f64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	e00c      	b.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf0c      	ite	eq
 8001f76:	2301      	moveq	r3, #1
 8001f78:	2300      	movne	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d0b6      	beq.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f9c:	e051      	b.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fac:	d123      	bne.n	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0204 	orr.w	r2, r3, #4
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e046      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d021      	beq.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7fe ff17 	bl	8000e30 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d116      	bne.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e020      	b.n	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10c      	bne.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e00b      	b.n	800207e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d18d      	bne.n	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002098:	e02d      	b.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f8ce 	bl	800223c <I2C_IsAcknowledgeFailed>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e02d      	b.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d021      	beq.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b2:	f7fe febd 	bl	8000e30 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d302      	bcc.n	80020c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d116      	bne.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f043 0220 	orr.w	r2, r3, #32
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e007      	b.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d1ca      	bne.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800211a:	e02d      	b.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f88d 	bl	800223c <I2C_IsAcknowledgeFailed>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e02d      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d021      	beq.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002134:	f7fe fe7c 	bl	8000e30 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	d302      	bcc.n	800214a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d1ca      	bne.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800219c:	e042      	b.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d119      	bne.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0210 	mvn.w	r2, #16
 80021b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e029      	b.n	8002234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e0:	f7fe fe26 	bl	8000e30 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e007      	b.n	8002234 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d1b5      	bne.n	800219e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d11b      	bne.n	800228c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800225c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0cc      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b68      	ldr	r3, [pc, #416]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d90c      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b63      	ldr	r3, [pc, #396]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0b8      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f0:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002308:	4b53      	ldr	r3, [pc, #332]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a52      	ldr	r2, [pc, #328]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4b50      	ldr	r3, [pc, #320]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	494d      	ldr	r1, [pc, #308]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d044      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d119      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e07f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d003      	beq.n	800235a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	2b03      	cmp	r3, #3
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e067      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4934      	ldr	r1, [pc, #208]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe fd50 	bl	8000e30 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fd4c 	bl	8000e30 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e04f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20c      	bcs.n	80023e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e032      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4916      	ldr	r1, [pc, #88]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	490e      	ldr	r1, [pc, #56]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002422:	f000 f855 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002426:	4602      	mov	r2, r0
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	490a      	ldr	r1, [pc, #40]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	5ccb      	ldrb	r3, [r1, r3]
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fcb0 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00
 8002458:	40023800 	.word	0x40023800
 800245c:	080046d0 	.word	0x080046d0
 8002460:	20000000 	.word	0x20000000
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	080046e0 	.word	0x080046e0

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffdc 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	080046e0 	.word	0x080046e0

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b0ae      	sub	sp, #184	; 0xb8
 80024d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f6:	4bcb      	ldr	r3, [pc, #812]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	f200 8206 	bhi.w	8002910 <HAL_RCC_GetSysClockFreq+0x440>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	08002541 	.word	0x08002541
 8002510:	08002911 	.word	0x08002911
 8002514:	08002911 	.word	0x08002911
 8002518:	08002911 	.word	0x08002911
 800251c:	08002549 	.word	0x08002549
 8002520:	08002911 	.word	0x08002911
 8002524:	08002911 	.word	0x08002911
 8002528:	08002911 	.word	0x08002911
 800252c:	08002551 	.word	0x08002551
 8002530:	08002911 	.word	0x08002911
 8002534:	08002911 	.word	0x08002911
 8002538:	08002911 	.word	0x08002911
 800253c:	08002741 	.word	0x08002741
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4bb9      	ldr	r3, [pc, #740]	; (8002828 <HAL_RCC_GetSysClockFreq+0x358>)
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002546:	e1e7      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4bb8      	ldr	r3, [pc, #736]	; (800282c <HAL_RCC_GetSysClockFreq+0x35c>)
 800254a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800254e:	e1e3      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4bb4      	ldr	r3, [pc, #720]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255c:	4bb1      	ldr	r3, [pc, #708]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d071      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002568:	4bae      	ldr	r3, [pc, #696]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	2200      	movs	r2, #0
 8002570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002574:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800258a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800258e:	4622      	mov	r2, r4
 8002590:	462b      	mov	r3, r5
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4621      	mov	r1, r4
 80025a8:	1a51      	subs	r1, r2, r1
 80025aa:	6439      	str	r1, [r7, #64]	; 0x40
 80025ac:	4629      	mov	r1, r5
 80025ae:	eb63 0301 	sbc.w	r3, r3, r1
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025c0:	4649      	mov	r1, r9
 80025c2:	018b      	lsls	r3, r1, #6
 80025c4:	4641      	mov	r1, r8
 80025c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ca:	4641      	mov	r1, r8
 80025cc:	018a      	lsls	r2, r1, #6
 80025ce:	4641      	mov	r1, r8
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025d4:	4649      	mov	r1, r9
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025e8:	4649      	mov	r1, r9
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4641      	mov	r1, r8
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4622      	mov	r2, r4
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
 8002602:	462b      	mov	r3, r5
 8002604:	460a      	mov	r2, r1
 8002606:	eb42 0303 	adc.w	r3, r2, r3
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002618:	4629      	mov	r1, r5
 800261a:	024b      	lsls	r3, r1, #9
 800261c:	4621      	mov	r1, r4
 800261e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002622:	4621      	mov	r1, r4
 8002624:	024a      	lsls	r2, r1, #9
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002638:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800263c:	f7fd fe38 	bl	80002b0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800264a:	e067      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264c:	4b75      	ldr	r3, [pc, #468]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002658:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800265c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002664:	67bb      	str	r3, [r7, #120]	; 0x78
 8002666:	2300      	movs	r3, #0
 8002668:	67fb      	str	r3, [r7, #124]	; 0x7c
 800266a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800266e:	4622      	mov	r2, r4
 8002670:	462b      	mov	r3, r5
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002680:	0150      	lsls	r0, r2, #5
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4621      	mov	r1, r4
 8002688:	1a51      	subs	r1, r2, r1
 800268a:	62b9      	str	r1, [r7, #40]	; 0x28
 800268c:	4629      	mov	r1, r5
 800268e:	eb63 0301 	sbc.w	r3, r3, r1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026a0:	4649      	mov	r1, r9
 80026a2:	018b      	lsls	r3, r1, #6
 80026a4:	4641      	mov	r1, r8
 80026a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026aa:	4641      	mov	r1, r8
 80026ac:	018a      	lsls	r2, r1, #6
 80026ae:	4641      	mov	r1, r8
 80026b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b4:	4649      	mov	r1, r9
 80026b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ce:	4692      	mov	sl, r2
 80026d0:	469b      	mov	fp, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	eb1a 0303 	adds.w	r3, sl, r3
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	462b      	mov	r3, r5
 80026dc:	eb4b 0303 	adc.w	r3, fp, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026ee:	4629      	mov	r1, r5
 80026f0:	028b      	lsls	r3, r1, #10
 80026f2:	4621      	mov	r1, r4
 80026f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f8:	4621      	mov	r1, r4
 80026fa:	028a      	lsls	r2, r1, #10
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002704:	2200      	movs	r2, #0
 8002706:	673b      	str	r3, [r7, #112]	; 0x70
 8002708:	677a      	str	r2, [r7, #116]	; 0x74
 800270a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800270e:	f7fd fdcf 	bl	80002b0 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4613      	mov	r3, r2
 8002718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800272e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800273e:	e0eb      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d06b      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCC_GetSysClockFreq+0x354>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	2200      	movs	r2, #0
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
 8002762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276a:	663b      	str	r3, [r7, #96]	; 0x60
 800276c:	2300      	movs	r3, #0
 800276e:	667b      	str	r3, [r7, #100]	; 0x64
 8002770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002774:	4622      	mov	r2, r4
 8002776:	462b      	mov	r3, r5
 8002778:	f04f 0000 	mov.w	r0, #0
 800277c:	f04f 0100 	mov.w	r1, #0
 8002780:	0159      	lsls	r1, r3, #5
 8002782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002786:	0150      	lsls	r0, r2, #5
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4621      	mov	r1, r4
 800278e:	1a51      	subs	r1, r2, r1
 8002790:	61b9      	str	r1, [r7, #24]
 8002792:	4629      	mov	r1, r5
 8002794:	eb63 0301 	sbc.w	r3, r3, r1
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027a6:	4659      	mov	r1, fp
 80027a8:	018b      	lsls	r3, r1, #6
 80027aa:	4651      	mov	r1, sl
 80027ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b0:	4651      	mov	r1, sl
 80027b2:	018a      	lsls	r2, r1, #6
 80027b4:	4651      	mov	r1, sl
 80027b6:	ebb2 0801 	subs.w	r8, r2, r1
 80027ba:	4659      	mov	r1, fp
 80027bc:	eb63 0901 	sbc.w	r9, r3, r1
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	4623      	mov	r3, r4
 80027da:	eb18 0303 	adds.w	r3, r8, r3
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	462b      	mov	r3, r5
 80027e2:	eb49 0303 	adc.w	r3, r9, r3
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027f4:	4629      	mov	r1, r5
 80027f6:	024b      	lsls	r3, r1, #9
 80027f8:	4621      	mov	r1, r4
 80027fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027fe:	4621      	mov	r1, r4
 8002800:	024a      	lsls	r2, r1, #9
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280a:	2200      	movs	r2, #0
 800280c:	65bb      	str	r3, [r7, #88]	; 0x58
 800280e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002814:	f7fd fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002822:	e065      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_GetSysClockFreq+0x458>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	4618      	mov	r0, r3
 800283a:	4611      	mov	r1, r2
 800283c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002840:	653b      	str	r3, [r7, #80]	; 0x50
 8002842:	2300      	movs	r3, #0
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
 8002846:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800284a:	4642      	mov	r2, r8
 800284c:	464b      	mov	r3, r9
 800284e:	f04f 0000 	mov.w	r0, #0
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	0159      	lsls	r1, r3, #5
 8002858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285c:	0150      	lsls	r0, r2, #5
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4641      	mov	r1, r8
 8002864:	1a51      	subs	r1, r2, r1
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	4649      	mov	r1, r9
 800286a:	eb63 0301 	sbc.w	r3, r3, r1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800287c:	4659      	mov	r1, fp
 800287e:	018b      	lsls	r3, r1, #6
 8002880:	4651      	mov	r1, sl
 8002882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002886:	4651      	mov	r1, sl
 8002888:	018a      	lsls	r2, r1, #6
 800288a:	4651      	mov	r1, sl
 800288c:	1a54      	subs	r4, r2, r1
 800288e:	4659      	mov	r1, fp
 8002890:	eb63 0501 	sbc.w	r5, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	464b      	mov	r3, r9
 80028b0:	eb45 0303 	adc.w	r3, r5, r3
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c2:	4629      	mov	r1, r5
 80028c4:	028b      	lsls	r3, r1, #10
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028cc:	4621      	mov	r1, r4
 80028ce:	028a      	lsls	r2, r1, #10
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d8:	2200      	movs	r2, #0
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
 80028dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028e2:	f7fd fce5 	bl	80002b0 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4613      	mov	r3, r2
 80028ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x458>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	0f1b      	lsrs	r3, r3, #28
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800290e:	e003      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800291c:	4618      	mov	r0, r3
 800291e:	37b8      	adds	r7, #184	; 0xb8
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400

08002930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e28d      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8083 	beq.w	8002a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b04      	cmp	r3, #4
 800295a:	d019      	beq.n	8002990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800295c:	4b91      	ldr	r3, [pc, #580]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002964:	2b08      	cmp	r3, #8
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002968:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002974:	d00c      	beq.n	8002990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d112      	bne.n	80029a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298e:	d10b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	4b84      	ldr	r3, [pc, #528]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05b      	beq.n	8002a54 <HAL_RCC_OscConfig+0x124>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d157      	bne.n	8002a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e25a      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d106      	bne.n	80029c0 <HAL_RCC_OscConfig+0x90>
 80029b2:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xcc>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xb4>
 80029ca:	4b76      	ldr	r3, [pc, #472]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a75      	ldr	r2, [pc, #468]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a72      	ldr	r2, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xcc>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6b      	ldr	r2, [pc, #428]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fa14 	bl	8000e30 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fa10 	bl	8000e30 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e21f      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xdc>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fa00 	bl	8000e30 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe f9fc 	bl	8000e30 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e20b      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x104>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06f      	beq.n	8002b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a62:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d105      	bne.n	8002a86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a86:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d11c      	bne.n	8002acc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b44      	ldr	r3, [pc, #272]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d116      	bne.n	8002acc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x186>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1d3      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4937      	ldr	r1, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	e03a      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_OscConfig+0x278>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe f9a9 	bl	8000e30 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe f9a5 	bl	8000e30 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e1b4      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4925      	ldr	r1, [pc, #148]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x278>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe f988 	bl	8000e30 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe f984 	bl	8000e30 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e193      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d036      	beq.n	8002bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe f968 	bl	8000e30 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe f964 	bl	8000e30 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e173      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x234>
 8002b82:	e01b      	b.n	8002bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe f951 	bl	8000e30 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	e00e      	b.n	8002bb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe f94d 	bl	8000e30 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d907      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e15c      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	42470000 	.word	0x42470000
 8002bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b8a      	ldr	r3, [pc, #552]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ea      	bne.n	8002b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8097 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a7e      	ldr	r2, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b7c      	ldr	r3, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x4b0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d118      	bne.n	8002c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x4b0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a75      	ldr	r2, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x4b0>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c12:	f7fe f90d 	bl	8000e30 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1a:	f7fe f909 	bl	8000e30 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e118      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x4b0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x31e>
 8002c40:	4b66      	ldr	r3, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a65      	ldr	r2, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x358>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x340>
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a5d      	ldr	r2, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0x358>
 8002c70:	4b5a      	ldr	r3, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a59      	ldr	r2, [pc, #356]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe f8ce 	bl	8000e30 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe f8ca 	bl	8000e30 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0d7      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ee      	beq.n	8002c98 <HAL_RCC_OscConfig+0x368>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f8b8 	bl	8000e30 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe f8b4 	bl	8000e30 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0c1      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80ad 	beq.w	8002e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d060      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d145      	bne.n	8002da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x4b4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f888 	bl	8000e30 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe f884 	bl	8000e30 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e093      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	071b      	lsls	r3, r3, #28
 8002d6e:	491b      	ldr	r1, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x4b4>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f859 	bl	8000e30 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe f855 	bl	8000e30 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e064      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x452>
 8002da0:	e05c      	b.n	8002e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x4b4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f842 	bl	8000e30 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe f83e 	bl	8000e30 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04d      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x480>
 8002dce:	e045      	b.n	8002e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e040      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000
 8002de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x538>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d030      	beq.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d129      	bne.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d122      	bne.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d119      	bne.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10f      	bne.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03f      	b.n	8002efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fef4 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f929 	bl	8003108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b08a      	sub	sp, #40	; 0x28
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d17c      	bne.n	8003020 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_UART_Transmit+0x2c>
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e075      	b.n	8003022 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_UART_Transmit+0x3e>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e06e      	b.n	8003022 <HAL_UART_Transmit+0x11c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2221      	movs	r2, #33	; 0x21
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fd ff69 	bl	8000e30 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	88fa      	ldrh	r2, [r7, #6]
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0x82>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f98:	e02a      	b.n	8002ff0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f840 	bl	800302a <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e036      	b.n	8003022 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e007      	b.n	8002fe2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1cf      	bne.n	8002f9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f810 	bl	800302a <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b090      	sub	sp, #64	; 0x40
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303a:	e050      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d04c      	beq.n	80030de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <UART_WaitOnFlagUntilTimeout+0x30>
 800304a:	f7fd fef1 	bl	8000e30 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003056:	429a      	cmp	r2, r3
 8003058:	d241      	bcs.n	80030de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307a:	637a      	str	r2, [r7, #52]	; 0x34
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e5      	bne.n	800305a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	613b      	str	r3, [r7, #16]
   return(result);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3314      	adds	r3, #20
 80030ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ae:	623a      	str	r2, [r7, #32]
 80030b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	69f9      	ldr	r1, [r7, #28]
 80030b4:	6a3a      	ldr	r2, [r7, #32]
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e5      	bne.n	800308e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e00f      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d09f      	beq.n	800303c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3740      	adds	r7, #64	; 0x40
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0c0      	sub	sp, #256	; 0x100
 800310e:	af00      	add	r7, sp, #0
 8003110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	ea40 0301 	orr.w	r3, r0, r1
 8003130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003160:	f021 010c 	bic.w	r1, r1, #12
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316e:	430b      	orrs	r3, r1
 8003170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	6999      	ldr	r1, [r3, #24]
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	ea40 0301 	orr.w	r3, r0, r1
 800318e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <UART_SetConfig+0x2cc>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d005      	beq.n	80031a8 <UART_SetConfig+0xa0>
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <UART_SetConfig+0x2d0>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d104      	bne.n	80031b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7ff f97e 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 80031ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b0:	e003      	b.n	80031ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7ff f965 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 80031b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	f040 810c 	bne.w	80033e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031da:	4622      	mov	r2, r4
 80031dc:	462b      	mov	r3, r5
 80031de:	1891      	adds	r1, r2, r2
 80031e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031e2:	415b      	adcs	r3, r3
 80031e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ea:	4621      	mov	r1, r4
 80031ec:	eb12 0801 	adds.w	r8, r2, r1
 80031f0:	4629      	mov	r1, r5
 80031f2:	eb43 0901 	adc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003218:	462b      	mov	r3, r5
 800321a:	eb49 0303 	adc.w	r3, r9, r3
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003236:	460b      	mov	r3, r1
 8003238:	18db      	adds	r3, r3, r3
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
 800323c:	4613      	mov	r3, r2
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
 8003244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800324c:	f7fd f830 	bl	80002b0 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <UART_SetConfig+0x2d4>)
 8003256:	fba3 2302 	umull	r2, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	011c      	lsls	r4, r3, #4
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800326c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	64b9      	str	r1, [r7, #72]	; 0x48
 8003278:	415b      	adcs	r3, r3
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003280:	4641      	mov	r1, r8
 8003282:	eb12 0a01 	adds.w	sl, r2, r1
 8003286:	4649      	mov	r1, r9
 8003288:	eb43 0b01 	adc.w	fp, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800329c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a0:	4692      	mov	sl, r2
 80032a2:	469b      	mov	fp, r3
 80032a4:	4643      	mov	r3, r8
 80032a6:	eb1a 0303 	adds.w	r3, sl, r3
 80032aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb4b 0303 	adc.w	r3, fp, r3
 80032b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032cc:	460b      	mov	r3, r1
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	643b      	str	r3, [r7, #64]	; 0x40
 80032d2:	4613      	mov	r3, r2
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032e2:	f7fc ffe5 	bl	80002b0 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <UART_SetConfig+0x2d4>)
 80032ee:	fba3 2301 	umull	r2, r3, r3, r1
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2264      	movs	r2, #100	; 0x64
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	1acb      	subs	r3, r1, r3
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <UART_SetConfig+0x2d4>)
 8003304:	fba3 2302 	umull	r2, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003310:	441c      	add	r4, r3
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800331c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	63b9      	str	r1, [r7, #56]	; 0x38
 800332c:	415b      	adcs	r3, r3
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003334:	4641      	mov	r1, r8
 8003336:	1851      	adds	r1, r2, r1
 8003338:	6339      	str	r1, [r7, #48]	; 0x30
 800333a:	4649      	mov	r1, r9
 800333c:	414b      	adcs	r3, r1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800334c:	4659      	mov	r1, fp
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003356:	4651      	mov	r1, sl
 8003358:	00ca      	lsls	r2, r1, #3
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4603      	mov	r3, r0
 8003360:	4642      	mov	r2, r8
 8003362:	189b      	adds	r3, r3, r2
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	464b      	mov	r3, r9
 800336a:	460a      	mov	r2, r1
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003388:	460b      	mov	r3, r1
 800338a:	18db      	adds	r3, r3, r3
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	4613      	mov	r3, r2
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339e:	f7fc ff87 	bl	80002b0 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <UART_SetConfig+0x2d4>)
 80033a8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2164      	movs	r1, #100	; 0x64
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <UART_SetConfig+0x2d4>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f003 0207 	and.w	r2, r3, #7
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4422      	add	r2, r4
 80033ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d0:	e105      	b.n	80035de <UART_SetConfig+0x4d6>
 80033d2:	bf00      	nop
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033f2:	4642      	mov	r2, r8
 80033f4:	464b      	mov	r3, r9
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	6239      	str	r1, [r7, #32]
 80033fa:	415b      	adcs	r3, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003402:	4641      	mov	r1, r8
 8003404:	1854      	adds	r4, r2, r1
 8003406:	4649      	mov	r1, r9
 8003408:	eb43 0501 	adc.w	r5, r3, r1
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003428:	464b      	mov	r3, r9
 800342a:	eb45 0303 	adc.w	r3, r5, r3
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344e:	4629      	mov	r1, r5
 8003450:	008b      	lsls	r3, r1, #2
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003458:	4621      	mov	r1, r4
 800345a:	008a      	lsls	r2, r1, #2
 800345c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003460:	f7fc ff26 	bl	80002b0 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4b60      	ldr	r3, [pc, #384]	; (80035ec <UART_SetConfig+0x4e4>)
 800346a:	fba3 2302 	umull	r2, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	011c      	lsls	r4, r3, #4
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800347c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	61b9      	str	r1, [r7, #24]
 800348c:	415b      	adcs	r3, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	4641      	mov	r1, r8
 8003496:	1851      	adds	r1, r2, r1
 8003498:	6139      	str	r1, [r7, #16]
 800349a:	4649      	mov	r1, r9
 800349c:	414b      	adcs	r3, r1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ac:	4659      	mov	r1, fp
 80034ae:	00cb      	lsls	r3, r1, #3
 80034b0:	4651      	mov	r1, sl
 80034b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b6:	4651      	mov	r1, sl
 80034b8:	00ca      	lsls	r2, r1, #3
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	4642      	mov	r2, r8
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	464b      	mov	r3, r9
 80034ca:	460a      	mov	r2, r1
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80034de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034ec:	4649      	mov	r1, r9
 80034ee:	008b      	lsls	r3, r1, #2
 80034f0:	4641      	mov	r1, r8
 80034f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f6:	4641      	mov	r1, r8
 80034f8:	008a      	lsls	r2, r1, #2
 80034fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fe:	f7fc fed7 	bl	80002b0 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <UART_SetConfig+0x4e4>)
 8003508:	fba3 1302 	umull	r1, r3, r3, r2
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	2164      	movs	r1, #100	; 0x64
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	3332      	adds	r3, #50	; 0x32
 800351a:	4a34      	ldr	r2, [pc, #208]	; (80035ec <UART_SetConfig+0x4e4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003526:	441c      	add	r4, r3
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	673b      	str	r3, [r7, #112]	; 0x70
 8003530:	677a      	str	r2, [r7, #116]	; 0x74
 8003532:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	1891      	adds	r1, r2, r2
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	415b      	adcs	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003546:	4641      	mov	r1, r8
 8003548:	1851      	adds	r1, r2, r1
 800354a:	6039      	str	r1, [r7, #0]
 800354c:	4649      	mov	r1, r9
 800354e:	414b      	adcs	r3, r1
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355e:	4659      	mov	r1, fp
 8003560:	00cb      	lsls	r3, r1, #3
 8003562:	4651      	mov	r1, sl
 8003564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003568:	4651      	mov	r1, sl
 800356a:	00ca      	lsls	r2, r1, #3
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	4603      	mov	r3, r0
 8003572:	4642      	mov	r2, r8
 8003574:	189b      	adds	r3, r3, r2
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
 8003578:	464b      	mov	r3, r9
 800357a:	460a      	mov	r2, r1
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	663b      	str	r3, [r7, #96]	; 0x60
 800358c:	667a      	str	r2, [r7, #100]	; 0x64
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800359a:	4649      	mov	r1, r9
 800359c:	008b      	lsls	r3, r1, #2
 800359e:	4641      	mov	r1, r8
 80035a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a4:	4641      	mov	r1, r8
 80035a6:	008a      	lsls	r2, r1, #2
 80035a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035ac:	f7fc fe80 	bl	80002b0 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <UART_SetConfig+0x4e4>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4422      	add	r2, r4
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	51eb851f 	.word	0x51eb851f

080035f0 <__errno>:
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <__errno+0x8>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000000c 	.word	0x2000000c

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	; (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	; (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	; (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	; (8003640 <__libc_init_array+0x44>)
 8003610:	f001 f824 	bl	800465c <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	08004788 	.word	0x08004788
 8003638:	08004788 	.word	0x08004788
 800363c:	08004788 	.word	0x08004788
 8003640:	0800478c 	.word	0x0800478c

08003644 <memset>:
 8003644:	4402      	add	r2, r0
 8003646:	4603      	mov	r3, r0
 8003648:	4293      	cmp	r3, r2
 800364a:	d100      	bne.n	800364e <memset+0xa>
 800364c:	4770      	bx	lr
 800364e:	f803 1b01 	strb.w	r1, [r3], #1
 8003652:	e7f9      	b.n	8003648 <memset+0x4>

08003654 <iprintf>:
 8003654:	b40f      	push	{r0, r1, r2, r3}
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <iprintf+0x2c>)
 8003658:	b513      	push	{r0, r1, r4, lr}
 800365a:	681c      	ldr	r4, [r3, #0]
 800365c:	b124      	cbz	r4, 8003668 <iprintf+0x14>
 800365e:	69a3      	ldr	r3, [r4, #24]
 8003660:	b913      	cbnz	r3, 8003668 <iprintf+0x14>
 8003662:	4620      	mov	r0, r4
 8003664:	f000 fa5e 	bl	8003b24 <__sinit>
 8003668:	ab05      	add	r3, sp, #20
 800366a:	9a04      	ldr	r2, [sp, #16]
 800366c:	68a1      	ldr	r1, [r4, #8]
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	4620      	mov	r0, r4
 8003672:	f000 fc67 	bl	8003f44 <_vfiprintf_r>
 8003676:	b002      	add	sp, #8
 8003678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367c:	b004      	add	sp, #16
 800367e:	4770      	bx	lr
 8003680:	2000000c 	.word	0x2000000c

08003684 <_puts_r>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	460e      	mov	r6, r1
 8003688:	4605      	mov	r5, r0
 800368a:	b118      	cbz	r0, 8003694 <_puts_r+0x10>
 800368c:	6983      	ldr	r3, [r0, #24]
 800368e:	b90b      	cbnz	r3, 8003694 <_puts_r+0x10>
 8003690:	f000 fa48 	bl	8003b24 <__sinit>
 8003694:	69ab      	ldr	r3, [r5, #24]
 8003696:	68ac      	ldr	r4, [r5, #8]
 8003698:	b913      	cbnz	r3, 80036a0 <_puts_r+0x1c>
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fa42 	bl	8003b24 <__sinit>
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <_puts_r+0xd0>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d120      	bne.n	80036e8 <_puts_r+0x64>
 80036a6:	686c      	ldr	r4, [r5, #4]
 80036a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036aa:	07db      	lsls	r3, r3, #31
 80036ac:	d405      	bmi.n	80036ba <_puts_r+0x36>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	0598      	lsls	r0, r3, #22
 80036b2:	d402      	bmi.n	80036ba <_puts_r+0x36>
 80036b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b6:	f000 fad3 	bl	8003c60 <__retarget_lock_acquire_recursive>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	0719      	lsls	r1, r3, #28
 80036be:	d51d      	bpl.n	80036fc <_puts_r+0x78>
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	b1db      	cbz	r3, 80036fc <_puts_r+0x78>
 80036c4:	3e01      	subs	r6, #1
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60a3      	str	r3, [r4, #8]
 80036d0:	bb39      	cbnz	r1, 8003722 <_puts_r+0x9e>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da38      	bge.n	8003748 <_puts_r+0xc4>
 80036d6:	4622      	mov	r2, r4
 80036d8:	210a      	movs	r1, #10
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 f848 	bl	8003770 <__swbuf_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d011      	beq.n	8003708 <_puts_r+0x84>
 80036e4:	250a      	movs	r5, #10
 80036e6:	e011      	b.n	800370c <_puts_r+0x88>
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <_puts_r+0xd4>)
 80036ea:	429c      	cmp	r4, r3
 80036ec:	d101      	bne.n	80036f2 <_puts_r+0x6e>
 80036ee:	68ac      	ldr	r4, [r5, #8]
 80036f0:	e7da      	b.n	80036a8 <_puts_r+0x24>
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <_puts_r+0xd8>)
 80036f4:	429c      	cmp	r4, r3
 80036f6:	bf08      	it	eq
 80036f8:	68ec      	ldreq	r4, [r5, #12]
 80036fa:	e7d5      	b.n	80036a8 <_puts_r+0x24>
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f888 	bl	8003814 <__swsetup_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	d0dd      	beq.n	80036c4 <_puts_r+0x40>
 8003708:	f04f 35ff 	mov.w	r5, #4294967295
 800370c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800370e:	07da      	lsls	r2, r3, #31
 8003710:	d405      	bmi.n	800371e <_puts_r+0x9a>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	059b      	lsls	r3, r3, #22
 8003716:	d402      	bmi.n	800371e <_puts_r+0x9a>
 8003718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371a:	f000 faa2 	bl	8003c62 <__retarget_lock_release_recursive>
 800371e:	4628      	mov	r0, r5
 8003720:	bd70      	pop	{r4, r5, r6, pc}
 8003722:	2b00      	cmp	r3, #0
 8003724:	da04      	bge.n	8003730 <_puts_r+0xac>
 8003726:	69a2      	ldr	r2, [r4, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	dc06      	bgt.n	800373a <_puts_r+0xb6>
 800372c:	290a      	cmp	r1, #10
 800372e:	d004      	beq.n	800373a <_puts_r+0xb6>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	6022      	str	r2, [r4, #0]
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	e7c5      	b.n	80036c6 <_puts_r+0x42>
 800373a:	4622      	mov	r2, r4
 800373c:	4628      	mov	r0, r5
 800373e:	f000 f817 	bl	8003770 <__swbuf_r>
 8003742:	3001      	adds	r0, #1
 8003744:	d1bf      	bne.n	80036c6 <_puts_r+0x42>
 8003746:	e7df      	b.n	8003708 <_puts_r+0x84>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	250a      	movs	r5, #10
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	6022      	str	r2, [r4, #0]
 8003750:	701d      	strb	r5, [r3, #0]
 8003752:	e7db      	b.n	800370c <_puts_r+0x88>
 8003754:	0800470c 	.word	0x0800470c
 8003758:	0800472c 	.word	0x0800472c
 800375c:	080046ec 	.word	0x080046ec

08003760 <puts>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <puts+0xc>)
 8003762:	4601      	mov	r1, r0
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f7ff bf8d 	b.w	8003684 <_puts_r>
 800376a:	bf00      	nop
 800376c:	2000000c 	.word	0x2000000c

08003770 <__swbuf_r>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	460e      	mov	r6, r1
 8003774:	4614      	mov	r4, r2
 8003776:	4605      	mov	r5, r0
 8003778:	b118      	cbz	r0, 8003782 <__swbuf_r+0x12>
 800377a:	6983      	ldr	r3, [r0, #24]
 800377c:	b90b      	cbnz	r3, 8003782 <__swbuf_r+0x12>
 800377e:	f000 f9d1 	bl	8003b24 <__sinit>
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <__swbuf_r+0x98>)
 8003784:	429c      	cmp	r4, r3
 8003786:	d12b      	bne.n	80037e0 <__swbuf_r+0x70>
 8003788:	686c      	ldr	r4, [r5, #4]
 800378a:	69a3      	ldr	r3, [r4, #24]
 800378c:	60a3      	str	r3, [r4, #8]
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	071a      	lsls	r2, r3, #28
 8003792:	d52f      	bpl.n	80037f4 <__swbuf_r+0x84>
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	b36b      	cbz	r3, 80037f4 <__swbuf_r+0x84>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	1ac0      	subs	r0, r0, r3
 800379e:	6963      	ldr	r3, [r4, #20]
 80037a0:	b2f6      	uxtb	r6, r6
 80037a2:	4283      	cmp	r3, r0
 80037a4:	4637      	mov	r7, r6
 80037a6:	dc04      	bgt.n	80037b2 <__swbuf_r+0x42>
 80037a8:	4621      	mov	r1, r4
 80037aa:	4628      	mov	r0, r5
 80037ac:	f000 f926 	bl	80039fc <_fflush_r>
 80037b0:	bb30      	cbnz	r0, 8003800 <__swbuf_r+0x90>
 80037b2:	68a3      	ldr	r3, [r4, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60a3      	str	r3, [r4, #8]
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	6022      	str	r2, [r4, #0]
 80037be:	701e      	strb	r6, [r3, #0]
 80037c0:	6963      	ldr	r3, [r4, #20]
 80037c2:	3001      	adds	r0, #1
 80037c4:	4283      	cmp	r3, r0
 80037c6:	d004      	beq.n	80037d2 <__swbuf_r+0x62>
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	07db      	lsls	r3, r3, #31
 80037cc:	d506      	bpl.n	80037dc <__swbuf_r+0x6c>
 80037ce:	2e0a      	cmp	r6, #10
 80037d0:	d104      	bne.n	80037dc <__swbuf_r+0x6c>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 f911 	bl	80039fc <_fflush_r>
 80037da:	b988      	cbnz	r0, 8003800 <__swbuf_r+0x90>
 80037dc:	4638      	mov	r0, r7
 80037de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <__swbuf_r+0x9c>)
 80037e2:	429c      	cmp	r4, r3
 80037e4:	d101      	bne.n	80037ea <__swbuf_r+0x7a>
 80037e6:	68ac      	ldr	r4, [r5, #8]
 80037e8:	e7cf      	b.n	800378a <__swbuf_r+0x1a>
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <__swbuf_r+0xa0>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	bf08      	it	eq
 80037f0:	68ec      	ldreq	r4, [r5, #12]
 80037f2:	e7ca      	b.n	800378a <__swbuf_r+0x1a>
 80037f4:	4621      	mov	r1, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	f000 f80c 	bl	8003814 <__swsetup_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d0cb      	beq.n	8003798 <__swbuf_r+0x28>
 8003800:	f04f 37ff 	mov.w	r7, #4294967295
 8003804:	e7ea      	b.n	80037dc <__swbuf_r+0x6c>
 8003806:	bf00      	nop
 8003808:	0800470c 	.word	0x0800470c
 800380c:	0800472c 	.word	0x0800472c
 8003810:	080046ec 	.word	0x080046ec

08003814 <__swsetup_r>:
 8003814:	4b32      	ldr	r3, [pc, #200]	; (80038e0 <__swsetup_r+0xcc>)
 8003816:	b570      	push	{r4, r5, r6, lr}
 8003818:	681d      	ldr	r5, [r3, #0]
 800381a:	4606      	mov	r6, r0
 800381c:	460c      	mov	r4, r1
 800381e:	b125      	cbz	r5, 800382a <__swsetup_r+0x16>
 8003820:	69ab      	ldr	r3, [r5, #24]
 8003822:	b913      	cbnz	r3, 800382a <__swsetup_r+0x16>
 8003824:	4628      	mov	r0, r5
 8003826:	f000 f97d 	bl	8003b24 <__sinit>
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <__swsetup_r+0xd0>)
 800382c:	429c      	cmp	r4, r3
 800382e:	d10f      	bne.n	8003850 <__swsetup_r+0x3c>
 8003830:	686c      	ldr	r4, [r5, #4]
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003838:	0719      	lsls	r1, r3, #28
 800383a:	d42c      	bmi.n	8003896 <__swsetup_r+0x82>
 800383c:	06dd      	lsls	r5, r3, #27
 800383e:	d411      	bmi.n	8003864 <__swsetup_r+0x50>
 8003840:	2309      	movs	r3, #9
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	e03e      	b.n	80038ce <__swsetup_r+0xba>
 8003850:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <__swsetup_r+0xd4>)
 8003852:	429c      	cmp	r4, r3
 8003854:	d101      	bne.n	800385a <__swsetup_r+0x46>
 8003856:	68ac      	ldr	r4, [r5, #8]
 8003858:	e7eb      	b.n	8003832 <__swsetup_r+0x1e>
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <__swsetup_r+0xd8>)
 800385c:	429c      	cmp	r4, r3
 800385e:	bf08      	it	eq
 8003860:	68ec      	ldreq	r4, [r5, #12]
 8003862:	e7e6      	b.n	8003832 <__swsetup_r+0x1e>
 8003864:	0758      	lsls	r0, r3, #29
 8003866:	d512      	bpl.n	800388e <__swsetup_r+0x7a>
 8003868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386a:	b141      	cbz	r1, 800387e <__swsetup_r+0x6a>
 800386c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003870:	4299      	cmp	r1, r3
 8003872:	d002      	beq.n	800387a <__swsetup_r+0x66>
 8003874:	4630      	mov	r0, r6
 8003876:	f000 fa5b 	bl	8003d30 <_free_r>
 800387a:	2300      	movs	r3, #0
 800387c:	6363      	str	r3, [r4, #52]	; 0x34
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	2300      	movs	r3, #0
 8003888:	6063      	str	r3, [r4, #4]
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	81a3      	strh	r3, [r4, #12]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	b94b      	cbnz	r3, 80038ae <__swsetup_r+0x9a>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d003      	beq.n	80038ae <__swsetup_r+0x9a>
 80038a6:	4621      	mov	r1, r4
 80038a8:	4630      	mov	r0, r6
 80038aa:	f000 fa01 	bl	8003cb0 <__smakebuf_r>
 80038ae:	89a0      	ldrh	r0, [r4, #12]
 80038b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b4:	f010 0301 	ands.w	r3, r0, #1
 80038b8:	d00a      	beq.n	80038d0 <__swsetup_r+0xbc>
 80038ba:	2300      	movs	r3, #0
 80038bc:	60a3      	str	r3, [r4, #8]
 80038be:	6963      	ldr	r3, [r4, #20]
 80038c0:	425b      	negs	r3, r3
 80038c2:	61a3      	str	r3, [r4, #24]
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	b943      	cbnz	r3, 80038da <__swsetup_r+0xc6>
 80038c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038cc:	d1ba      	bne.n	8003844 <__swsetup_r+0x30>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	0781      	lsls	r1, r0, #30
 80038d2:	bf58      	it	pl
 80038d4:	6963      	ldrpl	r3, [r4, #20]
 80038d6:	60a3      	str	r3, [r4, #8]
 80038d8:	e7f4      	b.n	80038c4 <__swsetup_r+0xb0>
 80038da:	2000      	movs	r0, #0
 80038dc:	e7f7      	b.n	80038ce <__swsetup_r+0xba>
 80038de:	bf00      	nop
 80038e0:	2000000c 	.word	0x2000000c
 80038e4:	0800470c 	.word	0x0800470c
 80038e8:	0800472c 	.word	0x0800472c
 80038ec:	080046ec 	.word	0x080046ec

080038f0 <__sflush_r>:
 80038f0:	898a      	ldrh	r2, [r1, #12]
 80038f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f6:	4605      	mov	r5, r0
 80038f8:	0710      	lsls	r0, r2, #28
 80038fa:	460c      	mov	r4, r1
 80038fc:	d458      	bmi.n	80039b0 <__sflush_r+0xc0>
 80038fe:	684b      	ldr	r3, [r1, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	dc05      	bgt.n	8003910 <__sflush_r+0x20>
 8003904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	dc02      	bgt.n	8003910 <__sflush_r+0x20>
 800390a:	2000      	movs	r0, #0
 800390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003912:	2e00      	cmp	r6, #0
 8003914:	d0f9      	beq.n	800390a <__sflush_r+0x1a>
 8003916:	2300      	movs	r3, #0
 8003918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800391c:	682f      	ldr	r7, [r5, #0]
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	d032      	beq.n	8003988 <__sflush_r+0x98>
 8003922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	075a      	lsls	r2, r3, #29
 8003928:	d505      	bpl.n	8003936 <__sflush_r+0x46>
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	1ac0      	subs	r0, r0, r3
 800392e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003930:	b10b      	cbz	r3, 8003936 <__sflush_r+0x46>
 8003932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003934:	1ac0      	subs	r0, r0, r3
 8003936:	2300      	movs	r3, #0
 8003938:	4602      	mov	r2, r0
 800393a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800393c:	6a21      	ldr	r1, [r4, #32]
 800393e:	4628      	mov	r0, r5
 8003940:	47b0      	blx	r6
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	d106      	bne.n	8003956 <__sflush_r+0x66>
 8003948:	6829      	ldr	r1, [r5, #0]
 800394a:	291d      	cmp	r1, #29
 800394c:	d82c      	bhi.n	80039a8 <__sflush_r+0xb8>
 800394e:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <__sflush_r+0x108>)
 8003950:	40ca      	lsrs	r2, r1
 8003952:	07d6      	lsls	r6, r2, #31
 8003954:	d528      	bpl.n	80039a8 <__sflush_r+0xb8>
 8003956:	2200      	movs	r2, #0
 8003958:	6062      	str	r2, [r4, #4]
 800395a:	04d9      	lsls	r1, r3, #19
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	6022      	str	r2, [r4, #0]
 8003960:	d504      	bpl.n	800396c <__sflush_r+0x7c>
 8003962:	1c42      	adds	r2, r0, #1
 8003964:	d101      	bne.n	800396a <__sflush_r+0x7a>
 8003966:	682b      	ldr	r3, [r5, #0]
 8003968:	b903      	cbnz	r3, 800396c <__sflush_r+0x7c>
 800396a:	6560      	str	r0, [r4, #84]	; 0x54
 800396c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800396e:	602f      	str	r7, [r5, #0]
 8003970:	2900      	cmp	r1, #0
 8003972:	d0ca      	beq.n	800390a <__sflush_r+0x1a>
 8003974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003978:	4299      	cmp	r1, r3
 800397a:	d002      	beq.n	8003982 <__sflush_r+0x92>
 800397c:	4628      	mov	r0, r5
 800397e:	f000 f9d7 	bl	8003d30 <_free_r>
 8003982:	2000      	movs	r0, #0
 8003984:	6360      	str	r0, [r4, #52]	; 0x34
 8003986:	e7c1      	b.n	800390c <__sflush_r+0x1c>
 8003988:	6a21      	ldr	r1, [r4, #32]
 800398a:	2301      	movs	r3, #1
 800398c:	4628      	mov	r0, r5
 800398e:	47b0      	blx	r6
 8003990:	1c41      	adds	r1, r0, #1
 8003992:	d1c7      	bne.n	8003924 <__sflush_r+0x34>
 8003994:	682b      	ldr	r3, [r5, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0c4      	beq.n	8003924 <__sflush_r+0x34>
 800399a:	2b1d      	cmp	r3, #29
 800399c:	d001      	beq.n	80039a2 <__sflush_r+0xb2>
 800399e:	2b16      	cmp	r3, #22
 80039a0:	d101      	bne.n	80039a6 <__sflush_r+0xb6>
 80039a2:	602f      	str	r7, [r5, #0]
 80039a4:	e7b1      	b.n	800390a <__sflush_r+0x1a>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ac:	81a3      	strh	r3, [r4, #12]
 80039ae:	e7ad      	b.n	800390c <__sflush_r+0x1c>
 80039b0:	690f      	ldr	r7, [r1, #16]
 80039b2:	2f00      	cmp	r7, #0
 80039b4:	d0a9      	beq.n	800390a <__sflush_r+0x1a>
 80039b6:	0793      	lsls	r3, r2, #30
 80039b8:	680e      	ldr	r6, [r1, #0]
 80039ba:	bf08      	it	eq
 80039bc:	694b      	ldreq	r3, [r1, #20]
 80039be:	600f      	str	r7, [r1, #0]
 80039c0:	bf18      	it	ne
 80039c2:	2300      	movne	r3, #0
 80039c4:	eba6 0807 	sub.w	r8, r6, r7
 80039c8:	608b      	str	r3, [r1, #8]
 80039ca:	f1b8 0f00 	cmp.w	r8, #0
 80039ce:	dd9c      	ble.n	800390a <__sflush_r+0x1a>
 80039d0:	6a21      	ldr	r1, [r4, #32]
 80039d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039d4:	4643      	mov	r3, r8
 80039d6:	463a      	mov	r2, r7
 80039d8:	4628      	mov	r0, r5
 80039da:	47b0      	blx	r6
 80039dc:	2800      	cmp	r0, #0
 80039de:	dc06      	bgt.n	80039ee <__sflush_r+0xfe>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e78e      	b.n	800390c <__sflush_r+0x1c>
 80039ee:	4407      	add	r7, r0
 80039f0:	eba8 0800 	sub.w	r8, r8, r0
 80039f4:	e7e9      	b.n	80039ca <__sflush_r+0xda>
 80039f6:	bf00      	nop
 80039f8:	20400001 	.word	0x20400001

080039fc <_fflush_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	690b      	ldr	r3, [r1, #16]
 8003a00:	4605      	mov	r5, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	b913      	cbnz	r3, 8003a0c <_fflush_r+0x10>
 8003a06:	2500      	movs	r5, #0
 8003a08:	4628      	mov	r0, r5
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	b118      	cbz	r0, 8003a16 <_fflush_r+0x1a>
 8003a0e:	6983      	ldr	r3, [r0, #24]
 8003a10:	b90b      	cbnz	r3, 8003a16 <_fflush_r+0x1a>
 8003a12:	f000 f887 	bl	8003b24 <__sinit>
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <_fflush_r+0x6c>)
 8003a18:	429c      	cmp	r4, r3
 8003a1a:	d11b      	bne.n	8003a54 <_fflush_r+0x58>
 8003a1c:	686c      	ldr	r4, [r5, #4]
 8003a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0ef      	beq.n	8003a06 <_fflush_r+0xa>
 8003a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a28:	07d0      	lsls	r0, r2, #31
 8003a2a:	d404      	bmi.n	8003a36 <_fflush_r+0x3a>
 8003a2c:	0599      	lsls	r1, r3, #22
 8003a2e:	d402      	bmi.n	8003a36 <_fflush_r+0x3a>
 8003a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a32:	f000 f915 	bl	8003c60 <__retarget_lock_acquire_recursive>
 8003a36:	4628      	mov	r0, r5
 8003a38:	4621      	mov	r1, r4
 8003a3a:	f7ff ff59 	bl	80038f0 <__sflush_r>
 8003a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a40:	07da      	lsls	r2, r3, #31
 8003a42:	4605      	mov	r5, r0
 8003a44:	d4e0      	bmi.n	8003a08 <_fflush_r+0xc>
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	059b      	lsls	r3, r3, #22
 8003a4a:	d4dd      	bmi.n	8003a08 <_fflush_r+0xc>
 8003a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a4e:	f000 f908 	bl	8003c62 <__retarget_lock_release_recursive>
 8003a52:	e7d9      	b.n	8003a08 <_fflush_r+0xc>
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <_fflush_r+0x70>)
 8003a56:	429c      	cmp	r4, r3
 8003a58:	d101      	bne.n	8003a5e <_fflush_r+0x62>
 8003a5a:	68ac      	ldr	r4, [r5, #8]
 8003a5c:	e7df      	b.n	8003a1e <_fflush_r+0x22>
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <_fflush_r+0x74>)
 8003a60:	429c      	cmp	r4, r3
 8003a62:	bf08      	it	eq
 8003a64:	68ec      	ldreq	r4, [r5, #12]
 8003a66:	e7da      	b.n	8003a1e <_fflush_r+0x22>
 8003a68:	0800470c 	.word	0x0800470c
 8003a6c:	0800472c 	.word	0x0800472c
 8003a70:	080046ec 	.word	0x080046ec

08003a74 <std>:
 8003a74:	2300      	movs	r3, #0
 8003a76:	b510      	push	{r4, lr}
 8003a78:	4604      	mov	r4, r0
 8003a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a82:	6083      	str	r3, [r0, #8]
 8003a84:	8181      	strh	r1, [r0, #12]
 8003a86:	6643      	str	r3, [r0, #100]	; 0x64
 8003a88:	81c2      	strh	r2, [r0, #14]
 8003a8a:	6183      	str	r3, [r0, #24]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	2208      	movs	r2, #8
 8003a90:	305c      	adds	r0, #92	; 0x5c
 8003a92:	f7ff fdd7 	bl	8003644 <memset>
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <std+0x38>)
 8003a98:	6263      	str	r3, [r4, #36]	; 0x24
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <std+0x3c>)
 8003a9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <std+0x40>)
 8003aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x44>)
 8003aa4:	6224      	str	r4, [r4, #32]
 8003aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8003aa8:	bd10      	pop	{r4, pc}
 8003aaa:	bf00      	nop
 8003aac:	080044ed 	.word	0x080044ed
 8003ab0:	0800450f 	.word	0x0800450f
 8003ab4:	08004547 	.word	0x08004547
 8003ab8:	0800456b 	.word	0x0800456b

08003abc <_cleanup_r>:
 8003abc:	4901      	ldr	r1, [pc, #4]	; (8003ac4 <_cleanup_r+0x8>)
 8003abe:	f000 b8af 	b.w	8003c20 <_fwalk_reent>
 8003ac2:	bf00      	nop
 8003ac4:	080039fd 	.word	0x080039fd

08003ac8 <__sfmoreglue>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2268      	movs	r2, #104	; 0x68
 8003acc:	1e4d      	subs	r5, r1, #1
 8003ace:	4355      	muls	r5, r2
 8003ad0:	460e      	mov	r6, r1
 8003ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ad6:	f000 f997 	bl	8003e08 <_malloc_r>
 8003ada:	4604      	mov	r4, r0
 8003adc:	b140      	cbz	r0, 8003af0 <__sfmoreglue+0x28>
 8003ade:	2100      	movs	r1, #0
 8003ae0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ae4:	300c      	adds	r0, #12
 8003ae6:	60a0      	str	r0, [r4, #8]
 8003ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003aec:	f7ff fdaa 	bl	8003644 <memset>
 8003af0:	4620      	mov	r0, r4
 8003af2:	bd70      	pop	{r4, r5, r6, pc}

08003af4 <__sfp_lock_acquire>:
 8003af4:	4801      	ldr	r0, [pc, #4]	; (8003afc <__sfp_lock_acquire+0x8>)
 8003af6:	f000 b8b3 	b.w	8003c60 <__retarget_lock_acquire_recursive>
 8003afa:	bf00      	nop
 8003afc:	2000012d 	.word	0x2000012d

08003b00 <__sfp_lock_release>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__sfp_lock_release+0x8>)
 8003b02:	f000 b8ae 	b.w	8003c62 <__retarget_lock_release_recursive>
 8003b06:	bf00      	nop
 8003b08:	2000012d 	.word	0x2000012d

08003b0c <__sinit_lock_acquire>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__sinit_lock_acquire+0x8>)
 8003b0e:	f000 b8a7 	b.w	8003c60 <__retarget_lock_acquire_recursive>
 8003b12:	bf00      	nop
 8003b14:	2000012e 	.word	0x2000012e

08003b18 <__sinit_lock_release>:
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <__sinit_lock_release+0x8>)
 8003b1a:	f000 b8a2 	b.w	8003c62 <__retarget_lock_release_recursive>
 8003b1e:	bf00      	nop
 8003b20:	2000012e 	.word	0x2000012e

08003b24 <__sinit>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	4604      	mov	r4, r0
 8003b28:	f7ff fff0 	bl	8003b0c <__sinit_lock_acquire>
 8003b2c:	69a3      	ldr	r3, [r4, #24]
 8003b2e:	b11b      	cbz	r3, 8003b38 <__sinit+0x14>
 8003b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b34:	f7ff bff0 	b.w	8003b18 <__sinit_lock_release>
 8003b38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <__sinit+0x68>)
 8003b40:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <__sinit+0x6c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	bf04      	itt	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	61a3      	streq	r3, [r4, #24]
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 f820 	bl	8003b94 <__sfp>
 8003b54:	6060      	str	r0, [r4, #4]
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 f81c 	bl	8003b94 <__sfp>
 8003b5c:	60a0      	str	r0, [r4, #8]
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f000 f818 	bl	8003b94 <__sfp>
 8003b64:	2200      	movs	r2, #0
 8003b66:	60e0      	str	r0, [r4, #12]
 8003b68:	2104      	movs	r1, #4
 8003b6a:	6860      	ldr	r0, [r4, #4]
 8003b6c:	f7ff ff82 	bl	8003a74 <std>
 8003b70:	68a0      	ldr	r0, [r4, #8]
 8003b72:	2201      	movs	r2, #1
 8003b74:	2109      	movs	r1, #9
 8003b76:	f7ff ff7d 	bl	8003a74 <std>
 8003b7a:	68e0      	ldr	r0, [r4, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	2112      	movs	r1, #18
 8003b80:	f7ff ff78 	bl	8003a74 <std>
 8003b84:	2301      	movs	r3, #1
 8003b86:	61a3      	str	r3, [r4, #24]
 8003b88:	e7d2      	b.n	8003b30 <__sinit+0xc>
 8003b8a:	bf00      	nop
 8003b8c:	080046e8 	.word	0x080046e8
 8003b90:	08003abd 	.word	0x08003abd

08003b94 <__sfp>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	4607      	mov	r7, r0
 8003b98:	f7ff ffac 	bl	8003af4 <__sfp_lock_acquire>
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <__sfp+0x84>)
 8003b9e:	681e      	ldr	r6, [r3, #0]
 8003ba0:	69b3      	ldr	r3, [r6, #24]
 8003ba2:	b913      	cbnz	r3, 8003baa <__sfp+0x16>
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f7ff ffbd 	bl	8003b24 <__sinit>
 8003baa:	3648      	adds	r6, #72	; 0x48
 8003bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	d503      	bpl.n	8003bbc <__sfp+0x28>
 8003bb4:	6833      	ldr	r3, [r6, #0]
 8003bb6:	b30b      	cbz	r3, 8003bfc <__sfp+0x68>
 8003bb8:	6836      	ldr	r6, [r6, #0]
 8003bba:	e7f7      	b.n	8003bac <__sfp+0x18>
 8003bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bc0:	b9d5      	cbnz	r5, 8003bf8 <__sfp+0x64>
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <__sfp+0x88>)
 8003bc4:	60e3      	str	r3, [r4, #12]
 8003bc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bca:	6665      	str	r5, [r4, #100]	; 0x64
 8003bcc:	f000 f847 	bl	8003c5e <__retarget_lock_init_recursive>
 8003bd0:	f7ff ff96 	bl	8003b00 <__sfp_lock_release>
 8003bd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003bdc:	6025      	str	r5, [r4, #0]
 8003bde:	61a5      	str	r5, [r4, #24]
 8003be0:	2208      	movs	r2, #8
 8003be2:	4629      	mov	r1, r5
 8003be4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003be8:	f7ff fd2c 	bl	8003644 <memset>
 8003bec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf8:	3468      	adds	r4, #104	; 0x68
 8003bfa:	e7d9      	b.n	8003bb0 <__sfp+0x1c>
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f7ff ff62 	bl	8003ac8 <__sfmoreglue>
 8003c04:	4604      	mov	r4, r0
 8003c06:	6030      	str	r0, [r6, #0]
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d1d5      	bne.n	8003bb8 <__sfp+0x24>
 8003c0c:	f7ff ff78 	bl	8003b00 <__sfp_lock_release>
 8003c10:	230c      	movs	r3, #12
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	e7ee      	b.n	8003bf4 <__sfp+0x60>
 8003c16:	bf00      	nop
 8003c18:	080046e8 	.word	0x080046e8
 8003c1c:	ffff0001 	.word	0xffff0001

08003c20 <_fwalk_reent>:
 8003c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c24:	4606      	mov	r6, r0
 8003c26:	4688      	mov	r8, r1
 8003c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c2c:	2700      	movs	r7, #0
 8003c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c32:	f1b9 0901 	subs.w	r9, r9, #1
 8003c36:	d505      	bpl.n	8003c44 <_fwalk_reent+0x24>
 8003c38:	6824      	ldr	r4, [r4, #0]
 8003c3a:	2c00      	cmp	r4, #0
 8003c3c:	d1f7      	bne.n	8003c2e <_fwalk_reent+0xe>
 8003c3e:	4638      	mov	r0, r7
 8003c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c44:	89ab      	ldrh	r3, [r5, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d907      	bls.n	8003c5a <_fwalk_reent+0x3a>
 8003c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	d003      	beq.n	8003c5a <_fwalk_reent+0x3a>
 8003c52:	4629      	mov	r1, r5
 8003c54:	4630      	mov	r0, r6
 8003c56:	47c0      	blx	r8
 8003c58:	4307      	orrs	r7, r0
 8003c5a:	3568      	adds	r5, #104	; 0x68
 8003c5c:	e7e9      	b.n	8003c32 <_fwalk_reent+0x12>

08003c5e <__retarget_lock_init_recursive>:
 8003c5e:	4770      	bx	lr

08003c60 <__retarget_lock_acquire_recursive>:
 8003c60:	4770      	bx	lr

08003c62 <__retarget_lock_release_recursive>:
 8003c62:	4770      	bx	lr

08003c64 <__swhatbuf_r>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	460e      	mov	r6, r1
 8003c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	b096      	sub	sp, #88	; 0x58
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	da08      	bge.n	8003c88 <__swhatbuf_r+0x24>
 8003c76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	602a      	str	r2, [r5, #0]
 8003c7e:	061a      	lsls	r2, r3, #24
 8003c80:	d410      	bmi.n	8003ca4 <__swhatbuf_r+0x40>
 8003c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c86:	e00e      	b.n	8003ca6 <__swhatbuf_r+0x42>
 8003c88:	466a      	mov	r2, sp
 8003c8a:	f000 fc95 	bl	80045b8 <_fstat_r>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	dbf1      	blt.n	8003c76 <__swhatbuf_r+0x12>
 8003c92:	9a01      	ldr	r2, [sp, #4]
 8003c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c9c:	425a      	negs	r2, r3
 8003c9e:	415a      	adcs	r2, r3
 8003ca0:	602a      	str	r2, [r5, #0]
 8003ca2:	e7ee      	b.n	8003c82 <__swhatbuf_r+0x1e>
 8003ca4:	2340      	movs	r3, #64	; 0x40
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	b016      	add	sp, #88	; 0x58
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb0 <__smakebuf_r>:
 8003cb0:	898b      	ldrh	r3, [r1, #12]
 8003cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb4:	079d      	lsls	r5, r3, #30
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	d507      	bpl.n	8003ccc <__smakebuf_r+0x1c>
 8003cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	6163      	str	r3, [r4, #20]
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	ab01      	add	r3, sp, #4
 8003cce:	466a      	mov	r2, sp
 8003cd0:	f7ff ffc8 	bl	8003c64 <__swhatbuf_r>
 8003cd4:	9900      	ldr	r1, [sp, #0]
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f000 f895 	bl	8003e08 <_malloc_r>
 8003cde:	b948      	cbnz	r0, 8003cf4 <__smakebuf_r+0x44>
 8003ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce4:	059a      	lsls	r2, r3, #22
 8003ce6:	d4ef      	bmi.n	8003cc8 <__smakebuf_r+0x18>
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	f043 0302 	orr.w	r3, r3, #2
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	e7e3      	b.n	8003cbc <__smakebuf_r+0xc>
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <__smakebuf_r+0x7c>)
 8003cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	6020      	str	r0, [r4, #0]
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	9b00      	ldr	r3, [sp, #0]
 8003d04:	6163      	str	r3, [r4, #20]
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	6120      	str	r0, [r4, #16]
 8003d0a:	b15b      	cbz	r3, 8003d24 <__smakebuf_r+0x74>
 8003d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 fc63 	bl	80045dc <_isatty_r>
 8003d16:	b128      	cbz	r0, 8003d24 <__smakebuf_r+0x74>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	89a0      	ldrh	r0, [r4, #12]
 8003d26:	4305      	orrs	r5, r0
 8003d28:	81a5      	strh	r5, [r4, #12]
 8003d2a:	e7cd      	b.n	8003cc8 <__smakebuf_r+0x18>
 8003d2c:	08003abd 	.word	0x08003abd

08003d30 <_free_r>:
 8003d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d32:	2900      	cmp	r1, #0
 8003d34:	d044      	beq.n	8003dc0 <_free_r+0x90>
 8003d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3a:	9001      	str	r0, [sp, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d42:	bfb8      	it	lt
 8003d44:	18e4      	addlt	r4, r4, r3
 8003d46:	f000 fc6b 	bl	8004620 <__malloc_lock>
 8003d4a:	4a1e      	ldr	r2, [pc, #120]	; (8003dc4 <_free_r+0x94>)
 8003d4c:	9801      	ldr	r0, [sp, #4]
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	b933      	cbnz	r3, 8003d60 <_free_r+0x30>
 8003d52:	6063      	str	r3, [r4, #4]
 8003d54:	6014      	str	r4, [r2, #0]
 8003d56:	b003      	add	sp, #12
 8003d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d5c:	f000 bc66 	b.w	800462c <__malloc_unlock>
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	d908      	bls.n	8003d76 <_free_r+0x46>
 8003d64:	6825      	ldr	r5, [r4, #0]
 8003d66:	1961      	adds	r1, r4, r5
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	bf01      	itttt	eq
 8003d6c:	6819      	ldreq	r1, [r3, #0]
 8003d6e:	685b      	ldreq	r3, [r3, #4]
 8003d70:	1949      	addeq	r1, r1, r5
 8003d72:	6021      	streq	r1, [r4, #0]
 8003d74:	e7ed      	b.n	8003d52 <_free_r+0x22>
 8003d76:	461a      	mov	r2, r3
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b10b      	cbz	r3, 8003d80 <_free_r+0x50>
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	d9fa      	bls.n	8003d76 <_free_r+0x46>
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	1855      	adds	r5, r2, r1
 8003d84:	42a5      	cmp	r5, r4
 8003d86:	d10b      	bne.n	8003da0 <_free_r+0x70>
 8003d88:	6824      	ldr	r4, [r4, #0]
 8003d8a:	4421      	add	r1, r4
 8003d8c:	1854      	adds	r4, r2, r1
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	d1e0      	bne.n	8003d56 <_free_r+0x26>
 8003d94:	681c      	ldr	r4, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	6053      	str	r3, [r2, #4]
 8003d9a:	4421      	add	r1, r4
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	e7da      	b.n	8003d56 <_free_r+0x26>
 8003da0:	d902      	bls.n	8003da8 <_free_r+0x78>
 8003da2:	230c      	movs	r3, #12
 8003da4:	6003      	str	r3, [r0, #0]
 8003da6:	e7d6      	b.n	8003d56 <_free_r+0x26>
 8003da8:	6825      	ldr	r5, [r4, #0]
 8003daa:	1961      	adds	r1, r4, r5
 8003dac:	428b      	cmp	r3, r1
 8003dae:	bf04      	itt	eq
 8003db0:	6819      	ldreq	r1, [r3, #0]
 8003db2:	685b      	ldreq	r3, [r3, #4]
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	bf04      	itt	eq
 8003db8:	1949      	addeq	r1, r1, r5
 8003dba:	6021      	streq	r1, [r4, #0]
 8003dbc:	6054      	str	r4, [r2, #4]
 8003dbe:	e7ca      	b.n	8003d56 <_free_r+0x26>
 8003dc0:	b003      	add	sp, #12
 8003dc2:	bd30      	pop	{r4, r5, pc}
 8003dc4:	20000130 	.word	0x20000130

08003dc8 <sbrk_aligned>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4e0e      	ldr	r6, [pc, #56]	; (8003e04 <sbrk_aligned+0x3c>)
 8003dcc:	460c      	mov	r4, r1
 8003dce:	6831      	ldr	r1, [r6, #0]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	b911      	cbnz	r1, 8003dda <sbrk_aligned+0x12>
 8003dd4:	f000 fb7a 	bl	80044cc <_sbrk_r>
 8003dd8:	6030      	str	r0, [r6, #0]
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 fb75 	bl	80044cc <_sbrk_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d00a      	beq.n	8003dfc <sbrk_aligned+0x34>
 8003de6:	1cc4      	adds	r4, r0, #3
 8003de8:	f024 0403 	bic.w	r4, r4, #3
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d007      	beq.n	8003e00 <sbrk_aligned+0x38>
 8003df0:	1a21      	subs	r1, r4, r0
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 fb6a 	bl	80044cc <_sbrk_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d101      	bne.n	8003e00 <sbrk_aligned+0x38>
 8003dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8003e00:	4620      	mov	r0, r4
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	20000134 	.word	0x20000134

08003e08 <_malloc_r>:
 8003e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0c:	1ccd      	adds	r5, r1, #3
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	4607      	mov	r7, r0
 8003e1e:	db01      	blt.n	8003e24 <_malloc_r+0x1c>
 8003e20:	42a9      	cmp	r1, r5
 8003e22:	d905      	bls.n	8003e30 <_malloc_r+0x28>
 8003e24:	230c      	movs	r3, #12
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	2600      	movs	r6, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	4e2e      	ldr	r6, [pc, #184]	; (8003eec <_malloc_r+0xe4>)
 8003e32:	f000 fbf5 	bl	8004620 <__malloc_lock>
 8003e36:	6833      	ldr	r3, [r6, #0]
 8003e38:	461c      	mov	r4, r3
 8003e3a:	bb34      	cbnz	r4, 8003e8a <_malloc_r+0x82>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4638      	mov	r0, r7
 8003e40:	f7ff ffc2 	bl	8003dc8 <sbrk_aligned>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	4604      	mov	r4, r0
 8003e48:	d14d      	bne.n	8003ee6 <_malloc_r+0xde>
 8003e4a:	6834      	ldr	r4, [r6, #0]
 8003e4c:	4626      	mov	r6, r4
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d140      	bne.n	8003ed4 <_malloc_r+0xcc>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	4631      	mov	r1, r6
 8003e56:	4638      	mov	r0, r7
 8003e58:	eb04 0803 	add.w	r8, r4, r3
 8003e5c:	f000 fb36 	bl	80044cc <_sbrk_r>
 8003e60:	4580      	cmp	r8, r0
 8003e62:	d13a      	bne.n	8003eda <_malloc_r+0xd2>
 8003e64:	6821      	ldr	r1, [r4, #0]
 8003e66:	3503      	adds	r5, #3
 8003e68:	1a6d      	subs	r5, r5, r1
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	4629      	mov	r1, r5
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f7ff ffa5 	bl	8003dc8 <sbrk_aligned>
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d02b      	beq.n	8003eda <_malloc_r+0xd2>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	442b      	add	r3, r5
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	e00e      	b.n	8003ea8 <_malloc_r+0xa0>
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	1b52      	subs	r2, r2, r5
 8003e8e:	d41e      	bmi.n	8003ece <_malloc_r+0xc6>
 8003e90:	2a0b      	cmp	r2, #11
 8003e92:	d916      	bls.n	8003ec2 <_malloc_r+0xba>
 8003e94:	1961      	adds	r1, r4, r5
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6025      	str	r5, [r4, #0]
 8003e9a:	bf18      	it	ne
 8003e9c:	6059      	strne	r1, [r3, #4]
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	bf08      	it	eq
 8003ea2:	6031      	streq	r1, [r6, #0]
 8003ea4:	5162      	str	r2, [r4, r5]
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f104 060b 	add.w	r6, r4, #11
 8003eae:	f000 fbbd 	bl	800462c <__malloc_unlock>
 8003eb2:	f026 0607 	bic.w	r6, r6, #7
 8003eb6:	1d23      	adds	r3, r4, #4
 8003eb8:	1af2      	subs	r2, r6, r3
 8003eba:	d0b6      	beq.n	8003e2a <_malloc_r+0x22>
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	50a3      	str	r3, [r4, r2]
 8003ec0:	e7b3      	b.n	8003e2a <_malloc_r+0x22>
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	bf0c      	ite	eq
 8003ec8:	6032      	streq	r2, [r6, #0]
 8003eca:	605a      	strne	r2, [r3, #4]
 8003ecc:	e7ec      	b.n	8003ea8 <_malloc_r+0xa0>
 8003ece:	4623      	mov	r3, r4
 8003ed0:	6864      	ldr	r4, [r4, #4]
 8003ed2:	e7b2      	b.n	8003e3a <_malloc_r+0x32>
 8003ed4:	4634      	mov	r4, r6
 8003ed6:	6876      	ldr	r6, [r6, #4]
 8003ed8:	e7b9      	b.n	8003e4e <_malloc_r+0x46>
 8003eda:	230c      	movs	r3, #12
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f000 fba4 	bl	800462c <__malloc_unlock>
 8003ee4:	e7a1      	b.n	8003e2a <_malloc_r+0x22>
 8003ee6:	6025      	str	r5, [r4, #0]
 8003ee8:	e7de      	b.n	8003ea8 <_malloc_r+0xa0>
 8003eea:	bf00      	nop
 8003eec:	20000130 	.word	0x20000130

08003ef0 <__sfputc_r>:
 8003ef0:	6893      	ldr	r3, [r2, #8]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	b410      	push	{r4}
 8003ef8:	6093      	str	r3, [r2, #8]
 8003efa:	da08      	bge.n	8003f0e <__sfputc_r+0x1e>
 8003efc:	6994      	ldr	r4, [r2, #24]
 8003efe:	42a3      	cmp	r3, r4
 8003f00:	db01      	blt.n	8003f06 <__sfputc_r+0x16>
 8003f02:	290a      	cmp	r1, #10
 8003f04:	d103      	bne.n	8003f0e <__sfputc_r+0x1e>
 8003f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0a:	f7ff bc31 	b.w	8003770 <__swbuf_r>
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	1c58      	adds	r0, r3, #1
 8003f12:	6010      	str	r0, [r2, #0]
 8003f14:	7019      	strb	r1, [r3, #0]
 8003f16:	4608      	mov	r0, r1
 8003f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <__sfputs_r>:
 8003f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f20:	4606      	mov	r6, r0
 8003f22:	460f      	mov	r7, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	18d5      	adds	r5, r2, r3
 8003f28:	42ac      	cmp	r4, r5
 8003f2a:	d101      	bne.n	8003f30 <__sfputs_r+0x12>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e007      	b.n	8003f40 <__sfputs_r+0x22>
 8003f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f34:	463a      	mov	r2, r7
 8003f36:	4630      	mov	r0, r6
 8003f38:	f7ff ffda 	bl	8003ef0 <__sfputc_r>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d1f3      	bne.n	8003f28 <__sfputs_r+0xa>
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f44 <_vfiprintf_r>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	460d      	mov	r5, r1
 8003f4a:	b09d      	sub	sp, #116	; 0x74
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	4698      	mov	r8, r3
 8003f50:	4606      	mov	r6, r0
 8003f52:	b118      	cbz	r0, 8003f5c <_vfiprintf_r+0x18>
 8003f54:	6983      	ldr	r3, [r0, #24]
 8003f56:	b90b      	cbnz	r3, 8003f5c <_vfiprintf_r+0x18>
 8003f58:	f7ff fde4 	bl	8003b24 <__sinit>
 8003f5c:	4b89      	ldr	r3, [pc, #548]	; (8004184 <_vfiprintf_r+0x240>)
 8003f5e:	429d      	cmp	r5, r3
 8003f60:	d11b      	bne.n	8003f9a <_vfiprintf_r+0x56>
 8003f62:	6875      	ldr	r5, [r6, #4]
 8003f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f66:	07d9      	lsls	r1, r3, #31
 8003f68:	d405      	bmi.n	8003f76 <_vfiprintf_r+0x32>
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	059a      	lsls	r2, r3, #22
 8003f6e:	d402      	bmi.n	8003f76 <_vfiprintf_r+0x32>
 8003f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f72:	f7ff fe75 	bl	8003c60 <__retarget_lock_acquire_recursive>
 8003f76:	89ab      	ldrh	r3, [r5, #12]
 8003f78:	071b      	lsls	r3, r3, #28
 8003f7a:	d501      	bpl.n	8003f80 <_vfiprintf_r+0x3c>
 8003f7c:	692b      	ldr	r3, [r5, #16]
 8003f7e:	b9eb      	cbnz	r3, 8003fbc <_vfiprintf_r+0x78>
 8003f80:	4629      	mov	r1, r5
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff fc46 	bl	8003814 <__swsetup_r>
 8003f88:	b1c0      	cbz	r0, 8003fbc <_vfiprintf_r+0x78>
 8003f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f8c:	07dc      	lsls	r4, r3, #31
 8003f8e:	d50e      	bpl.n	8003fae <_vfiprintf_r+0x6a>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	b01d      	add	sp, #116	; 0x74
 8003f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9a:	4b7b      	ldr	r3, [pc, #492]	; (8004188 <_vfiprintf_r+0x244>)
 8003f9c:	429d      	cmp	r5, r3
 8003f9e:	d101      	bne.n	8003fa4 <_vfiprintf_r+0x60>
 8003fa0:	68b5      	ldr	r5, [r6, #8]
 8003fa2:	e7df      	b.n	8003f64 <_vfiprintf_r+0x20>
 8003fa4:	4b79      	ldr	r3, [pc, #484]	; (800418c <_vfiprintf_r+0x248>)
 8003fa6:	429d      	cmp	r5, r3
 8003fa8:	bf08      	it	eq
 8003faa:	68f5      	ldreq	r5, [r6, #12]
 8003fac:	e7da      	b.n	8003f64 <_vfiprintf_r+0x20>
 8003fae:	89ab      	ldrh	r3, [r5, #12]
 8003fb0:	0598      	lsls	r0, r3, #22
 8003fb2:	d4ed      	bmi.n	8003f90 <_vfiprintf_r+0x4c>
 8003fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fb6:	f7ff fe54 	bl	8003c62 <__retarget_lock_release_recursive>
 8003fba:	e7e9      	b.n	8003f90 <_vfiprintf_r+0x4c>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fca:	2330      	movs	r3, #48	; 0x30
 8003fcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004190 <_vfiprintf_r+0x24c>
 8003fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd4:	f04f 0901 	mov.w	r9, #1
 8003fd8:	4623      	mov	r3, r4
 8003fda:	469a      	mov	sl, r3
 8003fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe0:	b10a      	cbz	r2, 8003fe6 <_vfiprintf_r+0xa2>
 8003fe2:	2a25      	cmp	r2, #37	; 0x25
 8003fe4:	d1f9      	bne.n	8003fda <_vfiprintf_r+0x96>
 8003fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8003fea:	d00b      	beq.n	8004004 <_vfiprintf_r+0xc0>
 8003fec:	465b      	mov	r3, fp
 8003fee:	4622      	mov	r2, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7ff ff93 	bl	8003f1e <__sfputs_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f000 80aa 	beq.w	8004152 <_vfiprintf_r+0x20e>
 8003ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004000:	445a      	add	r2, fp
 8004002:	9209      	str	r2, [sp, #36]	; 0x24
 8004004:	f89a 3000 	ldrb.w	r3, [sl]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80a2 	beq.w	8004152 <_vfiprintf_r+0x20e>
 800400e:	2300      	movs	r3, #0
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004018:	f10a 0a01 	add.w	sl, sl, #1
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	9307      	str	r3, [sp, #28]
 8004020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004024:	931a      	str	r3, [sp, #104]	; 0x68
 8004026:	4654      	mov	r4, sl
 8004028:	2205      	movs	r2, #5
 800402a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402e:	4858      	ldr	r0, [pc, #352]	; (8004190 <_vfiprintf_r+0x24c>)
 8004030:	f7fc f8ee 	bl	8000210 <memchr>
 8004034:	9a04      	ldr	r2, [sp, #16]
 8004036:	b9d8      	cbnz	r0, 8004070 <_vfiprintf_r+0x12c>
 8004038:	06d1      	lsls	r1, r2, #27
 800403a:	bf44      	itt	mi
 800403c:	2320      	movmi	r3, #32
 800403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004042:	0713      	lsls	r3, r2, #28
 8004044:	bf44      	itt	mi
 8004046:	232b      	movmi	r3, #43	; 0x2b
 8004048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404c:	f89a 3000 	ldrb.w	r3, [sl]
 8004050:	2b2a      	cmp	r3, #42	; 0x2a
 8004052:	d015      	beq.n	8004080 <_vfiprintf_r+0x13c>
 8004054:	9a07      	ldr	r2, [sp, #28]
 8004056:	4654      	mov	r4, sl
 8004058:	2000      	movs	r0, #0
 800405a:	f04f 0c0a 	mov.w	ip, #10
 800405e:	4621      	mov	r1, r4
 8004060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004064:	3b30      	subs	r3, #48	; 0x30
 8004066:	2b09      	cmp	r3, #9
 8004068:	d94e      	bls.n	8004108 <_vfiprintf_r+0x1c4>
 800406a:	b1b0      	cbz	r0, 800409a <_vfiprintf_r+0x156>
 800406c:	9207      	str	r2, [sp, #28]
 800406e:	e014      	b.n	800409a <_vfiprintf_r+0x156>
 8004070:	eba0 0308 	sub.w	r3, r0, r8
 8004074:	fa09 f303 	lsl.w	r3, r9, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	46a2      	mov	sl, r4
 800407e:	e7d2      	b.n	8004026 <_vfiprintf_r+0xe2>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	1d19      	adds	r1, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	9103      	str	r1, [sp, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	bfbb      	ittet	lt
 800408c:	425b      	neglt	r3, r3
 800408e:	f042 0202 	orrlt.w	r2, r2, #2
 8004092:	9307      	strge	r3, [sp, #28]
 8004094:	9307      	strlt	r3, [sp, #28]
 8004096:	bfb8      	it	lt
 8004098:	9204      	strlt	r2, [sp, #16]
 800409a:	7823      	ldrb	r3, [r4, #0]
 800409c:	2b2e      	cmp	r3, #46	; 0x2e
 800409e:	d10c      	bne.n	80040ba <_vfiprintf_r+0x176>
 80040a0:	7863      	ldrb	r3, [r4, #1]
 80040a2:	2b2a      	cmp	r3, #42	; 0x2a
 80040a4:	d135      	bne.n	8004112 <_vfiprintf_r+0x1ce>
 80040a6:	9b03      	ldr	r3, [sp, #12]
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	9203      	str	r2, [sp, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfb8      	it	lt
 80040b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80040b6:	3402      	adds	r4, #2
 80040b8:	9305      	str	r3, [sp, #20]
 80040ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041a0 <_vfiprintf_r+0x25c>
 80040be:	7821      	ldrb	r1, [r4, #0]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4650      	mov	r0, sl
 80040c4:	f7fc f8a4 	bl	8000210 <memchr>
 80040c8:	b140      	cbz	r0, 80040dc <_vfiprintf_r+0x198>
 80040ca:	2340      	movs	r3, #64	; 0x40
 80040cc:	eba0 000a 	sub.w	r0, r0, sl
 80040d0:	fa03 f000 	lsl.w	r0, r3, r0
 80040d4:	9b04      	ldr	r3, [sp, #16]
 80040d6:	4303      	orrs	r3, r0
 80040d8:	3401      	adds	r4, #1
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e0:	482c      	ldr	r0, [pc, #176]	; (8004194 <_vfiprintf_r+0x250>)
 80040e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040e6:	2206      	movs	r2, #6
 80040e8:	f7fc f892 	bl	8000210 <memchr>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d03f      	beq.n	8004170 <_vfiprintf_r+0x22c>
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <_vfiprintf_r+0x254>)
 80040f2:	bb1b      	cbnz	r3, 800413c <_vfiprintf_r+0x1f8>
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	3307      	adds	r3, #7
 80040f8:	f023 0307 	bic.w	r3, r3, #7
 80040fc:	3308      	adds	r3, #8
 80040fe:	9303      	str	r3, [sp, #12]
 8004100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004102:	443b      	add	r3, r7
 8004104:	9309      	str	r3, [sp, #36]	; 0x24
 8004106:	e767      	b.n	8003fd8 <_vfiprintf_r+0x94>
 8004108:	fb0c 3202 	mla	r2, ip, r2, r3
 800410c:	460c      	mov	r4, r1
 800410e:	2001      	movs	r0, #1
 8004110:	e7a5      	b.n	800405e <_vfiprintf_r+0x11a>
 8004112:	2300      	movs	r3, #0
 8004114:	3401      	adds	r4, #1
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	4619      	mov	r1, r3
 800411a:	f04f 0c0a 	mov.w	ip, #10
 800411e:	4620      	mov	r0, r4
 8004120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004124:	3a30      	subs	r2, #48	; 0x30
 8004126:	2a09      	cmp	r2, #9
 8004128:	d903      	bls.n	8004132 <_vfiprintf_r+0x1ee>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0c5      	beq.n	80040ba <_vfiprintf_r+0x176>
 800412e:	9105      	str	r1, [sp, #20]
 8004130:	e7c3      	b.n	80040ba <_vfiprintf_r+0x176>
 8004132:	fb0c 2101 	mla	r1, ip, r1, r2
 8004136:	4604      	mov	r4, r0
 8004138:	2301      	movs	r3, #1
 800413a:	e7f0      	b.n	800411e <_vfiprintf_r+0x1da>
 800413c:	ab03      	add	r3, sp, #12
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	462a      	mov	r2, r5
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <_vfiprintf_r+0x258>)
 8004144:	a904      	add	r1, sp, #16
 8004146:	4630      	mov	r0, r6
 8004148:	f3af 8000 	nop.w
 800414c:	4607      	mov	r7, r0
 800414e:	1c78      	adds	r0, r7, #1
 8004150:	d1d6      	bne.n	8004100 <_vfiprintf_r+0x1bc>
 8004152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	d405      	bmi.n	8004164 <_vfiprintf_r+0x220>
 8004158:	89ab      	ldrh	r3, [r5, #12]
 800415a:	059a      	lsls	r2, r3, #22
 800415c:	d402      	bmi.n	8004164 <_vfiprintf_r+0x220>
 800415e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004160:	f7ff fd7f 	bl	8003c62 <__retarget_lock_release_recursive>
 8004164:	89ab      	ldrh	r3, [r5, #12]
 8004166:	065b      	lsls	r3, r3, #25
 8004168:	f53f af12 	bmi.w	8003f90 <_vfiprintf_r+0x4c>
 800416c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800416e:	e711      	b.n	8003f94 <_vfiprintf_r+0x50>
 8004170:	ab03      	add	r3, sp, #12
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	462a      	mov	r2, r5
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <_vfiprintf_r+0x258>)
 8004178:	a904      	add	r1, sp, #16
 800417a:	4630      	mov	r0, r6
 800417c:	f000 f880 	bl	8004280 <_printf_i>
 8004180:	e7e4      	b.n	800414c <_vfiprintf_r+0x208>
 8004182:	bf00      	nop
 8004184:	0800470c 	.word	0x0800470c
 8004188:	0800472c 	.word	0x0800472c
 800418c:	080046ec 	.word	0x080046ec
 8004190:	0800474c 	.word	0x0800474c
 8004194:	08004756 	.word	0x08004756
 8004198:	00000000 	.word	0x00000000
 800419c:	08003f1f 	.word	0x08003f1f
 80041a0:	08004752 	.word	0x08004752

080041a4 <_printf_common>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	4616      	mov	r6, r2
 80041aa:	4699      	mov	r9, r3
 80041ac:	688a      	ldr	r2, [r1, #8]
 80041ae:	690b      	ldr	r3, [r1, #16]
 80041b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bfb8      	it	lt
 80041b8:	4613      	movlt	r3, r2
 80041ba:	6033      	str	r3, [r6, #0]
 80041bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c0:	4607      	mov	r7, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	b10a      	cbz	r2, 80041ca <_printf_common+0x26>
 80041c6:	3301      	adds	r3, #1
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	0699      	lsls	r1, r3, #26
 80041ce:	bf42      	ittt	mi
 80041d0:	6833      	ldrmi	r3, [r6, #0]
 80041d2:	3302      	addmi	r3, #2
 80041d4:	6033      	strmi	r3, [r6, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	f015 0506 	ands.w	r5, r5, #6
 80041dc:	d106      	bne.n	80041ec <_printf_common+0x48>
 80041de:	f104 0a19 	add.w	sl, r4, #25
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	6832      	ldr	r2, [r6, #0]
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dc26      	bgt.n	800423a <_printf_common+0x96>
 80041ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f0:	1e13      	subs	r3, r2, #0
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	bf18      	it	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	0692      	lsls	r2, r2, #26
 80041fa:	d42b      	bmi.n	8004254 <_printf_common+0xb0>
 80041fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004200:	4649      	mov	r1, r9
 8004202:	4638      	mov	r0, r7
 8004204:	47c0      	blx	r8
 8004206:	3001      	adds	r0, #1
 8004208:	d01e      	beq.n	8004248 <_printf_common+0xa4>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	68e5      	ldr	r5, [r4, #12]
 800420e:	6832      	ldr	r2, [r6, #0]
 8004210:	f003 0306 	and.w	r3, r3, #6
 8004214:	2b04      	cmp	r3, #4
 8004216:	bf08      	it	eq
 8004218:	1aad      	subeq	r5, r5, r2
 800421a:	68a3      	ldr	r3, [r4, #8]
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	bf0c      	ite	eq
 8004220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004224:	2500      	movne	r5, #0
 8004226:	4293      	cmp	r3, r2
 8004228:	bfc4      	itt	gt
 800422a:	1a9b      	subgt	r3, r3, r2
 800422c:	18ed      	addgt	r5, r5, r3
 800422e:	2600      	movs	r6, #0
 8004230:	341a      	adds	r4, #26
 8004232:	42b5      	cmp	r5, r6
 8004234:	d11a      	bne.n	800426c <_printf_common+0xc8>
 8004236:	2000      	movs	r0, #0
 8004238:	e008      	b.n	800424c <_printf_common+0xa8>
 800423a:	2301      	movs	r3, #1
 800423c:	4652      	mov	r2, sl
 800423e:	4649      	mov	r1, r9
 8004240:	4638      	mov	r0, r7
 8004242:	47c0      	blx	r8
 8004244:	3001      	adds	r0, #1
 8004246:	d103      	bne.n	8004250 <_printf_common+0xac>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	3501      	adds	r5, #1
 8004252:	e7c6      	b.n	80041e2 <_printf_common+0x3e>
 8004254:	18e1      	adds	r1, r4, r3
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	2030      	movs	r0, #48	; 0x30
 800425a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800425e:	4422      	add	r2, r4
 8004260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004268:	3302      	adds	r3, #2
 800426a:	e7c7      	b.n	80041fc <_printf_common+0x58>
 800426c:	2301      	movs	r3, #1
 800426e:	4622      	mov	r2, r4
 8004270:	4649      	mov	r1, r9
 8004272:	4638      	mov	r0, r7
 8004274:	47c0      	blx	r8
 8004276:	3001      	adds	r0, #1
 8004278:	d0e6      	beq.n	8004248 <_printf_common+0xa4>
 800427a:	3601      	adds	r6, #1
 800427c:	e7d9      	b.n	8004232 <_printf_common+0x8e>
	...

08004280 <_printf_i>:
 8004280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	7e0f      	ldrb	r7, [r1, #24]
 8004286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004288:	2f78      	cmp	r7, #120	; 0x78
 800428a:	4691      	mov	r9, r2
 800428c:	4680      	mov	r8, r0
 800428e:	460c      	mov	r4, r1
 8004290:	469a      	mov	sl, r3
 8004292:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004296:	d807      	bhi.n	80042a8 <_printf_i+0x28>
 8004298:	2f62      	cmp	r7, #98	; 0x62
 800429a:	d80a      	bhi.n	80042b2 <_printf_i+0x32>
 800429c:	2f00      	cmp	r7, #0
 800429e:	f000 80d8 	beq.w	8004452 <_printf_i+0x1d2>
 80042a2:	2f58      	cmp	r7, #88	; 0x58
 80042a4:	f000 80a3 	beq.w	80043ee <_printf_i+0x16e>
 80042a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b0:	e03a      	b.n	8004328 <_printf_i+0xa8>
 80042b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042b6:	2b15      	cmp	r3, #21
 80042b8:	d8f6      	bhi.n	80042a8 <_printf_i+0x28>
 80042ba:	a101      	add	r1, pc, #4	; (adr r1, 80042c0 <_printf_i+0x40>)
 80042bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c0:	08004319 	.word	0x08004319
 80042c4:	0800432d 	.word	0x0800432d
 80042c8:	080042a9 	.word	0x080042a9
 80042cc:	080042a9 	.word	0x080042a9
 80042d0:	080042a9 	.word	0x080042a9
 80042d4:	080042a9 	.word	0x080042a9
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	080042a9 	.word	0x080042a9
 80042e0:	080042a9 	.word	0x080042a9
 80042e4:	080042a9 	.word	0x080042a9
 80042e8:	080042a9 	.word	0x080042a9
 80042ec:	08004439 	.word	0x08004439
 80042f0:	0800435d 	.word	0x0800435d
 80042f4:	0800441b 	.word	0x0800441b
 80042f8:	080042a9 	.word	0x080042a9
 80042fc:	080042a9 	.word	0x080042a9
 8004300:	0800445b 	.word	0x0800445b
 8004304:	080042a9 	.word	0x080042a9
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080042a9 	.word	0x080042a9
 8004310:	080042a9 	.word	0x080042a9
 8004314:	08004423 	.word	0x08004423
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	602a      	str	r2, [r5, #0]
 8004320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004328:	2301      	movs	r3, #1
 800432a:	e0a3      	b.n	8004474 <_printf_i+0x1f4>
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	6829      	ldr	r1, [r5, #0]
 8004330:	0606      	lsls	r6, r0, #24
 8004332:	f101 0304 	add.w	r3, r1, #4
 8004336:	d50a      	bpl.n	800434e <_printf_i+0xce>
 8004338:	680e      	ldr	r6, [r1, #0]
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	2e00      	cmp	r6, #0
 800433e:	da03      	bge.n	8004348 <_printf_i+0xc8>
 8004340:	232d      	movs	r3, #45	; 0x2d
 8004342:	4276      	negs	r6, r6
 8004344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004348:	485e      	ldr	r0, [pc, #376]	; (80044c4 <_printf_i+0x244>)
 800434a:	230a      	movs	r3, #10
 800434c:	e019      	b.n	8004382 <_printf_i+0x102>
 800434e:	680e      	ldr	r6, [r1, #0]
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004356:	bf18      	it	ne
 8004358:	b236      	sxthne	r6, r6
 800435a:	e7ef      	b.n	800433c <_printf_i+0xbc>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	1d19      	adds	r1, r3, #4
 8004362:	6029      	str	r1, [r5, #0]
 8004364:	0601      	lsls	r1, r0, #24
 8004366:	d501      	bpl.n	800436c <_printf_i+0xec>
 8004368:	681e      	ldr	r6, [r3, #0]
 800436a:	e002      	b.n	8004372 <_printf_i+0xf2>
 800436c:	0646      	lsls	r6, r0, #25
 800436e:	d5fb      	bpl.n	8004368 <_printf_i+0xe8>
 8004370:	881e      	ldrh	r6, [r3, #0]
 8004372:	4854      	ldr	r0, [pc, #336]	; (80044c4 <_printf_i+0x244>)
 8004374:	2f6f      	cmp	r7, #111	; 0x6f
 8004376:	bf0c      	ite	eq
 8004378:	2308      	moveq	r3, #8
 800437a:	230a      	movne	r3, #10
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004382:	6865      	ldr	r5, [r4, #4]
 8004384:	60a5      	str	r5, [r4, #8]
 8004386:	2d00      	cmp	r5, #0
 8004388:	bfa2      	ittt	ge
 800438a:	6821      	ldrge	r1, [r4, #0]
 800438c:	f021 0104 	bicge.w	r1, r1, #4
 8004390:	6021      	strge	r1, [r4, #0]
 8004392:	b90e      	cbnz	r6, 8004398 <_printf_i+0x118>
 8004394:	2d00      	cmp	r5, #0
 8004396:	d04d      	beq.n	8004434 <_printf_i+0x1b4>
 8004398:	4615      	mov	r5, r2
 800439a:	fbb6 f1f3 	udiv	r1, r6, r3
 800439e:	fb03 6711 	mls	r7, r3, r1, r6
 80043a2:	5dc7      	ldrb	r7, [r0, r7]
 80043a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043a8:	4637      	mov	r7, r6
 80043aa:	42bb      	cmp	r3, r7
 80043ac:	460e      	mov	r6, r1
 80043ae:	d9f4      	bls.n	800439a <_printf_i+0x11a>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d10b      	bne.n	80043cc <_printf_i+0x14c>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	07de      	lsls	r6, r3, #31
 80043b8:	d508      	bpl.n	80043cc <_printf_i+0x14c>
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	6861      	ldr	r1, [r4, #4]
 80043be:	4299      	cmp	r1, r3
 80043c0:	bfde      	ittt	le
 80043c2:	2330      	movle	r3, #48	; 0x30
 80043c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043cc:	1b52      	subs	r2, r2, r5
 80043ce:	6122      	str	r2, [r4, #16]
 80043d0:	f8cd a000 	str.w	sl, [sp]
 80043d4:	464b      	mov	r3, r9
 80043d6:	aa03      	add	r2, sp, #12
 80043d8:	4621      	mov	r1, r4
 80043da:	4640      	mov	r0, r8
 80043dc:	f7ff fee2 	bl	80041a4 <_printf_common>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d14c      	bne.n	800447e <_printf_i+0x1fe>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	b004      	add	sp, #16
 80043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ee:	4835      	ldr	r0, [pc, #212]	; (80044c4 <_printf_i+0x244>)
 80043f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043f4:	6829      	ldr	r1, [r5, #0]
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80043fc:	6029      	str	r1, [r5, #0]
 80043fe:	061d      	lsls	r5, r3, #24
 8004400:	d514      	bpl.n	800442c <_printf_i+0x1ac>
 8004402:	07df      	lsls	r7, r3, #31
 8004404:	bf44      	itt	mi
 8004406:	f043 0320 	orrmi.w	r3, r3, #32
 800440a:	6023      	strmi	r3, [r4, #0]
 800440c:	b91e      	cbnz	r6, 8004416 <_printf_i+0x196>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f023 0320 	bic.w	r3, r3, #32
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	2310      	movs	r3, #16
 8004418:	e7b0      	b.n	800437c <_printf_i+0xfc>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	2378      	movs	r3, #120	; 0x78
 8004424:	4828      	ldr	r0, [pc, #160]	; (80044c8 <_printf_i+0x248>)
 8004426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800442a:	e7e3      	b.n	80043f4 <_printf_i+0x174>
 800442c:	0659      	lsls	r1, r3, #25
 800442e:	bf48      	it	mi
 8004430:	b2b6      	uxthmi	r6, r6
 8004432:	e7e6      	b.n	8004402 <_printf_i+0x182>
 8004434:	4615      	mov	r5, r2
 8004436:	e7bb      	b.n	80043b0 <_printf_i+0x130>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	6826      	ldr	r6, [r4, #0]
 800443c:	6961      	ldr	r1, [r4, #20]
 800443e:	1d18      	adds	r0, r3, #4
 8004440:	6028      	str	r0, [r5, #0]
 8004442:	0635      	lsls	r5, r6, #24
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	d501      	bpl.n	800444c <_printf_i+0x1cc>
 8004448:	6019      	str	r1, [r3, #0]
 800444a:	e002      	b.n	8004452 <_printf_i+0x1d2>
 800444c:	0670      	lsls	r0, r6, #25
 800444e:	d5fb      	bpl.n	8004448 <_printf_i+0x1c8>
 8004450:	8019      	strh	r1, [r3, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	4615      	mov	r5, r2
 8004458:	e7ba      	b.n	80043d0 <_printf_i+0x150>
 800445a:	682b      	ldr	r3, [r5, #0]
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	681d      	ldr	r5, [r3, #0]
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	2100      	movs	r1, #0
 8004466:	4628      	mov	r0, r5
 8004468:	f7fb fed2 	bl	8000210 <memchr>
 800446c:	b108      	cbz	r0, 8004472 <_printf_i+0x1f2>
 800446e:	1b40      	subs	r0, r0, r5
 8004470:	6060      	str	r0, [r4, #4]
 8004472:	6863      	ldr	r3, [r4, #4]
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	2300      	movs	r3, #0
 8004478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447c:	e7a8      	b.n	80043d0 <_printf_i+0x150>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	462a      	mov	r2, r5
 8004482:	4649      	mov	r1, r9
 8004484:	4640      	mov	r0, r8
 8004486:	47d0      	blx	sl
 8004488:	3001      	adds	r0, #1
 800448a:	d0ab      	beq.n	80043e4 <_printf_i+0x164>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	079b      	lsls	r3, r3, #30
 8004490:	d413      	bmi.n	80044ba <_printf_i+0x23a>
 8004492:	68e0      	ldr	r0, [r4, #12]
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	4298      	cmp	r0, r3
 8004498:	bfb8      	it	lt
 800449a:	4618      	movlt	r0, r3
 800449c:	e7a4      	b.n	80043e8 <_printf_i+0x168>
 800449e:	2301      	movs	r3, #1
 80044a0:	4632      	mov	r2, r6
 80044a2:	4649      	mov	r1, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	47d0      	blx	sl
 80044a8:	3001      	adds	r0, #1
 80044aa:	d09b      	beq.n	80043e4 <_printf_i+0x164>
 80044ac:	3501      	adds	r5, #1
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	9903      	ldr	r1, [sp, #12]
 80044b2:	1a5b      	subs	r3, r3, r1
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	dcf2      	bgt.n	800449e <_printf_i+0x21e>
 80044b8:	e7eb      	b.n	8004492 <_printf_i+0x212>
 80044ba:	2500      	movs	r5, #0
 80044bc:	f104 0619 	add.w	r6, r4, #25
 80044c0:	e7f5      	b.n	80044ae <_printf_i+0x22e>
 80044c2:	bf00      	nop
 80044c4:	0800475d 	.word	0x0800475d
 80044c8:	0800476e 	.word	0x0800476e

080044cc <_sbrk_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d06      	ldr	r5, [pc, #24]	; (80044e8 <_sbrk_r+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fc fb60 	bl	8000b9c <_sbrk>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_sbrk_r+0x1a>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_sbrk_r+0x1a>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20000138 	.word	0x20000138

080044ec <__sread>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	460c      	mov	r4, r1
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	f000 f8a0 	bl	8004638 <_read_r>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	bfab      	itete	ge
 80044fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004500:	181b      	addge	r3, r3, r0
 8004502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004506:	bfac      	ite	ge
 8004508:	6563      	strge	r3, [r4, #84]	; 0x54
 800450a:	81a3      	strhlt	r3, [r4, #12]
 800450c:	bd10      	pop	{r4, pc}

0800450e <__swrite>:
 800450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	461f      	mov	r7, r3
 8004514:	898b      	ldrh	r3, [r1, #12]
 8004516:	05db      	lsls	r3, r3, #23
 8004518:	4605      	mov	r5, r0
 800451a:	460c      	mov	r4, r1
 800451c:	4616      	mov	r6, r2
 800451e:	d505      	bpl.n	800452c <__swrite+0x1e>
 8004520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004524:	2302      	movs	r3, #2
 8004526:	2200      	movs	r2, #0
 8004528:	f000 f868 	bl	80045fc <_lseek_r>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	4632      	mov	r2, r6
 800453a:	463b      	mov	r3, r7
 800453c:	4628      	mov	r0, r5
 800453e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004542:	f000 b817 	b.w	8004574 <_write_r>

08004546 <__sseek>:
 8004546:	b510      	push	{r4, lr}
 8004548:	460c      	mov	r4, r1
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 f855 	bl	80045fc <_lseek_r>
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	bf15      	itete	ne
 8004558:	6560      	strne	r0, [r4, #84]	; 0x54
 800455a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800455e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strheq	r3, [r4, #12]
 8004564:	bf18      	it	ne
 8004566:	81a3      	strhne	r3, [r4, #12]
 8004568:	bd10      	pop	{r4, pc}

0800456a <__sclose>:
 800456a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456e:	f000 b813 	b.w	8004598 <_close_r>
	...

08004574 <_write_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4d07      	ldr	r5, [pc, #28]	; (8004594 <_write_r+0x20>)
 8004578:	4604      	mov	r4, r0
 800457a:	4608      	mov	r0, r1
 800457c:	4611      	mov	r1, r2
 800457e:	2200      	movs	r2, #0
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fc fab9 	bl	8000afa <_write>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_write_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_write_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	20000138 	.word	0x20000138

08004598 <_close_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4d06      	ldr	r5, [pc, #24]	; (80045b4 <_close_r+0x1c>)
 800459c:	2300      	movs	r3, #0
 800459e:	4604      	mov	r4, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	f7fc fac5 	bl	8000b32 <_close>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_close_r+0x1a>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_close_r+0x1a>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	20000138 	.word	0x20000138

080045b8 <_fstat_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4d07      	ldr	r5, [pc, #28]	; (80045d8 <_fstat_r+0x20>)
 80045bc:	2300      	movs	r3, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	f7fc fac0 	bl	8000b4a <_fstat>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	d102      	bne.n	80045d4 <_fstat_r+0x1c>
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	b103      	cbz	r3, 80045d4 <_fstat_r+0x1c>
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
 80045d6:	bf00      	nop
 80045d8:	20000138 	.word	0x20000138

080045dc <_isatty_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4d06      	ldr	r5, [pc, #24]	; (80045f8 <_isatty_r+0x1c>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	4604      	mov	r4, r0
 80045e4:	4608      	mov	r0, r1
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	f7fc fabf 	bl	8000b6a <_isatty>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_isatty_r+0x1a>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_isatty_r+0x1a>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	20000138 	.word	0x20000138

080045fc <_lseek_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4d07      	ldr	r5, [pc, #28]	; (800461c <_lseek_r+0x20>)
 8004600:	4604      	mov	r4, r0
 8004602:	4608      	mov	r0, r1
 8004604:	4611      	mov	r1, r2
 8004606:	2200      	movs	r2, #0
 8004608:	602a      	str	r2, [r5, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f7fc fab8 	bl	8000b80 <_lseek>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_lseek_r+0x1e>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_lseek_r+0x1e>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000138 	.word	0x20000138

08004620 <__malloc_lock>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__malloc_lock+0x8>)
 8004622:	f7ff bb1d 	b.w	8003c60 <__retarget_lock_acquire_recursive>
 8004626:	bf00      	nop
 8004628:	2000012c 	.word	0x2000012c

0800462c <__malloc_unlock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_unlock+0x8>)
 800462e:	f7ff bb18 	b.w	8003c62 <__retarget_lock_release_recursive>
 8004632:	bf00      	nop
 8004634:	2000012c 	.word	0x2000012c

08004638 <_read_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4d07      	ldr	r5, [pc, #28]	; (8004658 <_read_r+0x20>)
 800463c:	4604      	mov	r4, r0
 800463e:	4608      	mov	r0, r1
 8004640:	4611      	mov	r1, r2
 8004642:	2200      	movs	r2, #0
 8004644:	602a      	str	r2, [r5, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	f7fc fa3a 	bl	8000ac0 <_read>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_read_r+0x1e>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b103      	cbz	r3, 8004656 <_read_r+0x1e>
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	20000138 	.word	0x20000138

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
