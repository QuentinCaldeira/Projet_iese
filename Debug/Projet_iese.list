
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08008650  08008650  00018650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf0  08008bf0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf8  08008bf8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08008ddc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08008ddc  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ab  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc1  00000000  00000000  0002cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022787  00000000  00000000  0002fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea80  00000000  00000000  0005254f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc89c  00000000  00000000  00060fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d38  00000000  00000000  0012d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008638 	.word	0x08008638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008638 	.word	0x08008638

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_GPIO_Init+0xd0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_GPIO_Init+0xd0>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2120      	movs	r1, #32
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001018:	f001 fa16 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001022:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0xd8>)
 8001034:	f001 f874 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001038:	2320      	movs	r3, #32
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0xd4>)
 8001050:	f001 f866 	bl	8002120 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020800 	.word	0x40020800

08001068 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f001 f9e9 	bl	800247c <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 fd0e 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_I2C_MspInit+0x84>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12c      	bne.n	8001140 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_I2C_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001114:	2304      	movs	r3, #4
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <HAL_I2C_MspInit+0x8c>)
 8001120:	f000 fffe 	bl	8002120 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_I2C_MspInit+0x88>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_I2C_MspInit+0x88>)
 800112e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_I2C_MspInit+0x88>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020400 	.word	0x40020400

08001154 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 8001162:	f107 010f 	add.w	r1, r7, #15
 8001166:	230a      	movs	r3, #10
 8001168:	2201      	movs	r2, #1
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <__io_putchar+0x28>)
 800116c:	f003 fbef 	bl	800494e <HAL_UART_Transmit>
	return ch;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000250 	.word	0x20000250

08001180 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 8001186:	230f      	movs	r3, #15
 8001188:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 800118a:	1d3a      	adds	r2, r7, #4
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2132      	movs	r1, #50	; 0x32
 8001196:	482a      	ldr	r0, [pc, #168]	; (8001240 <who_am_i_sensors+0xc0>)
 8001198:	f001 fab4 	bl	8002704 <HAL_I2C_Master_Transmit>
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80011a6:	4827      	ldr	r0, [pc, #156]	; (8001244 <who_am_i_sensors+0xc4>)
 80011a8:	f004 fc68 	bl	8005a7c <puts>
 80011ac:	e017      	b.n	80011de <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80011ae:	1d3a      	adds	r2, r7, #4
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2132      	movs	r1, #50	; 0x32
 80011ba:	4821      	ldr	r0, [pc, #132]	; (8001240 <who_am_i_sensors+0xc0>)
 80011bc:	f001 fba0 	bl	8002900 <HAL_I2C_Master_Receive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <who_am_i_sensors+0xc8>)
 80011cc:	f004 fc56 	bl	8005a7c <puts>
 80011d0:	e005      	b.n	80011de <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	2b33      	cmp	r3, #51	; 0x33
 80011d6:	d102      	bne.n	80011de <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 80011d8:	481c      	ldr	r0, [pc, #112]	; (800124c <who_am_i_sensors+0xcc>)
 80011da:	f004 fbc9 	bl	8005970 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 80011de:	234f      	movs	r3, #79	; 0x4f
 80011e0:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 80011e2:	1d3a      	adds	r2, r7, #4
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	213c      	movs	r1, #60	; 0x3c
 80011ee:	4814      	ldr	r0, [pc, #80]	; (8001240 <who_am_i_sensors+0xc0>)
 80011f0:	f001 fa88 	bl	8002704 <HAL_I2C_Master_Transmit>
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <who_am_i_sensors+0xc4>)
 8001200:	f004 fc3c 	bl	8005a7c <puts>
 8001204:	e017      	b.n	8001236 <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 8001206:	1d3a      	adds	r2, r7, #4
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	213c      	movs	r1, #60	; 0x3c
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <who_am_i_sensors+0xc0>)
 8001214:	f001 fb74 	bl	8002900 <HAL_I2C_Master_Receive>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <who_am_i_sensors+0xc8>)
 8001224:	f004 fc2a 	bl	8005a7c <puts>
 8001228:	e005      	b.n	8001236 <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	2b40      	cmp	r3, #64	; 0x40
 800122e:	d102      	bne.n	8001236 <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <who_am_i_sensors+0xd0>)
 8001232:	f004 fb9d 	bl	8005970 <iprintf>
    	}
    }
  }
}
 8001236:	bf00      	nop
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f8 	.word	0x200001f8
 8001244:	08008650 	.word	0x08008650
 8001248:	0800865c 	.word	0x0800865c
 800124c:	08008668 	.word	0x08008668
 8001250:	08008688 	.word	0x08008688

08001254 <reset_acc>:

int reset_acc(){
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  
 800125a:	2324      	movs	r3, #36	; 0x24
 800125c:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  //Data de reset
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);
 8001262:	1d3a      	adds	r2, r7, #4
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2302      	movs	r3, #2
 800126c:	2132      	movs	r1, #50	; 0x32
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <reset_acc+0x3c>)
 8001270:	f001 fa48 	bl	8002704 <HAL_I2C_Master_Transmit>
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <reset_acc+0x30>
		printf("Error Tx\r\n");
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <reset_acc+0x40>)
 8001280:	f004 fbfc 	bl	8005a7c <puts>
	}
}
 8001284:	bf00      	nop
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f8 	.word	0x200001f8
 8001294:	08008650 	.word	0x08008650

08001298 <config_acc>:

int config_acc(){
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x27;//Valeur a mettre dans ctrm_reg_1
 800129e:	2327      	movs	r3, #39	; 0x27
 80012a0:	723b      	strb	r3, [r7, #8]
	buf[1]=0x00;//Valeur a mettre dans ctrm_reg_2
 80012a2:	2300      	movs	r3, #0
 80012a4:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_3
 80012a6:	2300      	movs	r3, #0
 80012a8:	72bb      	strb	r3, [r7, #10]
	buf[3]=0x00;//Valeur a mettre dans ctrm_reg_4
 80012aa:	2300      	movs	r3, #0
 80012ac:	72fb      	strb	r3, [r7, #11]
	buf[4]=0x00;//Valeur a mettre dans ctrm_reg_5
 80012ae:	2300      	movs	r3, #0
 80012b0:	733b      	strb	r3, [r7, #12]
	buf[5]=0x00;//Valeur a mettre dans ctrm_reg_6
 80012b2:	2300      	movs	r3, #0
 80012b4:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2306      	movs	r3, #6
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	22a0      	movs	r2, #160	; 0xa0
 80012ca:	2132      	movs	r1, #50	; 0x32
 80012cc:	4824      	ldr	r0, [pc, #144]	; (8001360 <config_acc+0xc8>)
 80012ce:	f001 fd3d 	bl	8002d4c <HAL_I2C_Mem_Write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <config_acc+0x4a>
		printf("Error Tx\r\n");
 80012dc:	4821      	ldr	r0, [pc, #132]	; (8001364 <config_acc+0xcc>)
 80012de:	f004 fbcd 	bl	8005a7c <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, CTRL_REG1_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 6, HAL_MAX_DELAY);
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2306      	movs	r3, #6
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	463b      	mov	r3, r7
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22a0      	movs	r2, #160	; 0xa0
 80012f4:	2132      	movs	r1, #50	; 0x32
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <config_acc+0xc8>)
 80012f8:	f001 fe22 	bl	8002f40 <HAL_I2C_Mem_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<6;i++){
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e021      	b.n	800134e <config_acc+0xb6>
		if(buf[i]==res[i]){
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3310      	adds	r3, #16
 800130e:	443b      	add	r3, r7
 8001310:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	3310      	adds	r3, #16
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800131e:	429a      	cmp	r2, r3
 8001320:	d10c      	bne.n	800133c <config_acc+0xa4>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3310      	adds	r3, #16
 8001326:	443b      	add	r3, r7
 8001328:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800132c:	4619      	mov	r1, r3
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	461a      	mov	r2, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <config_acc+0xd0>)
 8001336:	f004 fb1b 	bl	8005970 <iprintf>
 800133a:	e005      	b.n	8001348 <config_acc+0xb0>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3301      	adds	r3, #1
 8001340:	4619      	mov	r1, r3
 8001342:	480a      	ldr	r0, [pc, #40]	; (800136c <config_acc+0xd4>)
 8001344:	f004 fb14 	bl	8005970 <iprintf>
	for(i=0;i<6;i++){
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d9da      	bls.n	800130a <config_acc+0x72>
		}
	}
}
 8001354:	bf00      	nop
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f8 	.word	0x200001f8
 8001364:	08008650 	.word	0x08008650
 8001368:	080086a0 	.word	0x080086a0
 800136c:	080086d0 	.word	0x080086d0

08001370 <reset_mag>:

int reset_mag(){
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af04      	add	r7, sp, #16
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = 0x60;//1 sur reboot
 8001376:	2360      	movs	r3, #96	; 0x60
 8001378:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CTRL_REG_A_M, I2C_MEMADD_SIZE_8BIT, buf, 1, HAL_MAX_DELAY);
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2301      	movs	r3, #1
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	2260      	movs	r2, #96	; 0x60
 800138c:	213c      	movs	r1, #60	; 0x3c
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <reset_mag+0x40>)
 8001390:	f001 fcdc 	bl	8002d4c <HAL_I2C_Mem_Write>
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <reset_mag+0x34>
		printf("Error Tx\r\n");
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <reset_mag+0x44>)
 80013a0:	f004 fb6c 	bl	8005a7c <puts>
	}
}
 80013a4:	bf00      	nop
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	08008650 	.word	0x08008650

080013b8 <config_mag>:

int config_mag(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t buf[6] ;
	uint8_t res[6] ;
	buf[0]=0x0C;//Valeur a mettre dans ctrm_reg_a
 80013be:	230c      	movs	r3, #12
 80013c0:	723b      	strb	r3, [r7, #8]
	buf[1]=0x02;//Valeur a mettre dans ctrm_reg_b
 80013c2:	2302      	movs	r3, #2
 80013c4:	727b      	strb	r3, [r7, #9]
	buf[2]=0x00;//Valeur a mettre dans ctrm_reg_c
 80013c6:	2300      	movs	r3, #0
 80013c8:	72bb      	strb	r3, [r7, #10]
	ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 3, HAL_MAX_DELAY);
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2303      	movs	r3, #3
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22e0      	movs	r2, #224	; 0xe0
 80013de:	213c      	movs	r1, #60	; 0x3c
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <config_mag+0xbc>)
 80013e2:	f001 fcb3 	bl	8002d4c <HAL_I2C_Mem_Write>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73bb      	strb	r3, [r7, #14]
	if ( ret != HAL_OK ) {
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <config_mag+0x3e>
		printf("Error Tx\r\n");
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <config_mag+0xc0>)
 80013f2:	f004 fb43 	bl	8005a7c <puts>
	}
	ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, CFG_REG_A_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, res, 3, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2303      	movs	r3, #3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	463b      	mov	r3, r7
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	22e0      	movs	r2, #224	; 0xe0
 8001408:	213c      	movs	r1, #60	; 0x3c
 800140a:	481a      	ldr	r0, [pc, #104]	; (8001474 <config_mag+0xbc>)
 800140c:	f001 fd98 	bl	8002f40 <HAL_I2C_Mem_Read>
 8001410:	4603      	mov	r3, r0
 8001412:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
	for(i=0;i<3;i++){
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e021      	b.n	8001462 <config_mag+0xaa>
		if(buf[i]==res[i]){
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3310      	adds	r3, #16
 8001422:	443b      	add	r3, r7
 8001424:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3310      	adds	r3, #16
 800142c:	443b      	add	r3, r7
 800142e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001432:	429a      	cmp	r2, r3
 8001434:	d10c      	bne.n	8001450 <config_mag+0x98>
			printf("0x%02x mis dans le registre CTRL_REG_%d_A \n\r", buf[i], i+1);
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3310      	adds	r3, #16
 800143a:	443b      	add	r3, r7
 800143c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001440:	4619      	mov	r1, r3
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	461a      	mov	r2, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <config_mag+0xc4>)
 800144a:	f004 fa91 	bl	8005970 <iprintf>
 800144e:	e005      	b.n	800145c <config_mag+0xa4>
		}
		else{
			printf("Valeur mise dans le registre CTRL_REG_%d_A erronee \n\r",i+1);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	4619      	mov	r1, r3
 8001456:	480a      	ldr	r0, [pc, #40]	; (8001480 <config_mag+0xc8>)
 8001458:	f004 fa8a 	bl	8005970 <iprintf>
	for(i=0;i<3;i++){
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d9da      	bls.n	800141e <config_mag+0x66>
		}
	}
}
 8001468:	bf00      	nop
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200001f8 	.word	0x200001f8
 8001478:	08008650 	.word	0x08008650
 800147c:	080086a0 	.word	0x080086a0
 8001480:	080086d0 	.word	0x080086d0

08001484 <get_data>:

void get_data(struct data* acc, struct data* mag){
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af04      	add	r7, sp, #16
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
		HAL_StatusTypeDef ret;
		uint8_t buf[6] ;
		//int16_t acc.X, acc.Y, acc.Z;
		//int16_t magX, magY, magZ;
		ret = HAL_I2C_Mem_Write(&hi2c1, ACC_ADR, OUT_X_L_A, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2300      	movs	r3, #0
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	2132      	movs	r1, #50	; 0x32
 80014a2:	483d      	ldr	r0, [pc, #244]	; (8001598 <get_data+0x114>)
 80014a4:	f001 fc52 	bl	8002d4c <HAL_I2C_Mem_Write>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <get_data+0x34>
			printf("Error Tx\r\n");
 80014b2:	483a      	ldr	r0, [pc, #232]	; (800159c <get_data+0x118>)
 80014b4:	f004 fae2 	bl	8005a7c <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, ACC_ADR, OUT_X_L_A|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2306      	movs	r3, #6
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	22a8      	movs	r2, #168	; 0xa8
 80014cc:	2132      	movs	r1, #50	; 0x32
 80014ce:	4832      	ldr	r0, [pc, #200]	; (8001598 <get_data+0x114>)
 80014d0:	f001 fd36 	bl	8002f40 <HAL_I2C_Mem_Read>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
		acc->X=(buf[1]<<8)|(buf[0]);
 80014d8:	7a7b      	ldrb	r3, [r7, #9]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	7a3b      	ldrb	r3, [r7, #8]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	801a      	strh	r2, [r3, #0]
		acc->Y=(buf[3]<<8)|(buf[2]);
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	7abb      	ldrb	r3, [r7, #10]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	805a      	strh	r2, [r3, #2]
		acc->Z=(buf[5]<<8)|(buf[4]);
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	7b3b      	ldrb	r3, [r7, #12]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	809a      	strh	r2, [r3, #4]

		ret = HAL_I2C_Mem_Write(&hi2c1, MAG_ADR, OUTX_L_REG_M, I2C_MEMADD_SIZE_8BIT, 0, 0, HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	2268      	movs	r2, #104	; 0x68
 8001520:	213c      	movs	r1, #60	; 0x3c
 8001522:	481d      	ldr	r0, [pc, #116]	; (8001598 <get_data+0x114>)
 8001524:	f001 fc12 	bl	8002d4c <HAL_I2C_Mem_Write>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
		if ( ret != HAL_OK ) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <get_data+0xb4>
			printf("Error Tx\r\n");
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <get_data+0x118>)
 8001534:	f004 faa2 	bl	8005a7c <puts>
		}
		ret = HAL_I2C_Mem_Read(&hi2c1, MAG_ADR, OUTX_L_REG_M|SUB_INCREMENT, I2C_MEMADD_SIZE_8BIT, buf, 6, HAL_MAX_DELAY);
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2306      	movs	r3, #6
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	22e8      	movs	r2, #232	; 0xe8
 800154c:	213c      	movs	r1, #60	; 0x3c
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <get_data+0x114>)
 8001550:	f001 fcf6 	bl	8002f40 <HAL_I2C_Mem_Read>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
		mag->X=(buf[1]<<8)|(buf[0]);
 8001558:	7a7b      	ldrb	r3, [r7, #9]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	7a3b      	ldrb	r3, [r7, #8]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21a      	sxth	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	801a      	strh	r2, [r3, #0]
		mag->Y=(buf[3]<<8)|(buf[2]);
 800156a:	7afb      	ldrb	r3, [r7, #11]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7abb      	ldrb	r3, [r7, #10]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	805a      	strh	r2, [r3, #2]
		mag->Z=(buf[5]<<8)|(buf[4]);
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7b3b      	ldrb	r3, [r7, #12]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	809a      	strh	r2, [r3, #4]
		printf("magY=%d  ",magY);
		printf("magZ=%d\n\r",magZ);
		printf("accX=%d  ",accX);
		printf("accY=%d  ",accY);
		printf("accZ=%d\n\r",accZ);*/
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001f8 	.word	0x200001f8
 800159c:	08008650 	.word	0x08008650

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b09c      	sub	sp, #112	; 0x70
 80015a6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fc62 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 fa22 	bl	80019f4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f7ff fcec 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015b4:	f000 fbc0 	bl	8001d38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015b8:	f7ff fd56 	bl	8001068 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  who_am_i_sensors();
 80015bc:	f7ff fde0 	bl	8001180 <who_am_i_sensors>
  reset_acc();
 80015c0:	f7ff fe48 	bl	8001254 <reset_acc>
  config_acc();
 80015c4:	f7ff fe68 	bl	8001298 <config_acc>
  reset_mag();
 80015c8:	f7ff fed2 	bl	8001370 <reset_mag>
  config_mag();
 80015cc:	f7ff fef4 	bl	80013b8 <config_mag>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  get_data(&acc,&mag);
 80015d0:	f107 0214 	add.w	r2, r7, #20
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff52 	bl	8001484 <get_data>
	  //Tentative conversion en float
	  float acc_Z=(float)acc.Z*4/65535;
 80015e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015f4:	eddf 6aec 	vldr	s13, [pc, #944]	; 80019a8 <main+0x408>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  float acc_Y=(float)acc.Y*4/65535;
 8001600:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001614:	eddf 6ae4 	vldr	s13, [pc, #912]	; 80019a8 <main+0x408>
 8001618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  float acc_X=(float)acc.X*4/65535;
 8001620:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001634:	eddf 6adc 	vldr	s13, [pc, #880]	; 80019a8 <main+0x408>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	  float mag_Z=(float)mag.Z*100000/65535;
 8001640:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80019ac <main+0x40c>
 8001650:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001654:	eddf 6ad4 	vldr	s13, [pc, #848]	; 80019a8 <main+0x408>
 8001658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  float mag_Y=(float)mag.Y*100000/65535;
 8001660:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80019ac <main+0x40c>
 8001670:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001674:	eddf 6acc 	vldr	s13, [pc, #816]	; 80019a8 <main+0x408>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	  float mag_X=(float)mag.X*100000/65535;
 8001680:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168c:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 80019ac <main+0x40c>
 8001690:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001694:	eddf 6ac4 	vldr	s13, [pc, #784]	; 80019a8 <main+0x408>
 8001698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	  mag_Z=mag_Z/1000;
 80016a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016a4:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80019b0 <main+0x410>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  mag_X=mag_X/1000;
 80016b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016b4:	eddf 6abe 	vldr	s13, [pc, #760]	; 80019b0 <main+0x410>
 80016b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  mag_Y=mag_Y/1000;
 80016c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016c4:	eddf 6aba 	vldr	s13, [pc, #744]	; 80019b0 <main+0x410>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  //calcul angles
	  float theta=atan(acc_Y/acc_X);
 80016d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80016d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016dc:	ee16 0a90 	vmov	r0, s13
 80016e0:	f7fe ff52 	bl	8000588 <__aeabi_f2d>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	ec43 2b10 	vmov	d0, r2, r3
 80016ec:	f006 fa7c 	bl	8007be8 <atan>
 80016f0:	ec53 2b10 	vmov	r2, r3, d0
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa76 	bl	8000be8 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  float psi=atan((-acc_Z)/(sqrt(acc_Y*acc_Y+acc_X*acc_X)));
 8001700:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001704:	eef1 7a67 	vneg.f32	s15, s15
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff3b 	bl	8000588 <__aeabi_f2d>
 8001712:	4604      	mov	r4, r0
 8001714:	460d      	mov	r5, r1
 8001716:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800171a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800171e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001722:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f7fe ff2b 	bl	8000588 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ec43 2b10 	vmov	d0, r2, r3
 800173a:	f006 fc33 	bl	8007fa4 <sqrt>
 800173e:	ec53 2b10 	vmov	r2, r3, d0
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7ff f8a1 	bl	800088c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	ec43 2b17 	vmov	d7, r2, r3
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	eef0 0a67 	vmov.f32	s1, s15
 800175a:	f006 fa45 	bl	8007be8 <atan>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa3f 	bl	8000be8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
	  float delta=acos(sqrt((mag_Y*acc_Z-mag_Z*acc_Y)*(mag_Y*acc_Z-mag_Z*acc_Y)+(mag_Z*acc_X-mag_X*acc_Z)*(mag_Z*acc_X-mag_X*acc_Z)+(mag_X*acc_Y-mag_Y*acc_X)*(mag_Z*acc_X-mag_X*acc_Z)+(mag_X*acc_Y-mag_Y*acc_X))/(sqrt(mag_X*mag_X+mag_Y*mag_Y+mag_Z*mag_Z)*sqrt(acc_X*acc_X+acc_Y*acc_Y+acc_Z*acc_Z)));
 800176e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001772:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800177e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800178a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800178e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001792:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001796:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800179a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800179e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80017ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017b6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80017ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017c6:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80017ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017d2:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 80017d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80017ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f6:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80017fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001802:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001806:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800180a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800180e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001812:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8001816:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800181a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800181e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800182a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800182e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001832:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001836:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800183a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800183e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001842:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184a:	ee17 0a90 	vmov	r0, s15
 800184e:	f7fe fe9b 	bl	8000588 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ec43 2b10 	vmov	d0, r2, r3
 800185a:	f006 fba3 	bl	8007fa4 <sqrt>
 800185e:	ec55 4b10 	vmov	r4, r5, d0
 8001862:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001866:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800186a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800186e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001876:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800187a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	ee17 0a90 	vmov	r0, s15
 8001886:	f7fe fe7f 	bl	8000588 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ec43 2b10 	vmov	d0, r2, r3
 8001892:	f006 fb87 	bl	8007fa4 <sqrt>
 8001896:	ec59 8b10 	vmov	r8, r9, d0
 800189a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800189e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	ec43 2b10 	vmov	d0, r2, r3
 80018ca:	f006 fb6b 	bl	8007fa4 <sqrt>
 80018ce:	ec53 2b10 	vmov	r2, r3, d0
 80018d2:	4640      	mov	r0, r8
 80018d4:	4649      	mov	r1, r9
 80018d6:	f7fe feaf 	bl	8000638 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe ffd3 	bl	800088c <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ec43 2b17 	vmov	d7, r2, r3
 80018ee:	eeb0 0a47 	vmov.f32	s0, s14
 80018f2:	eef0 0a67 	vmov.f32	s1, s15
 80018f6:	f006 fb21 	bl	8007f3c <acos>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f971 	bl	8000be8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24


	  printf("accX=%d\t accY=%d\t accZ=%d\t |\t magX=%d\t magY=%d\t magZ=%d",acc.X,acc.Y,acc.Z,mag.X,mag.Y,mag.Z);
 800190a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800190e:	4618      	mov	r0, r3
 8001910:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001914:	461c      	mov	r4, r3
 8001916:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800191a:	461d      	mov	r5, r3
 800191c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001920:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001924:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8001928:	9102      	str	r1, [sp, #8]
 800192a:	9201      	str	r2, [sp, #4]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	462b      	mov	r3, r5
 8001930:	4622      	mov	r2, r4
 8001932:	4601      	mov	r1, r0
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <main+0x414>)
 8001936:	f004 f81b 	bl	8005970 <iprintf>
	  printf("\t|||||\t");
 800193a:	481f      	ldr	r0, [pc, #124]	; (80019b8 <main+0x418>)
 800193c:	f004 f818 	bl	8005970 <iprintf>
	  printf("accX=%.2f\t accY=%.2f\t accZ=%.2f\t |\t magX=%.2f\t magY=%.2f\t magZ=%.2f",acc_X,acc_Y,acc_Z,mag_X,mag_Y,mag_Z);
 8001940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001942:	f7fe fe21 	bl	8000588 <__aeabi_f2d>
 8001946:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800194a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800194c:	f7fe fe1c 	bl	8000588 <__aeabi_f2d>
 8001950:	4604      	mov	r4, r0
 8001952:	460d      	mov	r5, r1
 8001954:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001956:	f7fe fe17 	bl	8000588 <__aeabi_f2d>
 800195a:	4680      	mov	r8, r0
 800195c:	4689      	mov	r9, r1
 800195e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001960:	f7fe fe12 	bl	8000588 <__aeabi_f2d>
 8001964:	4682      	mov	sl, r0
 8001966:	468b      	mov	fp, r1
 8001968:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800196a:	f7fe fe0d 	bl	8000588 <__aeabi_f2d>
 800196e:	e9c7 0100 	strd	r0, r1, [r7]
 8001972:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001974:	f7fe fe08 	bl	8000588 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001980:	ed97 7b00 	vldr	d7, [r7]
 8001984:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001988:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800198c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001990:	e9cd 4500 	strd	r4, r5, [sp]
 8001994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <main+0x41c>)
 800199a:	f003 ffe9 	bl	8005970 <iprintf>
	  printf("\t|||\t");
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <main+0x420>)
 80019a0:	f003 ffe6 	bl	8005970 <iprintf>
	  printf("theta=%.2f\t psi=%.2f",theta,psi);
 80019a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019a6:	e00d      	b.n	80019c4 <main+0x424>
 80019a8:	477fff00 	.word	0x477fff00
 80019ac:	47c35000 	.word	0x47c35000
 80019b0:	447a0000 	.word	0x447a0000
 80019b4:	08008708 	.word	0x08008708
 80019b8:	08008740 	.word	0x08008740
 80019bc:	08008748 	.word	0x08008748
 80019c0:	0800878c 	.word	0x0800878c
 80019c4:	f7fe fde0 	bl	8000588 <__aeabi_f2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ce:	f7fe fddb 	bl	8000588 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	e9cd 2300 	strd	r2, r3, [sp]
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <main+0x44c>)
 80019e0:	f003 ffc6 	bl	8005970 <iprintf>
	  printf("\n\r");
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <main+0x450>)
 80019e6:	f003 ffc3 	bl	8005970 <iprintf>
  while (1){
 80019ea:	e5f1      	b.n	80015d0 <main+0x30>
 80019ec:	08008794 	.word	0x08008794
 80019f0:	080087ac 	.word	0x080087ac

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	; 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	2234      	movs	r2, #52	; 0x34
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fb42 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <SystemClock_Config+0xd4>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <SystemClock_Config+0xd4>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <SystemClock_Config+0xd4>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <SystemClock_Config+0xd8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <SystemClock_Config+0xd8>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <SystemClock_Config+0xd8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a60:	2302      	movs	r3, #2
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a68:	2310      	movs	r3, #16
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a72:	2304      	movs	r3, #4
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fc78 	bl	8004378 <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a8e:	f000 f81f 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a96:	2302      	movs	r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2102      	movs	r1, #2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 f918 	bl	8003ce4 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001aba:	f000 f809 	bl	8001ad0 <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <Error_Handler+0x10>)
 8001ada:	f003 ff49 	bl	8005970 <iprintf>
  {
 8001ade:	e7fb      	b.n	8001ad8 <Error_Handler+0x8>
 8001ae0:	080087b0 	.word	0x080087b0

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b22:	2007      	movs	r0, #7
 8001b24:	f000 fac8 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f9c8 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ba2:	f003 fa49 	bl	8005038 <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
	return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
	}

return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa97 	bl	8001154 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
	}
	return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f003 f9ae 	bl	8005038 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20020000 	.word	0x20020000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	2000024c 	.word	0x2000024c
 8001d10:	200002a8 	.word	0x200002a8

08001d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f002 fda0 	bl	80048b4 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f7ff fea9 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000250 	.word	0x20000250
 8001d88:	40004400 	.word	0x40004400

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_UART_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_UART_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_UART_MspInit+0x8c>)
 8001e02:	f000 f98d 	bl	8002120 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e38:	4c0b      	ldr	r4, [pc, #44]	; (8001e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ff65 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 f8fb 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff fba7 	bl	80015a0 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e60:	08008c00 	.word	0x08008c00
  ldr r2, =_sbss
 8001e64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e68:	200002a8 	.word	0x200002a8

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 f90d 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f000 f808 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fe1e 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f917 	bl	8002106 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f8ed 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000294 	.word	0x20000294

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000294 	.word	0x20000294

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff47 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff5c 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffb0 	bl	8002074 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e165      	b.n	8002408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8154 	bne.w	8002402 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ae 	beq.w	8002402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a5c      	ldr	r2, [pc, #368]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_GPIO_Init+0x300>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_GPIO_Init+0x304>)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <HAL_GPIO_Init+0x308>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x21a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4e      	ldr	r2, [pc, #312]	; (800242c <HAL_GPIO_Init+0x30c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x216>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x310>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x212>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x314>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x20e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_GPIO_Init+0x318>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x20a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4a      	ldr	r2, [pc, #296]	; (800243c <HAL_GPIO_Init+0x31c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x206>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_GPIO_Init+0x320>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x202>
 800231e:	2306      	movs	r3, #6
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002322:	2307      	movs	r3, #7
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x21c>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x21c>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x304>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_GPIO_Init+0x324>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_GPIO_Init+0x324>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x324>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_GPIO_Init+0x324>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae96 	bls.w	800213c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e12b      	b.n	80026e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe fe0e 	bl	80010c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e0:	f001 fcf2 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a81      	ldr	r2, [pc, #516]	; (80026f0 <HAL_I2C_Init+0x274>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d807      	bhi.n	8002500 <HAL_I2C_Init+0x84>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a80      	ldr	r2, [pc, #512]	; (80026f4 <HAL_I2C_Init+0x278>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e006      	b.n	800250e <HAL_I2C_Init+0x92>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a7d      	ldr	r2, [pc, #500]	; (80026f8 <HAL_I2C_Init+0x27c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	bf94      	ite	ls
 8002508:	2301      	movls	r3, #1
 800250a:	2300      	movhi	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0e7      	b.n	80026e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a78      	ldr	r2, [pc, #480]	; (80026fc <HAL_I2C_Init+0x280>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9b      	lsrs	r3, r3, #18
 8002520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_I2C_Init+0x274>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d802      	bhi.n	8002550 <HAL_I2C_Init+0xd4>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3301      	adds	r3, #1
 800254e:	e009      	b.n	8002564 <HAL_I2C_Init+0xe8>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	4a69      	ldr	r2, [pc, #420]	; (8002700 <HAL_I2C_Init+0x284>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	3301      	adds	r3, #1
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	495c      	ldr	r1, [pc, #368]	; (80026f0 <HAL_I2C_Init+0x274>)
 8002580:	428b      	cmp	r3, r1
 8002582:	d819      	bhi.n	80025b8 <HAL_I2C_Init+0x13c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e59      	subs	r1, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002598:	400b      	ands	r3, r1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_I2C_Init+0x138>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1e59      	subs	r1, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b2:	e051      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 80025b4:	2304      	movs	r3, #4
 80025b6:	e04f      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <HAL_I2C_Init+0x168>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	440b      	add	r3, r1
 80025ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e012      	b.n	800260a <HAL_I2C_Init+0x18e>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	0099      	lsls	r1, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x196>
 800260e:	2301      	movs	r3, #1
 8002610:	e022      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10e      	bne.n	8002638 <HAL_I2C_Init+0x1bc>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e58      	subs	r0, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	440b      	add	r3, r1
 8002628:	fbb0 f3f3 	udiv	r3, r0, r3
 800262c:	3301      	adds	r3, #1
 800262e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002636:	e00f      	b.n	8002658 <HAL_I2C_Init+0x1dc>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1e58      	subs	r0, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	0099      	lsls	r1, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	6809      	ldr	r1, [r1, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6911      	ldr	r1, [r2, #16]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	000186a0 	.word	0x000186a0
 80026f4:	001e847f 	.word	0x001e847f
 80026f8:	003d08ff 	.word	0x003d08ff
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	10624dd3 	.word	0x10624dd3

08002704 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	460b      	mov	r3, r1
 8002712:	817b      	strh	r3, [r7, #10]
 8002714:	4613      	mov	r3, r2
 8002716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fc10 	bl	8001f3c <HAL_GetTick>
 800271c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80e0 	bne.w	80028ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2319      	movs	r3, #25
 8002732:	2201      	movs	r2, #1
 8002734:	4970      	ldr	r1, [pc, #448]	; (80028f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f001 f8f6 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
 8002744:	e0d3      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x50>
 8002750:	2302      	movs	r3, #2
 8002752:	e0cc      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d007      	beq.n	800277a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2221      	movs	r2, #33	; 0x21
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2210      	movs	r2, #16
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_I2C_Master_Transmit+0x1f8>)
 80027ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027bc:	8979      	ldrh	r1, [r7, #10]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fde2 	bl	800338c <I2C_MasterRequestWrite>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e08d      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027e8:	e066      	b.n	80028b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f001 f970 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d107      	bne.n	8002812 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d11b      	bne.n	800288c <HAL_I2C_Master_Transmit+0x188>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d017      	beq.n	800288c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	6a39      	ldr	r1, [r7, #32]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f001 f960 	bl	8003b56 <I2C_WaitOnBTFFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e01a      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d194      	bne.n	80027ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	00100002 	.word	0x00100002
 80028fc:	ffff0000 	.word	0xffff0000

08002900 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
 8002910:	4613      	mov	r3, r2
 8002912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fb12 	bl	8001f3c <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b20      	cmp	r3, #32
 8002924:	f040 820b 	bne.w	8002d3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2319      	movs	r3, #25
 800292e:	2201      	movs	r2, #1
 8002930:	497c      	ldr	r1, [pc, #496]	; (8002b24 <HAL_I2C_Master_Receive+0x224>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fff8 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	e1fe      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_I2C_Master_Receive+0x50>
 800294c:	2302      	movs	r3, #2
 800294e:	e1f7      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d007      	beq.n	8002976 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2222      	movs	r2, #34	; 0x22
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2210      	movs	r2, #16
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	893a      	ldrh	r2, [r7, #8]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a5c      	ldr	r2, [pc, #368]	; (8002b28 <HAL_I2C_Master_Receive+0x228>)
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fd66 	bl	8003490 <I2C_MasterRequestRead>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1b8      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e18c      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d11b      	bne.n	8002a3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e16c      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d11b      	bne.n	8002a7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	e14c      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002aa4:	e138      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	f200 80f1 	bhi.w	8002c92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d123      	bne.n	8002b00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f001 f88b 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e139      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002afe:	e10b      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d14e      	bne.n	8002ba6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4906      	ldr	r1, [pc, #24]	; (8002b2c <HAL_I2C_Master_Receive+0x22c>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 ff08 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e10e      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
 8002b22:	bf00      	nop
 8002b24:	00100002 	.word	0x00100002
 8002b28:	ffff0000 	.word	0xffff0000
 8002b2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba4:	e0b8      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	4966      	ldr	r1, [pc, #408]	; (8002d48 <HAL_I2C_Master_Receive+0x448>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 feb9 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0bf      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	2200      	movs	r2, #0
 8002c0a:	494f      	ldr	r1, [pc, #316]	; (8002d48 <HAL_I2C_Master_Receive+0x448>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fe8b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e091      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c90:	e042      	b.n	8002d18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 ff9e 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e04c      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d118      	bne.n	8002d18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f aec2 	bne.w	8002aa6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3728      	adds	r7, #40	; 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010004 	.word	0x00010004

08002d4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d66:	f7ff f8e9 	bl	8001f3c <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 80d9 	bne.w	8002f2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	2319      	movs	r3, #25
 8002d80:	2201      	movs	r2, #1
 8002d82:	496d      	ldr	r1, [pc, #436]	; (8002f38 <HAL_I2C_Mem_Write+0x1ec>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fdcf 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0cc      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Mem_Write+0x56>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0c5      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d007      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	; 0x21
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a4d      	ldr	r2, [pc, #308]	; (8002f3c <HAL_I2C_Mem_Write+0x1f0>)
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e0a:	88f8      	ldrh	r0, [r7, #6]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4603      	mov	r3, r0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fc06 	bl	800362c <I2C_RequestMemoryWrite>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d052      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e081      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fe50 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06b      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_I2C_Mem_Write+0x180>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1aa      	bne.n	8002e2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fe3c 	bl	8003b56 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d107      	bne.n	8002efc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e016      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	00100002 	.word	0x00100002
 8002f3c:	ffff0000 	.word	0xffff0000

08002f40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f5a:	f7fe ffef 	bl	8001f3c <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	f040 8208 	bne.w	800337e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2319      	movs	r3, #25
 8002f74:	2201      	movs	r2, #1
 8002f76:	497b      	ldr	r1, [pc, #492]	; (8003164 <HAL_I2C_Mem_Read+0x224>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fcd5 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e1fb      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Mem_Read+0x56>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e1f4      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d007      	beq.n	8002fbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2222      	movs	r2, #34	; 0x22
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a5b      	ldr	r2, [pc, #364]	; (8003168 <HAL_I2C_Mem_Read+0x228>)
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffe:	88f8      	ldrh	r0, [r7, #6]
 8003000:	893a      	ldrh	r2, [r7, #8]
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4603      	mov	r3, r0
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fba2 	bl	8003758 <I2C_RequestMemoryRead>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1b0      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e184      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	2b01      	cmp	r3, #1
 8003054:	d11b      	bne.n	800308e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e164      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b02      	cmp	r3, #2
 8003094:	d11b      	bne.n	80030ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	e144      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030e4:	e138      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	f200 80f1 	bhi.w	80032d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d123      	bne.n	8003140 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fd6b 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e139      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800313e:	e10b      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b02      	cmp	r3, #2
 8003146:	d14e      	bne.n	80031e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	2200      	movs	r2, #0
 8003150:	4906      	ldr	r1, [pc, #24]	; (800316c <HAL_I2C_Mem_Read+0x22c>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fbe8 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e10e      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
 8003162:	bf00      	nop
 8003164:	00100002 	.word	0x00100002
 8003168:	ffff0000 	.word	0xffff0000
 800316c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e4:	e0b8      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	2200      	movs	r2, #0
 80031ee:	4966      	ldr	r1, [pc, #408]	; (8003388 <HAL_I2C_Mem_Read+0x448>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fb99 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0bf      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2200      	movs	r2, #0
 800324a:	494f      	ldr	r1, [pc, #316]	; (8003388 <HAL_I2C_Mem_Read+0x448>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fb6b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e091      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e042      	b.n	8003358 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fc7e 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e04c      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d118      	bne.n	8003358 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aec2 	bne.w	80030e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010004 	.word	0x00010004

0800338c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d006      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d003      	beq.n	80033b6 <I2C_MasterRequestWrite+0x2a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b4:	d108      	bne.n	80033c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d107      	bne.n	80033e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa9b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003406:	d103      	bne.n	8003410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e035      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d108      	bne.n	8003430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e01b      	b.n	8003468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	11db      	asrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f063 030f 	orn	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <I2C_MasterRequestWrite+0xfc>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fac1 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e010      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <I2C_MasterRequestWrite+0x100>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fab1 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010008 	.word	0x00010008
 800348c:	00010002 	.word	0x00010002

08003490 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	460b      	mov	r3, r1
 800349e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d006      	beq.n	80034ca <I2C_MasterRequestRead+0x3a>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d003      	beq.n	80034ca <I2C_MasterRequestRead+0x3a>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e00b      	b.n	80034f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	2b11      	cmp	r3, #17
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fa11 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e079      	b.n	800361c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e05f      	b.n	8003604 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030f 	orn	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4930      	ldr	r1, [pc, #192]	; (8003624 <I2C_MasterRequestRead+0x194>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa37 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e054      	b.n	800361c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4929      	ldr	r1, [pc, #164]	; (8003628 <I2C_MasterRequestRead+0x198>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fa27 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e044      	b.n	800361c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f9af 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035de:	d103      	bne.n	80035e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e017      	b.n	800361c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035ec:	897b      	ldrh	r3, [r7, #10]
 80035ee:	11db      	asrs	r3, r3, #7
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0306 	and.w	r3, r3, #6
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f063 030e 	orn	r3, r3, #14
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <I2C_MasterRequestRead+0x198>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9e3 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010008 	.word	0x00010008
 8003628:	00010002 	.word	0x00010002

0800362c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2200      	movs	r2, #0
 800365e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f960 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d103      	bne.n	8003686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e05f      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	492d      	ldr	r1, [pc, #180]	; (8003754 <I2C_RequestMemoryWrite+0x128>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f998 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e04c      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa02 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e02b      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e021      	b.n	8003748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9dc 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e005      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00010002 	.word	0x00010002

08003758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2200      	movs	r2, #0
 800379a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8c2 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d103      	bne.n	80037c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0aa      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	4952      	ldr	r1, [pc, #328]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8fa 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e097      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f964 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e076      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	e021      	b.n	8003884 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f93e 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e050      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800387a:	893b      	ldrh	r3, [r7, #8]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f923 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b04      	cmp	r3, #4
 800389a:	d107      	bne.n	80038ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e035      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f82b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d103      	bne.n	80038f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e013      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	4906      	ldr	r1, [pc, #24]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f863 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	e025      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d021      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe fafb 	bl	8001f3c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e023      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	e00c      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0b6      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e4:	e051      	b.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d123      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e046      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d021      	beq.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fa79 	bl	8001f3c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e020      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e00b      	b.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d18d      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	e02d      	b.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8ce 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02d      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d021      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fa1f 	bl	8001f3c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d116      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d1ca      	bne.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b62:	e02d      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f88d 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e02d      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d021      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe f9de 	bl	8001f3c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1ca      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	e042      	b.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d119      	bne.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e029      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe f988 	bl	8001f3c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d1b5      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d11b      	bne.n	8003cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0cc      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d90c      	bls.n	8003d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b63      	ldr	r3, [pc, #396]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0b8      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d50:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d5c:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	494d      	ldr	r1, [pc, #308]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d044      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d119      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e07f      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da2:	4b3f      	ldr	r3, [pc, #252]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06f      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db2:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e067      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4934      	ldr	r1, [pc, #208]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd4:	f7fe f8b2 	bl	8001f3c <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ddc:	f7fe f8ae 	bl	8001f3c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e04f      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 020c 	and.w	r2, r3, #12
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1eb      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d20c      	bcs.n	8003e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d001      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e032      	b.n	8003e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4916      	ldr	r1, [pc, #88]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e6a:	f000 f855 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	490a      	ldr	r1, [pc, #40]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	5ccb      	ldrb	r3, [r1, r3]
 8003e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e82:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe f812 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023c00 	.word	0x40023c00
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	080087bc 	.word	0x080087bc
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ecc:	f7ff fff0 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0a9b      	lsrs	r3, r3, #10
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	080087cc 	.word	0x080087cc

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	f7ff ffdc 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0b5b      	lsrs	r3, r3, #13
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40023800 	.word	0x40023800
 8003f14:	080087cc 	.word	0x080087cc

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f1c:	b0ae      	sub	sp, #184	; 0xb8
 8003f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3e:	4bcb      	ldr	r3, [pc, #812]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	f200 8206 	bhi.w	8004358 <HAL_RCC_GetSysClockFreq+0x440>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f89 	.word	0x08003f89
 8003f58:	08004359 	.word	0x08004359
 8003f5c:	08004359 	.word	0x08004359
 8003f60:	08004359 	.word	0x08004359
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08004359 	.word	0x08004359
 8003f6c:	08004359 	.word	0x08004359
 8003f70:	08004359 	.word	0x08004359
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08004359 	.word	0x08004359
 8003f7c:	08004359 	.word	0x08004359
 8003f80:	08004359 	.word	0x08004359
 8003f84:	08004189 	.word	0x08004189
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4bb9      	ldr	r3, [pc, #740]	; (8004270 <HAL_RCC_GetSysClockFreq+0x358>)
 8003f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f8e:	e1e7      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f90:	4bb8      	ldr	r3, [pc, #736]	; (8004274 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f96:	e1e3      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f98:	4bb4      	ldr	r3, [pc, #720]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa4:	4bb1      	ldr	r3, [pc, #708]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d071      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb0:	4bae      	ldr	r3, [pc, #696]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fbc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	f04f 0000 	mov.w	r0, #0
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	0159      	lsls	r1, r3, #5
 8003fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe8:	0150      	lsls	r0, r2, #5
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4621      	mov	r1, r4
 8003ff0:	1a51      	subs	r1, r2, r1
 8003ff2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004008:	4649      	mov	r1, r9
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	4641      	mov	r1, r8
 800400e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004012:	4641      	mov	r1, r8
 8004014:	018a      	lsls	r2, r1, #6
 8004016:	4641      	mov	r1, r8
 8004018:	1a51      	subs	r1, r2, r1
 800401a:	63b9      	str	r1, [r7, #56]	; 0x38
 800401c:	4649      	mov	r1, r9
 800401e:	eb63 0301 	sbc.w	r3, r3, r1
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004030:	4649      	mov	r1, r9
 8004032:	00cb      	lsls	r3, r1, #3
 8004034:	4641      	mov	r1, r8
 8004036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403a:	4641      	mov	r1, r8
 800403c:	00ca      	lsls	r2, r1, #3
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	4603      	mov	r3, r0
 8004044:	4622      	mov	r2, r4
 8004046:	189b      	adds	r3, r3, r2
 8004048:	633b      	str	r3, [r7, #48]	; 0x30
 800404a:	462b      	mov	r3, r5
 800404c:	460a      	mov	r2, r1
 800404e:	eb42 0303 	adc.w	r3, r2, r3
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004060:	4629      	mov	r1, r5
 8004062:	024b      	lsls	r3, r1, #9
 8004064:	4621      	mov	r1, r4
 8004066:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800406a:	4621      	mov	r1, r4
 800406c:	024a      	lsls	r2, r1, #9
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800407c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004080:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004084:	f7fc fe00 	bl	8000c88 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4613      	mov	r3, r2
 800408e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004092:	e067      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004094:	4b75      	ldr	r3, [pc, #468]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	099b      	lsrs	r3, r3, #6
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80040a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ae:	2300      	movs	r3, #0
 80040b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	0159      	lsls	r1, r3, #5
 80040c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c8:	0150      	lsls	r0, r2, #5
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4621      	mov	r1, r4
 80040d0:	1a51      	subs	r1, r2, r1
 80040d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80040d4:	4629      	mov	r1, r5
 80040d6:	eb63 0301 	sbc.w	r3, r3, r1
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80040e8:	4649      	mov	r1, r9
 80040ea:	018b      	lsls	r3, r1, #6
 80040ec:	4641      	mov	r1, r8
 80040ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040f2:	4641      	mov	r1, r8
 80040f4:	018a      	lsls	r2, r1, #6
 80040f6:	4641      	mov	r1, r8
 80040f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80040fc:	4649      	mov	r1, r9
 80040fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800410e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004116:	4692      	mov	sl, r2
 8004118:	469b      	mov	fp, r3
 800411a:	4623      	mov	r3, r4
 800411c:	eb1a 0303 	adds.w	r3, sl, r3
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	462b      	mov	r3, r5
 8004124:	eb4b 0303 	adc.w	r3, fp, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004136:	4629      	mov	r1, r5
 8004138:	028b      	lsls	r3, r1, #10
 800413a:	4621      	mov	r1, r4
 800413c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004140:	4621      	mov	r1, r4
 8004142:	028a      	lsls	r2, r1, #10
 8004144:	4610      	mov	r0, r2
 8004146:	4619      	mov	r1, r3
 8004148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800414c:	2200      	movs	r2, #0
 800414e:	673b      	str	r3, [r7, #112]	; 0x70
 8004150:	677a      	str	r2, [r7, #116]	; 0x74
 8004152:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004156:	f7fc fd97 	bl	8000c88 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4613      	mov	r3, r2
 8004160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	3301      	adds	r3, #1
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800417a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004186:	e0eb      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004194:	4b35      	ldr	r3, [pc, #212]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d06b      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a0:	4b32      	ldr	r3, [pc, #200]	; (800426c <HAL_RCC_GetSysClockFreq+0x354>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	2200      	movs	r2, #0
 80041a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	663b      	str	r3, [r7, #96]	; 0x60
 80041b4:	2300      	movs	r3, #0
 80041b6:	667b      	str	r3, [r7, #100]	; 0x64
 80041b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041bc:	4622      	mov	r2, r4
 80041be:	462b      	mov	r3, r5
 80041c0:	f04f 0000 	mov.w	r0, #0
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	0159      	lsls	r1, r3, #5
 80041ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ce:	0150      	lsls	r0, r2, #5
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4621      	mov	r1, r4
 80041d6:	1a51      	subs	r1, r2, r1
 80041d8:	61b9      	str	r1, [r7, #24]
 80041da:	4629      	mov	r1, r5
 80041dc:	eb63 0301 	sbc.w	r3, r3, r1
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041ee:	4659      	mov	r1, fp
 80041f0:	018b      	lsls	r3, r1, #6
 80041f2:	4651      	mov	r1, sl
 80041f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f8:	4651      	mov	r1, sl
 80041fa:	018a      	lsls	r2, r1, #6
 80041fc:	4651      	mov	r1, sl
 80041fe:	ebb2 0801 	subs.w	r8, r2, r1
 8004202:	4659      	mov	r1, fp
 8004204:	eb63 0901 	sbc.w	r9, r3, r1
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004214:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004218:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421c:	4690      	mov	r8, r2
 800421e:	4699      	mov	r9, r3
 8004220:	4623      	mov	r3, r4
 8004222:	eb18 0303 	adds.w	r3, r8, r3
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	462b      	mov	r3, r5
 800422a:	eb49 0303 	adc.w	r3, r9, r3
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800423c:	4629      	mov	r1, r5
 800423e:	024b      	lsls	r3, r1, #9
 8004240:	4621      	mov	r1, r4
 8004242:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004246:	4621      	mov	r1, r4
 8004248:	024a      	lsls	r2, r1, #9
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004252:	2200      	movs	r2, #0
 8004254:	65bb      	str	r3, [r7, #88]	; 0x58
 8004256:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004258:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800425c:	f7fc fd14 	bl	8000c88 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800426a:	e065      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x420>
 800426c:	40023800 	.word	0x40023800
 8004270:	00f42400 	.word	0x00f42400
 8004274:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004278:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_GetSysClockFreq+0x458>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	099b      	lsrs	r3, r3, #6
 800427e:	2200      	movs	r2, #0
 8004280:	4618      	mov	r0, r3
 8004282:	4611      	mov	r1, r2
 8004284:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004288:	653b      	str	r3, [r7, #80]	; 0x50
 800428a:	2300      	movs	r3, #0
 800428c:	657b      	str	r3, [r7, #84]	; 0x54
 800428e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004292:	4642      	mov	r2, r8
 8004294:	464b      	mov	r3, r9
 8004296:	f04f 0000 	mov.w	r0, #0
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	0159      	lsls	r1, r3, #5
 80042a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a4:	0150      	lsls	r0, r2, #5
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4641      	mov	r1, r8
 80042ac:	1a51      	subs	r1, r2, r1
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	4649      	mov	r1, r9
 80042b2:	eb63 0301 	sbc.w	r3, r3, r1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042c4:	4659      	mov	r1, fp
 80042c6:	018b      	lsls	r3, r1, #6
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ce:	4651      	mov	r1, sl
 80042d0:	018a      	lsls	r2, r1, #6
 80042d2:	4651      	mov	r1, sl
 80042d4:	1a54      	subs	r4, r2, r1
 80042d6:	4659      	mov	r1, fp
 80042d8:	eb63 0501 	sbc.w	r5, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	00eb      	lsls	r3, r5, #3
 80042e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ea:	00e2      	lsls	r2, r4, #3
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	18e3      	adds	r3, r4, r3
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	464b      	mov	r3, r9
 80042f8:	eb45 0303 	adc.w	r3, r5, r3
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800430a:	4629      	mov	r1, r5
 800430c:	028b      	lsls	r3, r1, #10
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004314:	4621      	mov	r1, r4
 8004316:	028a      	lsls	r2, r1, #10
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004320:	2200      	movs	r2, #0
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
 8004324:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004326:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800432a:	f7fc fcad 	bl	8000c88 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4613      	mov	r3, r2
 8004334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_RCC_GetSysClockFreq+0x458>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0f1b      	lsrs	r3, r3, #28
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800434a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004356:	e003      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetSysClockFreq+0x45c>)
 800435a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800435e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004364:	4618      	mov	r0, r3
 8004366:	37b8      	adds	r7, #184	; 0xb8
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400

08004378 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e28d      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8083 	beq.w	800449e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004398:	4b94      	ldr	r3, [pc, #592]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d019      	beq.n	80043d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043a4:	4b91      	ldr	r3, [pc, #580]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b0:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x124>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e25a      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x90>
 80043fa:	4b7c      	ldr	r3, [pc, #496]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7b      	ldr	r2, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xcc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0xb4>
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a75      	ldr	r2, [pc, #468]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a72      	ldr	r2, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xcc>
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b6c      	ldr	r3, [pc, #432]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6b      	ldr	r2, [pc, #428]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fd76 	bl	8001f3c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd fd72 	bl	8001f3c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e21f      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b61      	ldr	r3, [pc, #388]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xdc>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd fd62 	bl	8001f3c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fd fd5e 	bl	8001f3c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e20b      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x104>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06f      	beq.n	800458a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044aa:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d017      	beq.n	80044e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d105      	bne.n	80044ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d11c      	bne.n	8004514 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b44      	ldr	r3, [pc, #272]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d116      	bne.n	8004514 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_RCC_OscConfig+0x186>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e1d3      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4937      	ldr	r1, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004512:	e03a      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451c:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_RCC_OscConfig+0x278>)
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd fd0b 	bl	8001f3c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452a:	f7fd fd07 	bl	8001f3c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1b4      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4925      	ldr	r1, [pc, #148]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]
 800455c:	e015      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_OscConfig+0x278>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fcea 	bl	8001f3c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456c:	f7fd fce6 	bl	8001f3c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e193      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d036      	beq.n	8004604 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd fcca 	bl	8001f3c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ac:	f7fd fcc6 	bl	8001f3c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e173      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_OscConfig+0x274>)
 80045c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x234>
 80045ca:	e01b      	b.n	8004604 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fd fcb3 	bl	8001f3c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	e00e      	b.n	80045f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045da:	f7fd fcaf 	bl	8001f3c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d907      	bls.n	80045f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e15c      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470000 	.word	0x42470000
 80045f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	4b8a      	ldr	r3, [pc, #552]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80045fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ea      	bne.n	80045da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8097 	beq.w	8004740 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004616:	4b83      	ldr	r3, [pc, #524]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	4b7f      	ldr	r3, [pc, #508]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a7e      	ldr	r2, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004642:	4b79      	ldr	r3, [pc, #484]	; (8004828 <HAL_RCC_OscConfig+0x4b0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464e:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCC_OscConfig+0x4b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	; (8004828 <HAL_RCC_OscConfig+0x4b0>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fd fc6f 	bl	8001f3c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fd fc6b 	bl	8001f3c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e118      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b6c      	ldr	r3, [pc, #432]	; (8004828 <HAL_RCC_OscConfig+0x4b0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d106      	bne.n	8004696 <HAL_RCC_OscConfig+0x31e>
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x358>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x340>
 800469e:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a60      	ldr	r2, [pc, #384]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	e00b      	b.n	80046d0 <HAL_RCC_OscConfig+0x358>
 80046b8:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a59      	ldr	r2, [pc, #356]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	4b57      	ldr	r3, [pc, #348]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a56      	ldr	r2, [pc, #344]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd fc30 	bl	8001f3c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fd fc2c 	bl	8001f3c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0d7      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ee      	beq.n	80046e0 <HAL_RCC_OscConfig+0x368>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd fc1a 	bl	8001f3c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fd fc16 	bl	8001f3c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e0c1      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004722:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ee      	bne.n	800470c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80ad 	beq.w	80048a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b08      	cmp	r3, #8
 8004754:	d060      	beq.n	8004818 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d145      	bne.n	80047ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_RCC_OscConfig+0x4b4>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd fbea 	bl	8001f3c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd fbe6 	bl	8001f3c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e093      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	491b      	ldr	r1, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x4b4>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd fbbb 	bl	8001f3c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fd fbb7 	bl	8001f3c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e064      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x452>
 80047e8:	e05c      	b.n	80048a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCC_OscConfig+0x4b4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd fba4 	bl	8001f3c <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fd fba0 	bl	8001f3c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04d      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCC_OscConfig+0x4ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x480>
 8004816:	e045      	b.n	80048a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e040      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
 8004824:	40023800 	.word	0x40023800
 8004828:	40007000 	.word	0x40007000
 800482c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004830:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <HAL_RCC_OscConfig+0x538>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d030      	beq.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d129      	bne.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d122      	bne.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004860:	4013      	ands	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004868:	4293      	cmp	r3, r2
 800486a:	d119      	bne.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	3b01      	subs	r3, #1
 800487a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d10f      	bne.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d107      	bne.n	80048a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800

080048b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e03f      	b.n	8004946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fa56 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f929 	bl	8004b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800492c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08a      	sub	sp, #40	; 0x28
 8004952:	af02      	add	r7, sp, #8
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b20      	cmp	r3, #32
 800496c:	d17c      	bne.n	8004a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_UART_Transmit+0x2c>
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e075      	b.n	8004a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_UART_Transmit+0x3e>
 8004988:	2302      	movs	r3, #2
 800498a:	e06e      	b.n	8004a6a <HAL_UART_Transmit+0x11c>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2221      	movs	r2, #33	; 0x21
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a2:	f7fd facb 	bl	8001f3c <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d108      	bne.n	80049d0 <HAL_UART_Transmit+0x82>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	e003      	b.n	80049d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049e0:	e02a      	b.n	8004a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	; 0x80
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f840 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e036      	b.n	8004a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3302      	adds	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e007      	b.n	8004a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1cf      	bne.n	80049e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2140      	movs	r1, #64	; 0x40
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f810 	bl	8004a72 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e006      	b.n	8004a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b090      	sub	sp, #64	; 0x40
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	e050      	b.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d04c      	beq.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a92:	f7fd fa53 	bl	8001f3c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d241      	bcs.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ac2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004af6:	623a      	str	r2, [r7, #32]
 8004af8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	6a3a      	ldr	r2, [r7, #32]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00f      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d09f      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3740      	adds	r7, #64	; 0x40
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b0c0      	sub	sp, #256	; 0x100
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	ea40 0301 	orr.w	r3, r0, r1
 8004b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ba8:	f021 010c 	bic.w	r1, r1, #12
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	6999      	ldr	r1, [r3, #24]
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	ea40 0301 	orr.w	r3, r0, r1
 8004bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b8f      	ldr	r3, [pc, #572]	; (8004e1c <UART_SetConfig+0x2cc>)
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d005      	beq.n	8004bf0 <UART_SetConfig+0xa0>
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b8d      	ldr	r3, [pc, #564]	; (8004e20 <UART_SetConfig+0x2d0>)
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d104      	bne.n	8004bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7ff f97e 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bf8:	e003      	b.n	8004c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7ff f965 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	f040 810c 	bne.w	8004e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c32:	4621      	mov	r1, r4
 8004c34:	eb12 0801 	adds.w	r8, r2, r1
 8004c38:	4629      	mov	r1, r5
 8004c3a:	eb43 0901 	adc.w	r9, r3, r1
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c52:	4690      	mov	r8, r2
 8004c54:	4699      	mov	r9, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	eb18 0303 	adds.w	r3, r8, r3
 8004c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c60:	462b      	mov	r3, r5
 8004c62:	eb49 0303 	adc.w	r3, r9, r3
 8004c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c7e:	460b      	mov	r3, r1
 8004c80:	18db      	adds	r3, r3, r3
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
 8004c84:	4613      	mov	r3, r2
 8004c86:	eb42 0303 	adc.w	r3, r2, r3
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c94:	f7fb fff8 	bl	8000c88 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	011c      	lsls	r4, r3, #4
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cc8:	4641      	mov	r1, r8
 8004cca:	eb12 0a01 	adds.w	sl, r2, r1
 8004cce:	4649      	mov	r1, r9
 8004cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce8:	4692      	mov	sl, r2
 8004cea:	469b      	mov	fp, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	eb1a 0303 	adds.w	r3, sl, r3
 8004cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d14:	460b      	mov	r3, r1
 8004d16:	18db      	adds	r3, r3, r3
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	eb42 0303 	adc.w	r3, r2, r3
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d2a:	f7fb ffad 	bl	8000c88 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d36:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2264      	movs	r2, #100	; 0x64
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	1acb      	subs	r3, r1, r3
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d58:	441c      	add	r4, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d74:	415b      	adcs	r3, r3
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6339      	str	r1, [r7, #48]	; 0x30
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	18db      	adds	r3, r3, r3
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004de6:	f7fb ff4f 	bl	8000c88 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4422      	add	r2, r4
 8004e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e18:	e105      	b.n	8005026 <UART_SetConfig+0x4d6>
 8004e1a:	bf00      	nop
 8004e1c:	40011000 	.word	0x40011000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	6239      	str	r1, [r7, #32]
 8004e42:	415b      	adcs	r3, r3
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	1854      	adds	r4, r2, r1
 8004e4e:	4649      	mov	r1, r9
 8004e50:	eb43 0501 	adc.w	r5, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	00eb      	lsls	r3, r5, #3
 8004e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e62:	00e2      	lsls	r2, r4, #3
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	18e3      	adds	r3, r4, r3
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e70:	464b      	mov	r3, r9
 8004e72:	eb45 0303 	adc.w	r3, r5, r3
 8004e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e96:	4629      	mov	r1, r5
 8004e98:	008b      	lsls	r3, r1, #2
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	008a      	lsls	r2, r1, #2
 8004ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ea8:	f7fb feee 	bl	8000c88 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4b60      	ldr	r3, [pc, #384]	; (8005034 <UART_SetConfig+0x4e4>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011c      	lsls	r4, r3, #4
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	61b9      	str	r1, [r7, #24]
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6139      	str	r1, [r7, #16]
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f46:	f7fb fe9f 	bl	8000c88 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6e:	441c      	add	r4, r3
 8004f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f74:	2200      	movs	r2, #0
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70
 8004f78:	677a      	str	r2, [r7, #116]	; 0x74
 8004f7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1851      	adds	r1, r2, r1
 8004f92:	6039      	str	r1, [r7, #0]
 8004f94:	4649      	mov	r1, r9
 8004f96:	414b      	adcs	r3, r1
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	00cb      	lsls	r3, r1, #3
 8004faa:	4651      	mov	r1, sl
 8004fac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	00ca      	lsls	r2, r1, #3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4642      	mov	r2, r8
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4641      	mov	r1, r8
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ff4:	f7fb fe48 	bl	8000c88 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2164      	movs	r1, #100	; 0x64
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	; 0x32
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <UART_SetConfig+0x4e4>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4422      	add	r2, r4
 8005024:	609a      	str	r2, [r3, #8]
}
 8005026:	bf00      	nop
 8005028:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <__errno>:
 8005038:	4b01      	ldr	r3, [pc, #4]	; (8005040 <__errno+0x8>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	2000000c 	.word	0x2000000c

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4d0d      	ldr	r5, [pc, #52]	; (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2600      	movs	r6, #0
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4d0b      	ldr	r5, [pc, #44]	; (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <__libc_init_array+0x44>)
 8005058:	f003 faee 	bl	8008638 <_init>
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2600      	movs	r6, #0
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f855 3b04 	ldr.w	r3, [r5], #4
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f855 3b04 	ldr.w	r3, [r5], #4
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	08008bf8 	.word	0x08008bf8
 8005080:	08008bf8 	.word	0x08008bf8
 8005084:	08008bf8 	.word	0x08008bf8
 8005088:	08008bfc 	.word	0x08008bfc

0800508c <memset>:
 800508c:	4402      	add	r2, r0
 800508e:	4603      	mov	r3, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <__cvt>:
 800509c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	ec55 4b10 	vmov	r4, r5, d0
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	460e      	mov	r6, r1
 80050a8:	4619      	mov	r1, r3
 80050aa:	462b      	mov	r3, r5
 80050ac:	bfbb      	ittet	lt
 80050ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050b2:	461d      	movlt	r5, r3
 80050b4:	2300      	movge	r3, #0
 80050b6:	232d      	movlt	r3, #45	; 0x2d
 80050b8:	700b      	strb	r3, [r1, #0]
 80050ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050c0:	4691      	mov	r9, r2
 80050c2:	f023 0820 	bic.w	r8, r3, #32
 80050c6:	bfbc      	itt	lt
 80050c8:	4622      	movlt	r2, r4
 80050ca:	4614      	movlt	r4, r2
 80050cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050d0:	d005      	beq.n	80050de <__cvt+0x42>
 80050d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050d6:	d100      	bne.n	80050da <__cvt+0x3e>
 80050d8:	3601      	adds	r6, #1
 80050da:	2102      	movs	r1, #2
 80050dc:	e000      	b.n	80050e0 <__cvt+0x44>
 80050de:	2103      	movs	r1, #3
 80050e0:	ab03      	add	r3, sp, #12
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	ab02      	add	r3, sp, #8
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	ec45 4b10 	vmov	d0, r4, r5
 80050ec:	4653      	mov	r3, sl
 80050ee:	4632      	mov	r2, r6
 80050f0:	f000 fe1a 	bl	8005d28 <_dtoa_r>
 80050f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050f8:	4607      	mov	r7, r0
 80050fa:	d102      	bne.n	8005102 <__cvt+0x66>
 80050fc:	f019 0f01 	tst.w	r9, #1
 8005100:	d022      	beq.n	8005148 <__cvt+0xac>
 8005102:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005106:	eb07 0906 	add.w	r9, r7, r6
 800510a:	d110      	bne.n	800512e <__cvt+0x92>
 800510c:	783b      	ldrb	r3, [r7, #0]
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	d10a      	bne.n	8005128 <__cvt+0x8c>
 8005112:	2200      	movs	r2, #0
 8005114:	2300      	movs	r3, #0
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb fcf5 	bl	8000b08 <__aeabi_dcmpeq>
 800511e:	b918      	cbnz	r0, 8005128 <__cvt+0x8c>
 8005120:	f1c6 0601 	rsb	r6, r6, #1
 8005124:	f8ca 6000 	str.w	r6, [sl]
 8005128:	f8da 3000 	ldr.w	r3, [sl]
 800512c:	4499      	add	r9, r3
 800512e:	2200      	movs	r2, #0
 8005130:	2300      	movs	r3, #0
 8005132:	4620      	mov	r0, r4
 8005134:	4629      	mov	r1, r5
 8005136:	f7fb fce7 	bl	8000b08 <__aeabi_dcmpeq>
 800513a:	b108      	cbz	r0, 8005140 <__cvt+0xa4>
 800513c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005140:	2230      	movs	r2, #48	; 0x30
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	454b      	cmp	r3, r9
 8005146:	d307      	bcc.n	8005158 <__cvt+0xbc>
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800514c:	1bdb      	subs	r3, r3, r7
 800514e:	4638      	mov	r0, r7
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	b004      	add	sp, #16
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	9103      	str	r1, [sp, #12]
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e7f0      	b.n	8005142 <__cvt+0xa6>

08005160 <__exponent>:
 8005160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005162:	4603      	mov	r3, r0
 8005164:	2900      	cmp	r1, #0
 8005166:	bfb8      	it	lt
 8005168:	4249      	neglt	r1, r1
 800516a:	f803 2b02 	strb.w	r2, [r3], #2
 800516e:	bfb4      	ite	lt
 8005170:	222d      	movlt	r2, #45	; 0x2d
 8005172:	222b      	movge	r2, #43	; 0x2b
 8005174:	2909      	cmp	r1, #9
 8005176:	7042      	strb	r2, [r0, #1]
 8005178:	dd2a      	ble.n	80051d0 <__exponent+0x70>
 800517a:	f10d 0407 	add.w	r4, sp, #7
 800517e:	46a4      	mov	ip, r4
 8005180:	270a      	movs	r7, #10
 8005182:	46a6      	mov	lr, r4
 8005184:	460a      	mov	r2, r1
 8005186:	fb91 f6f7 	sdiv	r6, r1, r7
 800518a:	fb07 1516 	mls	r5, r7, r6, r1
 800518e:	3530      	adds	r5, #48	; 0x30
 8005190:	2a63      	cmp	r2, #99	; 0x63
 8005192:	f104 34ff 	add.w	r4, r4, #4294967295
 8005196:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800519a:	4631      	mov	r1, r6
 800519c:	dcf1      	bgt.n	8005182 <__exponent+0x22>
 800519e:	3130      	adds	r1, #48	; 0x30
 80051a0:	f1ae 0502 	sub.w	r5, lr, #2
 80051a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051a8:	1c44      	adds	r4, r0, #1
 80051aa:	4629      	mov	r1, r5
 80051ac:	4561      	cmp	r1, ip
 80051ae:	d30a      	bcc.n	80051c6 <__exponent+0x66>
 80051b0:	f10d 0209 	add.w	r2, sp, #9
 80051b4:	eba2 020e 	sub.w	r2, r2, lr
 80051b8:	4565      	cmp	r5, ip
 80051ba:	bf88      	it	hi
 80051bc:	2200      	movhi	r2, #0
 80051be:	4413      	add	r3, r2
 80051c0:	1a18      	subs	r0, r3, r0
 80051c2:	b003      	add	sp, #12
 80051c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051ce:	e7ed      	b.n	80051ac <__exponent+0x4c>
 80051d0:	2330      	movs	r3, #48	; 0x30
 80051d2:	3130      	adds	r1, #48	; 0x30
 80051d4:	7083      	strb	r3, [r0, #2]
 80051d6:	70c1      	strb	r1, [r0, #3]
 80051d8:	1d03      	adds	r3, r0, #4
 80051da:	e7f1      	b.n	80051c0 <__exponent+0x60>

080051dc <_printf_float>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	ed2d 8b02 	vpush	{d8}
 80051e4:	b08d      	sub	sp, #52	; 0x34
 80051e6:	460c      	mov	r4, r1
 80051e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051ec:	4616      	mov	r6, r2
 80051ee:	461f      	mov	r7, r3
 80051f0:	4605      	mov	r5, r0
 80051f2:	f001 fd3f 	bl	8006c74 <_localeconv_r>
 80051f6:	f8d0 a000 	ldr.w	sl, [r0]
 80051fa:	4650      	mov	r0, sl
 80051fc:	f7fb f808 	bl	8000210 <strlen>
 8005200:	2300      	movs	r3, #0
 8005202:	930a      	str	r3, [sp, #40]	; 0x28
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	9305      	str	r3, [sp, #20]
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005210:	3307      	adds	r3, #7
 8005212:	f023 0307 	bic.w	r3, r3, #7
 8005216:	f103 0208 	add.w	r2, r3, #8
 800521a:	f8c8 2000 	str.w	r2, [r8]
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005226:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800522a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800522e:	9307      	str	r3, [sp, #28]
 8005230:	f8cd 8018 	str.w	r8, [sp, #24]
 8005234:	ee08 0a10 	vmov	s16, r0
 8005238:	4b9f      	ldr	r3, [pc, #636]	; (80054b8 <_printf_float+0x2dc>)
 800523a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800523e:	f04f 32ff 	mov.w	r2, #4294967295
 8005242:	f7fb fc93 	bl	8000b6c <__aeabi_dcmpun>
 8005246:	bb88      	cbnz	r0, 80052ac <_printf_float+0xd0>
 8005248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524c:	4b9a      	ldr	r3, [pc, #616]	; (80054b8 <_printf_float+0x2dc>)
 800524e:	f04f 32ff 	mov.w	r2, #4294967295
 8005252:	f7fb fc6d 	bl	8000b30 <__aeabi_dcmple>
 8005256:	bb48      	cbnz	r0, 80052ac <_printf_float+0xd0>
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fb fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8005264:	b110      	cbz	r0, 800526c <_printf_float+0x90>
 8005266:	232d      	movs	r3, #45	; 0x2d
 8005268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526c:	4b93      	ldr	r3, [pc, #588]	; (80054bc <_printf_float+0x2e0>)
 800526e:	4894      	ldr	r0, [pc, #592]	; (80054c0 <_printf_float+0x2e4>)
 8005270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005274:	bf94      	ite	ls
 8005276:	4698      	movls	r8, r3
 8005278:	4680      	movhi	r8, r0
 800527a:	2303      	movs	r3, #3
 800527c:	6123      	str	r3, [r4, #16]
 800527e:	9b05      	ldr	r3, [sp, #20]
 8005280:	f023 0204 	bic.w	r2, r3, #4
 8005284:	6022      	str	r2, [r4, #0]
 8005286:	f04f 0900 	mov.w	r9, #0
 800528a:	9700      	str	r7, [sp, #0]
 800528c:	4633      	mov	r3, r6
 800528e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f9d8 	bl	8005648 <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	f040 8090 	bne.w	80053be <_printf_float+0x1e2>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b00d      	add	sp, #52	; 0x34
 80052a4:	ecbd 8b02 	vpop	{d8}
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	4649      	mov	r1, r9
 80052b4:	f7fb fc5a 	bl	8000b6c <__aeabi_dcmpun>
 80052b8:	b140      	cbz	r0, 80052cc <_printf_float+0xf0>
 80052ba:	464b      	mov	r3, r9
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bfbc      	itt	lt
 80052c0:	232d      	movlt	r3, #45	; 0x2d
 80052c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052c6:	487f      	ldr	r0, [pc, #508]	; (80054c4 <_printf_float+0x2e8>)
 80052c8:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <_printf_float+0x2ec>)
 80052ca:	e7d1      	b.n	8005270 <_printf_float+0x94>
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052d2:	9206      	str	r2, [sp, #24]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	d13f      	bne.n	8005358 <_printf_float+0x17c>
 80052d8:	2306      	movs	r3, #6
 80052da:	6063      	str	r3, [r4, #4]
 80052dc:	9b05      	ldr	r3, [sp, #20]
 80052de:	6861      	ldr	r1, [r4, #4]
 80052e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052e4:	2300      	movs	r3, #0
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	ab0a      	add	r3, sp, #40	; 0x28
 80052ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052ee:	ab09      	add	r3, sp, #36	; 0x24
 80052f0:	ec49 8b10 	vmov	d0, r8, r9
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6022      	str	r2, [r4, #0]
 80052f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052fc:	4628      	mov	r0, r5
 80052fe:	f7ff fecd 	bl	800509c <__cvt>
 8005302:	9b06      	ldr	r3, [sp, #24]
 8005304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005306:	2b47      	cmp	r3, #71	; 0x47
 8005308:	4680      	mov	r8, r0
 800530a:	d108      	bne.n	800531e <_printf_float+0x142>
 800530c:	1cc8      	adds	r0, r1, #3
 800530e:	db02      	blt.n	8005316 <_printf_float+0x13a>
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	4299      	cmp	r1, r3
 8005314:	dd41      	ble.n	800539a <_printf_float+0x1be>
 8005316:	f1ab 0b02 	sub.w	fp, fp, #2
 800531a:	fa5f fb8b 	uxtb.w	fp, fp
 800531e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005322:	d820      	bhi.n	8005366 <_printf_float+0x18a>
 8005324:	3901      	subs	r1, #1
 8005326:	465a      	mov	r2, fp
 8005328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800532c:	9109      	str	r1, [sp, #36]	; 0x24
 800532e:	f7ff ff17 	bl	8005160 <__exponent>
 8005332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005334:	1813      	adds	r3, r2, r0
 8005336:	2a01      	cmp	r2, #1
 8005338:	4681      	mov	r9, r0
 800533a:	6123      	str	r3, [r4, #16]
 800533c:	dc02      	bgt.n	8005344 <_printf_float+0x168>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	07d2      	lsls	r2, r2, #31
 8005342:	d501      	bpl.n	8005348 <_printf_float+0x16c>
 8005344:	3301      	adds	r3, #1
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800534c:	2b00      	cmp	r3, #0
 800534e:	d09c      	beq.n	800528a <_printf_float+0xae>
 8005350:	232d      	movs	r3, #45	; 0x2d
 8005352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005356:	e798      	b.n	800528a <_printf_float+0xae>
 8005358:	9a06      	ldr	r2, [sp, #24]
 800535a:	2a47      	cmp	r2, #71	; 0x47
 800535c:	d1be      	bne.n	80052dc <_printf_float+0x100>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1bc      	bne.n	80052dc <_printf_float+0x100>
 8005362:	2301      	movs	r3, #1
 8005364:	e7b9      	b.n	80052da <_printf_float+0xfe>
 8005366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800536a:	d118      	bne.n	800539e <_printf_float+0x1c2>
 800536c:	2900      	cmp	r1, #0
 800536e:	6863      	ldr	r3, [r4, #4]
 8005370:	dd0b      	ble.n	800538a <_printf_float+0x1ae>
 8005372:	6121      	str	r1, [r4, #16]
 8005374:	b913      	cbnz	r3, 800537c <_printf_float+0x1a0>
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	07d0      	lsls	r0, r2, #31
 800537a:	d502      	bpl.n	8005382 <_printf_float+0x1a6>
 800537c:	3301      	adds	r3, #1
 800537e:	440b      	add	r3, r1
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	65a1      	str	r1, [r4, #88]	; 0x58
 8005384:	f04f 0900 	mov.w	r9, #0
 8005388:	e7de      	b.n	8005348 <_printf_float+0x16c>
 800538a:	b913      	cbnz	r3, 8005392 <_printf_float+0x1b6>
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	07d2      	lsls	r2, r2, #31
 8005390:	d501      	bpl.n	8005396 <_printf_float+0x1ba>
 8005392:	3302      	adds	r3, #2
 8005394:	e7f4      	b.n	8005380 <_printf_float+0x1a4>
 8005396:	2301      	movs	r3, #1
 8005398:	e7f2      	b.n	8005380 <_printf_float+0x1a4>
 800539a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a0:	4299      	cmp	r1, r3
 80053a2:	db05      	blt.n	80053b0 <_printf_float+0x1d4>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	6121      	str	r1, [r4, #16]
 80053a8:	07d8      	lsls	r0, r3, #31
 80053aa:	d5ea      	bpl.n	8005382 <_printf_float+0x1a6>
 80053ac:	1c4b      	adds	r3, r1, #1
 80053ae:	e7e7      	b.n	8005380 <_printf_float+0x1a4>
 80053b0:	2900      	cmp	r1, #0
 80053b2:	bfd4      	ite	le
 80053b4:	f1c1 0202 	rsble	r2, r1, #2
 80053b8:	2201      	movgt	r2, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	e7e0      	b.n	8005380 <_printf_float+0x1a4>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	055a      	lsls	r2, r3, #21
 80053c2:	d407      	bmi.n	80053d4 <_printf_float+0x1f8>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	4642      	mov	r2, r8
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	d12c      	bne.n	800542c <_printf_float+0x250>
 80053d2:	e764      	b.n	800529e <_printf_float+0xc2>
 80053d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053d8:	f240 80e0 	bls.w	800559c <_printf_float+0x3c0>
 80053dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053e0:	2200      	movs	r2, #0
 80053e2:	2300      	movs	r3, #0
 80053e4:	f7fb fb90 	bl	8000b08 <__aeabi_dcmpeq>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d034      	beq.n	8005456 <_printf_float+0x27a>
 80053ec:	4a37      	ldr	r2, [pc, #220]	; (80054cc <_printf_float+0x2f0>)
 80053ee:	2301      	movs	r3, #1
 80053f0:	4631      	mov	r1, r6
 80053f2:	4628      	mov	r0, r5
 80053f4:	47b8      	blx	r7
 80053f6:	3001      	adds	r0, #1
 80053f8:	f43f af51 	beq.w	800529e <_printf_float+0xc2>
 80053fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005400:	429a      	cmp	r2, r3
 8005402:	db02      	blt.n	800540a <_printf_float+0x22e>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	07d8      	lsls	r0, r3, #31
 8005408:	d510      	bpl.n	800542c <_printf_float+0x250>
 800540a:	ee18 3a10 	vmov	r3, s16
 800540e:	4652      	mov	r2, sl
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	f43f af41 	beq.w	800529e <_printf_float+0xc2>
 800541c:	f04f 0800 	mov.w	r8, #0
 8005420:	f104 091a 	add.w	r9, r4, #26
 8005424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	4543      	cmp	r3, r8
 800542a:	dc09      	bgt.n	8005440 <_printf_float+0x264>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	079b      	lsls	r3, r3, #30
 8005430:	f100 8105 	bmi.w	800563e <_printf_float+0x462>
 8005434:	68e0      	ldr	r0, [r4, #12]
 8005436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005438:	4298      	cmp	r0, r3
 800543a:	bfb8      	it	lt
 800543c:	4618      	movlt	r0, r3
 800543e:	e730      	b.n	80052a2 <_printf_float+0xc6>
 8005440:	2301      	movs	r3, #1
 8005442:	464a      	mov	r2, r9
 8005444:	4631      	mov	r1, r6
 8005446:	4628      	mov	r0, r5
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	f43f af27 	beq.w	800529e <_printf_float+0xc2>
 8005450:	f108 0801 	add.w	r8, r8, #1
 8005454:	e7e6      	b.n	8005424 <_printf_float+0x248>
 8005456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc39      	bgt.n	80054d0 <_printf_float+0x2f4>
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <_printf_float+0x2f0>)
 800545e:	2301      	movs	r3, #1
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	f43f af19 	beq.w	800529e <_printf_float+0xc2>
 800546c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005470:	4313      	orrs	r3, r2
 8005472:	d102      	bne.n	800547a <_printf_float+0x29e>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	07d9      	lsls	r1, r3, #31
 8005478:	d5d8      	bpl.n	800542c <_printf_float+0x250>
 800547a:	ee18 3a10 	vmov	r3, s16
 800547e:	4652      	mov	r2, sl
 8005480:	4631      	mov	r1, r6
 8005482:	4628      	mov	r0, r5
 8005484:	47b8      	blx	r7
 8005486:	3001      	adds	r0, #1
 8005488:	f43f af09 	beq.w	800529e <_printf_float+0xc2>
 800548c:	f04f 0900 	mov.w	r9, #0
 8005490:	f104 0a1a 	add.w	sl, r4, #26
 8005494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005496:	425b      	negs	r3, r3
 8005498:	454b      	cmp	r3, r9
 800549a:	dc01      	bgt.n	80054a0 <_printf_float+0x2c4>
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	e792      	b.n	80053c6 <_printf_float+0x1ea>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4652      	mov	r2, sl
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f aef7 	beq.w	800529e <_printf_float+0xc2>
 80054b0:	f109 0901 	add.w	r9, r9, #1
 80054b4:	e7ee      	b.n	8005494 <_printf_float+0x2b8>
 80054b6:	bf00      	nop
 80054b8:	7fefffff 	.word	0x7fefffff
 80054bc:	080087d8 	.word	0x080087d8
 80054c0:	080087dc 	.word	0x080087dc
 80054c4:	080087e4 	.word	0x080087e4
 80054c8:	080087e0 	.word	0x080087e0
 80054cc:	080087e8 	.word	0x080087e8
 80054d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054d4:	429a      	cmp	r2, r3
 80054d6:	bfa8      	it	ge
 80054d8:	461a      	movge	r2, r3
 80054da:	2a00      	cmp	r2, #0
 80054dc:	4691      	mov	r9, r2
 80054de:	dc37      	bgt.n	8005550 <_printf_float+0x374>
 80054e0:	f04f 0b00 	mov.w	fp, #0
 80054e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e8:	f104 021a 	add.w	r2, r4, #26
 80054ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ee:	9305      	str	r3, [sp, #20]
 80054f0:	eba3 0309 	sub.w	r3, r3, r9
 80054f4:	455b      	cmp	r3, fp
 80054f6:	dc33      	bgt.n	8005560 <_printf_float+0x384>
 80054f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fc:	429a      	cmp	r2, r3
 80054fe:	db3b      	blt.n	8005578 <_printf_float+0x39c>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07da      	lsls	r2, r3, #31
 8005504:	d438      	bmi.n	8005578 <_printf_float+0x39c>
 8005506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005508:	9a05      	ldr	r2, [sp, #20]
 800550a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800550c:	1a9a      	subs	r2, r3, r2
 800550e:	eba3 0901 	sub.w	r9, r3, r1
 8005512:	4591      	cmp	r9, r2
 8005514:	bfa8      	it	ge
 8005516:	4691      	movge	r9, r2
 8005518:	f1b9 0f00 	cmp.w	r9, #0
 800551c:	dc35      	bgt.n	800558a <_printf_float+0x3ae>
 800551e:	f04f 0800 	mov.w	r8, #0
 8005522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005526:	f104 0a1a 	add.w	sl, r4, #26
 800552a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	eba3 0309 	sub.w	r3, r3, r9
 8005534:	4543      	cmp	r3, r8
 8005536:	f77f af79 	ble.w	800542c <_printf_float+0x250>
 800553a:	2301      	movs	r3, #1
 800553c:	4652      	mov	r2, sl
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f aeaa 	beq.w	800529e <_printf_float+0xc2>
 800554a:	f108 0801 	add.w	r8, r8, #1
 800554e:	e7ec      	b.n	800552a <_printf_float+0x34e>
 8005550:	4613      	mov	r3, r2
 8005552:	4631      	mov	r1, r6
 8005554:	4642      	mov	r2, r8
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	d1c0      	bne.n	80054e0 <_printf_float+0x304>
 800555e:	e69e      	b.n	800529e <_printf_float+0xc2>
 8005560:	2301      	movs	r3, #1
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	9205      	str	r2, [sp, #20]
 8005568:	47b8      	blx	r7
 800556a:	3001      	adds	r0, #1
 800556c:	f43f ae97 	beq.w	800529e <_printf_float+0xc2>
 8005570:	9a05      	ldr	r2, [sp, #20]
 8005572:	f10b 0b01 	add.w	fp, fp, #1
 8005576:	e7b9      	b.n	80054ec <_printf_float+0x310>
 8005578:	ee18 3a10 	vmov	r3, s16
 800557c:	4652      	mov	r2, sl
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	d1be      	bne.n	8005506 <_printf_float+0x32a>
 8005588:	e689      	b.n	800529e <_printf_float+0xc2>
 800558a:	9a05      	ldr	r2, [sp, #20]
 800558c:	464b      	mov	r3, r9
 800558e:	4442      	add	r2, r8
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	d1c1      	bne.n	800551e <_printf_float+0x342>
 800559a:	e680      	b.n	800529e <_printf_float+0xc2>
 800559c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800559e:	2a01      	cmp	r2, #1
 80055a0:	dc01      	bgt.n	80055a6 <_printf_float+0x3ca>
 80055a2:	07db      	lsls	r3, r3, #31
 80055a4:	d538      	bpl.n	8005618 <_printf_float+0x43c>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4642      	mov	r2, r8
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	f43f ae74 	beq.w	800529e <_printf_float+0xc2>
 80055b6:	ee18 3a10 	vmov	r3, s16
 80055ba:	4652      	mov	r2, sl
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f ae6b 	beq.w	800529e <_printf_float+0xc2>
 80055c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	f7fb fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 80055d4:	b9d8      	cbnz	r0, 800560e <_printf_float+0x432>
 80055d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d8:	f108 0201 	add.w	r2, r8, #1
 80055dc:	3b01      	subs	r3, #1
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	d10e      	bne.n	8005606 <_printf_float+0x42a>
 80055e8:	e659      	b.n	800529e <_printf_float+0xc2>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4652      	mov	r2, sl
 80055ee:	4631      	mov	r1, r6
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b8      	blx	r7
 80055f4:	3001      	adds	r0, #1
 80055f6:	f43f ae52 	beq.w	800529e <_printf_float+0xc2>
 80055fa:	f108 0801 	add.w	r8, r8, #1
 80055fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005600:	3b01      	subs	r3, #1
 8005602:	4543      	cmp	r3, r8
 8005604:	dcf1      	bgt.n	80055ea <_printf_float+0x40e>
 8005606:	464b      	mov	r3, r9
 8005608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800560c:	e6dc      	b.n	80053c8 <_printf_float+0x1ec>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	f104 0a1a 	add.w	sl, r4, #26
 8005616:	e7f2      	b.n	80055fe <_printf_float+0x422>
 8005618:	2301      	movs	r3, #1
 800561a:	4642      	mov	r2, r8
 800561c:	e7df      	b.n	80055de <_printf_float+0x402>
 800561e:	2301      	movs	r3, #1
 8005620:	464a      	mov	r2, r9
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	f43f ae38 	beq.w	800529e <_printf_float+0xc2>
 800562e:	f108 0801 	add.w	r8, r8, #1
 8005632:	68e3      	ldr	r3, [r4, #12]
 8005634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005636:	1a5b      	subs	r3, r3, r1
 8005638:	4543      	cmp	r3, r8
 800563a:	dcf0      	bgt.n	800561e <_printf_float+0x442>
 800563c:	e6fa      	b.n	8005434 <_printf_float+0x258>
 800563e:	f04f 0800 	mov.w	r8, #0
 8005642:	f104 0919 	add.w	r9, r4, #25
 8005646:	e7f4      	b.n	8005632 <_printf_float+0x456>

08005648 <_printf_common>:
 8005648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	4616      	mov	r6, r2
 800564e:	4699      	mov	r9, r3
 8005650:	688a      	ldr	r2, [r1, #8]
 8005652:	690b      	ldr	r3, [r1, #16]
 8005654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005658:	4293      	cmp	r3, r2
 800565a:	bfb8      	it	lt
 800565c:	4613      	movlt	r3, r2
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005664:	4607      	mov	r7, r0
 8005666:	460c      	mov	r4, r1
 8005668:	b10a      	cbz	r2, 800566e <_printf_common+0x26>
 800566a:	3301      	adds	r3, #1
 800566c:	6033      	str	r3, [r6, #0]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	0699      	lsls	r1, r3, #26
 8005672:	bf42      	ittt	mi
 8005674:	6833      	ldrmi	r3, [r6, #0]
 8005676:	3302      	addmi	r3, #2
 8005678:	6033      	strmi	r3, [r6, #0]
 800567a:	6825      	ldr	r5, [r4, #0]
 800567c:	f015 0506 	ands.w	r5, r5, #6
 8005680:	d106      	bne.n	8005690 <_printf_common+0x48>
 8005682:	f104 0a19 	add.w	sl, r4, #25
 8005686:	68e3      	ldr	r3, [r4, #12]
 8005688:	6832      	ldr	r2, [r6, #0]
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	42ab      	cmp	r3, r5
 800568e:	dc26      	bgt.n	80056de <_printf_common+0x96>
 8005690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005694:	1e13      	subs	r3, r2, #0
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	bf18      	it	ne
 800569a:	2301      	movne	r3, #1
 800569c:	0692      	lsls	r2, r2, #26
 800569e:	d42b      	bmi.n	80056f8 <_printf_common+0xb0>
 80056a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a4:	4649      	mov	r1, r9
 80056a6:	4638      	mov	r0, r7
 80056a8:	47c0      	blx	r8
 80056aa:	3001      	adds	r0, #1
 80056ac:	d01e      	beq.n	80056ec <_printf_common+0xa4>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	68e5      	ldr	r5, [r4, #12]
 80056b2:	6832      	ldr	r2, [r6, #0]
 80056b4:	f003 0306 	and.w	r3, r3, #6
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	bf08      	it	eq
 80056bc:	1aad      	subeq	r5, r5, r2
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	6922      	ldr	r2, [r4, #16]
 80056c2:	bf0c      	ite	eq
 80056c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c8:	2500      	movne	r5, #0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	bfc4      	itt	gt
 80056ce:	1a9b      	subgt	r3, r3, r2
 80056d0:	18ed      	addgt	r5, r5, r3
 80056d2:	2600      	movs	r6, #0
 80056d4:	341a      	adds	r4, #26
 80056d6:	42b5      	cmp	r5, r6
 80056d8:	d11a      	bne.n	8005710 <_printf_common+0xc8>
 80056da:	2000      	movs	r0, #0
 80056dc:	e008      	b.n	80056f0 <_printf_common+0xa8>
 80056de:	2301      	movs	r3, #1
 80056e0:	4652      	mov	r2, sl
 80056e2:	4649      	mov	r1, r9
 80056e4:	4638      	mov	r0, r7
 80056e6:	47c0      	blx	r8
 80056e8:	3001      	adds	r0, #1
 80056ea:	d103      	bne.n	80056f4 <_printf_common+0xac>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	3501      	adds	r5, #1
 80056f6:	e7c6      	b.n	8005686 <_printf_common+0x3e>
 80056f8:	18e1      	adds	r1, r4, r3
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	2030      	movs	r0, #48	; 0x30
 80056fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005702:	4422      	add	r2, r4
 8005704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800570c:	3302      	adds	r3, #2
 800570e:	e7c7      	b.n	80056a0 <_printf_common+0x58>
 8005710:	2301      	movs	r3, #1
 8005712:	4622      	mov	r2, r4
 8005714:	4649      	mov	r1, r9
 8005716:	4638      	mov	r0, r7
 8005718:	47c0      	blx	r8
 800571a:	3001      	adds	r0, #1
 800571c:	d0e6      	beq.n	80056ec <_printf_common+0xa4>
 800571e:	3601      	adds	r6, #1
 8005720:	e7d9      	b.n	80056d6 <_printf_common+0x8e>
	...

08005724 <_printf_i>:
 8005724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	7e0f      	ldrb	r7, [r1, #24]
 800572a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800572c:	2f78      	cmp	r7, #120	; 0x78
 800572e:	4691      	mov	r9, r2
 8005730:	4680      	mov	r8, r0
 8005732:	460c      	mov	r4, r1
 8005734:	469a      	mov	sl, r3
 8005736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800573a:	d807      	bhi.n	800574c <_printf_i+0x28>
 800573c:	2f62      	cmp	r7, #98	; 0x62
 800573e:	d80a      	bhi.n	8005756 <_printf_i+0x32>
 8005740:	2f00      	cmp	r7, #0
 8005742:	f000 80d8 	beq.w	80058f6 <_printf_i+0x1d2>
 8005746:	2f58      	cmp	r7, #88	; 0x58
 8005748:	f000 80a3 	beq.w	8005892 <_printf_i+0x16e>
 800574c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005754:	e03a      	b.n	80057cc <_printf_i+0xa8>
 8005756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800575a:	2b15      	cmp	r3, #21
 800575c:	d8f6      	bhi.n	800574c <_printf_i+0x28>
 800575e:	a101      	add	r1, pc, #4	; (adr r1, 8005764 <_printf_i+0x40>)
 8005760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005764:	080057bd 	.word	0x080057bd
 8005768:	080057d1 	.word	0x080057d1
 800576c:	0800574d 	.word	0x0800574d
 8005770:	0800574d 	.word	0x0800574d
 8005774:	0800574d 	.word	0x0800574d
 8005778:	0800574d 	.word	0x0800574d
 800577c:	080057d1 	.word	0x080057d1
 8005780:	0800574d 	.word	0x0800574d
 8005784:	0800574d 	.word	0x0800574d
 8005788:	0800574d 	.word	0x0800574d
 800578c:	0800574d 	.word	0x0800574d
 8005790:	080058dd 	.word	0x080058dd
 8005794:	08005801 	.word	0x08005801
 8005798:	080058bf 	.word	0x080058bf
 800579c:	0800574d 	.word	0x0800574d
 80057a0:	0800574d 	.word	0x0800574d
 80057a4:	080058ff 	.word	0x080058ff
 80057a8:	0800574d 	.word	0x0800574d
 80057ac:	08005801 	.word	0x08005801
 80057b0:	0800574d 	.word	0x0800574d
 80057b4:	0800574d 	.word	0x0800574d
 80057b8:	080058c7 	.word	0x080058c7
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	1d1a      	adds	r2, r3, #4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	602a      	str	r2, [r5, #0]
 80057c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0a3      	b.n	8005918 <_printf_i+0x1f4>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	6829      	ldr	r1, [r5, #0]
 80057d4:	0606      	lsls	r6, r0, #24
 80057d6:	f101 0304 	add.w	r3, r1, #4
 80057da:	d50a      	bpl.n	80057f2 <_printf_i+0xce>
 80057dc:	680e      	ldr	r6, [r1, #0]
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	2e00      	cmp	r6, #0
 80057e2:	da03      	bge.n	80057ec <_printf_i+0xc8>
 80057e4:	232d      	movs	r3, #45	; 0x2d
 80057e6:	4276      	negs	r6, r6
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	485e      	ldr	r0, [pc, #376]	; (8005968 <_printf_i+0x244>)
 80057ee:	230a      	movs	r3, #10
 80057f0:	e019      	b.n	8005826 <_printf_i+0x102>
 80057f2:	680e      	ldr	r6, [r1, #0]
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057fa:	bf18      	it	ne
 80057fc:	b236      	sxthne	r6, r6
 80057fe:	e7ef      	b.n	80057e0 <_printf_i+0xbc>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	0601      	lsls	r1, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xec>
 800580c:	681e      	ldr	r6, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0xf2>
 8005810:	0646      	lsls	r6, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xe8>
 8005814:	881e      	ldrh	r6, [r3, #0]
 8005816:	4854      	ldr	r0, [pc, #336]	; (8005968 <_printf_i+0x244>)
 8005818:	2f6f      	cmp	r7, #111	; 0x6f
 800581a:	bf0c      	ite	eq
 800581c:	2308      	moveq	r3, #8
 800581e:	230a      	movne	r3, #10
 8005820:	2100      	movs	r1, #0
 8005822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005826:	6865      	ldr	r5, [r4, #4]
 8005828:	60a5      	str	r5, [r4, #8]
 800582a:	2d00      	cmp	r5, #0
 800582c:	bfa2      	ittt	ge
 800582e:	6821      	ldrge	r1, [r4, #0]
 8005830:	f021 0104 	bicge.w	r1, r1, #4
 8005834:	6021      	strge	r1, [r4, #0]
 8005836:	b90e      	cbnz	r6, 800583c <_printf_i+0x118>
 8005838:	2d00      	cmp	r5, #0
 800583a:	d04d      	beq.n	80058d8 <_printf_i+0x1b4>
 800583c:	4615      	mov	r5, r2
 800583e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005842:	fb03 6711 	mls	r7, r3, r1, r6
 8005846:	5dc7      	ldrb	r7, [r0, r7]
 8005848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800584c:	4637      	mov	r7, r6
 800584e:	42bb      	cmp	r3, r7
 8005850:	460e      	mov	r6, r1
 8005852:	d9f4      	bls.n	800583e <_printf_i+0x11a>
 8005854:	2b08      	cmp	r3, #8
 8005856:	d10b      	bne.n	8005870 <_printf_i+0x14c>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07de      	lsls	r6, r3, #31
 800585c:	d508      	bpl.n	8005870 <_printf_i+0x14c>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	6861      	ldr	r1, [r4, #4]
 8005862:	4299      	cmp	r1, r3
 8005864:	bfde      	ittt	le
 8005866:	2330      	movle	r3, #48	; 0x30
 8005868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800586c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005870:	1b52      	subs	r2, r2, r5
 8005872:	6122      	str	r2, [r4, #16]
 8005874:	f8cd a000 	str.w	sl, [sp]
 8005878:	464b      	mov	r3, r9
 800587a:	aa03      	add	r2, sp, #12
 800587c:	4621      	mov	r1, r4
 800587e:	4640      	mov	r0, r8
 8005880:	f7ff fee2 	bl	8005648 <_printf_common>
 8005884:	3001      	adds	r0, #1
 8005886:	d14c      	bne.n	8005922 <_printf_i+0x1fe>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	b004      	add	sp, #16
 800588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005892:	4835      	ldr	r0, [pc, #212]	; (8005968 <_printf_i+0x244>)
 8005894:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005898:	6829      	ldr	r1, [r5, #0]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f851 6b04 	ldr.w	r6, [r1], #4
 80058a0:	6029      	str	r1, [r5, #0]
 80058a2:	061d      	lsls	r5, r3, #24
 80058a4:	d514      	bpl.n	80058d0 <_printf_i+0x1ac>
 80058a6:	07df      	lsls	r7, r3, #31
 80058a8:	bf44      	itt	mi
 80058aa:	f043 0320 	orrmi.w	r3, r3, #32
 80058ae:	6023      	strmi	r3, [r4, #0]
 80058b0:	b91e      	cbnz	r6, 80058ba <_printf_i+0x196>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f023 0320 	bic.w	r3, r3, #32
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	2310      	movs	r3, #16
 80058bc:	e7b0      	b.n	8005820 <_printf_i+0xfc>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	2378      	movs	r3, #120	; 0x78
 80058c8:	4828      	ldr	r0, [pc, #160]	; (800596c <_printf_i+0x248>)
 80058ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ce:	e7e3      	b.n	8005898 <_printf_i+0x174>
 80058d0:	0659      	lsls	r1, r3, #25
 80058d2:	bf48      	it	mi
 80058d4:	b2b6      	uxthmi	r6, r6
 80058d6:	e7e6      	b.n	80058a6 <_printf_i+0x182>
 80058d8:	4615      	mov	r5, r2
 80058da:	e7bb      	b.n	8005854 <_printf_i+0x130>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	6826      	ldr	r6, [r4, #0]
 80058e0:	6961      	ldr	r1, [r4, #20]
 80058e2:	1d18      	adds	r0, r3, #4
 80058e4:	6028      	str	r0, [r5, #0]
 80058e6:	0635      	lsls	r5, r6, #24
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0x1cc>
 80058ec:	6019      	str	r1, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <_printf_i+0x1d2>
 80058f0:	0670      	lsls	r0, r6, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0x1c8>
 80058f4:	8019      	strh	r1, [r3, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	4615      	mov	r5, r2
 80058fc:	e7ba      	b.n	8005874 <_printf_i+0x150>
 80058fe:	682b      	ldr	r3, [r5, #0]
 8005900:	1d1a      	adds	r2, r3, #4
 8005902:	602a      	str	r2, [r5, #0]
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	6862      	ldr	r2, [r4, #4]
 8005908:	2100      	movs	r1, #0
 800590a:	4628      	mov	r0, r5
 800590c:	f7fa fc88 	bl	8000220 <memchr>
 8005910:	b108      	cbz	r0, 8005916 <_printf_i+0x1f2>
 8005912:	1b40      	subs	r0, r0, r5
 8005914:	6060      	str	r0, [r4, #4]
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	2300      	movs	r3, #0
 800591c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005920:	e7a8      	b.n	8005874 <_printf_i+0x150>
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	462a      	mov	r2, r5
 8005926:	4649      	mov	r1, r9
 8005928:	4640      	mov	r0, r8
 800592a:	47d0      	blx	sl
 800592c:	3001      	adds	r0, #1
 800592e:	d0ab      	beq.n	8005888 <_printf_i+0x164>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	079b      	lsls	r3, r3, #30
 8005934:	d413      	bmi.n	800595e <_printf_i+0x23a>
 8005936:	68e0      	ldr	r0, [r4, #12]
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	4298      	cmp	r0, r3
 800593c:	bfb8      	it	lt
 800593e:	4618      	movlt	r0, r3
 8005940:	e7a4      	b.n	800588c <_printf_i+0x168>
 8005942:	2301      	movs	r3, #1
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	47d0      	blx	sl
 800594c:	3001      	adds	r0, #1
 800594e:	d09b      	beq.n	8005888 <_printf_i+0x164>
 8005950:	3501      	adds	r5, #1
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	9903      	ldr	r1, [sp, #12]
 8005956:	1a5b      	subs	r3, r3, r1
 8005958:	42ab      	cmp	r3, r5
 800595a:	dcf2      	bgt.n	8005942 <_printf_i+0x21e>
 800595c:	e7eb      	b.n	8005936 <_printf_i+0x212>
 800595e:	2500      	movs	r5, #0
 8005960:	f104 0619 	add.w	r6, r4, #25
 8005964:	e7f5      	b.n	8005952 <_printf_i+0x22e>
 8005966:	bf00      	nop
 8005968:	080087ea 	.word	0x080087ea
 800596c:	080087fb 	.word	0x080087fb

08005970 <iprintf>:
 8005970:	b40f      	push	{r0, r1, r2, r3}
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <iprintf+0x2c>)
 8005974:	b513      	push	{r0, r1, r4, lr}
 8005976:	681c      	ldr	r4, [r3, #0]
 8005978:	b124      	cbz	r4, 8005984 <iprintf+0x14>
 800597a:	69a3      	ldr	r3, [r4, #24]
 800597c:	b913      	cbnz	r3, 8005984 <iprintf+0x14>
 800597e:	4620      	mov	r0, r4
 8005980:	f001 f8da 	bl	8006b38 <__sinit>
 8005984:	ab05      	add	r3, sp, #20
 8005986:	9a04      	ldr	r2, [sp, #16]
 8005988:	68a1      	ldr	r1, [r4, #8]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	4620      	mov	r0, r4
 800598e:	f001 fe97 	bl	80076c0 <_vfiprintf_r>
 8005992:	b002      	add	sp, #8
 8005994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005998:	b004      	add	sp, #16
 800599a:	4770      	bx	lr
 800599c:	2000000c 	.word	0x2000000c

080059a0 <_puts_r>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	460e      	mov	r6, r1
 80059a4:	4605      	mov	r5, r0
 80059a6:	b118      	cbz	r0, 80059b0 <_puts_r+0x10>
 80059a8:	6983      	ldr	r3, [r0, #24]
 80059aa:	b90b      	cbnz	r3, 80059b0 <_puts_r+0x10>
 80059ac:	f001 f8c4 	bl	8006b38 <__sinit>
 80059b0:	69ab      	ldr	r3, [r5, #24]
 80059b2:	68ac      	ldr	r4, [r5, #8]
 80059b4:	b913      	cbnz	r3, 80059bc <_puts_r+0x1c>
 80059b6:	4628      	mov	r0, r5
 80059b8:	f001 f8be 	bl	8006b38 <__sinit>
 80059bc:	4b2c      	ldr	r3, [pc, #176]	; (8005a70 <_puts_r+0xd0>)
 80059be:	429c      	cmp	r4, r3
 80059c0:	d120      	bne.n	8005a04 <_puts_r+0x64>
 80059c2:	686c      	ldr	r4, [r5, #4]
 80059c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c6:	07db      	lsls	r3, r3, #31
 80059c8:	d405      	bmi.n	80059d6 <_puts_r+0x36>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	0598      	lsls	r0, r3, #22
 80059ce:	d402      	bmi.n	80059d6 <_puts_r+0x36>
 80059d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d2:	f001 f954 	bl	8006c7e <__retarget_lock_acquire_recursive>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	0719      	lsls	r1, r3, #28
 80059da:	d51d      	bpl.n	8005a18 <_puts_r+0x78>
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	b1db      	cbz	r3, 8005a18 <_puts_r+0x78>
 80059e0:	3e01      	subs	r6, #1
 80059e2:	68a3      	ldr	r3, [r4, #8]
 80059e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059e8:	3b01      	subs	r3, #1
 80059ea:	60a3      	str	r3, [r4, #8]
 80059ec:	bb39      	cbnz	r1, 8005a3e <_puts_r+0x9e>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da38      	bge.n	8005a64 <_puts_r+0xc4>
 80059f2:	4622      	mov	r2, r4
 80059f4:	210a      	movs	r1, #10
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 f848 	bl	8005a8c <__swbuf_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	d011      	beq.n	8005a24 <_puts_r+0x84>
 8005a00:	250a      	movs	r5, #10
 8005a02:	e011      	b.n	8005a28 <_puts_r+0x88>
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <_puts_r+0xd4>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d101      	bne.n	8005a0e <_puts_r+0x6e>
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	e7da      	b.n	80059c4 <_puts_r+0x24>
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <_puts_r+0xd8>)
 8005a10:	429c      	cmp	r4, r3
 8005a12:	bf08      	it	eq
 8005a14:	68ec      	ldreq	r4, [r5, #12]
 8005a16:	e7d5      	b.n	80059c4 <_puts_r+0x24>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 f888 	bl	8005b30 <__swsetup_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d0dd      	beq.n	80059e0 <_puts_r+0x40>
 8005a24:	f04f 35ff 	mov.w	r5, #4294967295
 8005a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2a:	07da      	lsls	r2, r3, #31
 8005a2c:	d405      	bmi.n	8005a3a <_puts_r+0x9a>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	059b      	lsls	r3, r3, #22
 8005a32:	d402      	bmi.n	8005a3a <_puts_r+0x9a>
 8005a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a36:	f001 f923 	bl	8006c80 <__retarget_lock_release_recursive>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da04      	bge.n	8005a4c <_puts_r+0xac>
 8005a42:	69a2      	ldr	r2, [r4, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	dc06      	bgt.n	8005a56 <_puts_r+0xb6>
 8005a48:	290a      	cmp	r1, #10
 8005a4a:	d004      	beq.n	8005a56 <_puts_r+0xb6>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	6022      	str	r2, [r4, #0]
 8005a52:	7019      	strb	r1, [r3, #0]
 8005a54:	e7c5      	b.n	80059e2 <_puts_r+0x42>
 8005a56:	4622      	mov	r2, r4
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f000 f817 	bl	8005a8c <__swbuf_r>
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d1bf      	bne.n	80059e2 <_puts_r+0x42>
 8005a62:	e7df      	b.n	8005a24 <_puts_r+0x84>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	250a      	movs	r5, #10
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	6022      	str	r2, [r4, #0]
 8005a6c:	701d      	strb	r5, [r3, #0]
 8005a6e:	e7db      	b.n	8005a28 <_puts_r+0x88>
 8005a70:	080088bc 	.word	0x080088bc
 8005a74:	080088dc 	.word	0x080088dc
 8005a78:	0800889c 	.word	0x0800889c

08005a7c <puts>:
 8005a7c:	4b02      	ldr	r3, [pc, #8]	; (8005a88 <puts+0xc>)
 8005a7e:	4601      	mov	r1, r0
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	f7ff bf8d 	b.w	80059a0 <_puts_r>
 8005a86:	bf00      	nop
 8005a88:	2000000c 	.word	0x2000000c

08005a8c <__swbuf_r>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	460e      	mov	r6, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	4605      	mov	r5, r0
 8005a94:	b118      	cbz	r0, 8005a9e <__swbuf_r+0x12>
 8005a96:	6983      	ldr	r3, [r0, #24]
 8005a98:	b90b      	cbnz	r3, 8005a9e <__swbuf_r+0x12>
 8005a9a:	f001 f84d 	bl	8006b38 <__sinit>
 8005a9e:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <__swbuf_r+0x98>)
 8005aa0:	429c      	cmp	r4, r3
 8005aa2:	d12b      	bne.n	8005afc <__swbuf_r+0x70>
 8005aa4:	686c      	ldr	r4, [r5, #4]
 8005aa6:	69a3      	ldr	r3, [r4, #24]
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	071a      	lsls	r2, r3, #28
 8005aae:	d52f      	bpl.n	8005b10 <__swbuf_r+0x84>
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	b36b      	cbz	r3, 8005b10 <__swbuf_r+0x84>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	1ac0      	subs	r0, r0, r3
 8005aba:	6963      	ldr	r3, [r4, #20]
 8005abc:	b2f6      	uxtb	r6, r6
 8005abe:	4283      	cmp	r3, r0
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	dc04      	bgt.n	8005ace <__swbuf_r+0x42>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 ffa2 	bl	8006a10 <_fflush_r>
 8005acc:	bb30      	cbnz	r0, 8005b1c <__swbuf_r+0x90>
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60a3      	str	r3, [r4, #8]
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	6022      	str	r2, [r4, #0]
 8005ada:	701e      	strb	r6, [r3, #0]
 8005adc:	6963      	ldr	r3, [r4, #20]
 8005ade:	3001      	adds	r0, #1
 8005ae0:	4283      	cmp	r3, r0
 8005ae2:	d004      	beq.n	8005aee <__swbuf_r+0x62>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	07db      	lsls	r3, r3, #31
 8005ae8:	d506      	bpl.n	8005af8 <__swbuf_r+0x6c>
 8005aea:	2e0a      	cmp	r6, #10
 8005aec:	d104      	bne.n	8005af8 <__swbuf_r+0x6c>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 ff8d 	bl	8006a10 <_fflush_r>
 8005af6:	b988      	cbnz	r0, 8005b1c <__swbuf_r+0x90>
 8005af8:	4638      	mov	r0, r7
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <__swbuf_r+0x9c>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	d101      	bne.n	8005b06 <__swbuf_r+0x7a>
 8005b02:	68ac      	ldr	r4, [r5, #8]
 8005b04:	e7cf      	b.n	8005aa6 <__swbuf_r+0x1a>
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <__swbuf_r+0xa0>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	bf08      	it	eq
 8005b0c:	68ec      	ldreq	r4, [r5, #12]
 8005b0e:	e7ca      	b.n	8005aa6 <__swbuf_r+0x1a>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 f80c 	bl	8005b30 <__swsetup_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d0cb      	beq.n	8005ab4 <__swbuf_r+0x28>
 8005b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b20:	e7ea      	b.n	8005af8 <__swbuf_r+0x6c>
 8005b22:	bf00      	nop
 8005b24:	080088bc 	.word	0x080088bc
 8005b28:	080088dc 	.word	0x080088dc
 8005b2c:	0800889c 	.word	0x0800889c

08005b30 <__swsetup_r>:
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <__swsetup_r+0xcc>)
 8005b32:	b570      	push	{r4, r5, r6, lr}
 8005b34:	681d      	ldr	r5, [r3, #0]
 8005b36:	4606      	mov	r6, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	b125      	cbz	r5, 8005b46 <__swsetup_r+0x16>
 8005b3c:	69ab      	ldr	r3, [r5, #24]
 8005b3e:	b913      	cbnz	r3, 8005b46 <__swsetup_r+0x16>
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 fff9 	bl	8006b38 <__sinit>
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <__swsetup_r+0xd0>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d10f      	bne.n	8005b6c <__swsetup_r+0x3c>
 8005b4c:	686c      	ldr	r4, [r5, #4]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b54:	0719      	lsls	r1, r3, #28
 8005b56:	d42c      	bmi.n	8005bb2 <__swsetup_r+0x82>
 8005b58:	06dd      	lsls	r5, r3, #27
 8005b5a:	d411      	bmi.n	8005b80 <__swsetup_r+0x50>
 8005b5c:	2309      	movs	r3, #9
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	e03e      	b.n	8005bea <__swsetup_r+0xba>
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <__swsetup_r+0xd4>)
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	d101      	bne.n	8005b76 <__swsetup_r+0x46>
 8005b72:	68ac      	ldr	r4, [r5, #8]
 8005b74:	e7eb      	b.n	8005b4e <__swsetup_r+0x1e>
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <__swsetup_r+0xd8>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	bf08      	it	eq
 8005b7c:	68ec      	ldreq	r4, [r5, #12]
 8005b7e:	e7e6      	b.n	8005b4e <__swsetup_r+0x1e>
 8005b80:	0758      	lsls	r0, r3, #29
 8005b82:	d512      	bpl.n	8005baa <__swsetup_r+0x7a>
 8005b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b86:	b141      	cbz	r1, 8005b9a <__swsetup_r+0x6a>
 8005b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d002      	beq.n	8005b96 <__swsetup_r+0x66>
 8005b90:	4630      	mov	r0, r6
 8005b92:	f001 fc8b 	bl	80074ac <_free_r>
 8005b96:	2300      	movs	r3, #0
 8005b98:	6363      	str	r3, [r4, #52]	; 0x34
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	b94b      	cbnz	r3, 8005bca <__swsetup_r+0x9a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc0:	d003      	beq.n	8005bca <__swsetup_r+0x9a>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f001 f881 	bl	8006ccc <__smakebuf_r>
 8005bca:	89a0      	ldrh	r0, [r4, #12]
 8005bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd0:	f010 0301 	ands.w	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <__swsetup_r+0xbc>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	6963      	ldr	r3, [r4, #20]
 8005bdc:	425b      	negs	r3, r3
 8005bde:	61a3      	str	r3, [r4, #24]
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	b943      	cbnz	r3, 8005bf6 <__swsetup_r+0xc6>
 8005be4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005be8:	d1ba      	bne.n	8005b60 <__swsetup_r+0x30>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	0781      	lsls	r1, r0, #30
 8005bee:	bf58      	it	pl
 8005bf0:	6963      	ldrpl	r3, [r4, #20]
 8005bf2:	60a3      	str	r3, [r4, #8]
 8005bf4:	e7f4      	b.n	8005be0 <__swsetup_r+0xb0>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7f7      	b.n	8005bea <__swsetup_r+0xba>
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	080088bc 	.word	0x080088bc
 8005c04:	080088dc 	.word	0x080088dc
 8005c08:	0800889c 	.word	0x0800889c

08005c0c <quorem>:
 8005c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c10:	6903      	ldr	r3, [r0, #16]
 8005c12:	690c      	ldr	r4, [r1, #16]
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	4607      	mov	r7, r0
 8005c18:	f2c0 8081 	blt.w	8005d1e <quorem+0x112>
 8005c1c:	3c01      	subs	r4, #1
 8005c1e:	f101 0814 	add.w	r8, r1, #20
 8005c22:	f100 0514 	add.w	r5, r0, #20
 8005c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c34:	3301      	adds	r3, #1
 8005c36:	429a      	cmp	r2, r3
 8005c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c44:	d331      	bcc.n	8005caa <quorem+0x9e>
 8005c46:	f04f 0e00 	mov.w	lr, #0
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	46ac      	mov	ip, r5
 8005c4e:	46f2      	mov	sl, lr
 8005c50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c54:	b293      	uxth	r3, r2
 8005c56:	fb06 e303 	mla	r3, r6, r3, lr
 8005c5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	ebaa 0303 	sub.w	r3, sl, r3
 8005c64:	f8dc a000 	ldr.w	sl, [ip]
 8005c68:	0c12      	lsrs	r2, r2, #16
 8005c6a:	fa13 f38a 	uxtah	r3, r3, sl
 8005c6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	9b00      	ldr	r3, [sp, #0]
 8005c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c7a:	b292      	uxth	r2, r2
 8005c7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c84:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c88:	4581      	cmp	r9, r0
 8005c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005c92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c96:	d2db      	bcs.n	8005c50 <quorem+0x44>
 8005c98:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c9c:	b92b      	cbnz	r3, 8005caa <quorem+0x9e>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	3b04      	subs	r3, #4
 8005ca2:	429d      	cmp	r5, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	d32e      	bcc.n	8005d06 <quorem+0xfa>
 8005ca8:	613c      	str	r4, [r7, #16]
 8005caa:	4638      	mov	r0, r7
 8005cac:	f001 fae6 	bl	800727c <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	db24      	blt.n	8005cfe <quorem+0xf2>
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f04f 0c00 	mov.w	ip, #0
 8005cbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cc0:	f8d0 e000 	ldr.w	lr, [r0]
 8005cc4:	b293      	uxth	r3, r2
 8005cc6:	ebac 0303 	sub.w	r3, ip, r3
 8005cca:	0c12      	lsrs	r2, r2, #16
 8005ccc:	fa13 f38e 	uxtah	r3, r3, lr
 8005cd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cde:	45c1      	cmp	r9, r8
 8005ce0:	f840 3b04 	str.w	r3, [r0], #4
 8005ce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ce8:	d2e8      	bcs.n	8005cbc <quorem+0xb0>
 8005cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf2:	b922      	cbnz	r2, 8005cfe <quorem+0xf2>
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	429d      	cmp	r5, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	d30a      	bcc.n	8005d12 <quorem+0x106>
 8005cfc:	613c      	str	r4, [r7, #16]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	b003      	add	sp, #12
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	3b04      	subs	r3, #4
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	d1cc      	bne.n	8005ca8 <quorem+0x9c>
 8005d0e:	3c01      	subs	r4, #1
 8005d10:	e7c7      	b.n	8005ca2 <quorem+0x96>
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	d1f0      	bne.n	8005cfc <quorem+0xf0>
 8005d1a:	3c01      	subs	r4, #1
 8005d1c:	e7eb      	b.n	8005cf6 <quorem+0xea>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e7ee      	b.n	8005d00 <quorem+0xf4>
 8005d22:	0000      	movs	r0, r0
 8005d24:	0000      	movs	r0, r0
	...

08005d28 <_dtoa_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	ed2d 8b04 	vpush	{d8-d9}
 8005d30:	ec57 6b10 	vmov	r6, r7, d0
 8005d34:	b093      	sub	sp, #76	; 0x4c
 8005d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d3c:	9106      	str	r1, [sp, #24]
 8005d3e:	ee10 aa10 	vmov	sl, s0
 8005d42:	4604      	mov	r4, r0
 8005d44:	9209      	str	r2, [sp, #36]	; 0x24
 8005d46:	930c      	str	r3, [sp, #48]	; 0x30
 8005d48:	46bb      	mov	fp, r7
 8005d4a:	b975      	cbnz	r5, 8005d6a <_dtoa_r+0x42>
 8005d4c:	2010      	movs	r0, #16
 8005d4e:	f000 fffd 	bl	8006d4c <malloc>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6260      	str	r0, [r4, #36]	; 0x24
 8005d56:	b920      	cbnz	r0, 8005d62 <_dtoa_r+0x3a>
 8005d58:	4ba7      	ldr	r3, [pc, #668]	; (8005ff8 <_dtoa_r+0x2d0>)
 8005d5a:	21ea      	movs	r1, #234	; 0xea
 8005d5c:	48a7      	ldr	r0, [pc, #668]	; (8005ffc <_dtoa_r+0x2d4>)
 8005d5e:	f001 fe45 	bl	80079ec <__assert_func>
 8005d62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d66:	6005      	str	r5, [r0, #0]
 8005d68:	60c5      	str	r5, [r0, #12]
 8005d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	b151      	cbz	r1, 8005d86 <_dtoa_r+0x5e>
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	604a      	str	r2, [r1, #4]
 8005d74:	2301      	movs	r3, #1
 8005d76:	4093      	lsls	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f001 f83c 	bl	8006df8 <_Bfree>
 8005d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	1e3b      	subs	r3, r7, #0
 8005d88:	bfaa      	itet	ge
 8005d8a:	2300      	movge	r3, #0
 8005d8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d90:	f8c8 3000 	strge.w	r3, [r8]
 8005d94:	4b9a      	ldr	r3, [pc, #616]	; (8006000 <_dtoa_r+0x2d8>)
 8005d96:	bfbc      	itt	lt
 8005d98:	2201      	movlt	r2, #1
 8005d9a:	f8c8 2000 	strlt.w	r2, [r8]
 8005d9e:	ea33 030b 	bics.w	r3, r3, fp
 8005da2:	d11b      	bne.n	8005ddc <_dtoa_r+0xb4>
 8005da4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005da6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005db0:	4333      	orrs	r3, r6
 8005db2:	f000 8592 	beq.w	80068da <_dtoa_r+0xbb2>
 8005db6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db8:	b963      	cbnz	r3, 8005dd4 <_dtoa_r+0xac>
 8005dba:	4b92      	ldr	r3, [pc, #584]	; (8006004 <_dtoa_r+0x2dc>)
 8005dbc:	e022      	b.n	8005e04 <_dtoa_r+0xdc>
 8005dbe:	4b92      	ldr	r3, [pc, #584]	; (8006008 <_dtoa_r+0x2e0>)
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	9801      	ldr	r0, [sp, #4]
 8005dca:	b013      	add	sp, #76	; 0x4c
 8005dcc:	ecbd 8b04 	vpop	{d8-d9}
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <_dtoa_r+0x2dc>)
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	3303      	adds	r3, #3
 8005dda:	e7f3      	b.n	8005dc4 <_dtoa_r+0x9c>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	4650      	mov	r0, sl
 8005de2:	4659      	mov	r1, fp
 8005de4:	f7fa fe90 	bl	8000b08 <__aeabi_dcmpeq>
 8005de8:	ec4b ab19 	vmov	d9, sl, fp
 8005dec:	4680      	mov	r8, r0
 8005dee:	b158      	cbz	r0, 8005e08 <_dtoa_r+0xe0>
 8005df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005df2:	2301      	movs	r3, #1
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 856b 	beq.w	80068d4 <_dtoa_r+0xbac>
 8005dfe:	4883      	ldr	r0, [pc, #524]	; (800600c <_dtoa_r+0x2e4>)
 8005e00:	6018      	str	r0, [r3, #0]
 8005e02:	1e43      	subs	r3, r0, #1
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	e7df      	b.n	8005dc8 <_dtoa_r+0xa0>
 8005e08:	ec4b ab10 	vmov	d0, sl, fp
 8005e0c:	aa10      	add	r2, sp, #64	; 0x40
 8005e0e:	a911      	add	r1, sp, #68	; 0x44
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 fad9 	bl	80073c8 <__d2b>
 8005e16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e1a:	ee08 0a10 	vmov	s16, r0
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	f000 8084 	beq.w	8005f2c <_dtoa_r+0x204>
 8005e24:	ee19 3a90 	vmov	r3, s19
 8005e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e30:	4656      	mov	r6, sl
 8005e32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e3e:	4b74      	ldr	r3, [pc, #464]	; (8006010 <_dtoa_r+0x2e8>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa fa3f 	bl	80002c8 <__aeabi_dsub>
 8005e4a:	a365      	add	r3, pc, #404	; (adr r3, 8005fe0 <_dtoa_r+0x2b8>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fbf2 	bl	8000638 <__aeabi_dmul>
 8005e54:	a364      	add	r3, pc, #400	; (adr r3, 8005fe8 <_dtoa_r+0x2c0>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fa37 	bl	80002cc <__adddf3>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	4628      	mov	r0, r5
 8005e62:	460f      	mov	r7, r1
 8005e64:	f7fa fb7e 	bl	8000564 <__aeabi_i2d>
 8005e68:	a361      	add	r3, pc, #388	; (adr r3, 8005ff0 <_dtoa_r+0x2c8>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f7fa fbe3 	bl	8000638 <__aeabi_dmul>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fa27 	bl	80002cc <__adddf3>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460f      	mov	r7, r1
 8005e82:	f7fa fe89 	bl	8000b98 <__aeabi_d2iz>
 8005e86:	2200      	movs	r2, #0
 8005e88:	9000      	str	r0, [sp, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa fe44 	bl	8000b1c <__aeabi_dcmplt>
 8005e94:	b150      	cbz	r0, 8005eac <_dtoa_r+0x184>
 8005e96:	9800      	ldr	r0, [sp, #0]
 8005e98:	f7fa fb64 	bl	8000564 <__aeabi_i2d>
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	f7fa fe32 	bl	8000b08 <__aeabi_dcmpeq>
 8005ea4:	b910      	cbnz	r0, 8005eac <_dtoa_r+0x184>
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	2b16      	cmp	r3, #22
 8005eb0:	d85a      	bhi.n	8005f68 <_dtoa_r+0x240>
 8005eb2:	9a00      	ldr	r2, [sp, #0]
 8005eb4:	4b57      	ldr	r3, [pc, #348]	; (8006014 <_dtoa_r+0x2ec>)
 8005eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	ec51 0b19 	vmov	r0, r1, d9
 8005ec2:	f7fa fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d050      	beq.n	8005f6c <_dtoa_r+0x244>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ed6:	1b5d      	subs	r5, r3, r5
 8005ed8:	1e6b      	subs	r3, r5, #1
 8005eda:	9305      	str	r3, [sp, #20]
 8005edc:	bf45      	ittet	mi
 8005ede:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ee2:	9304      	strmi	r3, [sp, #16]
 8005ee4:	2300      	movpl	r3, #0
 8005ee6:	2300      	movmi	r3, #0
 8005ee8:	bf4c      	ite	mi
 8005eea:	9305      	strmi	r3, [sp, #20]
 8005eec:	9304      	strpl	r3, [sp, #16]
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db3d      	blt.n	8005f70 <_dtoa_r+0x248>
 8005ef4:	9b05      	ldr	r3, [sp, #20]
 8005ef6:	9a00      	ldr	r2, [sp, #0]
 8005ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8005efa:	4413      	add	r3, r2
 8005efc:	9305      	str	r3, [sp, #20]
 8005efe:	2300      	movs	r3, #0
 8005f00:	9307      	str	r3, [sp, #28]
 8005f02:	9b06      	ldr	r3, [sp, #24]
 8005f04:	2b09      	cmp	r3, #9
 8005f06:	f200 8089 	bhi.w	800601c <_dtoa_r+0x2f4>
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	bfc4      	itt	gt
 8005f0e:	3b04      	subgt	r3, #4
 8005f10:	9306      	strgt	r3, [sp, #24]
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	f1a3 0302 	sub.w	r3, r3, #2
 8005f18:	bfcc      	ite	gt
 8005f1a:	2500      	movgt	r5, #0
 8005f1c:	2501      	movle	r5, #1
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	f200 8087 	bhi.w	8006032 <_dtoa_r+0x30a>
 8005f24:	e8df f003 	tbb	[pc, r3]
 8005f28:	59383a2d 	.word	0x59383a2d
 8005f2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f30:	441d      	add	r5, r3
 8005f32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	bfc1      	itttt	gt
 8005f3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f42:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f4a:	bfda      	itte	le
 8005f4c:	f1c3 0320 	rsble	r3, r3, #32
 8005f50:	fa06 f003 	lslle.w	r0, r6, r3
 8005f54:	4318      	orrgt	r0, r3
 8005f56:	f7fa faf5 	bl	8000544 <__aeabi_ui2d>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f62:	3d01      	subs	r5, #1
 8005f64:	930e      	str	r3, [sp, #56]	; 0x38
 8005f66:	e76a      	b.n	8005e3e <_dtoa_r+0x116>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7b2      	b.n	8005ed2 <_dtoa_r+0x1aa>
 8005f6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f6e:	e7b1      	b.n	8005ed4 <_dtoa_r+0x1ac>
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	9a00      	ldr	r2, [sp, #0]
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	4253      	negs	r3, r2
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f80:	e7bf      	b.n	8005f02 <_dtoa_r+0x1da>
 8005f82:	2300      	movs	r3, #0
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dc55      	bgt.n	8006038 <_dtoa_r+0x310>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f92:	461a      	mov	r2, r3
 8005f94:	9209      	str	r2, [sp, #36]	; 0x24
 8005f96:	e00c      	b.n	8005fb2 <_dtoa_r+0x28a>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f3      	b.n	8005f84 <_dtoa_r+0x25c>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa0:	9308      	str	r3, [sp, #32]
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	9302      	str	r3, [sp, #8]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	bfb8      	it	lt
 8005fb0:	2301      	movlt	r3, #1
 8005fb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6042      	str	r2, [r0, #4]
 8005fb8:	2204      	movs	r2, #4
 8005fba:	f102 0614 	add.w	r6, r2, #20
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	6841      	ldr	r1, [r0, #4]
 8005fc2:	d93d      	bls.n	8006040 <_dtoa_r+0x318>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fed7 	bl	8006d78 <_Balloc>
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d13b      	bne.n	8006048 <_dtoa_r+0x320>
 8005fd0:	4b11      	ldr	r3, [pc, #68]	; (8006018 <_dtoa_r+0x2f0>)
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fd8:	e6c0      	b.n	8005d5c <_dtoa_r+0x34>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e7df      	b.n	8005f9e <_dtoa_r+0x276>
 8005fde:	bf00      	nop
 8005fe0:	636f4361 	.word	0x636f4361
 8005fe4:	3fd287a7 	.word	0x3fd287a7
 8005fe8:	8b60c8b3 	.word	0x8b60c8b3
 8005fec:	3fc68a28 	.word	0x3fc68a28
 8005ff0:	509f79fb 	.word	0x509f79fb
 8005ff4:	3fd34413 	.word	0x3fd34413
 8005ff8:	08008819 	.word	0x08008819
 8005ffc:	08008830 	.word	0x08008830
 8006000:	7ff00000 	.word	0x7ff00000
 8006004:	08008815 	.word	0x08008815
 8006008:	0800880c 	.word	0x0800880c
 800600c:	080087e9 	.word	0x080087e9
 8006010:	3ff80000 	.word	0x3ff80000
 8006014:	08008980 	.word	0x08008980
 8006018:	0800888b 	.word	0x0800888b
 800601c:	2501      	movs	r5, #1
 800601e:	2300      	movs	r3, #0
 8006020:	9306      	str	r3, [sp, #24]
 8006022:	9508      	str	r5, [sp, #32]
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	2312      	movs	r3, #18
 8006030:	e7b0      	b.n	8005f94 <_dtoa_r+0x26c>
 8006032:	2301      	movs	r3, #1
 8006034:	9308      	str	r3, [sp, #32]
 8006036:	e7f5      	b.n	8006024 <_dtoa_r+0x2fc>
 8006038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800603e:	e7b8      	b.n	8005fb2 <_dtoa_r+0x28a>
 8006040:	3101      	adds	r1, #1
 8006042:	6041      	str	r1, [r0, #4]
 8006044:	0052      	lsls	r2, r2, #1
 8006046:	e7b8      	b.n	8005fba <_dtoa_r+0x292>
 8006048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800604a:	9a01      	ldr	r2, [sp, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	2b0e      	cmp	r3, #14
 8006052:	f200 809d 	bhi.w	8006190 <_dtoa_r+0x468>
 8006056:	2d00      	cmp	r5, #0
 8006058:	f000 809a 	beq.w	8006190 <_dtoa_r+0x468>
 800605c:	9b00      	ldr	r3, [sp, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd32      	ble.n	80060c8 <_dtoa_r+0x3a0>
 8006062:	4ab7      	ldr	r2, [pc, #732]	; (8006340 <_dtoa_r+0x618>)
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800606c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006070:	9b00      	ldr	r3, [sp, #0]
 8006072:	05d8      	lsls	r0, r3, #23
 8006074:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006078:	d516      	bpl.n	80060a8 <_dtoa_r+0x380>
 800607a:	4bb2      	ldr	r3, [pc, #712]	; (8006344 <_dtoa_r+0x61c>)
 800607c:	ec51 0b19 	vmov	r0, r1, d9
 8006080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006084:	f7fa fc02 	bl	800088c <__aeabi_ddiv>
 8006088:	f007 070f 	and.w	r7, r7, #15
 800608c:	4682      	mov	sl, r0
 800608e:	468b      	mov	fp, r1
 8006090:	2503      	movs	r5, #3
 8006092:	4eac      	ldr	r6, [pc, #688]	; (8006344 <_dtoa_r+0x61c>)
 8006094:	b957      	cbnz	r7, 80060ac <_dtoa_r+0x384>
 8006096:	4642      	mov	r2, r8
 8006098:	464b      	mov	r3, r9
 800609a:	4650      	mov	r0, sl
 800609c:	4659      	mov	r1, fp
 800609e:	f7fa fbf5 	bl	800088c <__aeabi_ddiv>
 80060a2:	4682      	mov	sl, r0
 80060a4:	468b      	mov	fp, r1
 80060a6:	e028      	b.n	80060fa <_dtoa_r+0x3d2>
 80060a8:	2502      	movs	r5, #2
 80060aa:	e7f2      	b.n	8006092 <_dtoa_r+0x36a>
 80060ac:	07f9      	lsls	r1, r7, #31
 80060ae:	d508      	bpl.n	80060c2 <_dtoa_r+0x39a>
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060b8:	f7fa fabe 	bl	8000638 <__aeabi_dmul>
 80060bc:	3501      	adds	r5, #1
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	107f      	asrs	r7, r7, #1
 80060c4:	3608      	adds	r6, #8
 80060c6:	e7e5      	b.n	8006094 <_dtoa_r+0x36c>
 80060c8:	f000 809b 	beq.w	8006202 <_dtoa_r+0x4da>
 80060cc:	9b00      	ldr	r3, [sp, #0]
 80060ce:	4f9d      	ldr	r7, [pc, #628]	; (8006344 <_dtoa_r+0x61c>)
 80060d0:	425e      	negs	r6, r3
 80060d2:	4b9b      	ldr	r3, [pc, #620]	; (8006340 <_dtoa_r+0x618>)
 80060d4:	f006 020f 	and.w	r2, r6, #15
 80060d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	ec51 0b19 	vmov	r0, r1, d9
 80060e4:	f7fa faa8 	bl	8000638 <__aeabi_dmul>
 80060e8:	1136      	asrs	r6, r6, #4
 80060ea:	4682      	mov	sl, r0
 80060ec:	468b      	mov	fp, r1
 80060ee:	2300      	movs	r3, #0
 80060f0:	2502      	movs	r5, #2
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d17a      	bne.n	80061ec <_dtoa_r+0x4c4>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1d3      	bne.n	80060a2 <_dtoa_r+0x37a>
 80060fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8082 	beq.w	8006206 <_dtoa_r+0x4de>
 8006102:	4b91      	ldr	r3, [pc, #580]	; (8006348 <_dtoa_r+0x620>)
 8006104:	2200      	movs	r2, #0
 8006106:	4650      	mov	r0, sl
 8006108:	4659      	mov	r1, fp
 800610a:	f7fa fd07 	bl	8000b1c <__aeabi_dcmplt>
 800610e:	2800      	cmp	r0, #0
 8006110:	d079      	beq.n	8006206 <_dtoa_r+0x4de>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d076      	beq.n	8006206 <_dtoa_r+0x4de>
 8006118:	9b02      	ldr	r3, [sp, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	dd36      	ble.n	800618c <_dtoa_r+0x464>
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	4650      	mov	r0, sl
 8006122:	4659      	mov	r1, fp
 8006124:	1e5f      	subs	r7, r3, #1
 8006126:	2200      	movs	r2, #0
 8006128:	4b88      	ldr	r3, [pc, #544]	; (800634c <_dtoa_r+0x624>)
 800612a:	f7fa fa85 	bl	8000638 <__aeabi_dmul>
 800612e:	9e02      	ldr	r6, [sp, #8]
 8006130:	4682      	mov	sl, r0
 8006132:	468b      	mov	fp, r1
 8006134:	3501      	adds	r5, #1
 8006136:	4628      	mov	r0, r5
 8006138:	f7fa fa14 	bl	8000564 <__aeabi_i2d>
 800613c:	4652      	mov	r2, sl
 800613e:	465b      	mov	r3, fp
 8006140:	f7fa fa7a 	bl	8000638 <__aeabi_dmul>
 8006144:	4b82      	ldr	r3, [pc, #520]	; (8006350 <_dtoa_r+0x628>)
 8006146:	2200      	movs	r2, #0
 8006148:	f7fa f8c0 	bl	80002cc <__adddf3>
 800614c:	46d0      	mov	r8, sl
 800614e:	46d9      	mov	r9, fp
 8006150:	4682      	mov	sl, r0
 8006152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006156:	2e00      	cmp	r6, #0
 8006158:	d158      	bne.n	800620c <_dtoa_r+0x4e4>
 800615a:	4b7e      	ldr	r3, [pc, #504]	; (8006354 <_dtoa_r+0x62c>)
 800615c:	2200      	movs	r2, #0
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa f8b1 	bl	80002c8 <__aeabi_dsub>
 8006166:	4652      	mov	r2, sl
 8006168:	465b      	mov	r3, fp
 800616a:	4680      	mov	r8, r0
 800616c:	4689      	mov	r9, r1
 800616e:	f7fa fcf3 	bl	8000b58 <__aeabi_dcmpgt>
 8006172:	2800      	cmp	r0, #0
 8006174:	f040 8295 	bne.w	80066a2 <_dtoa_r+0x97a>
 8006178:	4652      	mov	r2, sl
 800617a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fccb 	bl	8000b1c <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	f040 8289 	bne.w	800669e <_dtoa_r+0x976>
 800618c:	ec5b ab19 	vmov	sl, fp, d9
 8006190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006192:	2b00      	cmp	r3, #0
 8006194:	f2c0 8148 	blt.w	8006428 <_dtoa_r+0x700>
 8006198:	9a00      	ldr	r2, [sp, #0]
 800619a:	2a0e      	cmp	r2, #14
 800619c:	f300 8144 	bgt.w	8006428 <_dtoa_r+0x700>
 80061a0:	4b67      	ldr	r3, [pc, #412]	; (8006340 <_dtoa_r+0x618>)
 80061a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f280 80d5 	bge.w	800635c <_dtoa_r+0x634>
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f300 80d1 	bgt.w	800635c <_dtoa_r+0x634>
 80061ba:	f040 826f 	bne.w	800669c <_dtoa_r+0x974>
 80061be:	4b65      	ldr	r3, [pc, #404]	; (8006354 <_dtoa_r+0x62c>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	4640      	mov	r0, r8
 80061c4:	4649      	mov	r1, r9
 80061c6:	f7fa fa37 	bl	8000638 <__aeabi_dmul>
 80061ca:	4652      	mov	r2, sl
 80061cc:	465b      	mov	r3, fp
 80061ce:	f7fa fcb9 	bl	8000b44 <__aeabi_dcmpge>
 80061d2:	9e03      	ldr	r6, [sp, #12]
 80061d4:	4637      	mov	r7, r6
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f040 8245 	bne.w	8006666 <_dtoa_r+0x93e>
 80061dc:	9d01      	ldr	r5, [sp, #4]
 80061de:	2331      	movs	r3, #49	; 0x31
 80061e0:	f805 3b01 	strb.w	r3, [r5], #1
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	e240      	b.n	800666e <_dtoa_r+0x946>
 80061ec:	07f2      	lsls	r2, r6, #31
 80061ee:	d505      	bpl.n	80061fc <_dtoa_r+0x4d4>
 80061f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f4:	f7fa fa20 	bl	8000638 <__aeabi_dmul>
 80061f8:	3501      	adds	r5, #1
 80061fa:	2301      	movs	r3, #1
 80061fc:	1076      	asrs	r6, r6, #1
 80061fe:	3708      	adds	r7, #8
 8006200:	e777      	b.n	80060f2 <_dtoa_r+0x3ca>
 8006202:	2502      	movs	r5, #2
 8006204:	e779      	b.n	80060fa <_dtoa_r+0x3d2>
 8006206:	9f00      	ldr	r7, [sp, #0]
 8006208:	9e03      	ldr	r6, [sp, #12]
 800620a:	e794      	b.n	8006136 <_dtoa_r+0x40e>
 800620c:	9901      	ldr	r1, [sp, #4]
 800620e:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <_dtoa_r+0x618>)
 8006210:	4431      	add	r1, r6
 8006212:	910d      	str	r1, [sp, #52]	; 0x34
 8006214:	9908      	ldr	r1, [sp, #32]
 8006216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800621a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800621e:	2900      	cmp	r1, #0
 8006220:	d043      	beq.n	80062aa <_dtoa_r+0x582>
 8006222:	494d      	ldr	r1, [pc, #308]	; (8006358 <_dtoa_r+0x630>)
 8006224:	2000      	movs	r0, #0
 8006226:	f7fa fb31 	bl	800088c <__aeabi_ddiv>
 800622a:	4652      	mov	r2, sl
 800622c:	465b      	mov	r3, fp
 800622e:	f7fa f84b 	bl	80002c8 <__aeabi_dsub>
 8006232:	9d01      	ldr	r5, [sp, #4]
 8006234:	4682      	mov	sl, r0
 8006236:	468b      	mov	fp, r1
 8006238:	4649      	mov	r1, r9
 800623a:	4640      	mov	r0, r8
 800623c:	f7fa fcac 	bl	8000b98 <__aeabi_d2iz>
 8006240:	4606      	mov	r6, r0
 8006242:	f7fa f98f 	bl	8000564 <__aeabi_i2d>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4640      	mov	r0, r8
 800624c:	4649      	mov	r1, r9
 800624e:	f7fa f83b 	bl	80002c8 <__aeabi_dsub>
 8006252:	3630      	adds	r6, #48	; 0x30
 8006254:	f805 6b01 	strb.w	r6, [r5], #1
 8006258:	4652      	mov	r2, sl
 800625a:	465b      	mov	r3, fp
 800625c:	4680      	mov	r8, r0
 800625e:	4689      	mov	r9, r1
 8006260:	f7fa fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8006264:	2800      	cmp	r0, #0
 8006266:	d163      	bne.n	8006330 <_dtoa_r+0x608>
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	4936      	ldr	r1, [pc, #216]	; (8006348 <_dtoa_r+0x620>)
 800626e:	2000      	movs	r0, #0
 8006270:	f7fa f82a 	bl	80002c8 <__aeabi_dsub>
 8006274:	4652      	mov	r2, sl
 8006276:	465b      	mov	r3, fp
 8006278:	f7fa fc50 	bl	8000b1c <__aeabi_dcmplt>
 800627c:	2800      	cmp	r0, #0
 800627e:	f040 80b5 	bne.w	80063ec <_dtoa_r+0x6c4>
 8006282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006284:	429d      	cmp	r5, r3
 8006286:	d081      	beq.n	800618c <_dtoa_r+0x464>
 8006288:	4b30      	ldr	r3, [pc, #192]	; (800634c <_dtoa_r+0x624>)
 800628a:	2200      	movs	r2, #0
 800628c:	4650      	mov	r0, sl
 800628e:	4659      	mov	r1, fp
 8006290:	f7fa f9d2 	bl	8000638 <__aeabi_dmul>
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <_dtoa_r+0x624>)
 8006296:	4682      	mov	sl, r0
 8006298:	468b      	mov	fp, r1
 800629a:	4640      	mov	r0, r8
 800629c:	4649      	mov	r1, r9
 800629e:	2200      	movs	r2, #0
 80062a0:	f7fa f9ca 	bl	8000638 <__aeabi_dmul>
 80062a4:	4680      	mov	r8, r0
 80062a6:	4689      	mov	r9, r1
 80062a8:	e7c6      	b.n	8006238 <_dtoa_r+0x510>
 80062aa:	4650      	mov	r0, sl
 80062ac:	4659      	mov	r1, fp
 80062ae:	f7fa f9c3 	bl	8000638 <__aeabi_dmul>
 80062b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b4:	9d01      	ldr	r5, [sp, #4]
 80062b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b8:	4682      	mov	sl, r0
 80062ba:	468b      	mov	fp, r1
 80062bc:	4649      	mov	r1, r9
 80062be:	4640      	mov	r0, r8
 80062c0:	f7fa fc6a 	bl	8000b98 <__aeabi_d2iz>
 80062c4:	4606      	mov	r6, r0
 80062c6:	f7fa f94d 	bl	8000564 <__aeabi_i2d>
 80062ca:	3630      	adds	r6, #48	; 0x30
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7f9 fff8 	bl	80002c8 <__aeabi_dsub>
 80062d8:	f805 6b01 	strb.w	r6, [r5], #1
 80062dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062de:	429d      	cmp	r5, r3
 80062e0:	4680      	mov	r8, r0
 80062e2:	4689      	mov	r9, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	d124      	bne.n	8006334 <_dtoa_r+0x60c>
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <_dtoa_r+0x630>)
 80062ec:	4650      	mov	r0, sl
 80062ee:	4659      	mov	r1, fp
 80062f0:	f7f9 ffec 	bl	80002cc <__adddf3>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4640      	mov	r0, r8
 80062fa:	4649      	mov	r1, r9
 80062fc:	f7fa fc2c 	bl	8000b58 <__aeabi_dcmpgt>
 8006300:	2800      	cmp	r0, #0
 8006302:	d173      	bne.n	80063ec <_dtoa_r+0x6c4>
 8006304:	4652      	mov	r2, sl
 8006306:	465b      	mov	r3, fp
 8006308:	4913      	ldr	r1, [pc, #76]	; (8006358 <_dtoa_r+0x630>)
 800630a:	2000      	movs	r0, #0
 800630c:	f7f9 ffdc 	bl	80002c8 <__aeabi_dsub>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7fa fc00 	bl	8000b1c <__aeabi_dcmplt>
 800631c:	2800      	cmp	r0, #0
 800631e:	f43f af35 	beq.w	800618c <_dtoa_r+0x464>
 8006322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006324:	1e6b      	subs	r3, r5, #1
 8006326:	930f      	str	r3, [sp, #60]	; 0x3c
 8006328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800632c:	2b30      	cmp	r3, #48	; 0x30
 800632e:	d0f8      	beq.n	8006322 <_dtoa_r+0x5fa>
 8006330:	9700      	str	r7, [sp, #0]
 8006332:	e049      	b.n	80063c8 <_dtoa_r+0x6a0>
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <_dtoa_r+0x624>)
 8006336:	f7fa f97f 	bl	8000638 <__aeabi_dmul>
 800633a:	4680      	mov	r8, r0
 800633c:	4689      	mov	r9, r1
 800633e:	e7bd      	b.n	80062bc <_dtoa_r+0x594>
 8006340:	08008980 	.word	0x08008980
 8006344:	08008958 	.word	0x08008958
 8006348:	3ff00000 	.word	0x3ff00000
 800634c:	40240000 	.word	0x40240000
 8006350:	401c0000 	.word	0x401c0000
 8006354:	40140000 	.word	0x40140000
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	9d01      	ldr	r5, [sp, #4]
 800635e:	4656      	mov	r6, sl
 8006360:	465f      	mov	r7, fp
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7fa fa8f 	bl	800088c <__aeabi_ddiv>
 800636e:	f7fa fc13 	bl	8000b98 <__aeabi_d2iz>
 8006372:	4682      	mov	sl, r0
 8006374:	f7fa f8f6 	bl	8000564 <__aeabi_i2d>
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	f7fa f95c 	bl	8000638 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800638c:	f7f9 ff9c 	bl	80002c8 <__aeabi_dsub>
 8006390:	f805 6b01 	strb.w	r6, [r5], #1
 8006394:	9e01      	ldr	r6, [sp, #4]
 8006396:	9f03      	ldr	r7, [sp, #12]
 8006398:	1bae      	subs	r6, r5, r6
 800639a:	42b7      	cmp	r7, r6
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	d135      	bne.n	800640e <_dtoa_r+0x6e6>
 80063a2:	f7f9 ff93 	bl	80002cc <__adddf3>
 80063a6:	4642      	mov	r2, r8
 80063a8:	464b      	mov	r3, r9
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	f7fa fbd3 	bl	8000b58 <__aeabi_dcmpgt>
 80063b2:	b9d0      	cbnz	r0, 80063ea <_dtoa_r+0x6c2>
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	f7fa fba4 	bl	8000b08 <__aeabi_dcmpeq>
 80063c0:	b110      	cbz	r0, 80063c8 <_dtoa_r+0x6a0>
 80063c2:	f01a 0f01 	tst.w	sl, #1
 80063c6:	d110      	bne.n	80063ea <_dtoa_r+0x6c2>
 80063c8:	4620      	mov	r0, r4
 80063ca:	ee18 1a10 	vmov	r1, s16
 80063ce:	f000 fd13 	bl	8006df8 <_Bfree>
 80063d2:	2300      	movs	r3, #0
 80063d4:	9800      	ldr	r0, [sp, #0]
 80063d6:	702b      	strb	r3, [r5, #0]
 80063d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063da:	3001      	adds	r0, #1
 80063dc:	6018      	str	r0, [r3, #0]
 80063de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f43f acf1 	beq.w	8005dc8 <_dtoa_r+0xa0>
 80063e6:	601d      	str	r5, [r3, #0]
 80063e8:	e4ee      	b.n	8005dc8 <_dtoa_r+0xa0>
 80063ea:	9f00      	ldr	r7, [sp, #0]
 80063ec:	462b      	mov	r3, r5
 80063ee:	461d      	mov	r5, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a39      	cmp	r2, #57	; 0x39
 80063f6:	d106      	bne.n	8006406 <_dtoa_r+0x6de>
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1f7      	bne.n	80063ee <_dtoa_r+0x6c6>
 80063fe:	9901      	ldr	r1, [sp, #4]
 8006400:	2230      	movs	r2, #48	; 0x30
 8006402:	3701      	adds	r7, #1
 8006404:	700a      	strb	r2, [r1, #0]
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	3201      	adds	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e790      	b.n	8006330 <_dtoa_r+0x608>
 800640e:	4ba6      	ldr	r3, [pc, #664]	; (80066a8 <_dtoa_r+0x980>)
 8006410:	2200      	movs	r2, #0
 8006412:	f7fa f911 	bl	8000638 <__aeabi_dmul>
 8006416:	2200      	movs	r2, #0
 8006418:	2300      	movs	r3, #0
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8006422:	2800      	cmp	r0, #0
 8006424:	d09d      	beq.n	8006362 <_dtoa_r+0x63a>
 8006426:	e7cf      	b.n	80063c8 <_dtoa_r+0x6a0>
 8006428:	9a08      	ldr	r2, [sp, #32]
 800642a:	2a00      	cmp	r2, #0
 800642c:	f000 80d7 	beq.w	80065de <_dtoa_r+0x8b6>
 8006430:	9a06      	ldr	r2, [sp, #24]
 8006432:	2a01      	cmp	r2, #1
 8006434:	f300 80ba 	bgt.w	80065ac <_dtoa_r+0x884>
 8006438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800643a:	2a00      	cmp	r2, #0
 800643c:	f000 80b2 	beq.w	80065a4 <_dtoa_r+0x87c>
 8006440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006444:	9e07      	ldr	r6, [sp, #28]
 8006446:	9d04      	ldr	r5, [sp, #16]
 8006448:	9a04      	ldr	r2, [sp, #16]
 800644a:	441a      	add	r2, r3
 800644c:	9204      	str	r2, [sp, #16]
 800644e:	9a05      	ldr	r2, [sp, #20]
 8006450:	2101      	movs	r1, #1
 8006452:	441a      	add	r2, r3
 8006454:	4620      	mov	r0, r4
 8006456:	9205      	str	r2, [sp, #20]
 8006458:	f000 fd86 	bl	8006f68 <__i2b>
 800645c:	4607      	mov	r7, r0
 800645e:	2d00      	cmp	r5, #0
 8006460:	dd0c      	ble.n	800647c <_dtoa_r+0x754>
 8006462:	9b05      	ldr	r3, [sp, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd09      	ble.n	800647c <_dtoa_r+0x754>
 8006468:	42ab      	cmp	r3, r5
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	bfa8      	it	ge
 800646e:	462b      	movge	r3, r5
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	9204      	str	r2, [sp, #16]
 8006474:	9a05      	ldr	r2, [sp, #20]
 8006476:	1aed      	subs	r5, r5, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	9b07      	ldr	r3, [sp, #28]
 800647e:	b31b      	cbz	r3, 80064c8 <_dtoa_r+0x7a0>
 8006480:	9b08      	ldr	r3, [sp, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80af 	beq.w	80065e6 <_dtoa_r+0x8be>
 8006488:	2e00      	cmp	r6, #0
 800648a:	dd13      	ble.n	80064b4 <_dtoa_r+0x78c>
 800648c:	4639      	mov	r1, r7
 800648e:	4632      	mov	r2, r6
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fe29 	bl	80070e8 <__pow5mult>
 8006496:	ee18 2a10 	vmov	r2, s16
 800649a:	4601      	mov	r1, r0
 800649c:	4607      	mov	r7, r0
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fd78 	bl	8006f94 <__multiply>
 80064a4:	ee18 1a10 	vmov	r1, s16
 80064a8:	4680      	mov	r8, r0
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 fca4 	bl	8006df8 <_Bfree>
 80064b0:	ee08 8a10 	vmov	s16, r8
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	1b9a      	subs	r2, r3, r6
 80064b8:	d006      	beq.n	80064c8 <_dtoa_r+0x7a0>
 80064ba:	ee18 1a10 	vmov	r1, s16
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 fe12 	bl	80070e8 <__pow5mult>
 80064c4:	ee08 0a10 	vmov	s16, r0
 80064c8:	2101      	movs	r1, #1
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 fd4c 	bl	8006f68 <__i2b>
 80064d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	4606      	mov	r6, r0
 80064d6:	f340 8088 	ble.w	80065ea <_dtoa_r+0x8c2>
 80064da:	461a      	mov	r2, r3
 80064dc:	4601      	mov	r1, r0
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fe02 	bl	80070e8 <__pow5mult>
 80064e4:	9b06      	ldr	r3, [sp, #24]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	4606      	mov	r6, r0
 80064ea:	f340 8081 	ble.w	80065f0 <_dtoa_r+0x8c8>
 80064ee:	f04f 0800 	mov.w	r8, #0
 80064f2:	6933      	ldr	r3, [r6, #16]
 80064f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064f8:	6918      	ldr	r0, [r3, #16]
 80064fa:	f000 fce5 	bl	8006ec8 <__hi0bits>
 80064fe:	f1c0 0020 	rsb	r0, r0, #32
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	4418      	add	r0, r3
 8006506:	f010 001f 	ands.w	r0, r0, #31
 800650a:	f000 8092 	beq.w	8006632 <_dtoa_r+0x90a>
 800650e:	f1c0 0320 	rsb	r3, r0, #32
 8006512:	2b04      	cmp	r3, #4
 8006514:	f340 808a 	ble.w	800662c <_dtoa_r+0x904>
 8006518:	f1c0 001c 	rsb	r0, r0, #28
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	4403      	add	r3, r0
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	9b05      	ldr	r3, [sp, #20]
 8006524:	4403      	add	r3, r0
 8006526:	4405      	add	r5, r0
 8006528:	9305      	str	r3, [sp, #20]
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd07      	ble.n	8006540 <_dtoa_r+0x818>
 8006530:	ee18 1a10 	vmov	r1, s16
 8006534:	461a      	mov	r2, r3
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fe30 	bl	800719c <__lshift>
 800653c:	ee08 0a10 	vmov	s16, r0
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	dd05      	ble.n	8006552 <_dtoa_r+0x82a>
 8006546:	4631      	mov	r1, r6
 8006548:	461a      	mov	r2, r3
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fe26 	bl	800719c <__lshift>
 8006550:	4606      	mov	r6, r0
 8006552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d06e      	beq.n	8006636 <_dtoa_r+0x90e>
 8006558:	ee18 0a10 	vmov	r0, s16
 800655c:	4631      	mov	r1, r6
 800655e:	f000 fe8d 	bl	800727c <__mcmp>
 8006562:	2800      	cmp	r0, #0
 8006564:	da67      	bge.n	8006636 <_dtoa_r+0x90e>
 8006566:	9b00      	ldr	r3, [sp, #0]
 8006568:	3b01      	subs	r3, #1
 800656a:	ee18 1a10 	vmov	r1, s16
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	220a      	movs	r2, #10
 8006572:	2300      	movs	r3, #0
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fc61 	bl	8006e3c <__multadd>
 800657a:	9b08      	ldr	r3, [sp, #32]
 800657c:	ee08 0a10 	vmov	s16, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 81b1 	beq.w	80068e8 <_dtoa_r+0xbc0>
 8006586:	2300      	movs	r3, #0
 8006588:	4639      	mov	r1, r7
 800658a:	220a      	movs	r2, #10
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fc55 	bl	8006e3c <__multadd>
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	4607      	mov	r7, r0
 8006598:	f300 808e 	bgt.w	80066b8 <_dtoa_r+0x990>
 800659c:	9b06      	ldr	r3, [sp, #24]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	dc51      	bgt.n	8006646 <_dtoa_r+0x91e>
 80065a2:	e089      	b.n	80066b8 <_dtoa_r+0x990>
 80065a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065aa:	e74b      	b.n	8006444 <_dtoa_r+0x71c>
 80065ac:	9b03      	ldr	r3, [sp, #12]
 80065ae:	1e5e      	subs	r6, r3, #1
 80065b0:	9b07      	ldr	r3, [sp, #28]
 80065b2:	42b3      	cmp	r3, r6
 80065b4:	bfbf      	itttt	lt
 80065b6:	9b07      	ldrlt	r3, [sp, #28]
 80065b8:	9607      	strlt	r6, [sp, #28]
 80065ba:	1af2      	sublt	r2, r6, r3
 80065bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065be:	bfb6      	itet	lt
 80065c0:	189b      	addlt	r3, r3, r2
 80065c2:	1b9e      	subge	r6, r3, r6
 80065c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	bfb8      	it	lt
 80065ca:	2600      	movlt	r6, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb7      	itett	lt
 80065d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065d8:	1a9d      	sublt	r5, r3, r2
 80065da:	2300      	movlt	r3, #0
 80065dc:	e734      	b.n	8006448 <_dtoa_r+0x720>
 80065de:	9e07      	ldr	r6, [sp, #28]
 80065e0:	9d04      	ldr	r5, [sp, #16]
 80065e2:	9f08      	ldr	r7, [sp, #32]
 80065e4:	e73b      	b.n	800645e <_dtoa_r+0x736>
 80065e6:	9a07      	ldr	r2, [sp, #28]
 80065e8:	e767      	b.n	80064ba <_dtoa_r+0x792>
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	dc18      	bgt.n	8006622 <_dtoa_r+0x8fa>
 80065f0:	f1ba 0f00 	cmp.w	sl, #0
 80065f4:	d115      	bne.n	8006622 <_dtoa_r+0x8fa>
 80065f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065fa:	b993      	cbnz	r3, 8006622 <_dtoa_r+0x8fa>
 80065fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006600:	0d1b      	lsrs	r3, r3, #20
 8006602:	051b      	lsls	r3, r3, #20
 8006604:	b183      	cbz	r3, 8006628 <_dtoa_r+0x900>
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	3301      	adds	r3, #1
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	9b05      	ldr	r3, [sp, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	f04f 0801 	mov.w	r8, #1
 8006616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	f47f af6a 	bne.w	80064f2 <_dtoa_r+0x7ca>
 800661e:	2001      	movs	r0, #1
 8006620:	e76f      	b.n	8006502 <_dtoa_r+0x7da>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	e7f6      	b.n	8006616 <_dtoa_r+0x8ee>
 8006628:	4698      	mov	r8, r3
 800662a:	e7f4      	b.n	8006616 <_dtoa_r+0x8ee>
 800662c:	f43f af7d 	beq.w	800652a <_dtoa_r+0x802>
 8006630:	4618      	mov	r0, r3
 8006632:	301c      	adds	r0, #28
 8006634:	e772      	b.n	800651c <_dtoa_r+0x7f4>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc37      	bgt.n	80066ac <_dtoa_r+0x984>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	2b02      	cmp	r3, #2
 8006640:	dd34      	ble.n	80066ac <_dtoa_r+0x984>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	b96b      	cbnz	r3, 8006666 <_dtoa_r+0x93e>
 800664a:	4631      	mov	r1, r6
 800664c:	2205      	movs	r2, #5
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fbf4 	bl	8006e3c <__multadd>
 8006654:	4601      	mov	r1, r0
 8006656:	4606      	mov	r6, r0
 8006658:	ee18 0a10 	vmov	r0, s16
 800665c:	f000 fe0e 	bl	800727c <__mcmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	f73f adbb 	bgt.w	80061dc <_dtoa_r+0x4b4>
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	9d01      	ldr	r5, [sp, #4]
 800666a:	43db      	mvns	r3, r3
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	4631      	mov	r1, r6
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fbbf 	bl	8006df8 <_Bfree>
 800667a:	2f00      	cmp	r7, #0
 800667c:	f43f aea4 	beq.w	80063c8 <_dtoa_r+0x6a0>
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d005      	beq.n	8006692 <_dtoa_r+0x96a>
 8006686:	45b8      	cmp	r8, r7
 8006688:	d003      	beq.n	8006692 <_dtoa_r+0x96a>
 800668a:	4641      	mov	r1, r8
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fbb3 	bl	8006df8 <_Bfree>
 8006692:	4639      	mov	r1, r7
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fbaf 	bl	8006df8 <_Bfree>
 800669a:	e695      	b.n	80063c8 <_dtoa_r+0x6a0>
 800669c:	2600      	movs	r6, #0
 800669e:	4637      	mov	r7, r6
 80066a0:	e7e1      	b.n	8006666 <_dtoa_r+0x93e>
 80066a2:	9700      	str	r7, [sp, #0]
 80066a4:	4637      	mov	r7, r6
 80066a6:	e599      	b.n	80061dc <_dtoa_r+0x4b4>
 80066a8:	40240000 	.word	0x40240000
 80066ac:	9b08      	ldr	r3, [sp, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80ca 	beq.w	8006848 <_dtoa_r+0xb20>
 80066b4:	9b03      	ldr	r3, [sp, #12]
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	dd05      	ble.n	80066c8 <_dtoa_r+0x9a0>
 80066bc:	4639      	mov	r1, r7
 80066be:	462a      	mov	r2, r5
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fd6b 	bl	800719c <__lshift>
 80066c6:	4607      	mov	r7, r0
 80066c8:	f1b8 0f00 	cmp.w	r8, #0
 80066cc:	d05b      	beq.n	8006786 <_dtoa_r+0xa5e>
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fb51 	bl	8006d78 <_Balloc>
 80066d6:	4605      	mov	r5, r0
 80066d8:	b928      	cbnz	r0, 80066e6 <_dtoa_r+0x9be>
 80066da:	4b87      	ldr	r3, [pc, #540]	; (80068f8 <_dtoa_r+0xbd0>)
 80066dc:	4602      	mov	r2, r0
 80066de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066e2:	f7ff bb3b 	b.w	8005d5c <_dtoa_r+0x34>
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	3202      	adds	r2, #2
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	f107 010c 	add.w	r1, r7, #12
 80066f0:	300c      	adds	r0, #12
 80066f2:	f000 fb33 	bl	8006d5c <memcpy>
 80066f6:	2201      	movs	r2, #1
 80066f8:	4629      	mov	r1, r5
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fd4e 	bl	800719c <__lshift>
 8006700:	9b01      	ldr	r3, [sp, #4]
 8006702:	f103 0901 	add.w	r9, r3, #1
 8006706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800670a:	4413      	add	r3, r2
 800670c:	9305      	str	r3, [sp, #20]
 800670e:	f00a 0301 	and.w	r3, sl, #1
 8006712:	46b8      	mov	r8, r7
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	4607      	mov	r7, r0
 8006718:	4631      	mov	r1, r6
 800671a:	ee18 0a10 	vmov	r0, s16
 800671e:	f7ff fa75 	bl	8005c0c <quorem>
 8006722:	4641      	mov	r1, r8
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800672a:	ee18 0a10 	vmov	r0, s16
 800672e:	f000 fda5 	bl	800727c <__mcmp>
 8006732:	463a      	mov	r2, r7
 8006734:	9003      	str	r0, [sp, #12]
 8006736:	4631      	mov	r1, r6
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fdbb 	bl	80072b4 <__mdiff>
 800673e:	68c2      	ldr	r2, [r0, #12]
 8006740:	f109 3bff 	add.w	fp, r9, #4294967295
 8006744:	4605      	mov	r5, r0
 8006746:	bb02      	cbnz	r2, 800678a <_dtoa_r+0xa62>
 8006748:	4601      	mov	r1, r0
 800674a:	ee18 0a10 	vmov	r0, s16
 800674e:	f000 fd95 	bl	800727c <__mcmp>
 8006752:	4602      	mov	r2, r0
 8006754:	4629      	mov	r1, r5
 8006756:	4620      	mov	r0, r4
 8006758:	9207      	str	r2, [sp, #28]
 800675a:	f000 fb4d 	bl	8006df8 <_Bfree>
 800675e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006762:	ea43 0102 	orr.w	r1, r3, r2
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	430b      	orrs	r3, r1
 800676a:	464d      	mov	r5, r9
 800676c:	d10f      	bne.n	800678e <_dtoa_r+0xa66>
 800676e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006772:	d02a      	beq.n	80067ca <_dtoa_r+0xaa2>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	dd02      	ble.n	8006780 <_dtoa_r+0xa58>
 800677a:	9b02      	ldr	r3, [sp, #8]
 800677c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006780:	f88b a000 	strb.w	sl, [fp]
 8006784:	e775      	b.n	8006672 <_dtoa_r+0x94a>
 8006786:	4638      	mov	r0, r7
 8006788:	e7ba      	b.n	8006700 <_dtoa_r+0x9d8>
 800678a:	2201      	movs	r2, #1
 800678c:	e7e2      	b.n	8006754 <_dtoa_r+0xa2c>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	db04      	blt.n	800679e <_dtoa_r+0xa76>
 8006794:	9906      	ldr	r1, [sp, #24]
 8006796:	430b      	orrs	r3, r1
 8006798:	9904      	ldr	r1, [sp, #16]
 800679a:	430b      	orrs	r3, r1
 800679c:	d122      	bne.n	80067e4 <_dtoa_r+0xabc>
 800679e:	2a00      	cmp	r2, #0
 80067a0:	ddee      	ble.n	8006780 <_dtoa_r+0xa58>
 80067a2:	ee18 1a10 	vmov	r1, s16
 80067a6:	2201      	movs	r2, #1
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fcf7 	bl	800719c <__lshift>
 80067ae:	4631      	mov	r1, r6
 80067b0:	ee08 0a10 	vmov	s16, r0
 80067b4:	f000 fd62 	bl	800727c <__mcmp>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	dc03      	bgt.n	80067c4 <_dtoa_r+0xa9c>
 80067bc:	d1e0      	bne.n	8006780 <_dtoa_r+0xa58>
 80067be:	f01a 0f01 	tst.w	sl, #1
 80067c2:	d0dd      	beq.n	8006780 <_dtoa_r+0xa58>
 80067c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067c8:	d1d7      	bne.n	800677a <_dtoa_r+0xa52>
 80067ca:	2339      	movs	r3, #57	; 0x39
 80067cc:	f88b 3000 	strb.w	r3, [fp]
 80067d0:	462b      	mov	r3, r5
 80067d2:	461d      	mov	r5, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067da:	2a39      	cmp	r2, #57	; 0x39
 80067dc:	d071      	beq.n	80068c2 <_dtoa_r+0xb9a>
 80067de:	3201      	adds	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	e746      	b.n	8006672 <_dtoa_r+0x94a>
 80067e4:	2a00      	cmp	r2, #0
 80067e6:	dd07      	ble.n	80067f8 <_dtoa_r+0xad0>
 80067e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067ec:	d0ed      	beq.n	80067ca <_dtoa_r+0xaa2>
 80067ee:	f10a 0301 	add.w	r3, sl, #1
 80067f2:	f88b 3000 	strb.w	r3, [fp]
 80067f6:	e73c      	b.n	8006672 <_dtoa_r+0x94a>
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067fe:	4599      	cmp	r9, r3
 8006800:	d047      	beq.n	8006892 <_dtoa_r+0xb6a>
 8006802:	ee18 1a10 	vmov	r1, s16
 8006806:	2300      	movs	r3, #0
 8006808:	220a      	movs	r2, #10
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fb16 	bl	8006e3c <__multadd>
 8006810:	45b8      	cmp	r8, r7
 8006812:	ee08 0a10 	vmov	s16, r0
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	f04f 020a 	mov.w	r2, #10
 800681e:	4641      	mov	r1, r8
 8006820:	4620      	mov	r0, r4
 8006822:	d106      	bne.n	8006832 <_dtoa_r+0xb0a>
 8006824:	f000 fb0a 	bl	8006e3c <__multadd>
 8006828:	4680      	mov	r8, r0
 800682a:	4607      	mov	r7, r0
 800682c:	f109 0901 	add.w	r9, r9, #1
 8006830:	e772      	b.n	8006718 <_dtoa_r+0x9f0>
 8006832:	f000 fb03 	bl	8006e3c <__multadd>
 8006836:	4639      	mov	r1, r7
 8006838:	4680      	mov	r8, r0
 800683a:	2300      	movs	r3, #0
 800683c:	220a      	movs	r2, #10
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fafc 	bl	8006e3c <__multadd>
 8006844:	4607      	mov	r7, r0
 8006846:	e7f1      	b.n	800682c <_dtoa_r+0xb04>
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	9302      	str	r3, [sp, #8]
 800684c:	9d01      	ldr	r5, [sp, #4]
 800684e:	ee18 0a10 	vmov	r0, s16
 8006852:	4631      	mov	r1, r6
 8006854:	f7ff f9da 	bl	8005c0c <quorem>
 8006858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	f805 ab01 	strb.w	sl, [r5], #1
 8006862:	1aea      	subs	r2, r5, r3
 8006864:	9b02      	ldr	r3, [sp, #8]
 8006866:	4293      	cmp	r3, r2
 8006868:	dd09      	ble.n	800687e <_dtoa_r+0xb56>
 800686a:	ee18 1a10 	vmov	r1, s16
 800686e:	2300      	movs	r3, #0
 8006870:	220a      	movs	r2, #10
 8006872:	4620      	mov	r0, r4
 8006874:	f000 fae2 	bl	8006e3c <__multadd>
 8006878:	ee08 0a10 	vmov	s16, r0
 800687c:	e7e7      	b.n	800684e <_dtoa_r+0xb26>
 800687e:	9b02      	ldr	r3, [sp, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	bfc8      	it	gt
 8006884:	461d      	movgt	r5, r3
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	bfd8      	it	le
 800688a:	2501      	movle	r5, #1
 800688c:	441d      	add	r5, r3
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	ee18 1a10 	vmov	r1, s16
 8006896:	2201      	movs	r2, #1
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fc7f 	bl	800719c <__lshift>
 800689e:	4631      	mov	r1, r6
 80068a0:	ee08 0a10 	vmov	s16, r0
 80068a4:	f000 fcea 	bl	800727c <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	dc91      	bgt.n	80067d0 <_dtoa_r+0xaa8>
 80068ac:	d102      	bne.n	80068b4 <_dtoa_r+0xb8c>
 80068ae:	f01a 0f01 	tst.w	sl, #1
 80068b2:	d18d      	bne.n	80067d0 <_dtoa_r+0xaa8>
 80068b4:	462b      	mov	r3, r5
 80068b6:	461d      	mov	r5, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a30      	cmp	r2, #48	; 0x30
 80068be:	d0fa      	beq.n	80068b6 <_dtoa_r+0xb8e>
 80068c0:	e6d7      	b.n	8006672 <_dtoa_r+0x94a>
 80068c2:	9a01      	ldr	r2, [sp, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d184      	bne.n	80067d2 <_dtoa_r+0xaaa>
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	3301      	adds	r3, #1
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2331      	movs	r3, #49	; 0x31
 80068d0:	7013      	strb	r3, [r2, #0]
 80068d2:	e6ce      	b.n	8006672 <_dtoa_r+0x94a>
 80068d4:	4b09      	ldr	r3, [pc, #36]	; (80068fc <_dtoa_r+0xbd4>)
 80068d6:	f7ff ba95 	b.w	8005e04 <_dtoa_r+0xdc>
 80068da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f47f aa6e 	bne.w	8005dbe <_dtoa_r+0x96>
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <_dtoa_r+0xbd8>)
 80068e4:	f7ff ba8e 	b.w	8005e04 <_dtoa_r+0xdc>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dcae      	bgt.n	800684c <_dtoa_r+0xb24>
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f73f aea8 	bgt.w	8006646 <_dtoa_r+0x91e>
 80068f6:	e7a9      	b.n	800684c <_dtoa_r+0xb24>
 80068f8:	0800888b 	.word	0x0800888b
 80068fc:	080087e8 	.word	0x080087e8
 8006900:	0800880c 	.word	0x0800880c

08006904 <__sflush_r>:
 8006904:	898a      	ldrh	r2, [r1, #12]
 8006906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690a:	4605      	mov	r5, r0
 800690c:	0710      	lsls	r0, r2, #28
 800690e:	460c      	mov	r4, r1
 8006910:	d458      	bmi.n	80069c4 <__sflush_r+0xc0>
 8006912:	684b      	ldr	r3, [r1, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc05      	bgt.n	8006924 <__sflush_r+0x20>
 8006918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	dc02      	bgt.n	8006924 <__sflush_r+0x20>
 800691e:	2000      	movs	r0, #0
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006926:	2e00      	cmp	r6, #0
 8006928:	d0f9      	beq.n	800691e <__sflush_r+0x1a>
 800692a:	2300      	movs	r3, #0
 800692c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006930:	682f      	ldr	r7, [r5, #0]
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	d032      	beq.n	800699c <__sflush_r+0x98>
 8006936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	075a      	lsls	r2, r3, #29
 800693c:	d505      	bpl.n	800694a <__sflush_r+0x46>
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	1ac0      	subs	r0, r0, r3
 8006942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006944:	b10b      	cbz	r3, 800694a <__sflush_r+0x46>
 8006946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	2300      	movs	r3, #0
 800694c:	4602      	mov	r2, r0
 800694e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006950:	6a21      	ldr	r1, [r4, #32]
 8006952:	4628      	mov	r0, r5
 8006954:	47b0      	blx	r6
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	d106      	bne.n	800696a <__sflush_r+0x66>
 800695c:	6829      	ldr	r1, [r5, #0]
 800695e:	291d      	cmp	r1, #29
 8006960:	d82c      	bhi.n	80069bc <__sflush_r+0xb8>
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <__sflush_r+0x108>)
 8006964:	40ca      	lsrs	r2, r1
 8006966:	07d6      	lsls	r6, r2, #31
 8006968:	d528      	bpl.n	80069bc <__sflush_r+0xb8>
 800696a:	2200      	movs	r2, #0
 800696c:	6062      	str	r2, [r4, #4]
 800696e:	04d9      	lsls	r1, r3, #19
 8006970:	6922      	ldr	r2, [r4, #16]
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	d504      	bpl.n	8006980 <__sflush_r+0x7c>
 8006976:	1c42      	adds	r2, r0, #1
 8006978:	d101      	bne.n	800697e <__sflush_r+0x7a>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	b903      	cbnz	r3, 8006980 <__sflush_r+0x7c>
 800697e:	6560      	str	r0, [r4, #84]	; 0x54
 8006980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006982:	602f      	str	r7, [r5, #0]
 8006984:	2900      	cmp	r1, #0
 8006986:	d0ca      	beq.n	800691e <__sflush_r+0x1a>
 8006988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__sflush_r+0x92>
 8006990:	4628      	mov	r0, r5
 8006992:	f000 fd8b 	bl	80074ac <_free_r>
 8006996:	2000      	movs	r0, #0
 8006998:	6360      	str	r0, [r4, #52]	; 0x34
 800699a:	e7c1      	b.n	8006920 <__sflush_r+0x1c>
 800699c:	6a21      	ldr	r1, [r4, #32]
 800699e:	2301      	movs	r3, #1
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b0      	blx	r6
 80069a4:	1c41      	adds	r1, r0, #1
 80069a6:	d1c7      	bne.n	8006938 <__sflush_r+0x34>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c4      	beq.n	8006938 <__sflush_r+0x34>
 80069ae:	2b1d      	cmp	r3, #29
 80069b0:	d001      	beq.n	80069b6 <__sflush_r+0xb2>
 80069b2:	2b16      	cmp	r3, #22
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0xb6>
 80069b6:	602f      	str	r7, [r5, #0]
 80069b8:	e7b1      	b.n	800691e <__sflush_r+0x1a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	e7ad      	b.n	8006920 <__sflush_r+0x1c>
 80069c4:	690f      	ldr	r7, [r1, #16]
 80069c6:	2f00      	cmp	r7, #0
 80069c8:	d0a9      	beq.n	800691e <__sflush_r+0x1a>
 80069ca:	0793      	lsls	r3, r2, #30
 80069cc:	680e      	ldr	r6, [r1, #0]
 80069ce:	bf08      	it	eq
 80069d0:	694b      	ldreq	r3, [r1, #20]
 80069d2:	600f      	str	r7, [r1, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2300      	movne	r3, #0
 80069d8:	eba6 0807 	sub.w	r8, r6, r7
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	dd9c      	ble.n	800691e <__sflush_r+0x1a>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069e8:	4643      	mov	r3, r8
 80069ea:	463a      	mov	r2, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	2800      	cmp	r0, #0
 80069f2:	dc06      	bgt.n	8006a02 <__sflush_r+0xfe>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fa:	81a3      	strh	r3, [r4, #12]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	e78e      	b.n	8006920 <__sflush_r+0x1c>
 8006a02:	4407      	add	r7, r0
 8006a04:	eba8 0800 	sub.w	r8, r8, r0
 8006a08:	e7e9      	b.n	80069de <__sflush_r+0xda>
 8006a0a:	bf00      	nop
 8006a0c:	20400001 	.word	0x20400001

08006a10 <_fflush_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b913      	cbnz	r3, 8006a20 <_fflush_r+0x10>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	b118      	cbz	r0, 8006a2a <_fflush_r+0x1a>
 8006a22:	6983      	ldr	r3, [r0, #24]
 8006a24:	b90b      	cbnz	r3, 8006a2a <_fflush_r+0x1a>
 8006a26:	f000 f887 	bl	8006b38 <__sinit>
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <_fflush_r+0x6c>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d11b      	bne.n	8006a68 <_fflush_r+0x58>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ef      	beq.n	8006a1a <_fflush_r+0xa>
 8006a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d404      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a40:	0599      	lsls	r1, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_fflush_r+0x3a>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f000 f91a 	bl	8006c7e <__retarget_lock_acquire_recursive>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f7ff ff59 	bl	8006904 <__sflush_r>
 8006a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a54:	07da      	lsls	r2, r3, #31
 8006a56:	4605      	mov	r5, r0
 8006a58:	d4e0      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d4dd      	bmi.n	8006a1c <_fflush_r+0xc>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f90d 	bl	8006c80 <__retarget_lock_release_recursive>
 8006a66:	e7d9      	b.n	8006a1c <_fflush_r+0xc>
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_fflush_r+0x70>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <_fflush_r+0x62>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7df      	b.n	8006a32 <_fflush_r+0x22>
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <_fflush_r+0x74>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7da      	b.n	8006a32 <_fflush_r+0x22>
 8006a7c:	080088bc 	.word	0x080088bc
 8006a80:	080088dc 	.word	0x080088dc
 8006a84:	0800889c 	.word	0x0800889c

08006a88 <std>:
 8006a88:	2300      	movs	r3, #0
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a96:	6083      	str	r3, [r0, #8]
 8006a98:	8181      	strh	r1, [r0, #12]
 8006a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a9c:	81c2      	strh	r2, [r0, #14]
 8006a9e:	6183      	str	r3, [r0, #24]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	305c      	adds	r0, #92	; 0x5c
 8006aa6:	f7fe faf1 	bl	800508c <memset>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <std+0x38>)
 8006aac:	6263      	str	r3, [r4, #36]	; 0x24
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <std+0x3c>)
 8006ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ab2:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <std+0x40>)
 8006ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x44>)
 8006ab8:	6224      	str	r4, [r4, #32]
 8006aba:	6323      	str	r3, [r4, #48]	; 0x30
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	08007941 	.word	0x08007941
 8006ac4:	08007963 	.word	0x08007963
 8006ac8:	0800799b 	.word	0x0800799b
 8006acc:	080079bf 	.word	0x080079bf

08006ad0 <_cleanup_r>:
 8006ad0:	4901      	ldr	r1, [pc, #4]	; (8006ad8 <_cleanup_r+0x8>)
 8006ad2:	f000 b8af 	b.w	8006c34 <_fwalk_reent>
 8006ad6:	bf00      	nop
 8006ad8:	08006a11 	.word	0x08006a11

08006adc <__sfmoreglue>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	2268      	movs	r2, #104	; 0x68
 8006ae0:	1e4d      	subs	r5, r1, #1
 8006ae2:	4355      	muls	r5, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aea:	f000 fd4b 	bl	8007584 <_malloc_r>
 8006aee:	4604      	mov	r4, r0
 8006af0:	b140      	cbz	r0, 8006b04 <__sfmoreglue+0x28>
 8006af2:	2100      	movs	r1, #0
 8006af4:	e9c0 1600 	strd	r1, r6, [r0]
 8006af8:	300c      	adds	r0, #12
 8006afa:	60a0      	str	r0, [r4, #8]
 8006afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b00:	f7fe fac4 	bl	800508c <memset>
 8006b04:	4620      	mov	r0, r4
 8006b06:	bd70      	pop	{r4, r5, r6, pc}

08006b08 <__sfp_lock_acquire>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sfp_lock_acquire+0x8>)
 8006b0a:	f000 b8b8 	b.w	8006c7e <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20000299 	.word	0x20000299

08006b14 <__sfp_lock_release>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_release+0x8>)
 8006b16:	f000 b8b3 	b.w	8006c80 <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000299 	.word	0x20000299

08006b20 <__sinit_lock_acquire>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sinit_lock_acquire+0x8>)
 8006b22:	f000 b8ac 	b.w	8006c7e <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	2000029a 	.word	0x2000029a

08006b2c <__sinit_lock_release>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sinit_lock_release+0x8>)
 8006b2e:	f000 b8a7 	b.w	8006c80 <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	2000029a 	.word	0x2000029a

08006b38 <__sinit>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	f7ff fff0 	bl	8006b20 <__sinit_lock_acquire>
 8006b40:	69a3      	ldr	r3, [r4, #24]
 8006b42:	b11b      	cbz	r3, 8006b4c <__sinit+0x14>
 8006b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b48:	f7ff bff0 	b.w	8006b2c <__sinit_lock_release>
 8006b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b50:	6523      	str	r3, [r4, #80]	; 0x50
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <__sinit+0x68>)
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <__sinit+0x6c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	bf04      	itt	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	61a3      	streq	r3, [r4, #24]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f820 	bl	8006ba8 <__sfp>
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f81c 	bl	8006ba8 <__sfp>
 8006b70:	60a0      	str	r0, [r4, #8]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f818 	bl	8006ba8 <__sfp>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	60e0      	str	r0, [r4, #12]
 8006b7c:	2104      	movs	r1, #4
 8006b7e:	6860      	ldr	r0, [r4, #4]
 8006b80:	f7ff ff82 	bl	8006a88 <std>
 8006b84:	68a0      	ldr	r0, [r4, #8]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2109      	movs	r1, #9
 8006b8a:	f7ff ff7d 	bl	8006a88 <std>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	2202      	movs	r2, #2
 8006b92:	2112      	movs	r1, #18
 8006b94:	f7ff ff78 	bl	8006a88 <std>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61a3      	str	r3, [r4, #24]
 8006b9c:	e7d2      	b.n	8006b44 <__sinit+0xc>
 8006b9e:	bf00      	nop
 8006ba0:	080087d4 	.word	0x080087d4
 8006ba4:	08006ad1 	.word	0x08006ad1

08006ba8 <__sfp>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	f7ff ffac 	bl	8006b08 <__sfp_lock_acquire>
 8006bb0:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <__sfp+0x84>)
 8006bb2:	681e      	ldr	r6, [r3, #0]
 8006bb4:	69b3      	ldr	r3, [r6, #24]
 8006bb6:	b913      	cbnz	r3, 8006bbe <__sfp+0x16>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff ffbd 	bl	8006b38 <__sinit>
 8006bbe:	3648      	adds	r6, #72	; 0x48
 8006bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	d503      	bpl.n	8006bd0 <__sfp+0x28>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	b30b      	cbz	r3, 8006c10 <__sfp+0x68>
 8006bcc:	6836      	ldr	r6, [r6, #0]
 8006bce:	e7f7      	b.n	8006bc0 <__sfp+0x18>
 8006bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bd4:	b9d5      	cbnz	r5, 8006c0c <__sfp+0x64>
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <__sfp+0x88>)
 8006bd8:	60e3      	str	r3, [r4, #12]
 8006bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bde:	6665      	str	r5, [r4, #100]	; 0x64
 8006be0:	f000 f84c 	bl	8006c7c <__retarget_lock_init_recursive>
 8006be4:	f7ff ff96 	bl	8006b14 <__sfp_lock_release>
 8006be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bf0:	6025      	str	r5, [r4, #0]
 8006bf2:	61a5      	str	r5, [r4, #24]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bfc:	f7fe fa46 	bl	800508c <memset>
 8006c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0c:	3468      	adds	r4, #104	; 0x68
 8006c0e:	e7d9      	b.n	8006bc4 <__sfp+0x1c>
 8006c10:	2104      	movs	r1, #4
 8006c12:	4638      	mov	r0, r7
 8006c14:	f7ff ff62 	bl	8006adc <__sfmoreglue>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	6030      	str	r0, [r6, #0]
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d1d5      	bne.n	8006bcc <__sfp+0x24>
 8006c20:	f7ff ff78 	bl	8006b14 <__sfp_lock_release>
 8006c24:	230c      	movs	r3, #12
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e7ee      	b.n	8006c08 <__sfp+0x60>
 8006c2a:	bf00      	nop
 8006c2c:	080087d4 	.word	0x080087d4
 8006c30:	ffff0001 	.word	0xffff0001

08006c34 <_fwalk_reent>:
 8006c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c38:	4606      	mov	r6, r0
 8006c3a:	4688      	mov	r8, r1
 8006c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c40:	2700      	movs	r7, #0
 8006c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c46:	f1b9 0901 	subs.w	r9, r9, #1
 8006c4a:	d505      	bpl.n	8006c58 <_fwalk_reent+0x24>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	2c00      	cmp	r4, #0
 8006c50:	d1f7      	bne.n	8006c42 <_fwalk_reent+0xe>
 8006c52:	4638      	mov	r0, r7
 8006c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c58:	89ab      	ldrh	r3, [r5, #12]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d907      	bls.n	8006c6e <_fwalk_reent+0x3a>
 8006c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c62:	3301      	adds	r3, #1
 8006c64:	d003      	beq.n	8006c6e <_fwalk_reent+0x3a>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4630      	mov	r0, r6
 8006c6a:	47c0      	blx	r8
 8006c6c:	4307      	orrs	r7, r0
 8006c6e:	3568      	adds	r5, #104	; 0x68
 8006c70:	e7e9      	b.n	8006c46 <_fwalk_reent+0x12>
	...

08006c74 <_localeconv_r>:
 8006c74:	4800      	ldr	r0, [pc, #0]	; (8006c78 <_localeconv_r+0x4>)
 8006c76:	4770      	bx	lr
 8006c78:	20000160 	.word	0x20000160

08006c7c <__retarget_lock_init_recursive>:
 8006c7c:	4770      	bx	lr

08006c7e <__retarget_lock_acquire_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <__retarget_lock_release_recursive>:
 8006c80:	4770      	bx	lr

08006c82 <__swhatbuf_r>:
 8006c82:	b570      	push	{r4, r5, r6, lr}
 8006c84:	460e      	mov	r6, r1
 8006c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	b096      	sub	sp, #88	; 0x58
 8006c8e:	4614      	mov	r4, r2
 8006c90:	461d      	mov	r5, r3
 8006c92:	da08      	bge.n	8006ca6 <__swhatbuf_r+0x24>
 8006c94:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	602a      	str	r2, [r5, #0]
 8006c9c:	061a      	lsls	r2, r3, #24
 8006c9e:	d410      	bmi.n	8006cc2 <__swhatbuf_r+0x40>
 8006ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca4:	e00e      	b.n	8006cc4 <__swhatbuf_r+0x42>
 8006ca6:	466a      	mov	r2, sp
 8006ca8:	f000 fee0 	bl	8007a6c <_fstat_r>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	dbf1      	blt.n	8006c94 <__swhatbuf_r+0x12>
 8006cb0:	9a01      	ldr	r2, [sp, #4]
 8006cb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cba:	425a      	negs	r2, r3
 8006cbc:	415a      	adcs	r2, r3
 8006cbe:	602a      	str	r2, [r5, #0]
 8006cc0:	e7ee      	b.n	8006ca0 <__swhatbuf_r+0x1e>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	b016      	add	sp, #88	; 0x58
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__smakebuf_r>:
 8006ccc:	898b      	ldrh	r3, [r1, #12]
 8006cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cd0:	079d      	lsls	r5, r3, #30
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	d507      	bpl.n	8006ce8 <__smakebuf_r+0x1c>
 8006cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	6163      	str	r3, [r4, #20]
 8006ce4:	b002      	add	sp, #8
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	ab01      	add	r3, sp, #4
 8006cea:	466a      	mov	r2, sp
 8006cec:	f7ff ffc9 	bl	8006c82 <__swhatbuf_r>
 8006cf0:	9900      	ldr	r1, [sp, #0]
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 fc45 	bl	8007584 <_malloc_r>
 8006cfa:	b948      	cbnz	r0, 8006d10 <__smakebuf_r+0x44>
 8006cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d00:	059a      	lsls	r2, r3, #22
 8006d02:	d4ef      	bmi.n	8006ce4 <__smakebuf_r+0x18>
 8006d04:	f023 0303 	bic.w	r3, r3, #3
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	e7e3      	b.n	8006cd8 <__smakebuf_r+0xc>
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <__smakebuf_r+0x7c>)
 8006d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	6020      	str	r0, [r4, #0]
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	6163      	str	r3, [r4, #20]
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	6120      	str	r0, [r4, #16]
 8006d26:	b15b      	cbz	r3, 8006d40 <__smakebuf_r+0x74>
 8006d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 feaf 	bl	8007a90 <_isatty_r>
 8006d32:	b128      	cbz	r0, 8006d40 <__smakebuf_r+0x74>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	89a0      	ldrh	r0, [r4, #12]
 8006d42:	4305      	orrs	r5, r0
 8006d44:	81a5      	strh	r5, [r4, #12]
 8006d46:	e7cd      	b.n	8006ce4 <__smakebuf_r+0x18>
 8006d48:	08006ad1 	.word	0x08006ad1

08006d4c <malloc>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <malloc+0xc>)
 8006d4e:	4601      	mov	r1, r0
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f000 bc17 	b.w	8007584 <_malloc_r>
 8006d56:	bf00      	nop
 8006d58:	2000000c 	.word	0x2000000c

08006d5c <memcpy>:
 8006d5c:	440a      	add	r2, r1
 8006d5e:	4291      	cmp	r1, r2
 8006d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d64:	d100      	bne.n	8006d68 <memcpy+0xc>
 8006d66:	4770      	bx	lr
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d72:	4291      	cmp	r1, r2
 8006d74:	d1f9      	bne.n	8006d6a <memcpy+0xe>
 8006d76:	bd10      	pop	{r4, pc}

08006d78 <_Balloc>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	b976      	cbnz	r6, 8006da0 <_Balloc+0x28>
 8006d82:	2010      	movs	r0, #16
 8006d84:	f7ff ffe2 	bl	8006d4c <malloc>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d8c:	b920      	cbnz	r0, 8006d98 <_Balloc+0x20>
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <_Balloc+0x78>)
 8006d90:	4818      	ldr	r0, [pc, #96]	; (8006df4 <_Balloc+0x7c>)
 8006d92:	2166      	movs	r1, #102	; 0x66
 8006d94:	f000 fe2a 	bl	80079ec <__assert_func>
 8006d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d9c:	6006      	str	r6, [r0, #0]
 8006d9e:	60c6      	str	r6, [r0, #12]
 8006da0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006da2:	68f3      	ldr	r3, [r6, #12]
 8006da4:	b183      	cbz	r3, 8006dc8 <_Balloc+0x50>
 8006da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dae:	b9b8      	cbnz	r0, 8006de0 <_Balloc+0x68>
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f605 	lsl.w	r6, r1, r5
 8006db6:	1d72      	adds	r2, r6, #5
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fb60 	bl	8007480 <_calloc_r>
 8006dc0:	b160      	cbz	r0, 8006ddc <_Balloc+0x64>
 8006dc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dc6:	e00e      	b.n	8006de6 <_Balloc+0x6e>
 8006dc8:	2221      	movs	r2, #33	; 0x21
 8006dca:	2104      	movs	r1, #4
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 fb57 	bl	8007480 <_calloc_r>
 8006dd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dd4:	60f0      	str	r0, [r6, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e4      	bne.n	8006da6 <_Balloc+0x2e>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	6802      	ldr	r2, [r0, #0]
 8006de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006de6:	2300      	movs	r3, #0
 8006de8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dec:	e7f7      	b.n	8006dde <_Balloc+0x66>
 8006dee:	bf00      	nop
 8006df0:	08008819 	.word	0x08008819
 8006df4:	080088fc 	.word	0x080088fc

08006df8 <_Bfree>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	b976      	cbnz	r6, 8006e20 <_Bfree+0x28>
 8006e02:	2010      	movs	r0, #16
 8006e04:	f7ff ffa2 	bl	8006d4c <malloc>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6268      	str	r0, [r5, #36]	; 0x24
 8006e0c:	b920      	cbnz	r0, 8006e18 <_Bfree+0x20>
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <_Bfree+0x3c>)
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <_Bfree+0x40>)
 8006e12:	218a      	movs	r1, #138	; 0x8a
 8006e14:	f000 fdea 	bl	80079ec <__assert_func>
 8006e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e1c:	6006      	str	r6, [r0, #0]
 8006e1e:	60c6      	str	r6, [r0, #12]
 8006e20:	b13c      	cbz	r4, 8006e32 <_Bfree+0x3a>
 8006e22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e24:	6862      	ldr	r2, [r4, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e2c:	6021      	str	r1, [r4, #0]
 8006e2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	08008819 	.word	0x08008819
 8006e38:	080088fc 	.word	0x080088fc

08006e3c <__multadd>:
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	690d      	ldr	r5, [r1, #16]
 8006e42:	4607      	mov	r7, r0
 8006e44:	460c      	mov	r4, r1
 8006e46:	461e      	mov	r6, r3
 8006e48:	f101 0c14 	add.w	ip, r1, #20
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e52:	b299      	uxth	r1, r3
 8006e54:	fb02 6101 	mla	r1, r2, r1, r6
 8006e58:	0c1e      	lsrs	r6, r3, #16
 8006e5a:	0c0b      	lsrs	r3, r1, #16
 8006e5c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e60:	b289      	uxth	r1, r1
 8006e62:	3001      	adds	r0, #1
 8006e64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e68:	4285      	cmp	r5, r0
 8006e6a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e72:	dcec      	bgt.n	8006e4e <__multadd+0x12>
 8006e74:	b30e      	cbz	r6, 8006eba <__multadd+0x7e>
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	42ab      	cmp	r3, r5
 8006e7a:	dc19      	bgt.n	8006eb0 <__multadd+0x74>
 8006e7c:	6861      	ldr	r1, [r4, #4]
 8006e7e:	4638      	mov	r0, r7
 8006e80:	3101      	adds	r1, #1
 8006e82:	f7ff ff79 	bl	8006d78 <_Balloc>
 8006e86:	4680      	mov	r8, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__multadd+0x5a>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <__multadd+0x84>)
 8006e8e:	480d      	ldr	r0, [pc, #52]	; (8006ec4 <__multadd+0x88>)
 8006e90:	21b5      	movs	r1, #181	; 0xb5
 8006e92:	f000 fdab 	bl	80079ec <__assert_func>
 8006e96:	6922      	ldr	r2, [r4, #16]
 8006e98:	3202      	adds	r2, #2
 8006e9a:	f104 010c 	add.w	r1, r4, #12
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	300c      	adds	r0, #12
 8006ea2:	f7ff ff5b 	bl	8006d5c <memcpy>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa5 	bl	8006df8 <_Bfree>
 8006eae:	4644      	mov	r4, r8
 8006eb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	615e      	str	r6, [r3, #20]
 8006eb8:	6125      	str	r5, [r4, #16]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	0800888b 	.word	0x0800888b
 8006ec4:	080088fc 	.word	0x080088fc

08006ec8 <__hi0bits>:
 8006ec8:	0c03      	lsrs	r3, r0, #16
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	b9d3      	cbnz	r3, 8006f04 <__hi0bits+0x3c>
 8006ece:	0400      	lsls	r0, r0, #16
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ed6:	bf04      	itt	eq
 8006ed8:	0200      	lsleq	r0, r0, #8
 8006eda:	3308      	addeq	r3, #8
 8006edc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ee0:	bf04      	itt	eq
 8006ee2:	0100      	lsleq	r0, r0, #4
 8006ee4:	3304      	addeq	r3, #4
 8006ee6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eea:	bf04      	itt	eq
 8006eec:	0080      	lsleq	r0, r0, #2
 8006eee:	3302      	addeq	r3, #2
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	db05      	blt.n	8006f00 <__hi0bits+0x38>
 8006ef4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ef8:	f103 0301 	add.w	r3, r3, #1
 8006efc:	bf08      	it	eq
 8006efe:	2320      	moveq	r3, #32
 8006f00:	4618      	mov	r0, r3
 8006f02:	4770      	bx	lr
 8006f04:	2300      	movs	r3, #0
 8006f06:	e7e4      	b.n	8006ed2 <__hi0bits+0xa>

08006f08 <__lo0bits>:
 8006f08:	6803      	ldr	r3, [r0, #0]
 8006f0a:	f013 0207 	ands.w	r2, r3, #7
 8006f0e:	4601      	mov	r1, r0
 8006f10:	d00b      	beq.n	8006f2a <__lo0bits+0x22>
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d423      	bmi.n	8006f5e <__lo0bits+0x56>
 8006f16:	0798      	lsls	r0, r3, #30
 8006f18:	bf49      	itett	mi
 8006f1a:	085b      	lsrmi	r3, r3, #1
 8006f1c:	089b      	lsrpl	r3, r3, #2
 8006f1e:	2001      	movmi	r0, #1
 8006f20:	600b      	strmi	r3, [r1, #0]
 8006f22:	bf5c      	itt	pl
 8006f24:	600b      	strpl	r3, [r1, #0]
 8006f26:	2002      	movpl	r0, #2
 8006f28:	4770      	bx	lr
 8006f2a:	b298      	uxth	r0, r3
 8006f2c:	b9a8      	cbnz	r0, 8006f5a <__lo0bits+0x52>
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	2010      	movs	r0, #16
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	b90a      	cbnz	r2, 8006f3a <__lo0bits+0x32>
 8006f36:	3008      	adds	r0, #8
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	071a      	lsls	r2, r3, #28
 8006f3c:	bf04      	itt	eq
 8006f3e:	091b      	lsreq	r3, r3, #4
 8006f40:	3004      	addeq	r0, #4
 8006f42:	079a      	lsls	r2, r3, #30
 8006f44:	bf04      	itt	eq
 8006f46:	089b      	lsreq	r3, r3, #2
 8006f48:	3002      	addeq	r0, #2
 8006f4a:	07da      	lsls	r2, r3, #31
 8006f4c:	d403      	bmi.n	8006f56 <__lo0bits+0x4e>
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	f100 0001 	add.w	r0, r0, #1
 8006f54:	d005      	beq.n	8006f62 <__lo0bits+0x5a>
 8006f56:	600b      	str	r3, [r1, #0]
 8006f58:	4770      	bx	lr
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	e7e9      	b.n	8006f32 <__lo0bits+0x2a>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	4770      	bx	lr
 8006f62:	2020      	movs	r0, #32
 8006f64:	4770      	bx	lr
	...

08006f68 <__i2b>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	f7ff ff03 	bl	8006d78 <_Balloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	b928      	cbnz	r0, 8006f82 <__i2b+0x1a>
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <__i2b+0x24>)
 8006f78:	4805      	ldr	r0, [pc, #20]	; (8006f90 <__i2b+0x28>)
 8006f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f7e:	f000 fd35 	bl	80079ec <__assert_func>
 8006f82:	2301      	movs	r3, #1
 8006f84:	6144      	str	r4, [r0, #20]
 8006f86:	6103      	str	r3, [r0, #16]
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800888b 	.word	0x0800888b
 8006f90:	080088fc 	.word	0x080088fc

08006f94 <__multiply>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4691      	mov	r9, r2
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bfb8      	it	lt
 8006fa4:	460b      	movlt	r3, r1
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	bfbc      	itt	lt
 8006faa:	464c      	movlt	r4, r9
 8006fac:	4699      	movlt	r9, r3
 8006fae:	6927      	ldr	r7, [r4, #16]
 8006fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	6861      	ldr	r1, [r4, #4]
 8006fb8:	eb07 060a 	add.w	r6, r7, sl
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	bfb8      	it	lt
 8006fc2:	3101      	addlt	r1, #1
 8006fc4:	f7ff fed8 	bl	8006d78 <_Balloc>
 8006fc8:	b930      	cbnz	r0, 8006fd8 <__multiply+0x44>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b44      	ldr	r3, [pc, #272]	; (80070e0 <__multiply+0x14c>)
 8006fce:	4845      	ldr	r0, [pc, #276]	; (80070e4 <__multiply+0x150>)
 8006fd0:	f240 115d 	movw	r1, #349	; 0x15d
 8006fd4:	f000 fd0a 	bl	80079ec <__assert_func>
 8006fd8:	f100 0514 	add.w	r5, r0, #20
 8006fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	d321      	bcc.n	800702c <__multiply+0x98>
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ff0:	f109 0314 	add.w	r3, r9, #20
 8006ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	1b3a      	subs	r2, r7, r4
 8006ffc:	3a15      	subs	r2, #21
 8006ffe:	f022 0203 	bic.w	r2, r2, #3
 8007002:	3204      	adds	r2, #4
 8007004:	f104 0115 	add.w	r1, r4, #21
 8007008:	428f      	cmp	r7, r1
 800700a:	bf38      	it	cc
 800700c:	2204      	movcc	r2, #4
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d80c      	bhi.n	8007032 <__multiply+0x9e>
 8007018:	2e00      	cmp	r6, #0
 800701a:	dd03      	ble.n	8007024 <__multiply+0x90>
 800701c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05a      	beq.n	80070da <__multiply+0x146>
 8007024:	6106      	str	r6, [r0, #16]
 8007026:	b005      	add	sp, #20
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	f843 2b04 	str.w	r2, [r3], #4
 8007030:	e7d8      	b.n	8006fe4 <__multiply+0x50>
 8007032:	f8b3 a000 	ldrh.w	sl, [r3]
 8007036:	f1ba 0f00 	cmp.w	sl, #0
 800703a:	d024      	beq.n	8007086 <__multiply+0xf2>
 800703c:	f104 0e14 	add.w	lr, r4, #20
 8007040:	46a9      	mov	r9, r5
 8007042:	f04f 0c00 	mov.w	ip, #0
 8007046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800704a:	f8d9 1000 	ldr.w	r1, [r9]
 800704e:	fa1f fb82 	uxth.w	fp, r2
 8007052:	b289      	uxth	r1, r1
 8007054:	fb0a 110b 	mla	r1, sl, fp, r1
 8007058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800705c:	f8d9 2000 	ldr.w	r2, [r9]
 8007060:	4461      	add	r1, ip
 8007062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007066:	fb0a c20b 	mla	r2, sl, fp, ip
 800706a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800706e:	b289      	uxth	r1, r1
 8007070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007074:	4577      	cmp	r7, lr
 8007076:	f849 1b04 	str.w	r1, [r9], #4
 800707a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800707e:	d8e2      	bhi.n	8007046 <__multiply+0xb2>
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	f845 c002 	str.w	ip, [r5, r2]
 8007086:	9a03      	ldr	r2, [sp, #12]
 8007088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800708c:	3304      	adds	r3, #4
 800708e:	f1b9 0f00 	cmp.w	r9, #0
 8007092:	d020      	beq.n	80070d6 <__multiply+0x142>
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	f104 0c14 	add.w	ip, r4, #20
 800709a:	46ae      	mov	lr, r5
 800709c:	f04f 0a00 	mov.w	sl, #0
 80070a0:	f8bc b000 	ldrh.w	fp, [ip]
 80070a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070a8:	fb09 220b 	mla	r2, r9, fp, r2
 80070ac:	4492      	add	sl, r2
 80070ae:	b289      	uxth	r1, r1
 80070b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80070b4:	f84e 1b04 	str.w	r1, [lr], #4
 80070b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80070bc:	f8be 1000 	ldrh.w	r1, [lr]
 80070c0:	0c12      	lsrs	r2, r2, #16
 80070c2:	fb09 1102 	mla	r1, r9, r2, r1
 80070c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80070ca:	4567      	cmp	r7, ip
 80070cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d0:	d8e6      	bhi.n	80070a0 <__multiply+0x10c>
 80070d2:	9a01      	ldr	r2, [sp, #4]
 80070d4:	50a9      	str	r1, [r5, r2]
 80070d6:	3504      	adds	r5, #4
 80070d8:	e79a      	b.n	8007010 <__multiply+0x7c>
 80070da:	3e01      	subs	r6, #1
 80070dc:	e79c      	b.n	8007018 <__multiply+0x84>
 80070de:	bf00      	nop
 80070e0:	0800888b 	.word	0x0800888b
 80070e4:	080088fc 	.word	0x080088fc

080070e8 <__pow5mult>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4615      	mov	r5, r2
 80070ee:	f012 0203 	ands.w	r2, r2, #3
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	d007      	beq.n	8007108 <__pow5mult+0x20>
 80070f8:	4c25      	ldr	r4, [pc, #148]	; (8007190 <__pow5mult+0xa8>)
 80070fa:	3a01      	subs	r2, #1
 80070fc:	2300      	movs	r3, #0
 80070fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007102:	f7ff fe9b 	bl	8006e3c <__multadd>
 8007106:	4607      	mov	r7, r0
 8007108:	10ad      	asrs	r5, r5, #2
 800710a:	d03d      	beq.n	8007188 <__pow5mult+0xa0>
 800710c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800710e:	b97c      	cbnz	r4, 8007130 <__pow5mult+0x48>
 8007110:	2010      	movs	r0, #16
 8007112:	f7ff fe1b 	bl	8006d4c <malloc>
 8007116:	4602      	mov	r2, r0
 8007118:	6270      	str	r0, [r6, #36]	; 0x24
 800711a:	b928      	cbnz	r0, 8007128 <__pow5mult+0x40>
 800711c:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <__pow5mult+0xac>)
 800711e:	481e      	ldr	r0, [pc, #120]	; (8007198 <__pow5mult+0xb0>)
 8007120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007124:	f000 fc62 	bl	80079ec <__assert_func>
 8007128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800712c:	6004      	str	r4, [r0, #0]
 800712e:	60c4      	str	r4, [r0, #12]
 8007130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007138:	b94c      	cbnz	r4, 800714e <__pow5mult+0x66>
 800713a:	f240 2171 	movw	r1, #625	; 0x271
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff ff12 	bl	8006f68 <__i2b>
 8007144:	2300      	movs	r3, #0
 8007146:	f8c8 0008 	str.w	r0, [r8, #8]
 800714a:	4604      	mov	r4, r0
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	07eb      	lsls	r3, r5, #31
 8007154:	d50a      	bpl.n	800716c <__pow5mult+0x84>
 8007156:	4639      	mov	r1, r7
 8007158:	4622      	mov	r2, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff1a 	bl	8006f94 <__multiply>
 8007160:	4639      	mov	r1, r7
 8007162:	4680      	mov	r8, r0
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fe47 	bl	8006df8 <_Bfree>
 800716a:	4647      	mov	r7, r8
 800716c:	106d      	asrs	r5, r5, #1
 800716e:	d00b      	beq.n	8007188 <__pow5mult+0xa0>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	b938      	cbnz	r0, 8007184 <__pow5mult+0x9c>
 8007174:	4622      	mov	r2, r4
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ff0b 	bl	8006f94 <__multiply>
 800717e:	6020      	str	r0, [r4, #0]
 8007180:	f8c0 9000 	str.w	r9, [r0]
 8007184:	4604      	mov	r4, r0
 8007186:	e7e4      	b.n	8007152 <__pow5mult+0x6a>
 8007188:	4638      	mov	r0, r7
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	bf00      	nop
 8007190:	08008a48 	.word	0x08008a48
 8007194:	08008819 	.word	0x08008819
 8007198:	080088fc 	.word	0x080088fc

0800719c <__lshift>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	460c      	mov	r4, r1
 80071a2:	6849      	ldr	r1, [r1, #4]
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	4607      	mov	r7, r0
 80071ae:	4691      	mov	r9, r2
 80071b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071b4:	f108 0601 	add.w	r6, r8, #1
 80071b8:	42b3      	cmp	r3, r6
 80071ba:	db0b      	blt.n	80071d4 <__lshift+0x38>
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff fddb 	bl	8006d78 <_Balloc>
 80071c2:	4605      	mov	r5, r0
 80071c4:	b948      	cbnz	r0, 80071da <__lshift+0x3e>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <__lshift+0xd8>)
 80071ca:	482b      	ldr	r0, [pc, #172]	; (8007278 <__lshift+0xdc>)
 80071cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071d0:	f000 fc0c 	bl	80079ec <__assert_func>
 80071d4:	3101      	adds	r1, #1
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	e7ee      	b.n	80071b8 <__lshift+0x1c>
 80071da:	2300      	movs	r3, #0
 80071dc:	f100 0114 	add.w	r1, r0, #20
 80071e0:	f100 0210 	add.w	r2, r0, #16
 80071e4:	4618      	mov	r0, r3
 80071e6:	4553      	cmp	r3, sl
 80071e8:	db37      	blt.n	800725a <__lshift+0xbe>
 80071ea:	6920      	ldr	r0, [r4, #16]
 80071ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f0:	f104 0314 	add.w	r3, r4, #20
 80071f4:	f019 091f 	ands.w	r9, r9, #31
 80071f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007200:	d02f      	beq.n	8007262 <__lshift+0xc6>
 8007202:	f1c9 0e20 	rsb	lr, r9, #32
 8007206:	468a      	mov	sl, r1
 8007208:	f04f 0c00 	mov.w	ip, #0
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	fa02 f209 	lsl.w	r2, r2, r9
 8007212:	ea42 020c 	orr.w	r2, r2, ip
 8007216:	f84a 2b04 	str.w	r2, [sl], #4
 800721a:	f853 2b04 	ldr.w	r2, [r3], #4
 800721e:	4298      	cmp	r0, r3
 8007220:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007224:	d8f2      	bhi.n	800720c <__lshift+0x70>
 8007226:	1b03      	subs	r3, r0, r4
 8007228:	3b15      	subs	r3, #21
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	3304      	adds	r3, #4
 8007230:	f104 0215 	add.w	r2, r4, #21
 8007234:	4290      	cmp	r0, r2
 8007236:	bf38      	it	cc
 8007238:	2304      	movcc	r3, #4
 800723a:	f841 c003 	str.w	ip, [r1, r3]
 800723e:	f1bc 0f00 	cmp.w	ip, #0
 8007242:	d001      	beq.n	8007248 <__lshift+0xac>
 8007244:	f108 0602 	add.w	r6, r8, #2
 8007248:	3e01      	subs	r6, #1
 800724a:	4638      	mov	r0, r7
 800724c:	612e      	str	r6, [r5, #16]
 800724e:	4621      	mov	r1, r4
 8007250:	f7ff fdd2 	bl	8006df8 <_Bfree>
 8007254:	4628      	mov	r0, r5
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	f842 0f04 	str.w	r0, [r2, #4]!
 800725e:	3301      	adds	r3, #1
 8007260:	e7c1      	b.n	80071e6 <__lshift+0x4a>
 8007262:	3904      	subs	r1, #4
 8007264:	f853 2b04 	ldr.w	r2, [r3], #4
 8007268:	f841 2f04 	str.w	r2, [r1, #4]!
 800726c:	4298      	cmp	r0, r3
 800726e:	d8f9      	bhi.n	8007264 <__lshift+0xc8>
 8007270:	e7ea      	b.n	8007248 <__lshift+0xac>
 8007272:	bf00      	nop
 8007274:	0800888b 	.word	0x0800888b
 8007278:	080088fc 	.word	0x080088fc

0800727c <__mcmp>:
 800727c:	b530      	push	{r4, r5, lr}
 800727e:	6902      	ldr	r2, [r0, #16]
 8007280:	690c      	ldr	r4, [r1, #16]
 8007282:	1b12      	subs	r2, r2, r4
 8007284:	d10e      	bne.n	80072a4 <__mcmp+0x28>
 8007286:	f100 0314 	add.w	r3, r0, #20
 800728a:	3114      	adds	r1, #20
 800728c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800729c:	42a5      	cmp	r5, r4
 800729e:	d003      	beq.n	80072a8 <__mcmp+0x2c>
 80072a0:	d305      	bcc.n	80072ae <__mcmp+0x32>
 80072a2:	2201      	movs	r2, #1
 80072a4:	4610      	mov	r0, r2
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	4283      	cmp	r3, r0
 80072aa:	d3f3      	bcc.n	8007294 <__mcmp+0x18>
 80072ac:	e7fa      	b.n	80072a4 <__mcmp+0x28>
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	e7f7      	b.n	80072a4 <__mcmp+0x28>

080072b4 <__mdiff>:
 80072b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	460c      	mov	r4, r1
 80072ba:	4606      	mov	r6, r0
 80072bc:	4611      	mov	r1, r2
 80072be:	4620      	mov	r0, r4
 80072c0:	4690      	mov	r8, r2
 80072c2:	f7ff ffdb 	bl	800727c <__mcmp>
 80072c6:	1e05      	subs	r5, r0, #0
 80072c8:	d110      	bne.n	80072ec <__mdiff+0x38>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fd53 	bl	8006d78 <_Balloc>
 80072d2:	b930      	cbnz	r0, 80072e2 <__mdiff+0x2e>
 80072d4:	4b3a      	ldr	r3, [pc, #232]	; (80073c0 <__mdiff+0x10c>)
 80072d6:	4602      	mov	r2, r0
 80072d8:	f240 2132 	movw	r1, #562	; 0x232
 80072dc:	4839      	ldr	r0, [pc, #228]	; (80073c4 <__mdiff+0x110>)
 80072de:	f000 fb85 	bl	80079ec <__assert_func>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ec:	bfa4      	itt	ge
 80072ee:	4643      	movge	r3, r8
 80072f0:	46a0      	movge	r8, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072f8:	bfa6      	itte	ge
 80072fa:	461c      	movge	r4, r3
 80072fc:	2500      	movge	r5, #0
 80072fe:	2501      	movlt	r5, #1
 8007300:	f7ff fd3a 	bl	8006d78 <_Balloc>
 8007304:	b920      	cbnz	r0, 8007310 <__mdiff+0x5c>
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <__mdiff+0x10c>)
 8007308:	4602      	mov	r2, r0
 800730a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800730e:	e7e5      	b.n	80072dc <__mdiff+0x28>
 8007310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007314:	6926      	ldr	r6, [r4, #16]
 8007316:	60c5      	str	r5, [r0, #12]
 8007318:	f104 0914 	add.w	r9, r4, #20
 800731c:	f108 0514 	add.w	r5, r8, #20
 8007320:	f100 0e14 	add.w	lr, r0, #20
 8007324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800732c:	f108 0210 	add.w	r2, r8, #16
 8007330:	46f2      	mov	sl, lr
 8007332:	2100      	movs	r1, #0
 8007334:	f859 3b04 	ldr.w	r3, [r9], #4
 8007338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800733c:	fa1f f883 	uxth.w	r8, r3
 8007340:	fa11 f18b 	uxtah	r1, r1, fp
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	eba1 0808 	sub.w	r8, r1, r8
 800734a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800734e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007352:	fa1f f888 	uxth.w	r8, r8
 8007356:	1419      	asrs	r1, r3, #16
 8007358:	454e      	cmp	r6, r9
 800735a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800735e:	f84a 3b04 	str.w	r3, [sl], #4
 8007362:	d8e7      	bhi.n	8007334 <__mdiff+0x80>
 8007364:	1b33      	subs	r3, r6, r4
 8007366:	3b15      	subs	r3, #21
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	3304      	adds	r3, #4
 800736e:	3415      	adds	r4, #21
 8007370:	42a6      	cmp	r6, r4
 8007372:	bf38      	it	cc
 8007374:	2304      	movcc	r3, #4
 8007376:	441d      	add	r5, r3
 8007378:	4473      	add	r3, lr
 800737a:	469e      	mov	lr, r3
 800737c:	462e      	mov	r6, r5
 800737e:	4566      	cmp	r6, ip
 8007380:	d30e      	bcc.n	80073a0 <__mdiff+0xec>
 8007382:	f10c 0203 	add.w	r2, ip, #3
 8007386:	1b52      	subs	r2, r2, r5
 8007388:	f022 0203 	bic.w	r2, r2, #3
 800738c:	3d03      	subs	r5, #3
 800738e:	45ac      	cmp	ip, r5
 8007390:	bf38      	it	cc
 8007392:	2200      	movcc	r2, #0
 8007394:	441a      	add	r2, r3
 8007396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800739a:	b17b      	cbz	r3, 80073bc <__mdiff+0x108>
 800739c:	6107      	str	r7, [r0, #16]
 800739e:	e7a3      	b.n	80072e8 <__mdiff+0x34>
 80073a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80073a4:	fa11 f288 	uxtah	r2, r1, r8
 80073a8:	1414      	asrs	r4, r2, #16
 80073aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073ae:	b292      	uxth	r2, r2
 80073b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073b4:	f84e 2b04 	str.w	r2, [lr], #4
 80073b8:	1421      	asrs	r1, r4, #16
 80073ba:	e7e0      	b.n	800737e <__mdiff+0xca>
 80073bc:	3f01      	subs	r7, #1
 80073be:	e7ea      	b.n	8007396 <__mdiff+0xe2>
 80073c0:	0800888b 	.word	0x0800888b
 80073c4:	080088fc 	.word	0x080088fc

080073c8 <__d2b>:
 80073c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4689      	mov	r9, r1
 80073ce:	2101      	movs	r1, #1
 80073d0:	ec57 6b10 	vmov	r6, r7, d0
 80073d4:	4690      	mov	r8, r2
 80073d6:	f7ff fccf 	bl	8006d78 <_Balloc>
 80073da:	4604      	mov	r4, r0
 80073dc:	b930      	cbnz	r0, 80073ec <__d2b+0x24>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <__d2b+0xb0>)
 80073e2:	4826      	ldr	r0, [pc, #152]	; (800747c <__d2b+0xb4>)
 80073e4:	f240 310a 	movw	r1, #778	; 0x30a
 80073e8:	f000 fb00 	bl	80079ec <__assert_func>
 80073ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80073f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073f4:	bb35      	cbnz	r5, 8007444 <__d2b+0x7c>
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	d028      	beq.n	800744e <__d2b+0x86>
 80073fc:	4668      	mov	r0, sp
 80073fe:	9600      	str	r6, [sp, #0]
 8007400:	f7ff fd82 	bl	8006f08 <__lo0bits>
 8007404:	9900      	ldr	r1, [sp, #0]
 8007406:	b300      	cbz	r0, 800744a <__d2b+0x82>
 8007408:	9a01      	ldr	r2, [sp, #4]
 800740a:	f1c0 0320 	rsb	r3, r0, #32
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	430b      	orrs	r3, r1
 8007414:	40c2      	lsrs	r2, r0
 8007416:	6163      	str	r3, [r4, #20]
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	61a3      	str	r3, [r4, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf14      	ite	ne
 8007422:	2202      	movne	r2, #2
 8007424:	2201      	moveq	r2, #1
 8007426:	6122      	str	r2, [r4, #16]
 8007428:	b1d5      	cbz	r5, 8007460 <__d2b+0x98>
 800742a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800742e:	4405      	add	r5, r0
 8007430:	f8c9 5000 	str.w	r5, [r9]
 8007434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007438:	f8c8 0000 	str.w	r0, [r8]
 800743c:	4620      	mov	r0, r4
 800743e:	b003      	add	sp, #12
 8007440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007448:	e7d5      	b.n	80073f6 <__d2b+0x2e>
 800744a:	6161      	str	r1, [r4, #20]
 800744c:	e7e5      	b.n	800741a <__d2b+0x52>
 800744e:	a801      	add	r0, sp, #4
 8007450:	f7ff fd5a 	bl	8006f08 <__lo0bits>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	6163      	str	r3, [r4, #20]
 8007458:	2201      	movs	r2, #1
 800745a:	6122      	str	r2, [r4, #16]
 800745c:	3020      	adds	r0, #32
 800745e:	e7e3      	b.n	8007428 <__d2b+0x60>
 8007460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007468:	f8c9 0000 	str.w	r0, [r9]
 800746c:	6918      	ldr	r0, [r3, #16]
 800746e:	f7ff fd2b 	bl	8006ec8 <__hi0bits>
 8007472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007476:	e7df      	b.n	8007438 <__d2b+0x70>
 8007478:	0800888b 	.word	0x0800888b
 800747c:	080088fc 	.word	0x080088fc

08007480 <_calloc_r>:
 8007480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007482:	fba1 2402 	umull	r2, r4, r1, r2
 8007486:	b94c      	cbnz	r4, 800749c <_calloc_r+0x1c>
 8007488:	4611      	mov	r1, r2
 800748a:	9201      	str	r2, [sp, #4]
 800748c:	f000 f87a 	bl	8007584 <_malloc_r>
 8007490:	9a01      	ldr	r2, [sp, #4]
 8007492:	4605      	mov	r5, r0
 8007494:	b930      	cbnz	r0, 80074a4 <_calloc_r+0x24>
 8007496:	4628      	mov	r0, r5
 8007498:	b003      	add	sp, #12
 800749a:	bd30      	pop	{r4, r5, pc}
 800749c:	220c      	movs	r2, #12
 800749e:	6002      	str	r2, [r0, #0]
 80074a0:	2500      	movs	r5, #0
 80074a2:	e7f8      	b.n	8007496 <_calloc_r+0x16>
 80074a4:	4621      	mov	r1, r4
 80074a6:	f7fd fdf1 	bl	800508c <memset>
 80074aa:	e7f4      	b.n	8007496 <_calloc_r+0x16>

080074ac <_free_r>:
 80074ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d044      	beq.n	800753c <_free_r+0x90>
 80074b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b6:	9001      	str	r0, [sp, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f1a1 0404 	sub.w	r4, r1, #4
 80074be:	bfb8      	it	lt
 80074c0:	18e4      	addlt	r4, r4, r3
 80074c2:	f000 fb19 	bl	8007af8 <__malloc_lock>
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <_free_r+0x94>)
 80074c8:	9801      	ldr	r0, [sp, #4]
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	b933      	cbnz	r3, 80074dc <_free_r+0x30>
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	6014      	str	r4, [r2, #0]
 80074d2:	b003      	add	sp, #12
 80074d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d8:	f000 bb14 	b.w	8007b04 <__malloc_unlock>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d908      	bls.n	80074f2 <_free_r+0x46>
 80074e0:	6825      	ldr	r5, [r4, #0]
 80074e2:	1961      	adds	r1, r4, r5
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf01      	itttt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	1949      	addeq	r1, r1, r5
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	e7ed      	b.n	80074ce <_free_r+0x22>
 80074f2:	461a      	mov	r2, r3
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b10b      	cbz	r3, 80074fc <_free_r+0x50>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d9fa      	bls.n	80074f2 <_free_r+0x46>
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	1855      	adds	r5, r2, r1
 8007500:	42a5      	cmp	r5, r4
 8007502:	d10b      	bne.n	800751c <_free_r+0x70>
 8007504:	6824      	ldr	r4, [r4, #0]
 8007506:	4421      	add	r1, r4
 8007508:	1854      	adds	r4, r2, r1
 800750a:	42a3      	cmp	r3, r4
 800750c:	6011      	str	r1, [r2, #0]
 800750e:	d1e0      	bne.n	80074d2 <_free_r+0x26>
 8007510:	681c      	ldr	r4, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	6053      	str	r3, [r2, #4]
 8007516:	4421      	add	r1, r4
 8007518:	6011      	str	r1, [r2, #0]
 800751a:	e7da      	b.n	80074d2 <_free_r+0x26>
 800751c:	d902      	bls.n	8007524 <_free_r+0x78>
 800751e:	230c      	movs	r3, #12
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	e7d6      	b.n	80074d2 <_free_r+0x26>
 8007524:	6825      	ldr	r5, [r4, #0]
 8007526:	1961      	adds	r1, r4, r5
 8007528:	428b      	cmp	r3, r1
 800752a:	bf04      	itt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	bf04      	itt	eq
 8007534:	1949      	addeq	r1, r1, r5
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	6054      	str	r4, [r2, #4]
 800753a:	e7ca      	b.n	80074d2 <_free_r+0x26>
 800753c:	b003      	add	sp, #12
 800753e:	bd30      	pop	{r4, r5, pc}
 8007540:	2000029c 	.word	0x2000029c

08007544 <sbrk_aligned>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4e0e      	ldr	r6, [pc, #56]	; (8007580 <sbrk_aligned+0x3c>)
 8007548:	460c      	mov	r4, r1
 800754a:	6831      	ldr	r1, [r6, #0]
 800754c:	4605      	mov	r5, r0
 800754e:	b911      	cbnz	r1, 8007556 <sbrk_aligned+0x12>
 8007550:	f000 f9e6 	bl	8007920 <_sbrk_r>
 8007554:	6030      	str	r0, [r6, #0]
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f9e1 	bl	8007920 <_sbrk_r>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d00a      	beq.n	8007578 <sbrk_aligned+0x34>
 8007562:	1cc4      	adds	r4, r0, #3
 8007564:	f024 0403 	bic.w	r4, r4, #3
 8007568:	42a0      	cmp	r0, r4
 800756a:	d007      	beq.n	800757c <sbrk_aligned+0x38>
 800756c:	1a21      	subs	r1, r4, r0
 800756e:	4628      	mov	r0, r5
 8007570:	f000 f9d6 	bl	8007920 <_sbrk_r>
 8007574:	3001      	adds	r0, #1
 8007576:	d101      	bne.n	800757c <sbrk_aligned+0x38>
 8007578:	f04f 34ff 	mov.w	r4, #4294967295
 800757c:	4620      	mov	r0, r4
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	200002a0 	.word	0x200002a0

08007584 <_malloc_r>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	1ccd      	adds	r5, r1, #3
 800758a:	f025 0503 	bic.w	r5, r5, #3
 800758e:	3508      	adds	r5, #8
 8007590:	2d0c      	cmp	r5, #12
 8007592:	bf38      	it	cc
 8007594:	250c      	movcc	r5, #12
 8007596:	2d00      	cmp	r5, #0
 8007598:	4607      	mov	r7, r0
 800759a:	db01      	blt.n	80075a0 <_malloc_r+0x1c>
 800759c:	42a9      	cmp	r1, r5
 800759e:	d905      	bls.n	80075ac <_malloc_r+0x28>
 80075a0:	230c      	movs	r3, #12
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	2600      	movs	r6, #0
 80075a6:	4630      	mov	r0, r6
 80075a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ac:	4e2e      	ldr	r6, [pc, #184]	; (8007668 <_malloc_r+0xe4>)
 80075ae:	f000 faa3 	bl	8007af8 <__malloc_lock>
 80075b2:	6833      	ldr	r3, [r6, #0]
 80075b4:	461c      	mov	r4, r3
 80075b6:	bb34      	cbnz	r4, 8007606 <_malloc_r+0x82>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7ff ffc2 	bl	8007544 <sbrk_aligned>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	4604      	mov	r4, r0
 80075c4:	d14d      	bne.n	8007662 <_malloc_r+0xde>
 80075c6:	6834      	ldr	r4, [r6, #0]
 80075c8:	4626      	mov	r6, r4
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	d140      	bne.n	8007650 <_malloc_r+0xcc>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	4631      	mov	r1, r6
 80075d2:	4638      	mov	r0, r7
 80075d4:	eb04 0803 	add.w	r8, r4, r3
 80075d8:	f000 f9a2 	bl	8007920 <_sbrk_r>
 80075dc:	4580      	cmp	r8, r0
 80075de:	d13a      	bne.n	8007656 <_malloc_r+0xd2>
 80075e0:	6821      	ldr	r1, [r4, #0]
 80075e2:	3503      	adds	r5, #3
 80075e4:	1a6d      	subs	r5, r5, r1
 80075e6:	f025 0503 	bic.w	r5, r5, #3
 80075ea:	3508      	adds	r5, #8
 80075ec:	2d0c      	cmp	r5, #12
 80075ee:	bf38      	it	cc
 80075f0:	250c      	movcc	r5, #12
 80075f2:	4629      	mov	r1, r5
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff ffa5 	bl	8007544 <sbrk_aligned>
 80075fa:	3001      	adds	r0, #1
 80075fc:	d02b      	beq.n	8007656 <_malloc_r+0xd2>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	442b      	add	r3, r5
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	e00e      	b.n	8007624 <_malloc_r+0xa0>
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	1b52      	subs	r2, r2, r5
 800760a:	d41e      	bmi.n	800764a <_malloc_r+0xc6>
 800760c:	2a0b      	cmp	r2, #11
 800760e:	d916      	bls.n	800763e <_malloc_r+0xba>
 8007610:	1961      	adds	r1, r4, r5
 8007612:	42a3      	cmp	r3, r4
 8007614:	6025      	str	r5, [r4, #0]
 8007616:	bf18      	it	ne
 8007618:	6059      	strne	r1, [r3, #4]
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	bf08      	it	eq
 800761e:	6031      	streq	r1, [r6, #0]
 8007620:	5162      	str	r2, [r4, r5]
 8007622:	604b      	str	r3, [r1, #4]
 8007624:	4638      	mov	r0, r7
 8007626:	f104 060b 	add.w	r6, r4, #11
 800762a:	f000 fa6b 	bl	8007b04 <__malloc_unlock>
 800762e:	f026 0607 	bic.w	r6, r6, #7
 8007632:	1d23      	adds	r3, r4, #4
 8007634:	1af2      	subs	r2, r6, r3
 8007636:	d0b6      	beq.n	80075a6 <_malloc_r+0x22>
 8007638:	1b9b      	subs	r3, r3, r6
 800763a:	50a3      	str	r3, [r4, r2]
 800763c:	e7b3      	b.n	80075a6 <_malloc_r+0x22>
 800763e:	6862      	ldr	r2, [r4, #4]
 8007640:	42a3      	cmp	r3, r4
 8007642:	bf0c      	ite	eq
 8007644:	6032      	streq	r2, [r6, #0]
 8007646:	605a      	strne	r2, [r3, #4]
 8007648:	e7ec      	b.n	8007624 <_malloc_r+0xa0>
 800764a:	4623      	mov	r3, r4
 800764c:	6864      	ldr	r4, [r4, #4]
 800764e:	e7b2      	b.n	80075b6 <_malloc_r+0x32>
 8007650:	4634      	mov	r4, r6
 8007652:	6876      	ldr	r6, [r6, #4]
 8007654:	e7b9      	b.n	80075ca <_malloc_r+0x46>
 8007656:	230c      	movs	r3, #12
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	4638      	mov	r0, r7
 800765c:	f000 fa52 	bl	8007b04 <__malloc_unlock>
 8007660:	e7a1      	b.n	80075a6 <_malloc_r+0x22>
 8007662:	6025      	str	r5, [r4, #0]
 8007664:	e7de      	b.n	8007624 <_malloc_r+0xa0>
 8007666:	bf00      	nop
 8007668:	2000029c 	.word	0x2000029c

0800766c <__sfputc_r>:
 800766c:	6893      	ldr	r3, [r2, #8]
 800766e:	3b01      	subs	r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	b410      	push	{r4}
 8007674:	6093      	str	r3, [r2, #8]
 8007676:	da08      	bge.n	800768a <__sfputc_r+0x1e>
 8007678:	6994      	ldr	r4, [r2, #24]
 800767a:	42a3      	cmp	r3, r4
 800767c:	db01      	blt.n	8007682 <__sfputc_r+0x16>
 800767e:	290a      	cmp	r1, #10
 8007680:	d103      	bne.n	800768a <__sfputc_r+0x1e>
 8007682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007686:	f7fe ba01 	b.w	8005a8c <__swbuf_r>
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	1c58      	adds	r0, r3, #1
 800768e:	6010      	str	r0, [r2, #0]
 8007690:	7019      	strb	r1, [r3, #0]
 8007692:	4608      	mov	r0, r1
 8007694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007698:	4770      	bx	lr

0800769a <__sfputs_r>:
 800769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	18d5      	adds	r5, r2, r3
 80076a4:	42ac      	cmp	r4, r5
 80076a6:	d101      	bne.n	80076ac <__sfputs_r+0x12>
 80076a8:	2000      	movs	r0, #0
 80076aa:	e007      	b.n	80076bc <__sfputs_r+0x22>
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	463a      	mov	r2, r7
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ffda 	bl	800766c <__sfputc_r>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d1f3      	bne.n	80076a4 <__sfputs_r+0xa>
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076c0 <_vfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460d      	mov	r5, r1
 80076c6:	b09d      	sub	sp, #116	; 0x74
 80076c8:	4614      	mov	r4, r2
 80076ca:	4698      	mov	r8, r3
 80076cc:	4606      	mov	r6, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_vfiprintf_r+0x18>
 80076d0:	6983      	ldr	r3, [r0, #24]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_vfiprintf_r+0x18>
 80076d4:	f7ff fa30 	bl	8006b38 <__sinit>
 80076d8:	4b89      	ldr	r3, [pc, #548]	; (8007900 <_vfiprintf_r+0x240>)
 80076da:	429d      	cmp	r5, r3
 80076dc:	d11b      	bne.n	8007716 <_vfiprintf_r+0x56>
 80076de:	6875      	ldr	r5, [r6, #4]
 80076e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	d405      	bmi.n	80076f2 <_vfiprintf_r+0x32>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	059a      	lsls	r2, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <_vfiprintf_r+0x32>
 80076ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ee:	f7ff fac6 	bl	8006c7e <__retarget_lock_acquire_recursive>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	071b      	lsls	r3, r3, #28
 80076f6:	d501      	bpl.n	80076fc <_vfiprintf_r+0x3c>
 80076f8:	692b      	ldr	r3, [r5, #16]
 80076fa:	b9eb      	cbnz	r3, 8007738 <_vfiprintf_r+0x78>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4630      	mov	r0, r6
 8007700:	f7fe fa16 	bl	8005b30 <__swsetup_r>
 8007704:	b1c0      	cbz	r0, 8007738 <_vfiprintf_r+0x78>
 8007706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007708:	07dc      	lsls	r4, r3, #31
 800770a:	d50e      	bpl.n	800772a <_vfiprintf_r+0x6a>
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	; 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	4b7b      	ldr	r3, [pc, #492]	; (8007904 <_vfiprintf_r+0x244>)
 8007718:	429d      	cmp	r5, r3
 800771a:	d101      	bne.n	8007720 <_vfiprintf_r+0x60>
 800771c:	68b5      	ldr	r5, [r6, #8]
 800771e:	e7df      	b.n	80076e0 <_vfiprintf_r+0x20>
 8007720:	4b79      	ldr	r3, [pc, #484]	; (8007908 <_vfiprintf_r+0x248>)
 8007722:	429d      	cmp	r5, r3
 8007724:	bf08      	it	eq
 8007726:	68f5      	ldreq	r5, [r6, #12]
 8007728:	e7da      	b.n	80076e0 <_vfiprintf_r+0x20>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	0598      	lsls	r0, r3, #22
 800772e:	d4ed      	bmi.n	800770c <_vfiprintf_r+0x4c>
 8007730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007732:	f7ff faa5 	bl	8006c80 <__retarget_lock_release_recursive>
 8007736:	e7e9      	b.n	800770c <_vfiprintf_r+0x4c>
 8007738:	2300      	movs	r3, #0
 800773a:	9309      	str	r3, [sp, #36]	; 0x24
 800773c:	2320      	movs	r3, #32
 800773e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007742:	f8cd 800c 	str.w	r8, [sp, #12]
 8007746:	2330      	movs	r3, #48	; 0x30
 8007748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800790c <_vfiprintf_r+0x24c>
 800774c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007750:	f04f 0901 	mov.w	r9, #1
 8007754:	4623      	mov	r3, r4
 8007756:	469a      	mov	sl, r3
 8007758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800775c:	b10a      	cbz	r2, 8007762 <_vfiprintf_r+0xa2>
 800775e:	2a25      	cmp	r2, #37	; 0x25
 8007760:	d1f9      	bne.n	8007756 <_vfiprintf_r+0x96>
 8007762:	ebba 0b04 	subs.w	fp, sl, r4
 8007766:	d00b      	beq.n	8007780 <_vfiprintf_r+0xc0>
 8007768:	465b      	mov	r3, fp
 800776a:	4622      	mov	r2, r4
 800776c:	4629      	mov	r1, r5
 800776e:	4630      	mov	r0, r6
 8007770:	f7ff ff93 	bl	800769a <__sfputs_r>
 8007774:	3001      	adds	r0, #1
 8007776:	f000 80aa 	beq.w	80078ce <_vfiprintf_r+0x20e>
 800777a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777c:	445a      	add	r2, fp
 800777e:	9209      	str	r2, [sp, #36]	; 0x24
 8007780:	f89a 3000 	ldrb.w	r3, [sl]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80a2 	beq.w	80078ce <_vfiprintf_r+0x20e>
 800778a:	2300      	movs	r3, #0
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007794:	f10a 0a01 	add.w	sl, sl, #1
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	9307      	str	r3, [sp, #28]
 800779c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a0:	931a      	str	r3, [sp, #104]	; 0x68
 80077a2:	4654      	mov	r4, sl
 80077a4:	2205      	movs	r2, #5
 80077a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077aa:	4858      	ldr	r0, [pc, #352]	; (800790c <_vfiprintf_r+0x24c>)
 80077ac:	f7f8 fd38 	bl	8000220 <memchr>
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	b9d8      	cbnz	r0, 80077ec <_vfiprintf_r+0x12c>
 80077b4:	06d1      	lsls	r1, r2, #27
 80077b6:	bf44      	itt	mi
 80077b8:	2320      	movmi	r3, #32
 80077ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077be:	0713      	lsls	r3, r2, #28
 80077c0:	bf44      	itt	mi
 80077c2:	232b      	movmi	r3, #43	; 0x2b
 80077c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c8:	f89a 3000 	ldrb.w	r3, [sl]
 80077cc:	2b2a      	cmp	r3, #42	; 0x2a
 80077ce:	d015      	beq.n	80077fc <_vfiprintf_r+0x13c>
 80077d0:	9a07      	ldr	r2, [sp, #28]
 80077d2:	4654      	mov	r4, sl
 80077d4:	2000      	movs	r0, #0
 80077d6:	f04f 0c0a 	mov.w	ip, #10
 80077da:	4621      	mov	r1, r4
 80077dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e0:	3b30      	subs	r3, #48	; 0x30
 80077e2:	2b09      	cmp	r3, #9
 80077e4:	d94e      	bls.n	8007884 <_vfiprintf_r+0x1c4>
 80077e6:	b1b0      	cbz	r0, 8007816 <_vfiprintf_r+0x156>
 80077e8:	9207      	str	r2, [sp, #28]
 80077ea:	e014      	b.n	8007816 <_vfiprintf_r+0x156>
 80077ec:	eba0 0308 	sub.w	r3, r0, r8
 80077f0:	fa09 f303 	lsl.w	r3, r9, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	46a2      	mov	sl, r4
 80077fa:	e7d2      	b.n	80077a2 <_vfiprintf_r+0xe2>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	1d19      	adds	r1, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9103      	str	r1, [sp, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfbb      	ittet	lt
 8007808:	425b      	neglt	r3, r3
 800780a:	f042 0202 	orrlt.w	r2, r2, #2
 800780e:	9307      	strge	r3, [sp, #28]
 8007810:	9307      	strlt	r3, [sp, #28]
 8007812:	bfb8      	it	lt
 8007814:	9204      	strlt	r2, [sp, #16]
 8007816:	7823      	ldrb	r3, [r4, #0]
 8007818:	2b2e      	cmp	r3, #46	; 0x2e
 800781a:	d10c      	bne.n	8007836 <_vfiprintf_r+0x176>
 800781c:	7863      	ldrb	r3, [r4, #1]
 800781e:	2b2a      	cmp	r3, #42	; 0x2a
 8007820:	d135      	bne.n	800788e <_vfiprintf_r+0x1ce>
 8007822:	9b03      	ldr	r3, [sp, #12]
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	9203      	str	r2, [sp, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfb8      	it	lt
 800782e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007832:	3402      	adds	r4, #2
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800791c <_vfiprintf_r+0x25c>
 800783a:	7821      	ldrb	r1, [r4, #0]
 800783c:	2203      	movs	r2, #3
 800783e:	4650      	mov	r0, sl
 8007840:	f7f8 fcee 	bl	8000220 <memchr>
 8007844:	b140      	cbz	r0, 8007858 <_vfiprintf_r+0x198>
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	eba0 000a 	sub.w	r0, r0, sl
 800784c:	fa03 f000 	lsl.w	r0, r3, r0
 8007850:	9b04      	ldr	r3, [sp, #16]
 8007852:	4303      	orrs	r3, r0
 8007854:	3401      	adds	r4, #1
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785c:	482c      	ldr	r0, [pc, #176]	; (8007910 <_vfiprintf_r+0x250>)
 800785e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007862:	2206      	movs	r2, #6
 8007864:	f7f8 fcdc 	bl	8000220 <memchr>
 8007868:	2800      	cmp	r0, #0
 800786a:	d03f      	beq.n	80078ec <_vfiprintf_r+0x22c>
 800786c:	4b29      	ldr	r3, [pc, #164]	; (8007914 <_vfiprintf_r+0x254>)
 800786e:	bb1b      	cbnz	r3, 80078b8 <_vfiprintf_r+0x1f8>
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	3307      	adds	r3, #7
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	3308      	adds	r3, #8
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787e:	443b      	add	r3, r7
 8007880:	9309      	str	r3, [sp, #36]	; 0x24
 8007882:	e767      	b.n	8007754 <_vfiprintf_r+0x94>
 8007884:	fb0c 3202 	mla	r2, ip, r2, r3
 8007888:	460c      	mov	r4, r1
 800788a:	2001      	movs	r0, #1
 800788c:	e7a5      	b.n	80077da <_vfiprintf_r+0x11a>
 800788e:	2300      	movs	r3, #0
 8007890:	3401      	adds	r4, #1
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	4619      	mov	r1, r3
 8007896:	f04f 0c0a 	mov.w	ip, #10
 800789a:	4620      	mov	r0, r4
 800789c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a0:	3a30      	subs	r2, #48	; 0x30
 80078a2:	2a09      	cmp	r2, #9
 80078a4:	d903      	bls.n	80078ae <_vfiprintf_r+0x1ee>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0c5      	beq.n	8007836 <_vfiprintf_r+0x176>
 80078aa:	9105      	str	r1, [sp, #20]
 80078ac:	e7c3      	b.n	8007836 <_vfiprintf_r+0x176>
 80078ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b2:	4604      	mov	r4, r0
 80078b4:	2301      	movs	r3, #1
 80078b6:	e7f0      	b.n	800789a <_vfiprintf_r+0x1da>
 80078b8:	ab03      	add	r3, sp, #12
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	462a      	mov	r2, r5
 80078be:	4b16      	ldr	r3, [pc, #88]	; (8007918 <_vfiprintf_r+0x258>)
 80078c0:	a904      	add	r1, sp, #16
 80078c2:	4630      	mov	r0, r6
 80078c4:	f7fd fc8a 	bl	80051dc <_printf_float>
 80078c8:	4607      	mov	r7, r0
 80078ca:	1c78      	adds	r0, r7, #1
 80078cc:	d1d6      	bne.n	800787c <_vfiprintf_r+0x1bc>
 80078ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d0:	07d9      	lsls	r1, r3, #31
 80078d2:	d405      	bmi.n	80078e0 <_vfiprintf_r+0x220>
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	059a      	lsls	r2, r3, #22
 80078d8:	d402      	bmi.n	80078e0 <_vfiprintf_r+0x220>
 80078da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078dc:	f7ff f9d0 	bl	8006c80 <__retarget_lock_release_recursive>
 80078e0:	89ab      	ldrh	r3, [r5, #12]
 80078e2:	065b      	lsls	r3, r3, #25
 80078e4:	f53f af12 	bmi.w	800770c <_vfiprintf_r+0x4c>
 80078e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ea:	e711      	b.n	8007710 <_vfiprintf_r+0x50>
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <_vfiprintf_r+0x258>)
 80078f4:	a904      	add	r1, sp, #16
 80078f6:	4630      	mov	r0, r6
 80078f8:	f7fd ff14 	bl	8005724 <_printf_i>
 80078fc:	e7e4      	b.n	80078c8 <_vfiprintf_r+0x208>
 80078fe:	bf00      	nop
 8007900:	080088bc 	.word	0x080088bc
 8007904:	080088dc 	.word	0x080088dc
 8007908:	0800889c 	.word	0x0800889c
 800790c:	08008a54 	.word	0x08008a54
 8007910:	08008a5e 	.word	0x08008a5e
 8007914:	080051dd 	.word	0x080051dd
 8007918:	0800769b 	.word	0x0800769b
 800791c:	08008a5a 	.word	0x08008a5a

08007920 <_sbrk_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d06      	ldr	r5, [pc, #24]	; (800793c <_sbrk_r+0x1c>)
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	602b      	str	r3, [r5, #0]
 800792c:	f7fa f9bc 	bl	8001ca8 <_sbrk>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_sbrk_r+0x1a>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b103      	cbz	r3, 800793a <_sbrk_r+0x1a>
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	200002a4 	.word	0x200002a4

08007940 <__sread>:
 8007940:	b510      	push	{r4, lr}
 8007942:	460c      	mov	r4, r1
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	f000 f8e2 	bl	8007b10 <_read_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	bfab      	itete	ge
 8007950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007952:	89a3      	ldrhlt	r3, [r4, #12]
 8007954:	181b      	addge	r3, r3, r0
 8007956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800795a:	bfac      	ite	ge
 800795c:	6563      	strge	r3, [r4, #84]	; 0x54
 800795e:	81a3      	strhlt	r3, [r4, #12]
 8007960:	bd10      	pop	{r4, pc}

08007962 <__swrite>:
 8007962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	461f      	mov	r7, r3
 8007968:	898b      	ldrh	r3, [r1, #12]
 800796a:	05db      	lsls	r3, r3, #23
 800796c:	4605      	mov	r5, r0
 800796e:	460c      	mov	r4, r1
 8007970:	4616      	mov	r6, r2
 8007972:	d505      	bpl.n	8007980 <__swrite+0x1e>
 8007974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007978:	2302      	movs	r3, #2
 800797a:	2200      	movs	r2, #0
 800797c:	f000 f898 	bl	8007ab0 <_lseek_r>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	4632      	mov	r2, r6
 800798e:	463b      	mov	r3, r7
 8007990:	4628      	mov	r0, r5
 8007992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007996:	f000 b817 	b.w	80079c8 <_write_r>

0800799a <__sseek>:
 800799a:	b510      	push	{r4, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a2:	f000 f885 	bl	8007ab0 <_lseek_r>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	bf15      	itete	ne
 80079ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80079ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079b6:	81a3      	strheq	r3, [r4, #12]
 80079b8:	bf18      	it	ne
 80079ba:	81a3      	strhne	r3, [r4, #12]
 80079bc:	bd10      	pop	{r4, pc}

080079be <__sclose>:
 80079be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c2:	f000 b831 	b.w	8007a28 <_close_r>
	...

080079c8 <_write_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_write_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7fa f915 	bl	8001c06 <_write>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_write_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_write_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	200002a4 	.word	0x200002a4

080079ec <__assert_func>:
 80079ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ee:	4614      	mov	r4, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <__assert_func+0x2c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4605      	mov	r5, r0
 80079f8:	68d8      	ldr	r0, [r3, #12]
 80079fa:	b14c      	cbz	r4, 8007a10 <__assert_func+0x24>
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <__assert_func+0x30>)
 80079fe:	9100      	str	r1, [sp, #0]
 8007a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a04:	4906      	ldr	r1, [pc, #24]	; (8007a20 <__assert_func+0x34>)
 8007a06:	462b      	mov	r3, r5
 8007a08:	f000 f81e 	bl	8007a48 <fiprintf>
 8007a0c:	f000 f89f 	bl	8007b4e <abort>
 8007a10:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <__assert_func+0x38>)
 8007a12:	461c      	mov	r4, r3
 8007a14:	e7f3      	b.n	80079fe <__assert_func+0x12>
 8007a16:	bf00      	nop
 8007a18:	2000000c 	.word	0x2000000c
 8007a1c:	08008a65 	.word	0x08008a65
 8007a20:	08008a72 	.word	0x08008a72
 8007a24:	08008aa0 	.word	0x08008aa0

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	; (8007a44 <_close_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7fa f903 	bl	8001c3e <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200002a4 	.word	0x200002a4

08007a48 <fiprintf>:
 8007a48:	b40e      	push	{r1, r2, r3}
 8007a4a:	b503      	push	{r0, r1, lr}
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	ab03      	add	r3, sp, #12
 8007a50:	4805      	ldr	r0, [pc, #20]	; (8007a68 <fiprintf+0x20>)
 8007a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a56:	6800      	ldr	r0, [r0, #0]
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	f7ff fe31 	bl	80076c0 <_vfiprintf_r>
 8007a5e:	b002      	add	sp, #8
 8007a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a64:	b003      	add	sp, #12
 8007a66:	4770      	bx	lr
 8007a68:	2000000c 	.word	0x2000000c

08007a6c <_fstat_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	; (8007a8c <_fstat_r+0x20>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	602b      	str	r3, [r5, #0]
 8007a7a:	f7fa f8ec 	bl	8001c56 <_fstat>
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	d102      	bne.n	8007a88 <_fstat_r+0x1c>
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	b103      	cbz	r3, 8007a88 <_fstat_r+0x1c>
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	bd38      	pop	{r3, r4, r5, pc}
 8007a8a:	bf00      	nop
 8007a8c:	200002a4 	.word	0x200002a4

08007a90 <_isatty_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_isatty_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fa f8eb 	bl	8001c76 <_isatty>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_isatty_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_isatty_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	200002a4 	.word	0x200002a4

08007ab0 <_lseek_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_lseek_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fa f8e4 	bl	8001c8c <_lseek>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_lseek_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_lseek_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	200002a4 	.word	0x200002a4

08007ad4 <__ascii_mbtowc>:
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	b901      	cbnz	r1, 8007ada <__ascii_mbtowc+0x6>
 8007ad8:	a901      	add	r1, sp, #4
 8007ada:	b142      	cbz	r2, 8007aee <__ascii_mbtowc+0x1a>
 8007adc:	b14b      	cbz	r3, 8007af2 <__ascii_mbtowc+0x1e>
 8007ade:	7813      	ldrb	r3, [r2, #0]
 8007ae0:	600b      	str	r3, [r1, #0]
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	1e10      	subs	r0, r2, #0
 8007ae6:	bf18      	it	ne
 8007ae8:	2001      	movne	r0, #1
 8007aea:	b002      	add	sp, #8
 8007aec:	4770      	bx	lr
 8007aee:	4610      	mov	r0, r2
 8007af0:	e7fb      	b.n	8007aea <__ascii_mbtowc+0x16>
 8007af2:	f06f 0001 	mvn.w	r0, #1
 8007af6:	e7f8      	b.n	8007aea <__ascii_mbtowc+0x16>

08007af8 <__malloc_lock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__malloc_lock+0x8>)
 8007afa:	f7ff b8c0 	b.w	8006c7e <__retarget_lock_acquire_recursive>
 8007afe:	bf00      	nop
 8007b00:	20000298 	.word	0x20000298

08007b04 <__malloc_unlock>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__malloc_unlock+0x8>)
 8007b06:	f7ff b8bb 	b.w	8006c80 <__retarget_lock_release_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	20000298 	.word	0x20000298

08007b10 <_read_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	; (8007b30 <_read_r+0x20>)
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7fa f854 	bl	8001bcc <_read>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_read_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_read_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	200002a4 	.word	0x200002a4

08007b34 <__ascii_wctomb>:
 8007b34:	b149      	cbz	r1, 8007b4a <__ascii_wctomb+0x16>
 8007b36:	2aff      	cmp	r2, #255	; 0xff
 8007b38:	bf85      	ittet	hi
 8007b3a:	238a      	movhi	r3, #138	; 0x8a
 8007b3c:	6003      	strhi	r3, [r0, #0]
 8007b3e:	700a      	strbls	r2, [r1, #0]
 8007b40:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b44:	bf98      	it	ls
 8007b46:	2001      	movls	r0, #1
 8007b48:	4770      	bx	lr
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4770      	bx	lr

08007b4e <abort>:
 8007b4e:	b508      	push	{r3, lr}
 8007b50:	2006      	movs	r0, #6
 8007b52:	f000 f82b 	bl	8007bac <raise>
 8007b56:	2001      	movs	r0, #1
 8007b58:	f7fa f82e 	bl	8001bb8 <_exit>

08007b5c <_raise_r>:
 8007b5c:	291f      	cmp	r1, #31
 8007b5e:	b538      	push	{r3, r4, r5, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	d904      	bls.n	8007b70 <_raise_r+0x14>
 8007b66:	2316      	movs	r3, #22
 8007b68:	6003      	str	r3, [r0, #0]
 8007b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b72:	b112      	cbz	r2, 8007b7a <_raise_r+0x1e>
 8007b74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b78:	b94b      	cbnz	r3, 8007b8e <_raise_r+0x32>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 f830 	bl	8007be0 <_getpid_r>
 8007b80:	462a      	mov	r2, r5
 8007b82:	4601      	mov	r1, r0
 8007b84:	4620      	mov	r0, r4
 8007b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b8a:	f000 b817 	b.w	8007bbc <_kill_r>
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d00a      	beq.n	8007ba8 <_raise_r+0x4c>
 8007b92:	1c59      	adds	r1, r3, #1
 8007b94:	d103      	bne.n	8007b9e <_raise_r+0x42>
 8007b96:	2316      	movs	r3, #22
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	e7e7      	b.n	8007b6e <_raise_r+0x12>
 8007b9e:	2400      	movs	r4, #0
 8007ba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	4798      	blx	r3
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e7e0      	b.n	8007b6e <_raise_r+0x12>

08007bac <raise>:
 8007bac:	4b02      	ldr	r3, [pc, #8]	; (8007bb8 <raise+0xc>)
 8007bae:	4601      	mov	r1, r0
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	f7ff bfd3 	b.w	8007b5c <_raise_r>
 8007bb6:	bf00      	nop
 8007bb8:	2000000c 	.word	0x2000000c

08007bbc <_kill_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d07      	ldr	r5, [pc, #28]	; (8007bdc <_kill_r+0x20>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	f7f9 ffe5 	bl	8001b98 <_kill>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	d102      	bne.n	8007bd8 <_kill_r+0x1c>
 8007bd2:	682b      	ldr	r3, [r5, #0]
 8007bd4:	b103      	cbz	r3, 8007bd8 <_kill_r+0x1c>
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
 8007bda:	bf00      	nop
 8007bdc:	200002a4 	.word	0x200002a4

08007be0 <_getpid_r>:
 8007be0:	f7f9 bfd2 	b.w	8001b88 <_getpid>
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <atan>:
 8007be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	ec55 4b10 	vmov	r4, r5, d0
 8007bf0:	4bc3      	ldr	r3, [pc, #780]	; (8007f00 <atan+0x318>)
 8007bf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007bf6:	429e      	cmp	r6, r3
 8007bf8:	46ab      	mov	fp, r5
 8007bfa:	dd18      	ble.n	8007c2e <atan+0x46>
 8007bfc:	4bc1      	ldr	r3, [pc, #772]	; (8007f04 <atan+0x31c>)
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	dc01      	bgt.n	8007c06 <atan+0x1e>
 8007c02:	d109      	bne.n	8007c18 <atan+0x30>
 8007c04:	b144      	cbz	r4, 8007c18 <atan+0x30>
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 fb5d 	bl	80002cc <__adddf3>
 8007c12:	4604      	mov	r4, r0
 8007c14:	460d      	mov	r5, r1
 8007c16:	e006      	b.n	8007c26 <atan+0x3e>
 8007c18:	f1bb 0f00 	cmp.w	fp, #0
 8007c1c:	f300 8131 	bgt.w	8007e82 <atan+0x29a>
 8007c20:	a59b      	add	r5, pc, #620	; (adr r5, 8007e90 <atan+0x2a8>)
 8007c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c26:	ec45 4b10 	vmov	d0, r4, r5
 8007c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	4bb6      	ldr	r3, [pc, #728]	; (8007f08 <atan+0x320>)
 8007c30:	429e      	cmp	r6, r3
 8007c32:	dc14      	bgt.n	8007c5e <atan+0x76>
 8007c34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	dc0d      	bgt.n	8007c58 <atan+0x70>
 8007c3c:	a396      	add	r3, pc, #600	; (adr r3, 8007e98 <atan+0x2b0>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	ee10 0a10 	vmov	r0, s0
 8007c46:	4629      	mov	r1, r5
 8007c48:	f7f8 fb40 	bl	80002cc <__adddf3>
 8007c4c:	4baf      	ldr	r3, [pc, #700]	; (8007f0c <atan+0x324>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f7f8 ff82 	bl	8000b58 <__aeabi_dcmpgt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e6      	bne.n	8007c26 <atan+0x3e>
 8007c58:	f04f 3aff 	mov.w	sl, #4294967295
 8007c5c:	e02b      	b.n	8007cb6 <atan+0xce>
 8007c5e:	f000 f963 	bl	8007f28 <fabs>
 8007c62:	4bab      	ldr	r3, [pc, #684]	; (8007f10 <atan+0x328>)
 8007c64:	429e      	cmp	r6, r3
 8007c66:	ec55 4b10 	vmov	r4, r5, d0
 8007c6a:	f300 80bf 	bgt.w	8007dec <atan+0x204>
 8007c6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007c72:	429e      	cmp	r6, r3
 8007c74:	f300 80a0 	bgt.w	8007db8 <atan+0x1d0>
 8007c78:	ee10 2a10 	vmov	r2, s0
 8007c7c:	ee10 0a10 	vmov	r0, s0
 8007c80:	462b      	mov	r3, r5
 8007c82:	4629      	mov	r1, r5
 8007c84:	f7f8 fb22 	bl	80002cc <__adddf3>
 8007c88:	4ba0      	ldr	r3, [pc, #640]	; (8007f0c <atan+0x324>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fb1c 	bl	80002c8 <__aeabi_dsub>
 8007c90:	2200      	movs	r2, #0
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fb15 	bl	80002cc <__adddf3>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fdef 	bl	800088c <__aeabi_ddiv>
 8007cae:	f04f 0a00 	mov.w	sl, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7f8 fcbb 	bl	8000638 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	f7f8 fcb5 	bl	8000638 <__aeabi_dmul>
 8007cce:	a374      	add	r3, pc, #464	; (adr r3, 8007ea0 <atan+0x2b8>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	460f      	mov	r7, r1
 8007cd8:	f7f8 fcae 	bl	8000638 <__aeabi_dmul>
 8007cdc:	a372      	add	r3, pc, #456	; (adr r3, 8007ea8 <atan+0x2c0>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 faf3 	bl	80002cc <__adddf3>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f7f8 fca5 	bl	8000638 <__aeabi_dmul>
 8007cee:	a370      	add	r3, pc, #448	; (adr r3, 8007eb0 <atan+0x2c8>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 faea 	bl	80002cc <__adddf3>
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	f7f8 fc9c 	bl	8000638 <__aeabi_dmul>
 8007d00:	a36d      	add	r3, pc, #436	; (adr r3, 8007eb8 <atan+0x2d0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f7f8 fae1 	bl	80002cc <__adddf3>
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	463b      	mov	r3, r7
 8007d0e:	f7f8 fc93 	bl	8000638 <__aeabi_dmul>
 8007d12:	a36b      	add	r3, pc, #428	; (adr r3, 8007ec0 <atan+0x2d8>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fad8 	bl	80002cc <__adddf3>
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	463b      	mov	r3, r7
 8007d20:	f7f8 fc8a 	bl	8000638 <__aeabi_dmul>
 8007d24:	a368      	add	r3, pc, #416	; (adr r3, 8007ec8 <atan+0x2e0>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 facf 	bl	80002cc <__adddf3>
 8007d2e:	4642      	mov	r2, r8
 8007d30:	464b      	mov	r3, r9
 8007d32:	f7f8 fc81 	bl	8000638 <__aeabi_dmul>
 8007d36:	a366      	add	r3, pc, #408	; (adr r3, 8007ed0 <atan+0x2e8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	4689      	mov	r9, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fc78 	bl	8000638 <__aeabi_dmul>
 8007d48:	a363      	add	r3, pc, #396	; (adr r3, 8007ed8 <atan+0x2f0>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fabb 	bl	80002c8 <__aeabi_dsub>
 8007d52:	4632      	mov	r2, r6
 8007d54:	463b      	mov	r3, r7
 8007d56:	f7f8 fc6f 	bl	8000638 <__aeabi_dmul>
 8007d5a:	a361      	add	r3, pc, #388	; (adr r3, 8007ee0 <atan+0x2f8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 fab2 	bl	80002c8 <__aeabi_dsub>
 8007d64:	4632      	mov	r2, r6
 8007d66:	463b      	mov	r3, r7
 8007d68:	f7f8 fc66 	bl	8000638 <__aeabi_dmul>
 8007d6c:	a35e      	add	r3, pc, #376	; (adr r3, 8007ee8 <atan+0x300>)
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7f8 faa9 	bl	80002c8 <__aeabi_dsub>
 8007d76:	4632      	mov	r2, r6
 8007d78:	463b      	mov	r3, r7
 8007d7a:	f7f8 fc5d 	bl	8000638 <__aeabi_dmul>
 8007d7e:	a35c      	add	r3, pc, #368	; (adr r3, 8007ef0 <atan+0x308>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 faa0 	bl	80002c8 <__aeabi_dsub>
 8007d88:	4632      	mov	r2, r6
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	f7f8 fc54 	bl	8000638 <__aeabi_dmul>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 fa98 	bl	80002cc <__adddf3>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fc4a 	bl	8000638 <__aeabi_dmul>
 8007da4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	d14b      	bne.n	8007e46 <atan+0x25e>
 8007dae:	4620      	mov	r0, r4
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fa89 	bl	80002c8 <__aeabi_dsub>
 8007db6:	e72c      	b.n	8007c12 <atan+0x2a>
 8007db8:	ee10 0a10 	vmov	r0, s0
 8007dbc:	4b53      	ldr	r3, [pc, #332]	; (8007f0c <atan+0x324>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fa81 	bl	80002c8 <__aeabi_dsub>
 8007dc6:	4b51      	ldr	r3, [pc, #324]	; (8007f0c <atan+0x324>)
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4620      	mov	r0, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7f8 fa7b 	bl	80002cc <__adddf3>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7f8 fd55 	bl	800088c <__aeabi_ddiv>
 8007de2:	f04f 0a01 	mov.w	sl, #1
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	e764      	b.n	8007cb6 <atan+0xce>
 8007dec:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <atan+0x32c>)
 8007dee:	429e      	cmp	r6, r3
 8007df0:	da1d      	bge.n	8007e2e <atan+0x246>
 8007df2:	ee10 0a10 	vmov	r0, s0
 8007df6:	4b48      	ldr	r3, [pc, #288]	; (8007f18 <atan+0x330>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f7f8 fa64 	bl	80002c8 <__aeabi_dsub>
 8007e00:	4b45      	ldr	r3, [pc, #276]	; (8007f18 <atan+0x330>)
 8007e02:	4606      	mov	r6, r0
 8007e04:	460f      	mov	r7, r1
 8007e06:	2200      	movs	r2, #0
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 fc14 	bl	8000638 <__aeabi_dmul>
 8007e10:	4b3e      	ldr	r3, [pc, #248]	; (8007f0c <atan+0x324>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7f8 fa5a 	bl	80002cc <__adddf3>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fd34 	bl	800088c <__aeabi_ddiv>
 8007e24:	f04f 0a02 	mov.w	sl, #2
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	e743      	b.n	8007cb6 <atan+0xce>
 8007e2e:	462b      	mov	r3, r5
 8007e30:	ee10 2a10 	vmov	r2, s0
 8007e34:	4939      	ldr	r1, [pc, #228]	; (8007f1c <atan+0x334>)
 8007e36:	2000      	movs	r0, #0
 8007e38:	f7f8 fd28 	bl	800088c <__aeabi_ddiv>
 8007e3c:	f04f 0a03 	mov.w	sl, #3
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	e737      	b.n	8007cb6 <atan+0xce>
 8007e46:	4b36      	ldr	r3, [pc, #216]	; (8007f20 <atan+0x338>)
 8007e48:	4e36      	ldr	r6, [pc, #216]	; (8007f24 <atan+0x33c>)
 8007e4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e4e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007e52:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e56:	f7f8 fa37 	bl	80002c8 <__aeabi_dsub>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	f7f8 fa33 	bl	80002c8 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e6a:	f7f8 fa2d 	bl	80002c8 <__aeabi_dsub>
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	460d      	mov	r5, r1
 8007e76:	f6bf aed6 	bge.w	8007c26 <atan+0x3e>
 8007e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e7e:	461d      	mov	r5, r3
 8007e80:	e6d1      	b.n	8007c26 <atan+0x3e>
 8007e82:	a51d      	add	r5, pc, #116	; (adr r5, 8007ef8 <atan+0x310>)
 8007e84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e88:	e6cd      	b.n	8007c26 <atan+0x3e>
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w
 8007e90:	54442d18 	.word	0x54442d18
 8007e94:	bff921fb 	.word	0xbff921fb
 8007e98:	8800759c 	.word	0x8800759c
 8007e9c:	7e37e43c 	.word	0x7e37e43c
 8007ea0:	e322da11 	.word	0xe322da11
 8007ea4:	3f90ad3a 	.word	0x3f90ad3a
 8007ea8:	24760deb 	.word	0x24760deb
 8007eac:	3fa97b4b 	.word	0x3fa97b4b
 8007eb0:	a0d03d51 	.word	0xa0d03d51
 8007eb4:	3fb10d66 	.word	0x3fb10d66
 8007eb8:	c54c206e 	.word	0xc54c206e
 8007ebc:	3fb745cd 	.word	0x3fb745cd
 8007ec0:	920083ff 	.word	0x920083ff
 8007ec4:	3fc24924 	.word	0x3fc24924
 8007ec8:	5555550d 	.word	0x5555550d
 8007ecc:	3fd55555 	.word	0x3fd55555
 8007ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ed4:	bfa2b444 	.word	0xbfa2b444
 8007ed8:	52defd9a 	.word	0x52defd9a
 8007edc:	3fadde2d 	.word	0x3fadde2d
 8007ee0:	af749a6d 	.word	0xaf749a6d
 8007ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ee8:	fe231671 	.word	0xfe231671
 8007eec:	3fbc71c6 	.word	0x3fbc71c6
 8007ef0:	9998ebc4 	.word	0x9998ebc4
 8007ef4:	3fc99999 	.word	0x3fc99999
 8007ef8:	54442d18 	.word	0x54442d18
 8007efc:	3ff921fb 	.word	0x3ff921fb
 8007f00:	440fffff 	.word	0x440fffff
 8007f04:	7ff00000 	.word	0x7ff00000
 8007f08:	3fdbffff 	.word	0x3fdbffff
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	3ff2ffff 	.word	0x3ff2ffff
 8007f14:	40038000 	.word	0x40038000
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	bff00000 	.word	0xbff00000
 8007f20:	08008bd0 	.word	0x08008bd0
 8007f24:	08008bb0 	.word	0x08008bb0

08007f28 <fabs>:
 8007f28:	ec51 0b10 	vmov	r0, r1, d0
 8007f2c:	ee10 2a10 	vmov	r2, s0
 8007f30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f34:	ec43 2b10 	vmov	d0, r2, r3
 8007f38:	4770      	bx	lr
	...

08007f3c <acos>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	ed2d 8b02 	vpush	{d8}
 8007f42:	ec55 4b10 	vmov	r4, r5, d0
 8007f46:	f000 f85b 	bl	8008000 <__ieee754_acos>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	eeb0 8a40 	vmov.f32	s16, s0
 8007f56:	eef0 8a60 	vmov.f32	s17, s1
 8007f5a:	f7f8 fe07 	bl	8000b6c <__aeabi_dcmpun>
 8007f5e:	b9a8      	cbnz	r0, 8007f8c <acos+0x50>
 8007f60:	ec45 4b10 	vmov	d0, r4, r5
 8007f64:	f7ff ffe0 	bl	8007f28 <fabs>
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <acos+0x60>)
 8007f6a:	ec51 0b10 	vmov	r0, r1, d0
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f7f8 fdf2 	bl	8000b58 <__aeabi_dcmpgt>
 8007f74:	b150      	cbz	r0, 8007f8c <acos+0x50>
 8007f76:	f7fd f85f 	bl	8005038 <__errno>
 8007f7a:	ecbd 8b02 	vpop	{d8}
 8007f7e:	2321      	movs	r3, #33	; 0x21
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f86:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <acos+0x64>)
 8007f88:	f000 bb4e 	b.w	8008628 <nan>
 8007f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f90:	eef0 0a68 	vmov.f32	s1, s17
 8007f94:	ecbd 8b02 	vpop	{d8}
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
 8007f9a:	bf00      	nop
 8007f9c:	3ff00000 	.word	0x3ff00000
 8007fa0:	08008aa0 	.word	0x08008aa0

08007fa4 <sqrt>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	ed2d 8b02 	vpush	{d8}
 8007faa:	ec55 4b10 	vmov	r4, r5, d0
 8007fae:	f000 fa87 	bl	80084c0 <__ieee754_sqrt>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4629      	mov	r1, r5
 8007fba:	eeb0 8a40 	vmov.f32	s16, s0
 8007fbe:	eef0 8a60 	vmov.f32	s17, s1
 8007fc2:	f7f8 fdd3 	bl	8000b6c <__aeabi_dcmpun>
 8007fc6:	b990      	cbnz	r0, 8007fee <sqrt+0x4a>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8007fd4:	b158      	cbz	r0, 8007fee <sqrt+0x4a>
 8007fd6:	f7fd f82f 	bl	8005038 <__errno>
 8007fda:	2321      	movs	r3, #33	; 0x21
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f7f8 fc51 	bl	800088c <__aeabi_ddiv>
 8007fea:	ec41 0b18 	vmov	d8, r0, r1
 8007fee:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff2:	eef0 0a68 	vmov.f32	s1, s17
 8007ff6:	ecbd 8b02 	vpop	{d8}
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	0000      	movs	r0, r0
	...

08008000 <__ieee754_acos>:
 8008000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	ec55 4b10 	vmov	r4, r5, d0
 8008008:	49b7      	ldr	r1, [pc, #732]	; (80082e8 <__ieee754_acos+0x2e8>)
 800800a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800800e:	428b      	cmp	r3, r1
 8008010:	dd1b      	ble.n	800804a <__ieee754_acos+0x4a>
 8008012:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008016:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800801a:	4323      	orrs	r3, r4
 800801c:	d106      	bne.n	800802c <__ieee754_acos+0x2c>
 800801e:	2d00      	cmp	r5, #0
 8008020:	f300 8211 	bgt.w	8008446 <__ieee754_acos+0x446>
 8008024:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8008280 <__ieee754_acos+0x280>
 8008028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	ee10 2a10 	vmov	r2, s0
 8008030:	462b      	mov	r3, r5
 8008032:	ee10 0a10 	vmov	r0, s0
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f946 	bl	80002c8 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	f7f8 fc24 	bl	800088c <__aeabi_ddiv>
 8008044:	ec41 0b10 	vmov	d0, r0, r1
 8008048:	e7ee      	b.n	8008028 <__ieee754_acos+0x28>
 800804a:	49a8      	ldr	r1, [pc, #672]	; (80082ec <__ieee754_acos+0x2ec>)
 800804c:	428b      	cmp	r3, r1
 800804e:	f300 8087 	bgt.w	8008160 <__ieee754_acos+0x160>
 8008052:	4aa7      	ldr	r2, [pc, #668]	; (80082f0 <__ieee754_acos+0x2f0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	f340 81f9 	ble.w	800844c <__ieee754_acos+0x44c>
 800805a:	ee10 2a10 	vmov	r2, s0
 800805e:	ee10 0a10 	vmov	r0, s0
 8008062:	462b      	mov	r3, r5
 8008064:	4629      	mov	r1, r5
 8008066:	f7f8 fae7 	bl	8000638 <__aeabi_dmul>
 800806a:	a387      	add	r3, pc, #540	; (adr r3, 8008288 <__ieee754_acos+0x288>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	a385      	add	r3, pc, #532	; (adr r3, 8008290 <__ieee754_acos+0x290>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 f925 	bl	80002cc <__adddf3>
 8008082:	4632      	mov	r2, r6
 8008084:	463b      	mov	r3, r7
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	a383      	add	r3, pc, #524	; (adr r3, 8008298 <__ieee754_acos+0x298>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 f91a 	bl	80002c8 <__aeabi_dsub>
 8008094:	4632      	mov	r2, r6
 8008096:	463b      	mov	r3, r7
 8008098:	f7f8 face 	bl	8000638 <__aeabi_dmul>
 800809c:	a380      	add	r3, pc, #512	; (adr r3, 80082a0 <__ieee754_acos+0x2a0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 f913 	bl	80002cc <__adddf3>
 80080a6:	4632      	mov	r2, r6
 80080a8:	463b      	mov	r3, r7
 80080aa:	f7f8 fac5 	bl	8000638 <__aeabi_dmul>
 80080ae:	a37e      	add	r3, pc, #504	; (adr r3, 80082a8 <__ieee754_acos+0x2a8>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 f908 	bl	80002c8 <__aeabi_dsub>
 80080b8:	4632      	mov	r2, r6
 80080ba:	463b      	mov	r3, r7
 80080bc:	f7f8 fabc 	bl	8000638 <__aeabi_dmul>
 80080c0:	a37b      	add	r3, pc, #492	; (adr r3, 80082b0 <__ieee754_acos+0x2b0>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 f901 	bl	80002cc <__adddf3>
 80080ca:	4632      	mov	r2, r6
 80080cc:	463b      	mov	r3, r7
 80080ce:	f7f8 fab3 	bl	8000638 <__aeabi_dmul>
 80080d2:	a379      	add	r3, pc, #484	; (adr r3, 80082b8 <__ieee754_acos+0x2b8>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	4680      	mov	r8, r0
 80080da:	4689      	mov	r9, r1
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 faaa 	bl	8000638 <__aeabi_dmul>
 80080e4:	a376      	add	r3, pc, #472	; (adr r3, 80082c0 <__ieee754_acos+0x2c0>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f8ed 	bl	80002c8 <__aeabi_dsub>
 80080ee:	4632      	mov	r2, r6
 80080f0:	463b      	mov	r3, r7
 80080f2:	f7f8 faa1 	bl	8000638 <__aeabi_dmul>
 80080f6:	a374      	add	r3, pc, #464	; (adr r3, 80082c8 <__ieee754_acos+0x2c8>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 f8e6 	bl	80002cc <__adddf3>
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	f7f8 fa98 	bl	8000638 <__aeabi_dmul>
 8008108:	a371      	add	r3, pc, #452	; (adr r3, 80082d0 <__ieee754_acos+0x2d0>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 f8db 	bl	80002c8 <__aeabi_dsub>
 8008112:	4632      	mov	r2, r6
 8008114:	463b      	mov	r3, r7
 8008116:	f7f8 fa8f 	bl	8000638 <__aeabi_dmul>
 800811a:	4b76      	ldr	r3, [pc, #472]	; (80082f4 <__ieee754_acos+0x2f4>)
 800811c:	2200      	movs	r2, #0
 800811e:	f7f8 f8d5 	bl	80002cc <__adddf3>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4640      	mov	r0, r8
 8008128:	4649      	mov	r1, r9
 800812a:	f7f8 fbaf 	bl	800088c <__aeabi_ddiv>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 fa81 	bl	8000638 <__aeabi_dmul>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	a167      	add	r1, pc, #412	; (adr r1, 80082d8 <__ieee754_acos+0x2d8>)
 800813c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008140:	f7f8 f8c2 	bl	80002c8 <__aeabi_dsub>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4620      	mov	r0, r4
 800814a:	4629      	mov	r1, r5
 800814c:	f7f8 f8bc 	bl	80002c8 <__aeabi_dsub>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	a162      	add	r1, pc, #392	; (adr r1, 80082e0 <__ieee754_acos+0x2e0>)
 8008156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815a:	f7f8 f8b5 	bl	80002c8 <__aeabi_dsub>
 800815e:	e771      	b.n	8008044 <__ieee754_acos+0x44>
 8008160:	2d00      	cmp	r5, #0
 8008162:	f280 80cb 	bge.w	80082fc <__ieee754_acos+0x2fc>
 8008166:	ee10 0a10 	vmov	r0, s0
 800816a:	4b62      	ldr	r3, [pc, #392]	; (80082f4 <__ieee754_acos+0x2f4>)
 800816c:	2200      	movs	r2, #0
 800816e:	4629      	mov	r1, r5
 8008170:	f7f8 f8ac 	bl	80002cc <__adddf3>
 8008174:	4b60      	ldr	r3, [pc, #384]	; (80082f8 <__ieee754_acos+0x2f8>)
 8008176:	2200      	movs	r2, #0
 8008178:	f7f8 fa5e 	bl	8000638 <__aeabi_dmul>
 800817c:	a342      	add	r3, pc, #264	; (adr r3, 8008288 <__ieee754_acos+0x288>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	a341      	add	r3, pc, #260	; (adr r3, 8008290 <__ieee754_acos+0x290>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 f89c 	bl	80002cc <__adddf3>
 8008194:	4622      	mov	r2, r4
 8008196:	462b      	mov	r3, r5
 8008198:	f7f8 fa4e 	bl	8000638 <__aeabi_dmul>
 800819c:	a33e      	add	r3, pc, #248	; (adr r3, 8008298 <__ieee754_acos+0x298>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 f891 	bl	80002c8 <__aeabi_dsub>
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	f7f8 fa45 	bl	8000638 <__aeabi_dmul>
 80081ae:	a33c      	add	r3, pc, #240	; (adr r3, 80082a0 <__ieee754_acos+0x2a0>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 f88a 	bl	80002cc <__adddf3>
 80081b8:	4622      	mov	r2, r4
 80081ba:	462b      	mov	r3, r5
 80081bc:	f7f8 fa3c 	bl	8000638 <__aeabi_dmul>
 80081c0:	a339      	add	r3, pc, #228	; (adr r3, 80082a8 <__ieee754_acos+0x2a8>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f87f 	bl	80002c8 <__aeabi_dsub>
 80081ca:	4622      	mov	r2, r4
 80081cc:	462b      	mov	r3, r5
 80081ce:	f7f8 fa33 	bl	8000638 <__aeabi_dmul>
 80081d2:	a337      	add	r3, pc, #220	; (adr r3, 80082b0 <__ieee754_acos+0x2b0>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 f878 	bl	80002cc <__adddf3>
 80081dc:	4622      	mov	r2, r4
 80081de:	462b      	mov	r3, r5
 80081e0:	f7f8 fa2a 	bl	8000638 <__aeabi_dmul>
 80081e4:	ec45 4b10 	vmov	d0, r4, r5
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	f000 f968 	bl	80084c0 <__ieee754_sqrt>
 80081f0:	a331      	add	r3, pc, #196	; (adr r3, 80082b8 <__ieee754_acos+0x2b8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	4620      	mov	r0, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	ec57 6b10 	vmov	r6, r7, d0
 80081fe:	f7f8 fa1b 	bl	8000638 <__aeabi_dmul>
 8008202:	a32f      	add	r3, pc, #188	; (adr r3, 80082c0 <__ieee754_acos+0x2c0>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f85e 	bl	80002c8 <__aeabi_dsub>
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	f7f8 fa12 	bl	8000638 <__aeabi_dmul>
 8008214:	a32c      	add	r3, pc, #176	; (adr r3, 80082c8 <__ieee754_acos+0x2c8>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f857 	bl	80002cc <__adddf3>
 800821e:	4622      	mov	r2, r4
 8008220:	462b      	mov	r3, r5
 8008222:	f7f8 fa09 	bl	8000638 <__aeabi_dmul>
 8008226:	a32a      	add	r3, pc, #168	; (adr r3, 80082d0 <__ieee754_acos+0x2d0>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f84c 	bl	80002c8 <__aeabi_dsub>
 8008230:	4622      	mov	r2, r4
 8008232:	462b      	mov	r3, r5
 8008234:	f7f8 fa00 	bl	8000638 <__aeabi_dmul>
 8008238:	4b2e      	ldr	r3, [pc, #184]	; (80082f4 <__ieee754_acos+0x2f4>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f846 	bl	80002cc <__adddf3>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	f7f8 fb20 	bl	800088c <__aeabi_ddiv>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 f9f2 	bl	8000638 <__aeabi_dmul>
 8008254:	a320      	add	r3, pc, #128	; (adr r3, 80082d8 <__ieee754_acos+0x2d8>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f835 	bl	80002c8 <__aeabi_dsub>
 800825e:	4632      	mov	r2, r6
 8008260:	463b      	mov	r3, r7
 8008262:	f7f8 f833 	bl	80002cc <__adddf3>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	f7f8 f82f 	bl	80002cc <__adddf3>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	a103      	add	r1, pc, #12	; (adr r1, 8008280 <__ieee754_acos+0x280>)
 8008274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008278:	e76f      	b.n	800815a <__ieee754_acos+0x15a>
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w
 8008280:	54442d18 	.word	0x54442d18
 8008284:	400921fb 	.word	0x400921fb
 8008288:	0dfdf709 	.word	0x0dfdf709
 800828c:	3f023de1 	.word	0x3f023de1
 8008290:	7501b288 	.word	0x7501b288
 8008294:	3f49efe0 	.word	0x3f49efe0
 8008298:	b5688f3b 	.word	0xb5688f3b
 800829c:	3fa48228 	.word	0x3fa48228
 80082a0:	0e884455 	.word	0x0e884455
 80082a4:	3fc9c155 	.word	0x3fc9c155
 80082a8:	03eb6f7d 	.word	0x03eb6f7d
 80082ac:	3fd4d612 	.word	0x3fd4d612
 80082b0:	55555555 	.word	0x55555555
 80082b4:	3fc55555 	.word	0x3fc55555
 80082b8:	b12e9282 	.word	0xb12e9282
 80082bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80082c0:	1b8d0159 	.word	0x1b8d0159
 80082c4:	3fe6066c 	.word	0x3fe6066c
 80082c8:	9c598ac8 	.word	0x9c598ac8
 80082cc:	40002ae5 	.word	0x40002ae5
 80082d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80082d4:	40033a27 	.word	0x40033a27
 80082d8:	33145c07 	.word	0x33145c07
 80082dc:	3c91a626 	.word	0x3c91a626
 80082e0:	54442d18 	.word	0x54442d18
 80082e4:	3ff921fb 	.word	0x3ff921fb
 80082e8:	3fefffff 	.word	0x3fefffff
 80082ec:	3fdfffff 	.word	0x3fdfffff
 80082f0:	3c600000 	.word	0x3c600000
 80082f4:	3ff00000 	.word	0x3ff00000
 80082f8:	3fe00000 	.word	0x3fe00000
 80082fc:	ee10 2a10 	vmov	r2, s0
 8008300:	462b      	mov	r3, r5
 8008302:	496d      	ldr	r1, [pc, #436]	; (80084b8 <__ieee754_acos+0x4b8>)
 8008304:	2000      	movs	r0, #0
 8008306:	f7f7 ffdf 	bl	80002c8 <__aeabi_dsub>
 800830a:	4b6c      	ldr	r3, [pc, #432]	; (80084bc <__ieee754_acos+0x4bc>)
 800830c:	2200      	movs	r2, #0
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	4604      	mov	r4, r0
 8008314:	460d      	mov	r5, r1
 8008316:	ec45 4b10 	vmov	d0, r4, r5
 800831a:	f000 f8d1 	bl	80084c0 <__ieee754_sqrt>
 800831e:	a34e      	add	r3, pc, #312	; (adr r3, 8008458 <__ieee754_acos+0x458>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	4620      	mov	r0, r4
 8008326:	4629      	mov	r1, r5
 8008328:	ec59 8b10 	vmov	r8, r9, d0
 800832c:	f7f8 f984 	bl	8000638 <__aeabi_dmul>
 8008330:	a34b      	add	r3, pc, #300	; (adr r3, 8008460 <__ieee754_acos+0x460>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	f7f7 ffc9 	bl	80002cc <__adddf3>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f97b 	bl	8000638 <__aeabi_dmul>
 8008342:	a349      	add	r3, pc, #292	; (adr r3, 8008468 <__ieee754_acos+0x468>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f7 ffbe 	bl	80002c8 <__aeabi_dsub>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f972 	bl	8000638 <__aeabi_dmul>
 8008354:	a346      	add	r3, pc, #280	; (adr r3, 8008470 <__ieee754_acos+0x470>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ffb7 	bl	80002cc <__adddf3>
 800835e:	4622      	mov	r2, r4
 8008360:	462b      	mov	r3, r5
 8008362:	f7f8 f969 	bl	8000638 <__aeabi_dmul>
 8008366:	a344      	add	r3, pc, #272	; (adr r3, 8008478 <__ieee754_acos+0x478>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f7 ffac 	bl	80002c8 <__aeabi_dsub>
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	f7f8 f960 	bl	8000638 <__aeabi_dmul>
 8008378:	a341      	add	r3, pc, #260	; (adr r3, 8008480 <__ieee754_acos+0x480>)
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f7f7 ffa5 	bl	80002cc <__adddf3>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f7f8 f957 	bl	8000638 <__aeabi_dmul>
 800838a:	a33f      	add	r3, pc, #252	; (adr r3, 8008488 <__ieee754_acos+0x488>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f8 f94e 	bl	8000638 <__aeabi_dmul>
 800839c:	a33c      	add	r3, pc, #240	; (adr r3, 8008490 <__ieee754_acos+0x490>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff91 	bl	80002c8 <__aeabi_dsub>
 80083a6:	4622      	mov	r2, r4
 80083a8:	462b      	mov	r3, r5
 80083aa:	f7f8 f945 	bl	8000638 <__aeabi_dmul>
 80083ae:	a33a      	add	r3, pc, #232	; (adr r3, 8008498 <__ieee754_acos+0x498>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff8a 	bl	80002cc <__adddf3>
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	f7f8 f93c 	bl	8000638 <__aeabi_dmul>
 80083c0:	a337      	add	r3, pc, #220	; (adr r3, 80084a0 <__ieee754_acos+0x4a0>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 ff7f 	bl	80002c8 <__aeabi_dsub>
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	f7f8 f933 	bl	8000638 <__aeabi_dmul>
 80083d2:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <__ieee754_acos+0x4b8>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	f7f7 ff79 	bl	80002cc <__adddf3>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4650      	mov	r0, sl
 80083e0:	4659      	mov	r1, fp
 80083e2:	f7f8 fa53 	bl	800088c <__aeabi_ddiv>
 80083e6:	4642      	mov	r2, r8
 80083e8:	464b      	mov	r3, r9
 80083ea:	f7f8 f925 	bl	8000638 <__aeabi_dmul>
 80083ee:	2600      	movs	r6, #0
 80083f0:	4682      	mov	sl, r0
 80083f2:	468b      	mov	fp, r1
 80083f4:	4632      	mov	r2, r6
 80083f6:	464b      	mov	r3, r9
 80083f8:	4630      	mov	r0, r6
 80083fa:	4649      	mov	r1, r9
 80083fc:	f7f8 f91c 	bl	8000638 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4620      	mov	r0, r4
 8008406:	4629      	mov	r1, r5
 8008408:	f7f7 ff5e 	bl	80002c8 <__aeabi_dsub>
 800840c:	4632      	mov	r2, r6
 800840e:	4604      	mov	r4, r0
 8008410:	460d      	mov	r5, r1
 8008412:	464b      	mov	r3, r9
 8008414:	4640      	mov	r0, r8
 8008416:	4649      	mov	r1, r9
 8008418:	f7f7 ff58 	bl	80002cc <__adddf3>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4620      	mov	r0, r4
 8008422:	4629      	mov	r1, r5
 8008424:	f7f8 fa32 	bl	800088c <__aeabi_ddiv>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4650      	mov	r0, sl
 800842e:	4659      	mov	r1, fp
 8008430:	f7f7 ff4c 	bl	80002cc <__adddf3>
 8008434:	4632      	mov	r2, r6
 8008436:	464b      	mov	r3, r9
 8008438:	f7f7 ff48 	bl	80002cc <__adddf3>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	f7f7 ff44 	bl	80002cc <__adddf3>
 8008444:	e5fe      	b.n	8008044 <__ieee754_acos+0x44>
 8008446:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80084a8 <__ieee754_acos+0x4a8>
 800844a:	e5ed      	b.n	8008028 <__ieee754_acos+0x28>
 800844c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80084b0 <__ieee754_acos+0x4b0>
 8008450:	e5ea      	b.n	8008028 <__ieee754_acos+0x28>
 8008452:	bf00      	nop
 8008454:	f3af 8000 	nop.w
 8008458:	0dfdf709 	.word	0x0dfdf709
 800845c:	3f023de1 	.word	0x3f023de1
 8008460:	7501b288 	.word	0x7501b288
 8008464:	3f49efe0 	.word	0x3f49efe0
 8008468:	b5688f3b 	.word	0xb5688f3b
 800846c:	3fa48228 	.word	0x3fa48228
 8008470:	0e884455 	.word	0x0e884455
 8008474:	3fc9c155 	.word	0x3fc9c155
 8008478:	03eb6f7d 	.word	0x03eb6f7d
 800847c:	3fd4d612 	.word	0x3fd4d612
 8008480:	55555555 	.word	0x55555555
 8008484:	3fc55555 	.word	0x3fc55555
 8008488:	b12e9282 	.word	0xb12e9282
 800848c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008490:	1b8d0159 	.word	0x1b8d0159
 8008494:	3fe6066c 	.word	0x3fe6066c
 8008498:	9c598ac8 	.word	0x9c598ac8
 800849c:	40002ae5 	.word	0x40002ae5
 80084a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80084a4:	40033a27 	.word	0x40033a27
	...
 80084b0:	54442d18 	.word	0x54442d18
 80084b4:	3ff921fb 	.word	0x3ff921fb
 80084b8:	3ff00000 	.word	0x3ff00000
 80084bc:	3fe00000 	.word	0x3fe00000

080084c0 <__ieee754_sqrt>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	ec55 4b10 	vmov	r4, r5, d0
 80084c8:	4e55      	ldr	r6, [pc, #340]	; (8008620 <__ieee754_sqrt+0x160>)
 80084ca:	43ae      	bics	r6, r5
 80084cc:	ee10 0a10 	vmov	r0, s0
 80084d0:	ee10 3a10 	vmov	r3, s0
 80084d4:	462a      	mov	r2, r5
 80084d6:	4629      	mov	r1, r5
 80084d8:	d110      	bne.n	80084fc <__ieee754_sqrt+0x3c>
 80084da:	ee10 2a10 	vmov	r2, s0
 80084de:	462b      	mov	r3, r5
 80084e0:	f7f8 f8aa 	bl	8000638 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4620      	mov	r0, r4
 80084ea:	4629      	mov	r1, r5
 80084ec:	f7f7 feee 	bl	80002cc <__adddf3>
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	ec45 4b10 	vmov	d0, r4, r5
 80084f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	dc10      	bgt.n	8008522 <__ieee754_sqrt+0x62>
 8008500:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008504:	4330      	orrs	r0, r6
 8008506:	d0f5      	beq.n	80084f4 <__ieee754_sqrt+0x34>
 8008508:	b15d      	cbz	r5, 8008522 <__ieee754_sqrt+0x62>
 800850a:	ee10 2a10 	vmov	r2, s0
 800850e:	462b      	mov	r3, r5
 8008510:	ee10 0a10 	vmov	r0, s0
 8008514:	f7f7 fed8 	bl	80002c8 <__aeabi_dsub>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	f7f8 f9b6 	bl	800088c <__aeabi_ddiv>
 8008520:	e7e6      	b.n	80084f0 <__ieee754_sqrt+0x30>
 8008522:	1512      	asrs	r2, r2, #20
 8008524:	d074      	beq.n	8008610 <__ieee754_sqrt+0x150>
 8008526:	07d4      	lsls	r4, r2, #31
 8008528:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800852c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008534:	bf5e      	ittt	pl
 8008536:	0fda      	lsrpl	r2, r3, #31
 8008538:	005b      	lslpl	r3, r3, #1
 800853a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800853e:	2400      	movs	r4, #0
 8008540:	0fda      	lsrs	r2, r3, #31
 8008542:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008546:	107f      	asrs	r7, r7, #1
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	2516      	movs	r5, #22
 800854c:	4620      	mov	r0, r4
 800854e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008552:	1886      	adds	r6, r0, r2
 8008554:	428e      	cmp	r6, r1
 8008556:	bfde      	ittt	le
 8008558:	1b89      	suble	r1, r1, r6
 800855a:	18b0      	addle	r0, r6, r2
 800855c:	18a4      	addle	r4, r4, r2
 800855e:	0049      	lsls	r1, r1, #1
 8008560:	3d01      	subs	r5, #1
 8008562:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008566:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800856a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800856e:	d1f0      	bne.n	8008552 <__ieee754_sqrt+0x92>
 8008570:	462a      	mov	r2, r5
 8008572:	f04f 0e20 	mov.w	lr, #32
 8008576:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800857a:	4281      	cmp	r1, r0
 800857c:	eb06 0c05 	add.w	ip, r6, r5
 8008580:	dc02      	bgt.n	8008588 <__ieee754_sqrt+0xc8>
 8008582:	d113      	bne.n	80085ac <__ieee754_sqrt+0xec>
 8008584:	459c      	cmp	ip, r3
 8008586:	d811      	bhi.n	80085ac <__ieee754_sqrt+0xec>
 8008588:	f1bc 0f00 	cmp.w	ip, #0
 800858c:	eb0c 0506 	add.w	r5, ip, r6
 8008590:	da43      	bge.n	800861a <__ieee754_sqrt+0x15a>
 8008592:	2d00      	cmp	r5, #0
 8008594:	db41      	blt.n	800861a <__ieee754_sqrt+0x15a>
 8008596:	f100 0801 	add.w	r8, r0, #1
 800859a:	1a09      	subs	r1, r1, r0
 800859c:	459c      	cmp	ip, r3
 800859e:	bf88      	it	hi
 80085a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80085a4:	eba3 030c 	sub.w	r3, r3, ip
 80085a8:	4432      	add	r2, r6
 80085aa:	4640      	mov	r0, r8
 80085ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80085b0:	f1be 0e01 	subs.w	lr, lr, #1
 80085b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80085b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085c0:	d1db      	bne.n	800857a <__ieee754_sqrt+0xba>
 80085c2:	430b      	orrs	r3, r1
 80085c4:	d006      	beq.n	80085d4 <__ieee754_sqrt+0x114>
 80085c6:	1c50      	adds	r0, r2, #1
 80085c8:	bf13      	iteet	ne
 80085ca:	3201      	addne	r2, #1
 80085cc:	3401      	addeq	r4, #1
 80085ce:	4672      	moveq	r2, lr
 80085d0:	f022 0201 	bicne.w	r2, r2, #1
 80085d4:	1063      	asrs	r3, r4, #1
 80085d6:	0852      	lsrs	r2, r2, #1
 80085d8:	07e1      	lsls	r1, r4, #31
 80085da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80085de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80085e2:	bf48      	it	mi
 80085e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80085e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80085ec:	4614      	mov	r4, r2
 80085ee:	e781      	b.n	80084f4 <__ieee754_sqrt+0x34>
 80085f0:	0ad9      	lsrs	r1, r3, #11
 80085f2:	3815      	subs	r0, #21
 80085f4:	055b      	lsls	r3, r3, #21
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d0fa      	beq.n	80085f0 <__ieee754_sqrt+0x130>
 80085fa:	02cd      	lsls	r5, r1, #11
 80085fc:	d50a      	bpl.n	8008614 <__ieee754_sqrt+0x154>
 80085fe:	f1c2 0420 	rsb	r4, r2, #32
 8008602:	fa23 f404 	lsr.w	r4, r3, r4
 8008606:	1e55      	subs	r5, r2, #1
 8008608:	4093      	lsls	r3, r2
 800860a:	4321      	orrs	r1, r4
 800860c:	1b42      	subs	r2, r0, r5
 800860e:	e78a      	b.n	8008526 <__ieee754_sqrt+0x66>
 8008610:	4610      	mov	r0, r2
 8008612:	e7f0      	b.n	80085f6 <__ieee754_sqrt+0x136>
 8008614:	0049      	lsls	r1, r1, #1
 8008616:	3201      	adds	r2, #1
 8008618:	e7ef      	b.n	80085fa <__ieee754_sqrt+0x13a>
 800861a:	4680      	mov	r8, r0
 800861c:	e7bd      	b.n	800859a <__ieee754_sqrt+0xda>
 800861e:	bf00      	nop
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	00000000 	.word	0x00000000

08008628 <nan>:
 8008628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008630 <nan+0x8>
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	00000000 	.word	0x00000000
 8008634:	7ff80000 	.word	0x7ff80000

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
