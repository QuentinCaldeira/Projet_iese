
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f8  080046f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004770  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004770  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c540  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d90  00000000  00000000  0002c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224e3  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e547  00000000  00000000  00051c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc016  00000000  00000000  0006018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c1a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  0012c1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045cc 	.word	0x080045cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080045cc 	.word	0x080045cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f000 fe34 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fc92 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fc84 	bl	8000f84 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 fe07 	bl	80012e0 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 f94e 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fc1c 	bl	8000f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 800078a:	f107 010f 	add.w	r1, r7, #15
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_putchar+0x28>)
 8000794:	f002 fb6f 	bl	8002e76 <HAL_UART_Transmit>
	return ch;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80007ae:	230f      	movs	r3, #15
 80007b0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2132      	movs	r1, #50	; 0x32
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <who_am_i_sensors+0xc0>)
 80007c0:	f000 fed2 	bl	8001568 <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <who_am_i_sensors+0xc4>)
 80007d0:	f002 ff7e 	bl	80036d0 <puts>
 80007d4:	e017      	b.n	8000806 <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <who_am_i_sensors+0xc0>)
 80007e4:	f000 ffbe 	bl	8001764 <HAL_I2C_Master_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <who_am_i_sensors+0xc8>)
 80007f4:	f002 ff6c 	bl	80036d0 <puts>
 80007f8:	e005      	b.n	8000806 <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b33      	cmp	r3, #51	; 0x33
 80007fe:	d102      	bne.n	8000806 <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <who_am_i_sensors+0xcc>)
 8000802:	f002 fedf 	bl	80035c4 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000806:	234f      	movs	r3, #79	; 0x4f
 8000808:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	213c      	movs	r1, #60	; 0x3c
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <who_am_i_sensors+0xc0>)
 8000818:	f000 fea6 	bl	8001568 <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <who_am_i_sensors+0xc4>)
 8000828:	f002 ff52 	bl	80036d0 <puts>
 800082c:	e017      	b.n	800085e <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <who_am_i_sensors+0xc0>)
 800083c:	f000 ff92 	bl	8001764 <HAL_I2C_Master_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <who_am_i_sensors+0xc8>)
 800084c:	f002 ff40 	bl	80036d0 <puts>
 8000850:	e005      	b.n	800085e <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d102      	bne.n	800085e <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <who_am_i_sensors+0xd0>)
 800085a:	f002 feb3 	bl	80035c4 <iprintf>
    	}
    }
  }
}
 800085e:	bf00      	nop
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	080045e4 	.word	0x080045e4
 8000870:	080045f0 	.word	0x080045f0
 8000874:	080045fc 	.word	0x080045fc
 8000878:	0800461c 	.word	0x0800461c

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fa28 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f80a 	bl	800089c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f7ff fe94 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088c:	f000 f986 	bl	8000b9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000890:	f7ff fefe 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  who_am_i_sensors();
 8000894:	f7ff ff88 	bl	80007a8 <who_am_i_sensors>
 8000898:	e7fc      	b.n	8000894 <main+0x18>
	...

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2234      	movs	r2, #52	; 0x34
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fe82 	bl	80035b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <SystemClock_Config+0xd4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a29      	ldr	r2, [pc, #164]	; (8000970 <SystemClock_Config+0xd4>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <SystemClock_Config+0xd4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <SystemClock_Config+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <SystemClock_Config+0xd8>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <SystemClock_Config+0xd8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000910:	2310      	movs	r3, #16
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800091a:	2304      	movs	r3, #4
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4618      	mov	r0, r3
 800092c:	f001 ffb8 	bl	80028a0 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000936:	f000 f81f 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fc58 	bl	800220c <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000962:	f000 f809 	bl	8000978 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	; 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <Error_Handler+0x10>)
 8000982:	f002 fe1f 	bl	80035c4 <iprintf>
  {
 8000986:	e7fb      	b.n	8000980 <Error_Handler+0x8>
 8000988:	08004634 	.word	0x08004634

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 faa6 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f9a6 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
	}

return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e009      	b.n	8000a90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe79 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf1      	blt.n	8000a7c <_write+0x12>
	}
	return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_close>:

int _close(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aca:	605a      	str	r2, [r3, #4]
	return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_isatty>:

int _isatty(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 fd10 	bl	8003560 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200000e0 	.word	0x200000e0
 8000b74:	20000140 	.word	0x20000140

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f002 f902 	bl	8002ddc <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f7ff fecb 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000e4 	.word	0x200000e4
 8000bec:	40004400 	.word	0x40004400

08000bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_UART_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_UART_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_UART_MspInit+0x8c>)
 8000c66:	f000 f98d 	bl	8000f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ff65 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f002 fc5d 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fde3 	bl	800087c <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	08004700 	.word	0x08004700
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	2000013c 	.word	0x2000013c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f90d 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe40 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f917 	bl	8000f6a <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f8ed 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000128 	.word	0x20000128

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000128 	.word	0x20000128

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff47 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff5c 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffb0 	bl	8000ed8 <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e165      	b.n	800126c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8154 	bne.w	8001266 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d005      	beq.n	8000fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d130      	bne.n	8001038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	091b      	lsrs	r3, r3, #4
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	69b9      	ldr	r1, [r7, #24]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80ae 	beq.w	8001266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_GPIO_Init+0x300>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a5c      	ldr	r2, [pc, #368]	; (8001284 <HAL_GPIO_Init+0x300>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <HAL_GPIO_Init+0x300>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001126:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_GPIO_Init+0x304>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x308>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d025      	beq.n	800119e <HAL_GPIO_Init+0x21a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_GPIO_Init+0x30c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d01f      	beq.n	800119a <HAL_GPIO_Init+0x216>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_GPIO_Init+0x310>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d019      	beq.n	8001196 <HAL_GPIO_Init+0x212>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_GPIO_Init+0x314>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x20e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_GPIO_Init+0x318>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x20a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_GPIO_Init+0x31c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x206>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <HAL_GPIO_Init+0x320>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x202>
 8001182:	2306      	movs	r3, #6
 8001184:	e00c      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 8001186:	2307      	movs	r3, #7
 8001188:	e00a      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 800118a:	2305      	movs	r3, #5
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 800118e:	2304      	movs	r3, #4
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x21c>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <HAL_GPIO_Init+0x304>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <HAL_GPIO_Init+0x324>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <HAL_GPIO_Init+0x324>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x324>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_GPIO_Init+0x324>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x324>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_GPIO_Init+0x324>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f ae96 	bls.w	8000fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021800 	.word	0x40021800
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e12b      	b.n	800154a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f9f0 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001344:	f001 f854 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a81      	ldr	r2, [pc, #516]	; (8001554 <HAL_I2C_Init+0x274>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d807      	bhi.n	8001364 <HAL_I2C_Init+0x84>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a80      	ldr	r2, [pc, #512]	; (8001558 <HAL_I2C_Init+0x278>)
 8001358:	4293      	cmp	r3, r2
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e006      	b.n	8001372 <HAL_I2C_Init+0x92>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a7d      	ldr	r2, [pc, #500]	; (800155c <HAL_I2C_Init+0x27c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	bf94      	ite	ls
 800136c:	2301      	movls	r3, #1
 800136e:	2300      	movhi	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0e7      	b.n	800154a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a78      	ldr	r2, [pc, #480]	; (8001560 <HAL_I2C_Init+0x280>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0c9b      	lsrs	r3, r3, #18
 8001384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a6a      	ldr	r2, [pc, #424]	; (8001554 <HAL_I2C_Init+0x274>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d802      	bhi.n	80013b4 <HAL_I2C_Init+0xd4>
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	e009      	b.n	80013c8 <HAL_I2C_Init+0xe8>
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	4a69      	ldr	r2, [pc, #420]	; (8001564 <HAL_I2C_Init+0x284>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	495c      	ldr	r1, [pc, #368]	; (8001554 <HAL_I2C_Init+0x274>)
 80013e4:	428b      	cmp	r3, r1
 80013e6:	d819      	bhi.n	800141c <HAL_I2C_Init+0x13c>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e59      	subs	r1, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f6:	1c59      	adds	r1, r3, #1
 80013f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013fc:	400b      	ands	r3, r1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <HAL_I2C_Init+0x138>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e59      	subs	r1, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001410:	3301      	adds	r3, #1
 8001412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001416:	e051      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 8001418:	2304      	movs	r3, #4
 800141a:	e04f      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <HAL_I2C_Init+0x168>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	440b      	add	r3, r1
 8001432:	fbb0 f3f3 	udiv	r3, r0, r3
 8001436:	3301      	adds	r3, #1
 8001438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143c:	2b00      	cmp	r3, #0
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	e012      	b.n	800146e <HAL_I2C_Init+0x18e>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	0099      	lsls	r1, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	fbb0 f3f3 	udiv	r3, r0, r3
 800145e:	3301      	adds	r3, #1
 8001460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_I2C_Init+0x196>
 8001472:	2301      	movs	r3, #1
 8001474:	e022      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <HAL_I2C_Init+0x1bc>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1e58      	subs	r0, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6859      	ldr	r1, [r3, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	440b      	add	r3, r1
 800148c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	e00f      	b.n	80014bc <HAL_I2C_Init+0x1dc>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	0099      	lsls	r1, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	6809      	ldr	r1, [r1, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6911      	ldr	r1, [r2, #16]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68d2      	ldr	r2, [r2, #12]
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	000186a0 	.word	0x000186a0
 8001558:	001e847f 	.word	0x001e847f
 800155c:	003d08ff 	.word	0x003d08ff
 8001560:	431bde83 	.word	0x431bde83
 8001564:	10624dd3 	.word	0x10624dd3

08001568 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	817b      	strh	r3, [r7, #10]
 8001578:	4613      	mov	r3, r2
 800157a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fc10 	bl	8000da0 <HAL_GetTick>
 8001580:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b20      	cmp	r3, #32
 800158c:	f040 80e0 	bne.w	8001750 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2319      	movs	r3, #25
 8001596:	2201      	movs	r2, #1
 8001598:	4970      	ldr	r1, [pc, #448]	; (800175c <HAL_I2C_Master_Transmit+0x1f4>)
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 fc58 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
 80015a8:	e0d3      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_I2C_Master_Transmit+0x50>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e0cc      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d007      	beq.n	80015de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2221      	movs	r2, #33	; 0x21
 80015f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2210      	movs	r2, #16
 80015fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	893a      	ldrh	r2, [r7, #8]
 800160e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a50      	ldr	r2, [pc, #320]	; (8001760 <HAL_I2C_Master_Transmit+0x1f8>)
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001620:	8979      	ldrh	r1, [r7, #10]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	6a3a      	ldr	r2, [r7, #32]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fac2 	bl	8001bb0 <I2C_MasterRequestWrite>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e08d      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800164c:	e066      	b.n	800171c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	6a39      	ldr	r1, [r7, #32]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fcd2 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00d      	beq.n	800167a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2b04      	cmp	r3, #4
 8001664:	d107      	bne.n	8001676 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11b      	bne.n	80016f0 <HAL_I2C_Master_Transmit+0x188>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d017      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6a39      	ldr	r1, [r7, #32]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fcc2 	bl	800207e <I2C_WaitOnBTFFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2b04      	cmp	r3, #4
 8001706:	d107      	bne.n	8001718 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e01a      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d194      	bne.n	800164e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	00100002 	.word	0x00100002
 8001760:	ffff0000 	.word	0xffff0000

08001764 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	817b      	strh	r3, [r7, #10]
 8001774:	4613      	mov	r3, r2
 8001776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fb12 	bl	8000da0 <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b20      	cmp	r3, #32
 8001788:	f040 820b 	bne.w	8001ba2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2319      	movs	r3, #25
 8001792:	2201      	movs	r2, #1
 8001794:	497c      	ldr	r1, [pc, #496]	; (8001988 <HAL_I2C_Master_Receive+0x224>)
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fb5a 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	e1fe      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Master_Receive+0x50>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e1f7      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d007      	beq.n	80017da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0201 	orr.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2222      	movs	r2, #34	; 0x22
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2210      	movs	r2, #16
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a5c      	ldr	r2, [pc, #368]	; (800198c <HAL_I2C_Master_Receive+0x228>)
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fa46 	bl	8001cb4 <I2C_MasterRequestRead>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1b8      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001836:	2b00      	cmp	r3, #0
 8001838:	d113      	bne.n	8001862 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e18c      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	2b01      	cmp	r3, #1
 8001868:	d11b      	bne.n	80018a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e16c      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d11b      	bne.n	80018e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	e14c      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001908:	e138      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	2b03      	cmp	r3, #3
 8001910:	f200 80f1 	bhi.w	8001af6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b01      	cmp	r3, #1
 800191a:	d123      	bne.n	8001964 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fbed 	bl	8002100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e139      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001962:	e10b      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	2b02      	cmp	r3, #2
 800196a:	d14e      	bne.n	8001a0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001972:	2200      	movs	r2, #0
 8001974:	4906      	ldr	r1, [pc, #24]	; (8001990 <HAL_I2C_Master_Receive+0x22c>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa6a 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e10e      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
 8001986:	bf00      	nop
 8001988:	00100002 	.word	0x00100002
 800198c:	ffff0000 	.word	0xffff0000
 8001990:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a08:	e0b8      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	2200      	movs	r2, #0
 8001a12:	4966      	ldr	r1, [pc, #408]	; (8001bac <HAL_I2C_Master_Receive+0x448>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fa1b 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0bf      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	494f      	ldr	r1, [pc, #316]	; (8001bac <HAL_I2C_Master_Receive+0x448>)
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f9ed 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e091      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001af4:	e042      	b.n	8001b7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fb00 	bl	8002100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e04c      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d118      	bne.n	8001b7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f aec2 	bne.w	800190a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	00010004 	.word	0x00010004

08001bb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d006      	beq.n	8001bda <I2C_MasterRequestWrite+0x2a>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d003      	beq.n	8001bda <I2C_MasterRequestWrite+0x2a>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bd8:	d108      	bne.n	8001bec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e00b      	b.n	8001c04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	2b12      	cmp	r3, #18
 8001bf2:	d107      	bne.n	8001c04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f91d 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2a:	d103      	bne.n	8001c34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e035      	b.n	8001ca4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c40:	d108      	bne.n	8001c54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	e01b      	b.n	8001c8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c54:	897b      	ldrh	r3, [r7, #10]
 8001c56:	11db      	asrs	r3, r3, #7
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 0306 	and.w	r3, r3, #6
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f063 030f 	orn	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <I2C_MasterRequestWrite+0xfc>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f943 	bl	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e010      	b.n	8001ca4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <I2C_MasterRequestWrite+0x100>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f933 	bl	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	00010008 	.word	0x00010008
 8001cb0:	00010002 	.word	0x00010002

08001cb4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d006      	beq.n	8001cee <I2C_MasterRequestRead+0x3a>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d003      	beq.n	8001cee <I2C_MasterRequestRead+0x3a>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cec:	d108      	bne.n	8001d00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e00b      	b.n	8001d18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d107      	bne.n	8001d18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f893 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3e:	d103      	bne.n	8001d48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e079      	b.n	8001e40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d54:	d108      	bne.n	8001d68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	e05f      	b.n	8001e28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	11db      	asrs	r3, r3, #7
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 0306 	and.w	r3, r3, #6
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f063 030f 	orn	r3, r3, #15
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4930      	ldr	r1, [pc, #192]	; (8001e48 <I2C_MasterRequestRead+0x194>)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f8b9 	bl	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e054      	b.n	8001e40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4929      	ldr	r1, [pc, #164]	; (8001e4c <I2C_MasterRequestRead+0x198>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f8a9 	bl	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e044      	b.n	8001e40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f831 	bl	8001e50 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d103      	bne.n	8001e0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e017      	b.n	8001e40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e10:	897b      	ldrh	r3, [r7, #10]
 8001e12:	11db      	asrs	r3, r3, #7
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0306 	and.w	r3, r3, #6
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f063 030e 	orn	r3, r3, #14
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <I2C_MasterRequestRead+0x198>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f865 	bl	8001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	00010008 	.word	0x00010008
 8001e4c:	00010002 	.word	0x00010002

08001e50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e60:	e025      	b.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d021      	beq.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6a:	f7fe ff99 	bl	8000da0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d116      	bne.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e023      	b.n	8001ef6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10d      	bne.n	8001ed4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	e00c      	b.n	8001eee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d0b6      	beq.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0c:	e051      	b.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1c:	d123      	bne.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f043 0204 	orr.w	r2, r3, #4
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e046      	b.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d021      	beq.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7fe ff17 	bl	8000da0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e020      	b.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10c      	bne.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	e00b      	b.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d18d      	bne.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002008:	e02d      	b.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8ce 	bl	80021ac <I2C_IsAcknowledgeFailed>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e02d      	b.n	8002076 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d021      	beq.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7fe febd 	bl	8000da0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d116      	bne.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d1ca      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208a:	e02d      	b.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f88d 	bl	80021ac <I2C_IsAcknowledgeFailed>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e02d      	b.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a2:	d021      	beq.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a4:	f7fe fe7c 	bl	8000da0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d302      	bcc.n	80020ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e007      	b.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d1ca      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800210c:	e042      	b.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d119      	bne.n	8002150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0210 	mvn.w	r2, #16
 8002124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e029      	b.n	80021a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002150:	f7fe fe26 	bl	8000da0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d302      	bcc.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e007      	b.n	80021a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d1b5      	bne.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d11b      	bne.n	80021fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0cc      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d90c      	bls.n	8002248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d044      	beq.n	800232c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d119      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e067      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4934      	ldr	r1, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fd50 	bl	8000da0 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	e00a      	b.n	800231a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002304:	f7fe fd4c 	bl	8000da0 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e04f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 020c 	and.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	429a      	cmp	r2, r3
 800232a:	d1eb      	bne.n	8002304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d20c      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f855 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fcb0 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023c00 	.word	0x40023c00
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08004640 	.word	0x08004640
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_RCC_GetHCLKFreq+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023f4:	f7ff fff0 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0a9b      	lsrs	r3, r3, #10
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	08004650 	.word	0x08004650

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800241c:	f7ff ffdc 	bl	80023d8 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0b5b      	lsrs	r3, r3, #13
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08004650 	.word	0x08004650

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b0ae      	sub	sp, #184	; 0xb8
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002466:	4bcb      	ldr	r3, [pc, #812]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b0c      	cmp	r3, #12
 8002470:	f200 8206 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x440>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	080024b1 	.word	0x080024b1
 8002480:	08002881 	.word	0x08002881
 8002484:	08002881 	.word	0x08002881
 8002488:	08002881 	.word	0x08002881
 800248c:	080024b9 	.word	0x080024b9
 8002490:	08002881 	.word	0x08002881
 8002494:	08002881 	.word	0x08002881
 8002498:	08002881 	.word	0x08002881
 800249c:	080024c1 	.word	0x080024c1
 80024a0:	08002881 	.word	0x08002881
 80024a4:	08002881 	.word	0x08002881
 80024a8:	08002881 	.word	0x08002881
 80024ac:	080026b1 	.word	0x080026b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4bb9      	ldr	r3, [pc, #740]	; (8002798 <HAL_RCC_GetSysClockFreq+0x358>)
 80024b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80024b6:	e1e7      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b8:	4bb8      	ldr	r3, [pc, #736]	; (800279c <HAL_RCC_GetSysClockFreq+0x35c>)
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024be:	e1e3      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c0:	4bb4      	ldr	r3, [pc, #720]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024cc:	4bb1      	ldr	r3, [pc, #708]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d071      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d8:	4bae      	ldr	r3, [pc, #696]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024fe:	4622      	mov	r2, r4
 8002500:	462b      	mov	r3, r5
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002510:	0150      	lsls	r0, r2, #5
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4621      	mov	r1, r4
 8002518:	1a51      	subs	r1, r2, r1
 800251a:	6439      	str	r1, [r7, #64]	; 0x40
 800251c:	4629      	mov	r1, r5
 800251e:	eb63 0301 	sbc.w	r3, r3, r1
 8002522:	647b      	str	r3, [r7, #68]	; 0x44
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002530:	4649      	mov	r1, r9
 8002532:	018b      	lsls	r3, r1, #6
 8002534:	4641      	mov	r1, r8
 8002536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800253a:	4641      	mov	r1, r8
 800253c:	018a      	lsls	r2, r1, #6
 800253e:	4641      	mov	r1, r8
 8002540:	1a51      	subs	r1, r2, r1
 8002542:	63b9      	str	r1, [r7, #56]	; 0x38
 8002544:	4649      	mov	r1, r9
 8002546:	eb63 0301 	sbc.w	r3, r3, r1
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002558:	4649      	mov	r1, r9
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4641      	mov	r1, r8
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4641      	mov	r1, r8
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4622      	mov	r2, r4
 800256e:	189b      	adds	r3, r3, r2
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
 8002572:	462b      	mov	r3, r5
 8002574:	460a      	mov	r2, r1
 8002576:	eb42 0303 	adc.w	r3, r2, r3
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002588:	4629      	mov	r1, r5
 800258a:	024b      	lsls	r3, r1, #9
 800258c:	4621      	mov	r1, r4
 800258e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002592:	4621      	mov	r1, r4
 8002594:	024a      	lsls	r2, r1, #9
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025ac:	f7fd fe80 	bl	80002b0 <__aeabi_uldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4613      	mov	r3, r2
 80025b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ba:	e067      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025d6:	2300      	movs	r3, #0
 80025d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025de:	4622      	mov	r2, r4
 80025e0:	462b      	mov	r3, r5
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4621      	mov	r1, r4
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002610:	4649      	mov	r1, r9
 8002612:	018b      	lsls	r3, r1, #6
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261a:	4641      	mov	r1, r8
 800261c:	018a      	lsls	r2, r1, #6
 800261e:	4641      	mov	r1, r8
 8002620:	ebb2 0a01 	subs.w	sl, r2, r1
 8002624:	4649      	mov	r1, r9
 8002626:	eb63 0b01 	sbc.w	fp, r3, r1
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002636:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800263a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800263e:	4692      	mov	sl, r2
 8002640:	469b      	mov	fp, r3
 8002642:	4623      	mov	r3, r4
 8002644:	eb1a 0303 	adds.w	r3, sl, r3
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	462b      	mov	r3, r5
 800264c:	eb4b 0303 	adc.w	r3, fp, r3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002674:	2200      	movs	r2, #0
 8002676:	673b      	str	r3, [r7, #112]	; 0x70
 8002678:	677a      	str	r2, [r7, #116]	; 0x74
 800267a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800267e:	f7fd fe17 	bl	80002b0 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4613      	mov	r3, r2
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800269e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026ae:	e0eb      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d06b      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	2200      	movs	r2, #0
 80026d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026da:	663b      	str	r3, [r7, #96]	; 0x60
 80026dc:	2300      	movs	r3, #0
 80026de:	667b      	str	r3, [r7, #100]	; 0x64
 80026e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026e4:	4622      	mov	r2, r4
 80026e6:	462b      	mov	r3, r5
 80026e8:	f04f 0000 	mov.w	r0, #0
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	0159      	lsls	r1, r3, #5
 80026f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f6:	0150      	lsls	r0, r2, #5
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4621      	mov	r1, r4
 80026fe:	1a51      	subs	r1, r2, r1
 8002700:	61b9      	str	r1, [r7, #24]
 8002702:	4629      	mov	r1, r5
 8002704:	eb63 0301 	sbc.w	r3, r3, r1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002716:	4659      	mov	r1, fp
 8002718:	018b      	lsls	r3, r1, #6
 800271a:	4651      	mov	r1, sl
 800271c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002720:	4651      	mov	r1, sl
 8002722:	018a      	lsls	r2, r1, #6
 8002724:	4651      	mov	r1, sl
 8002726:	ebb2 0801 	subs.w	r8, r2, r1
 800272a:	4659      	mov	r1, fp
 800272c:	eb63 0901 	sbc.w	r9, r3, r1
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800273c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002740:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002744:	4690      	mov	r8, r2
 8002746:	4699      	mov	r9, r3
 8002748:	4623      	mov	r3, r4
 800274a:	eb18 0303 	adds.w	r3, r8, r3
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	462b      	mov	r3, r5
 8002752:	eb49 0303 	adc.w	r3, r9, r3
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002764:	4629      	mov	r1, r5
 8002766:	024b      	lsls	r3, r1, #9
 8002768:	4621      	mov	r1, r4
 800276a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800276e:	4621      	mov	r1, r4
 8002770:	024a      	lsls	r2, r1, #9
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800277a:	2200      	movs	r2, #0
 800277c:	65bb      	str	r3, [r7, #88]	; 0x58
 800277e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002780:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002784:	f7fd fd94 	bl	80002b0 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002792:	e065      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x420>
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_GetSysClockFreq+0x458>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	2200      	movs	r2, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	4611      	mov	r1, r2
 80027ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b0:	653b      	str	r3, [r7, #80]	; 0x50
 80027b2:	2300      	movs	r3, #0
 80027b4:	657b      	str	r3, [r7, #84]	; 0x54
 80027b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80027ba:	4642      	mov	r2, r8
 80027bc:	464b      	mov	r3, r9
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4641      	mov	r1, r8
 80027d4:	1a51      	subs	r1, r2, r1
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	4649      	mov	r1, r9
 80027da:	eb63 0301 	sbc.w	r3, r3, r1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027ec:	4659      	mov	r1, fp
 80027ee:	018b      	lsls	r3, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f6:	4651      	mov	r1, sl
 80027f8:	018a      	lsls	r2, r1, #6
 80027fa:	4651      	mov	r1, sl
 80027fc:	1a54      	subs	r4, r2, r1
 80027fe:	4659      	mov	r1, fp
 8002800:	eb63 0501 	sbc.w	r5, r3, r1
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	00eb      	lsls	r3, r5, #3
 800280e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002812:	00e2      	lsls	r2, r4, #3
 8002814:	4614      	mov	r4, r2
 8002816:	461d      	mov	r5, r3
 8002818:	4643      	mov	r3, r8
 800281a:	18e3      	adds	r3, r4, r3
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	464b      	mov	r3, r9
 8002820:	eb45 0303 	adc.w	r3, r5, r3
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002832:	4629      	mov	r1, r5
 8002834:	028b      	lsls	r3, r1, #10
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800283c:	4621      	mov	r1, r4
 800283e:	028a      	lsls	r2, r1, #10
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002848:	2200      	movs	r2, #0
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
 800284c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800284e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002852:	f7fd fd2d 	bl	80002b0 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4613      	mov	r3, r2
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_GetSysClockFreq+0x458>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0f1b      	lsrs	r3, r3, #28
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800286e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800287e:	e003      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800288c:	4618      	mov	r0, r3
 800288e:	37b8      	adds	r7, #184	; 0xb8
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	00f42400 	.word	0x00f42400

080028a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e28d      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8083 	beq.w	80029c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028c0:	4b94      	ldr	r3, [pc, #592]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d019      	beq.n	8002900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028cc:	4b91      	ldr	r3, [pc, #580]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fe:	d10b      	bne.n	8002918 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	4b84      	ldr	r3, [pc, #528]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <HAL_RCC_OscConfig+0x124>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d157      	bne.n	80029c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e25a      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x90>
 8002922:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a7b      	ldr	r2, [pc, #492]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xcc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xb4>
 800293a:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a75      	ldr	r2, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a72      	ldr	r2, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xcc>
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fa14 	bl	8000da0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fa10 	bl	8000da0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e21f      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xdc>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fa00 	bl	8000da0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe f9fc 	bl	8000da0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e20b      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x104>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06f      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029d2:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d017      	beq.n	8002a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x186>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1d3      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4937      	ldr	r1, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe f9a9 	bl	8000da0 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe f9a5 	bl	8000da0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1b4      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4925      	ldr	r1, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f988 	bl	8000da0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe f984 	bl	8000da0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e193      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d036      	beq.n	8002b2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f968 	bl	8000da0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe f964 	bl	8000da0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e173      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x234>
 8002af2:	e01b      	b.n	8002b2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe f951 	bl	8000da0 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e00e      	b.n	8002b20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe f94d 	bl	8000da0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d907      	bls.n	8002b20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e15c      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
 8002b14:	40023800 	.word	0x40023800
 8002b18:	42470000 	.word	0x42470000
 8002b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b8a      	ldr	r3, [pc, #552]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ea      	bne.n	8002b02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8097 	beq.w	8002c68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3e:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe f90d 	bl	8000da0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe f909 	bl	8000da0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e118      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x4b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x31e>
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a65      	ldr	r2, [pc, #404]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	e01c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x358>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x340>
 8002bc6:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a60      	ldr	r2, [pc, #384]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x358>
 8002be0:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a59      	ldr	r2, [pc, #356]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a56      	ldr	r2, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	f023 0304 	bic.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe f8ce 	bl	8000da0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe f8ca 	bl	8000da0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0d7      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ee      	beq.n	8002c08 <HAL_RCC_OscConfig+0x368>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe f8b8 	bl	8000da0 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe f8b4 	bl	8000da0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0c1      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1ee      	bne.n	8002c34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80ad 	beq.w	8002dcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d060      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d145      	bne.n	8002d12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f888 	bl	8000da0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe f884 	bl	8000da0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e093      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	019b      	lsls	r3, r3, #6
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	071b      	lsls	r3, r3, #28
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe f859 	bl	8000da0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe f855 	bl	8000da0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e064      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x452>
 8002d10:	e05c      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x4b4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe f842 	bl	8000da0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe f83e 	bl	8000da0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04d      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x480>
 8002d3e:	e045      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e040      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x538>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d030      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d122      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d119      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10f      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e03f      	b.n	8002e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fef4 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f929 	bl	8003078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d17c      	bne.n	8002f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit+0x2c>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e075      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Transmit+0x3e>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e06e      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	; 0x21
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fd ff69 	bl	8000da0 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x82>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f08:	e02a      	b.n	8002f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f840 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e036      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cf      	bne.n	8002f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f810 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b090      	sub	sp, #64	; 0x40
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	e050      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d04c      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x30>
 8002fba:	f7fd fef1 	bl	8000da0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d241      	bcs.n	800304e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fea:	637a      	str	r2, [r7, #52]	; 0x34
 8002fec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	613b      	str	r3, [r7, #16]
   return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3314      	adds	r3, #20
 800301c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800301e:	623a      	str	r2, [r7, #32]
 8003020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	69f9      	ldr	r1, [r7, #28]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	61bb      	str	r3, [r7, #24]
   return(result);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e00f      	b.n	800306e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	429a      	cmp	r2, r3
 800306a:	d09f      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3740      	adds	r7, #64	; 0x40
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b0c0      	sub	sp, #256	; 0x100
 800307e:	af00      	add	r7, sp, #0
 8003080:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	68d9      	ldr	r1, [r3, #12]
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	ea40 0301 	orr.w	r3, r0, r1
 80030a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030d0:	f021 010c 	bic.w	r1, r1, #12
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030de:	430b      	orrs	r3, r1
 80030e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	ea40 0301 	orr.w	r3, r0, r1
 80030fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <UART_SetConfig+0x2cc>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d005      	beq.n	8003118 <UART_SetConfig+0xa0>
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <UART_SetConfig+0x2d0>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d104      	bne.n	8003122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7ff f97e 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 800311c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003120:	e003      	b.n	800312a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7ff f965 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8003126:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003134:	f040 810c 	bne.w	8003350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800314a:	4622      	mov	r2, r4
 800314c:	462b      	mov	r3, r5
 800314e:	1891      	adds	r1, r2, r2
 8003150:	65b9      	str	r1, [r7, #88]	; 0x58
 8003152:	415b      	adcs	r3, r3
 8003154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800315a:	4621      	mov	r1, r4
 800315c:	eb12 0801 	adds.w	r8, r2, r1
 8003160:	4629      	mov	r1, r5
 8003162:	eb43 0901 	adc.w	r9, r3, r1
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800317a:	4690      	mov	r8, r2
 800317c:	4699      	mov	r9, r3
 800317e:	4623      	mov	r3, r4
 8003180:	eb18 0303 	adds.w	r3, r8, r3
 8003184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003188:	462b      	mov	r3, r5
 800318a:	eb49 0303 	adc.w	r3, r9, r3
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800319e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031a6:	460b      	mov	r3, r1
 80031a8:	18db      	adds	r3, r3, r3
 80031aa:	653b      	str	r3, [r7, #80]	; 0x50
 80031ac:	4613      	mov	r3, r2
 80031ae:	eb42 0303 	adc.w	r3, r2, r3
 80031b2:	657b      	str	r3, [r7, #84]	; 0x54
 80031b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031bc:	f7fd f878 	bl	80002b0 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <UART_SetConfig+0x2d4>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011c      	lsls	r4, r3, #4
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80031e8:	415b      	adcs	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031f0:	4641      	mov	r1, r8
 80031f2:	eb12 0a01 	adds.w	sl, r2, r1
 80031f6:	4649      	mov	r1, r9
 80031f8:	eb43 0b01 	adc.w	fp, r3, r1
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800320c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003210:	4692      	mov	sl, r2
 8003212:	469b      	mov	fp, r3
 8003214:	4643      	mov	r3, r8
 8003216:	eb1a 0303 	adds.w	r3, sl, r3
 800321a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800321e:	464b      	mov	r3, r9
 8003220:	eb4b 0303 	adc.w	r3, fp, r3
 8003224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003234:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800323c:	460b      	mov	r3, r1
 800323e:	18db      	adds	r3, r3, r3
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
 8003242:	4613      	mov	r3, r2
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	647b      	str	r3, [r7, #68]	; 0x44
 800324a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800324e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003252:	f7fd f82d 	bl	80002b0 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4611      	mov	r1, r2
 800325c:	4b3b      	ldr	r3, [pc, #236]	; (800334c <UART_SetConfig+0x2d4>)
 800325e:	fba3 2301 	umull	r2, r3, r3, r1
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2264      	movs	r2, #100	; 0x64
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	1acb      	subs	r3, r1, r3
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003272:	4b36      	ldr	r3, [pc, #216]	; (800334c <UART_SetConfig+0x2d4>)
 8003274:	fba3 2302 	umull	r2, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003280:	441c      	add	r4, r3
 8003282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800328c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	63b9      	str	r1, [r7, #56]	; 0x38
 800329c:	415b      	adcs	r3, r3
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032a4:	4641      	mov	r1, r8
 80032a6:	1851      	adds	r1, r2, r1
 80032a8:	6339      	str	r1, [r7, #48]	; 0x30
 80032aa:	4649      	mov	r1, r9
 80032ac:	414b      	adcs	r3, r1
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032bc:	4659      	mov	r1, fp
 80032be:	00cb      	lsls	r3, r1, #3
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c6:	4651      	mov	r1, sl
 80032c8:	00ca      	lsls	r2, r1, #3
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	4642      	mov	r2, r8
 80032d2:	189b      	adds	r3, r3, r2
 80032d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032d8:	464b      	mov	r3, r9
 80032da:	460a      	mov	r2, r1
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032f8:	460b      	mov	r3, r1
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fe:	4613      	mov	r3, r2
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800330a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800330e:	f7fc ffcf 	bl	80002b0 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <UART_SetConfig+0x2d4>)
 8003318:	fba3 1302 	umull	r1, r3, r3, r2
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	2164      	movs	r1, #100	; 0x64
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	3332      	adds	r3, #50	; 0x32
 800332a:	4a08      	ldr	r2, [pc, #32]	; (800334c <UART_SetConfig+0x2d4>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4422      	add	r2, r4
 800333e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003340:	e105      	b.n	800354e <UART_SetConfig+0x4d6>
 8003342:	bf00      	nop
 8003344:	40011000 	.word	0x40011000
 8003348:	40011400 	.word	0x40011400
 800334c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003354:	2200      	movs	r2, #0
 8003356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800335a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800335e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003362:	4642      	mov	r2, r8
 8003364:	464b      	mov	r3, r9
 8003366:	1891      	adds	r1, r2, r2
 8003368:	6239      	str	r1, [r7, #32]
 800336a:	415b      	adcs	r3, r3
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003372:	4641      	mov	r1, r8
 8003374:	1854      	adds	r4, r2, r1
 8003376:	4649      	mov	r1, r9
 8003378:	eb43 0501 	adc.w	r5, r3, r1
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	00eb      	lsls	r3, r5, #3
 8003386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800338a:	00e2      	lsls	r2, r4, #3
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	4643      	mov	r3, r8
 8003392:	18e3      	adds	r3, r4, r3
 8003394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003398:	464b      	mov	r3, r9
 800339a:	eb45 0303 	adc.w	r3, r5, r3
 800339e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033be:	4629      	mov	r1, r5
 80033c0:	008b      	lsls	r3, r1, #2
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c8:	4621      	mov	r1, r4
 80033ca:	008a      	lsls	r2, r1, #2
 80033cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033d0:	f7fc ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <UART_SetConfig+0x4e4>)
 80033da:	fba3 2302 	umull	r2, r3, r3, r2
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	011c      	lsls	r4, r3, #4
 80033e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	1891      	adds	r1, r2, r2
 80033fa:	61b9      	str	r1, [r7, #24]
 80033fc:	415b      	adcs	r3, r3
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003404:	4641      	mov	r1, r8
 8003406:	1851      	adds	r1, r2, r1
 8003408:	6139      	str	r1, [r7, #16]
 800340a:	4649      	mov	r1, r9
 800340c:	414b      	adcs	r3, r1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800341c:	4659      	mov	r1, fp
 800341e:	00cb      	lsls	r3, r1, #3
 8003420:	4651      	mov	r1, sl
 8003422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003426:	4651      	mov	r1, sl
 8003428:	00ca      	lsls	r2, r1, #3
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	4603      	mov	r3, r0
 8003430:	4642      	mov	r2, r8
 8003432:	189b      	adds	r3, r3, r2
 8003434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003438:	464b      	mov	r3, r9
 800343a:	460a      	mov	r2, r1
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	67bb      	str	r3, [r7, #120]	; 0x78
 800344e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800345c:	4649      	mov	r1, r9
 800345e:	008b      	lsls	r3, r1, #2
 8003460:	4641      	mov	r1, r8
 8003462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003466:	4641      	mov	r1, r8
 8003468:	008a      	lsls	r2, r1, #2
 800346a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800346e:	f7fc ff1f 	bl	80002b0 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <UART_SetConfig+0x4e4>)
 8003478:	fba3 1302 	umull	r1, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	2164      	movs	r1, #100	; 0x64
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	3332      	adds	r3, #50	; 0x32
 800348a:	4a34      	ldr	r2, [pc, #208]	; (800355c <UART_SetConfig+0x4e4>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003496:	441c      	add	r4, r3
 8003498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800349c:	2200      	movs	r2, #0
 800349e:	673b      	str	r3, [r7, #112]	; 0x70
 80034a0:	677a      	str	r2, [r7, #116]	; 0x74
 80034a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034a6:	4642      	mov	r2, r8
 80034a8:	464b      	mov	r3, r9
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	415b      	adcs	r3, r3
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034b6:	4641      	mov	r1, r8
 80034b8:	1851      	adds	r1, r2, r1
 80034ba:	6039      	str	r1, [r7, #0]
 80034bc:	4649      	mov	r1, r9
 80034be:	414b      	adcs	r3, r1
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ce:	4659      	mov	r1, fp
 80034d0:	00cb      	lsls	r3, r1, #3
 80034d2:	4651      	mov	r1, sl
 80034d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d8:	4651      	mov	r1, sl
 80034da:	00ca      	lsls	r2, r1, #3
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	4603      	mov	r3, r0
 80034e2:	4642      	mov	r2, r8
 80034e4:	189b      	adds	r3, r3, r2
 80034e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034e8:	464b      	mov	r3, r9
 80034ea:	460a      	mov	r2, r1
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	663b      	str	r3, [r7, #96]	; 0x60
 80034fc:	667a      	str	r2, [r7, #100]	; 0x64
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800350a:	4649      	mov	r1, r9
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	4641      	mov	r1, r8
 8003510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003514:	4641      	mov	r1, r8
 8003516:	008a      	lsls	r2, r1, #2
 8003518:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800351c:	f7fc fec8 	bl	80002b0 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <UART_SetConfig+0x4e4>)
 8003526:	fba3 1302 	umull	r1, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2164      	movs	r1, #100	; 0x64
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	3332      	adds	r3, #50	; 0x32
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <UART_SetConfig+0x4e4>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4422      	add	r2, r4
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	bf00      	nop
 8003550:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	51eb851f 	.word	0x51eb851f

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000000c 	.word	0x2000000c

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f001 f824 	bl	80045cc <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	080046f8 	.word	0x080046f8
 80035a8:	080046f8 	.word	0x080046f8
 80035ac:	080046f8 	.word	0x080046f8
 80035b0:	080046fc 	.word	0x080046fc

080035b4 <memset>:
 80035b4:	4402      	add	r2, r0
 80035b6:	4603      	mov	r3, r0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d100      	bne.n	80035be <memset+0xa>
 80035bc:	4770      	bx	lr
 80035be:	f803 1b01 	strb.w	r1, [r3], #1
 80035c2:	e7f9      	b.n	80035b8 <memset+0x4>

080035c4 <iprintf>:
 80035c4:	b40f      	push	{r0, r1, r2, r3}
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <iprintf+0x2c>)
 80035c8:	b513      	push	{r0, r1, r4, lr}
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	b124      	cbz	r4, 80035d8 <iprintf+0x14>
 80035ce:	69a3      	ldr	r3, [r4, #24]
 80035d0:	b913      	cbnz	r3, 80035d8 <iprintf+0x14>
 80035d2:	4620      	mov	r0, r4
 80035d4:	f000 fa5e 	bl	8003a94 <__sinit>
 80035d8:	ab05      	add	r3, sp, #20
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	68a1      	ldr	r1, [r4, #8]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 fc67 	bl	8003eb4 <_vfiprintf_r>
 80035e6:	b002      	add	sp, #8
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ec:	b004      	add	sp, #16
 80035ee:	4770      	bx	lr
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <_puts_r>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	460e      	mov	r6, r1
 80035f8:	4605      	mov	r5, r0
 80035fa:	b118      	cbz	r0, 8003604 <_puts_r+0x10>
 80035fc:	6983      	ldr	r3, [r0, #24]
 80035fe:	b90b      	cbnz	r3, 8003604 <_puts_r+0x10>
 8003600:	f000 fa48 	bl	8003a94 <__sinit>
 8003604:	69ab      	ldr	r3, [r5, #24]
 8003606:	68ac      	ldr	r4, [r5, #8]
 8003608:	b913      	cbnz	r3, 8003610 <_puts_r+0x1c>
 800360a:	4628      	mov	r0, r5
 800360c:	f000 fa42 	bl	8003a94 <__sinit>
 8003610:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <_puts_r+0xd0>)
 8003612:	429c      	cmp	r4, r3
 8003614:	d120      	bne.n	8003658 <_puts_r+0x64>
 8003616:	686c      	ldr	r4, [r5, #4]
 8003618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800361a:	07db      	lsls	r3, r3, #31
 800361c:	d405      	bmi.n	800362a <_puts_r+0x36>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	0598      	lsls	r0, r3, #22
 8003622:	d402      	bmi.n	800362a <_puts_r+0x36>
 8003624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003626:	f000 fad3 	bl	8003bd0 <__retarget_lock_acquire_recursive>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	0719      	lsls	r1, r3, #28
 800362e:	d51d      	bpl.n	800366c <_puts_r+0x78>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	b1db      	cbz	r3, 800366c <_puts_r+0x78>
 8003634:	3e01      	subs	r6, #1
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800363c:	3b01      	subs	r3, #1
 800363e:	60a3      	str	r3, [r4, #8]
 8003640:	bb39      	cbnz	r1, 8003692 <_puts_r+0x9e>
 8003642:	2b00      	cmp	r3, #0
 8003644:	da38      	bge.n	80036b8 <_puts_r+0xc4>
 8003646:	4622      	mov	r2, r4
 8003648:	210a      	movs	r1, #10
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f848 	bl	80036e0 <__swbuf_r>
 8003650:	3001      	adds	r0, #1
 8003652:	d011      	beq.n	8003678 <_puts_r+0x84>
 8003654:	250a      	movs	r5, #10
 8003656:	e011      	b.n	800367c <_puts_r+0x88>
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <_puts_r+0xd4>)
 800365a:	429c      	cmp	r4, r3
 800365c:	d101      	bne.n	8003662 <_puts_r+0x6e>
 800365e:	68ac      	ldr	r4, [r5, #8]
 8003660:	e7da      	b.n	8003618 <_puts_r+0x24>
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <_puts_r+0xd8>)
 8003664:	429c      	cmp	r4, r3
 8003666:	bf08      	it	eq
 8003668:	68ec      	ldreq	r4, [r5, #12]
 800366a:	e7d5      	b.n	8003618 <_puts_r+0x24>
 800366c:	4621      	mov	r1, r4
 800366e:	4628      	mov	r0, r5
 8003670:	f000 f888 	bl	8003784 <__swsetup_r>
 8003674:	2800      	cmp	r0, #0
 8003676:	d0dd      	beq.n	8003634 <_puts_r+0x40>
 8003678:	f04f 35ff 	mov.w	r5, #4294967295
 800367c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800367e:	07da      	lsls	r2, r3, #31
 8003680:	d405      	bmi.n	800368e <_puts_r+0x9a>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	059b      	lsls	r3, r3, #22
 8003686:	d402      	bmi.n	800368e <_puts_r+0x9a>
 8003688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800368a:	f000 faa2 	bl	8003bd2 <__retarget_lock_release_recursive>
 800368e:	4628      	mov	r0, r5
 8003690:	bd70      	pop	{r4, r5, r6, pc}
 8003692:	2b00      	cmp	r3, #0
 8003694:	da04      	bge.n	80036a0 <_puts_r+0xac>
 8003696:	69a2      	ldr	r2, [r4, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	dc06      	bgt.n	80036aa <_puts_r+0xb6>
 800369c:	290a      	cmp	r1, #10
 800369e:	d004      	beq.n	80036aa <_puts_r+0xb6>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	6022      	str	r2, [r4, #0]
 80036a6:	7019      	strb	r1, [r3, #0]
 80036a8:	e7c5      	b.n	8003636 <_puts_r+0x42>
 80036aa:	4622      	mov	r2, r4
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 f817 	bl	80036e0 <__swbuf_r>
 80036b2:	3001      	adds	r0, #1
 80036b4:	d1bf      	bne.n	8003636 <_puts_r+0x42>
 80036b6:	e7df      	b.n	8003678 <_puts_r+0x84>
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	250a      	movs	r5, #10
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	6022      	str	r2, [r4, #0]
 80036c0:	701d      	strb	r5, [r3, #0]
 80036c2:	e7db      	b.n	800367c <_puts_r+0x88>
 80036c4:	0800467c 	.word	0x0800467c
 80036c8:	0800469c 	.word	0x0800469c
 80036cc:	0800465c 	.word	0x0800465c

080036d0 <puts>:
 80036d0:	4b02      	ldr	r3, [pc, #8]	; (80036dc <puts+0xc>)
 80036d2:	4601      	mov	r1, r0
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	f7ff bf8d 	b.w	80035f4 <_puts_r>
 80036da:	bf00      	nop
 80036dc:	2000000c 	.word	0x2000000c

080036e0 <__swbuf_r>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	460e      	mov	r6, r1
 80036e4:	4614      	mov	r4, r2
 80036e6:	4605      	mov	r5, r0
 80036e8:	b118      	cbz	r0, 80036f2 <__swbuf_r+0x12>
 80036ea:	6983      	ldr	r3, [r0, #24]
 80036ec:	b90b      	cbnz	r3, 80036f2 <__swbuf_r+0x12>
 80036ee:	f000 f9d1 	bl	8003a94 <__sinit>
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <__swbuf_r+0x98>)
 80036f4:	429c      	cmp	r4, r3
 80036f6:	d12b      	bne.n	8003750 <__swbuf_r+0x70>
 80036f8:	686c      	ldr	r4, [r5, #4]
 80036fa:	69a3      	ldr	r3, [r4, #24]
 80036fc:	60a3      	str	r3, [r4, #8]
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	071a      	lsls	r2, r3, #28
 8003702:	d52f      	bpl.n	8003764 <__swbuf_r+0x84>
 8003704:	6923      	ldr	r3, [r4, #16]
 8003706:	b36b      	cbz	r3, 8003764 <__swbuf_r+0x84>
 8003708:	6923      	ldr	r3, [r4, #16]
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	1ac0      	subs	r0, r0, r3
 800370e:	6963      	ldr	r3, [r4, #20]
 8003710:	b2f6      	uxtb	r6, r6
 8003712:	4283      	cmp	r3, r0
 8003714:	4637      	mov	r7, r6
 8003716:	dc04      	bgt.n	8003722 <__swbuf_r+0x42>
 8003718:	4621      	mov	r1, r4
 800371a:	4628      	mov	r0, r5
 800371c:	f000 f926 	bl	800396c <_fflush_r>
 8003720:	bb30      	cbnz	r0, 8003770 <__swbuf_r+0x90>
 8003722:	68a3      	ldr	r3, [r4, #8]
 8003724:	3b01      	subs	r3, #1
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	6022      	str	r2, [r4, #0]
 800372e:	701e      	strb	r6, [r3, #0]
 8003730:	6963      	ldr	r3, [r4, #20]
 8003732:	3001      	adds	r0, #1
 8003734:	4283      	cmp	r3, r0
 8003736:	d004      	beq.n	8003742 <__swbuf_r+0x62>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	07db      	lsls	r3, r3, #31
 800373c:	d506      	bpl.n	800374c <__swbuf_r+0x6c>
 800373e:	2e0a      	cmp	r6, #10
 8003740:	d104      	bne.n	800374c <__swbuf_r+0x6c>
 8003742:	4621      	mov	r1, r4
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f911 	bl	800396c <_fflush_r>
 800374a:	b988      	cbnz	r0, 8003770 <__swbuf_r+0x90>
 800374c:	4638      	mov	r0, r7
 800374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <__swbuf_r+0x9c>)
 8003752:	429c      	cmp	r4, r3
 8003754:	d101      	bne.n	800375a <__swbuf_r+0x7a>
 8003756:	68ac      	ldr	r4, [r5, #8]
 8003758:	e7cf      	b.n	80036fa <__swbuf_r+0x1a>
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <__swbuf_r+0xa0>)
 800375c:	429c      	cmp	r4, r3
 800375e:	bf08      	it	eq
 8003760:	68ec      	ldreq	r4, [r5, #12]
 8003762:	e7ca      	b.n	80036fa <__swbuf_r+0x1a>
 8003764:	4621      	mov	r1, r4
 8003766:	4628      	mov	r0, r5
 8003768:	f000 f80c 	bl	8003784 <__swsetup_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	d0cb      	beq.n	8003708 <__swbuf_r+0x28>
 8003770:	f04f 37ff 	mov.w	r7, #4294967295
 8003774:	e7ea      	b.n	800374c <__swbuf_r+0x6c>
 8003776:	bf00      	nop
 8003778:	0800467c 	.word	0x0800467c
 800377c:	0800469c 	.word	0x0800469c
 8003780:	0800465c 	.word	0x0800465c

08003784 <__swsetup_r>:
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <__swsetup_r+0xcc>)
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	681d      	ldr	r5, [r3, #0]
 800378a:	4606      	mov	r6, r0
 800378c:	460c      	mov	r4, r1
 800378e:	b125      	cbz	r5, 800379a <__swsetup_r+0x16>
 8003790:	69ab      	ldr	r3, [r5, #24]
 8003792:	b913      	cbnz	r3, 800379a <__swsetup_r+0x16>
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f97d 	bl	8003a94 <__sinit>
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <__swsetup_r+0xd0>)
 800379c:	429c      	cmp	r4, r3
 800379e:	d10f      	bne.n	80037c0 <__swsetup_r+0x3c>
 80037a0:	686c      	ldr	r4, [r5, #4]
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037a8:	0719      	lsls	r1, r3, #28
 80037aa:	d42c      	bmi.n	8003806 <__swsetup_r+0x82>
 80037ac:	06dd      	lsls	r5, r3, #27
 80037ae:	d411      	bmi.n	80037d4 <__swsetup_r+0x50>
 80037b0:	2309      	movs	r3, #9
 80037b2:	6033      	str	r3, [r6, #0]
 80037b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	f04f 30ff 	mov.w	r0, #4294967295
 80037be:	e03e      	b.n	800383e <__swsetup_r+0xba>
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <__swsetup_r+0xd4>)
 80037c2:	429c      	cmp	r4, r3
 80037c4:	d101      	bne.n	80037ca <__swsetup_r+0x46>
 80037c6:	68ac      	ldr	r4, [r5, #8]
 80037c8:	e7eb      	b.n	80037a2 <__swsetup_r+0x1e>
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <__swsetup_r+0xd8>)
 80037cc:	429c      	cmp	r4, r3
 80037ce:	bf08      	it	eq
 80037d0:	68ec      	ldreq	r4, [r5, #12]
 80037d2:	e7e6      	b.n	80037a2 <__swsetup_r+0x1e>
 80037d4:	0758      	lsls	r0, r3, #29
 80037d6:	d512      	bpl.n	80037fe <__swsetup_r+0x7a>
 80037d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037da:	b141      	cbz	r1, 80037ee <__swsetup_r+0x6a>
 80037dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037e0:	4299      	cmp	r1, r3
 80037e2:	d002      	beq.n	80037ea <__swsetup_r+0x66>
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 fa5b 	bl	8003ca0 <_free_r>
 80037ea:	2300      	movs	r3, #0
 80037ec:	6363      	str	r3, [r4, #52]	; 0x34
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	6063      	str	r3, [r4, #4]
 80037fa:	6923      	ldr	r3, [r4, #16]
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	81a3      	strh	r3, [r4, #12]
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	b94b      	cbnz	r3, 800381e <__swsetup_r+0x9a>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003814:	d003      	beq.n	800381e <__swsetup_r+0x9a>
 8003816:	4621      	mov	r1, r4
 8003818:	4630      	mov	r0, r6
 800381a:	f000 fa01 	bl	8003c20 <__smakebuf_r>
 800381e:	89a0      	ldrh	r0, [r4, #12]
 8003820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003824:	f010 0301 	ands.w	r3, r0, #1
 8003828:	d00a      	beq.n	8003840 <__swsetup_r+0xbc>
 800382a:	2300      	movs	r3, #0
 800382c:	60a3      	str	r3, [r4, #8]
 800382e:	6963      	ldr	r3, [r4, #20]
 8003830:	425b      	negs	r3, r3
 8003832:	61a3      	str	r3, [r4, #24]
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	b943      	cbnz	r3, 800384a <__swsetup_r+0xc6>
 8003838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800383c:	d1ba      	bne.n	80037b4 <__swsetup_r+0x30>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	0781      	lsls	r1, r0, #30
 8003842:	bf58      	it	pl
 8003844:	6963      	ldrpl	r3, [r4, #20]
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	e7f4      	b.n	8003834 <__swsetup_r+0xb0>
 800384a:	2000      	movs	r0, #0
 800384c:	e7f7      	b.n	800383e <__swsetup_r+0xba>
 800384e:	bf00      	nop
 8003850:	2000000c 	.word	0x2000000c
 8003854:	0800467c 	.word	0x0800467c
 8003858:	0800469c 	.word	0x0800469c
 800385c:	0800465c 	.word	0x0800465c

08003860 <__sflush_r>:
 8003860:	898a      	ldrh	r2, [r1, #12]
 8003862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003866:	4605      	mov	r5, r0
 8003868:	0710      	lsls	r0, r2, #28
 800386a:	460c      	mov	r4, r1
 800386c:	d458      	bmi.n	8003920 <__sflush_r+0xc0>
 800386e:	684b      	ldr	r3, [r1, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	dc05      	bgt.n	8003880 <__sflush_r+0x20>
 8003874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	dc02      	bgt.n	8003880 <__sflush_r+0x20>
 800387a:	2000      	movs	r0, #0
 800387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003882:	2e00      	cmp	r6, #0
 8003884:	d0f9      	beq.n	800387a <__sflush_r+0x1a>
 8003886:	2300      	movs	r3, #0
 8003888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800388c:	682f      	ldr	r7, [r5, #0]
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	d032      	beq.n	80038f8 <__sflush_r+0x98>
 8003892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	075a      	lsls	r2, r3, #29
 8003898:	d505      	bpl.n	80038a6 <__sflush_r+0x46>
 800389a:	6863      	ldr	r3, [r4, #4]
 800389c:	1ac0      	subs	r0, r0, r3
 800389e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038a0:	b10b      	cbz	r3, 80038a6 <__sflush_r+0x46>
 80038a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038a4:	1ac0      	subs	r0, r0, r3
 80038a6:	2300      	movs	r3, #0
 80038a8:	4602      	mov	r2, r0
 80038aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b0      	blx	r6
 80038b2:	1c43      	adds	r3, r0, #1
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	d106      	bne.n	80038c6 <__sflush_r+0x66>
 80038b8:	6829      	ldr	r1, [r5, #0]
 80038ba:	291d      	cmp	r1, #29
 80038bc:	d82c      	bhi.n	8003918 <__sflush_r+0xb8>
 80038be:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <__sflush_r+0x108>)
 80038c0:	40ca      	lsrs	r2, r1
 80038c2:	07d6      	lsls	r6, r2, #31
 80038c4:	d528      	bpl.n	8003918 <__sflush_r+0xb8>
 80038c6:	2200      	movs	r2, #0
 80038c8:	6062      	str	r2, [r4, #4]
 80038ca:	04d9      	lsls	r1, r3, #19
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	6022      	str	r2, [r4, #0]
 80038d0:	d504      	bpl.n	80038dc <__sflush_r+0x7c>
 80038d2:	1c42      	adds	r2, r0, #1
 80038d4:	d101      	bne.n	80038da <__sflush_r+0x7a>
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	b903      	cbnz	r3, 80038dc <__sflush_r+0x7c>
 80038da:	6560      	str	r0, [r4, #84]	; 0x54
 80038dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038de:	602f      	str	r7, [r5, #0]
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d0ca      	beq.n	800387a <__sflush_r+0x1a>
 80038e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <__sflush_r+0x92>
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 f9d7 	bl	8003ca0 <_free_r>
 80038f2:	2000      	movs	r0, #0
 80038f4:	6360      	str	r0, [r4, #52]	; 0x34
 80038f6:	e7c1      	b.n	800387c <__sflush_r+0x1c>
 80038f8:	6a21      	ldr	r1, [r4, #32]
 80038fa:	2301      	movs	r3, #1
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b0      	blx	r6
 8003900:	1c41      	adds	r1, r0, #1
 8003902:	d1c7      	bne.n	8003894 <__sflush_r+0x34>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0c4      	beq.n	8003894 <__sflush_r+0x34>
 800390a:	2b1d      	cmp	r3, #29
 800390c:	d001      	beq.n	8003912 <__sflush_r+0xb2>
 800390e:	2b16      	cmp	r3, #22
 8003910:	d101      	bne.n	8003916 <__sflush_r+0xb6>
 8003912:	602f      	str	r7, [r5, #0]
 8003914:	e7b1      	b.n	800387a <__sflush_r+0x1a>
 8003916:	89a3      	ldrh	r3, [r4, #12]
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	e7ad      	b.n	800387c <__sflush_r+0x1c>
 8003920:	690f      	ldr	r7, [r1, #16]
 8003922:	2f00      	cmp	r7, #0
 8003924:	d0a9      	beq.n	800387a <__sflush_r+0x1a>
 8003926:	0793      	lsls	r3, r2, #30
 8003928:	680e      	ldr	r6, [r1, #0]
 800392a:	bf08      	it	eq
 800392c:	694b      	ldreq	r3, [r1, #20]
 800392e:	600f      	str	r7, [r1, #0]
 8003930:	bf18      	it	ne
 8003932:	2300      	movne	r3, #0
 8003934:	eba6 0807 	sub.w	r8, r6, r7
 8003938:	608b      	str	r3, [r1, #8]
 800393a:	f1b8 0f00 	cmp.w	r8, #0
 800393e:	dd9c      	ble.n	800387a <__sflush_r+0x1a>
 8003940:	6a21      	ldr	r1, [r4, #32]
 8003942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003944:	4643      	mov	r3, r8
 8003946:	463a      	mov	r2, r7
 8003948:	4628      	mov	r0, r5
 800394a:	47b0      	blx	r6
 800394c:	2800      	cmp	r0, #0
 800394e:	dc06      	bgt.n	800395e <__sflush_r+0xfe>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	e78e      	b.n	800387c <__sflush_r+0x1c>
 800395e:	4407      	add	r7, r0
 8003960:	eba8 0800 	sub.w	r8, r8, r0
 8003964:	e7e9      	b.n	800393a <__sflush_r+0xda>
 8003966:	bf00      	nop
 8003968:	20400001 	.word	0x20400001

0800396c <_fflush_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	690b      	ldr	r3, [r1, #16]
 8003970:	4605      	mov	r5, r0
 8003972:	460c      	mov	r4, r1
 8003974:	b913      	cbnz	r3, 800397c <_fflush_r+0x10>
 8003976:	2500      	movs	r5, #0
 8003978:	4628      	mov	r0, r5
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	b118      	cbz	r0, 8003986 <_fflush_r+0x1a>
 800397e:	6983      	ldr	r3, [r0, #24]
 8003980:	b90b      	cbnz	r3, 8003986 <_fflush_r+0x1a>
 8003982:	f000 f887 	bl	8003a94 <__sinit>
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <_fflush_r+0x6c>)
 8003988:	429c      	cmp	r4, r3
 800398a:	d11b      	bne.n	80039c4 <_fflush_r+0x58>
 800398c:	686c      	ldr	r4, [r5, #4]
 800398e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <_fflush_r+0xa>
 8003996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003998:	07d0      	lsls	r0, r2, #31
 800399a:	d404      	bmi.n	80039a6 <_fflush_r+0x3a>
 800399c:	0599      	lsls	r1, r3, #22
 800399e:	d402      	bmi.n	80039a6 <_fflush_r+0x3a>
 80039a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039a2:	f000 f915 	bl	8003bd0 <__retarget_lock_acquire_recursive>
 80039a6:	4628      	mov	r0, r5
 80039a8:	4621      	mov	r1, r4
 80039aa:	f7ff ff59 	bl	8003860 <__sflush_r>
 80039ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039b0:	07da      	lsls	r2, r3, #31
 80039b2:	4605      	mov	r5, r0
 80039b4:	d4e0      	bmi.n	8003978 <_fflush_r+0xc>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	059b      	lsls	r3, r3, #22
 80039ba:	d4dd      	bmi.n	8003978 <_fflush_r+0xc>
 80039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039be:	f000 f908 	bl	8003bd2 <__retarget_lock_release_recursive>
 80039c2:	e7d9      	b.n	8003978 <_fflush_r+0xc>
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <_fflush_r+0x70>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d101      	bne.n	80039ce <_fflush_r+0x62>
 80039ca:	68ac      	ldr	r4, [r5, #8]
 80039cc:	e7df      	b.n	800398e <_fflush_r+0x22>
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <_fflush_r+0x74>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	bf08      	it	eq
 80039d4:	68ec      	ldreq	r4, [r5, #12]
 80039d6:	e7da      	b.n	800398e <_fflush_r+0x22>
 80039d8:	0800467c 	.word	0x0800467c
 80039dc:	0800469c 	.word	0x0800469c
 80039e0:	0800465c 	.word	0x0800465c

080039e4 <std>:
 80039e4:	2300      	movs	r3, #0
 80039e6:	b510      	push	{r4, lr}
 80039e8:	4604      	mov	r4, r0
 80039ea:	e9c0 3300 	strd	r3, r3, [r0]
 80039ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039f2:	6083      	str	r3, [r0, #8]
 80039f4:	8181      	strh	r1, [r0, #12]
 80039f6:	6643      	str	r3, [r0, #100]	; 0x64
 80039f8:	81c2      	strh	r2, [r0, #14]
 80039fa:	6183      	str	r3, [r0, #24]
 80039fc:	4619      	mov	r1, r3
 80039fe:	2208      	movs	r2, #8
 8003a00:	305c      	adds	r0, #92	; 0x5c
 8003a02:	f7ff fdd7 	bl	80035b4 <memset>
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <std+0x38>)
 8003a08:	6263      	str	r3, [r4, #36]	; 0x24
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <std+0x3c>)
 8003a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <std+0x40>)
 8003a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <std+0x44>)
 8003a14:	6224      	str	r4, [r4, #32]
 8003a16:	6323      	str	r3, [r4, #48]	; 0x30
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800445d 	.word	0x0800445d
 8003a20:	0800447f 	.word	0x0800447f
 8003a24:	080044b7 	.word	0x080044b7
 8003a28:	080044db 	.word	0x080044db

08003a2c <_cleanup_r>:
 8003a2c:	4901      	ldr	r1, [pc, #4]	; (8003a34 <_cleanup_r+0x8>)
 8003a2e:	f000 b8af 	b.w	8003b90 <_fwalk_reent>
 8003a32:	bf00      	nop
 8003a34:	0800396d 	.word	0x0800396d

08003a38 <__sfmoreglue>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	2268      	movs	r2, #104	; 0x68
 8003a3c:	1e4d      	subs	r5, r1, #1
 8003a3e:	4355      	muls	r5, r2
 8003a40:	460e      	mov	r6, r1
 8003a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a46:	f000 f997 	bl	8003d78 <_malloc_r>
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	b140      	cbz	r0, 8003a60 <__sfmoreglue+0x28>
 8003a4e:	2100      	movs	r1, #0
 8003a50:	e9c0 1600 	strd	r1, r6, [r0]
 8003a54:	300c      	adds	r0, #12
 8003a56:	60a0      	str	r0, [r4, #8]
 8003a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a5c:	f7ff fdaa 	bl	80035b4 <memset>
 8003a60:	4620      	mov	r0, r4
 8003a62:	bd70      	pop	{r4, r5, r6, pc}

08003a64 <__sfp_lock_acquire>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__sfp_lock_acquire+0x8>)
 8003a66:	f000 b8b3 	b.w	8003bd0 <__retarget_lock_acquire_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	2000012d 	.word	0x2000012d

08003a70 <__sfp_lock_release>:
 8003a70:	4801      	ldr	r0, [pc, #4]	; (8003a78 <__sfp_lock_release+0x8>)
 8003a72:	f000 b8ae 	b.w	8003bd2 <__retarget_lock_release_recursive>
 8003a76:	bf00      	nop
 8003a78:	2000012d 	.word	0x2000012d

08003a7c <__sinit_lock_acquire>:
 8003a7c:	4801      	ldr	r0, [pc, #4]	; (8003a84 <__sinit_lock_acquire+0x8>)
 8003a7e:	f000 b8a7 	b.w	8003bd0 <__retarget_lock_acquire_recursive>
 8003a82:	bf00      	nop
 8003a84:	2000012e 	.word	0x2000012e

08003a88 <__sinit_lock_release>:
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <__sinit_lock_release+0x8>)
 8003a8a:	f000 b8a2 	b.w	8003bd2 <__retarget_lock_release_recursive>
 8003a8e:	bf00      	nop
 8003a90:	2000012e 	.word	0x2000012e

08003a94 <__sinit>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	4604      	mov	r4, r0
 8003a98:	f7ff fff0 	bl	8003a7c <__sinit_lock_acquire>
 8003a9c:	69a3      	ldr	r3, [r4, #24]
 8003a9e:	b11b      	cbz	r3, 8003aa8 <__sinit+0x14>
 8003aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa4:	f7ff bff0 	b.w	8003a88 <__sinit_lock_release>
 8003aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003aac:	6523      	str	r3, [r4, #80]	; 0x50
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <__sinit+0x68>)
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <__sinit+0x6c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ab6:	42a3      	cmp	r3, r4
 8003ab8:	bf04      	itt	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	61a3      	streq	r3, [r4, #24]
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 f820 	bl	8003b04 <__sfp>
 8003ac4:	6060      	str	r0, [r4, #4]
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 f81c 	bl	8003b04 <__sfp>
 8003acc:	60a0      	str	r0, [r4, #8]
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 f818 	bl	8003b04 <__sfp>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	60e0      	str	r0, [r4, #12]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	6860      	ldr	r0, [r4, #4]
 8003adc:	f7ff ff82 	bl	80039e4 <std>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2109      	movs	r1, #9
 8003ae6:	f7ff ff7d 	bl	80039e4 <std>
 8003aea:	68e0      	ldr	r0, [r4, #12]
 8003aec:	2202      	movs	r2, #2
 8003aee:	2112      	movs	r1, #18
 8003af0:	f7ff ff78 	bl	80039e4 <std>
 8003af4:	2301      	movs	r3, #1
 8003af6:	61a3      	str	r3, [r4, #24]
 8003af8:	e7d2      	b.n	8003aa0 <__sinit+0xc>
 8003afa:	bf00      	nop
 8003afc:	08004658 	.word	0x08004658
 8003b00:	08003a2d 	.word	0x08003a2d

08003b04 <__sfp>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	4607      	mov	r7, r0
 8003b08:	f7ff ffac 	bl	8003a64 <__sfp_lock_acquire>
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <__sfp+0x84>)
 8003b0e:	681e      	ldr	r6, [r3, #0]
 8003b10:	69b3      	ldr	r3, [r6, #24]
 8003b12:	b913      	cbnz	r3, 8003b1a <__sfp+0x16>
 8003b14:	4630      	mov	r0, r6
 8003b16:	f7ff ffbd 	bl	8003a94 <__sinit>
 8003b1a:	3648      	adds	r6, #72	; 0x48
 8003b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	d503      	bpl.n	8003b2c <__sfp+0x28>
 8003b24:	6833      	ldr	r3, [r6, #0]
 8003b26:	b30b      	cbz	r3, 8003b6c <__sfp+0x68>
 8003b28:	6836      	ldr	r6, [r6, #0]
 8003b2a:	e7f7      	b.n	8003b1c <__sfp+0x18>
 8003b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b30:	b9d5      	cbnz	r5, 8003b68 <__sfp+0x64>
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <__sfp+0x88>)
 8003b34:	60e3      	str	r3, [r4, #12]
 8003b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b3c:	f000 f847 	bl	8003bce <__retarget_lock_init_recursive>
 8003b40:	f7ff ff96 	bl	8003a70 <__sfp_lock_release>
 8003b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b4c:	6025      	str	r5, [r4, #0]
 8003b4e:	61a5      	str	r5, [r4, #24]
 8003b50:	2208      	movs	r2, #8
 8003b52:	4629      	mov	r1, r5
 8003b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b58:	f7ff fd2c 	bl	80035b4 <memset>
 8003b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b64:	4620      	mov	r0, r4
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b68:	3468      	adds	r4, #104	; 0x68
 8003b6a:	e7d9      	b.n	8003b20 <__sfp+0x1c>
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	4638      	mov	r0, r7
 8003b70:	f7ff ff62 	bl	8003a38 <__sfmoreglue>
 8003b74:	4604      	mov	r4, r0
 8003b76:	6030      	str	r0, [r6, #0]
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d1d5      	bne.n	8003b28 <__sfp+0x24>
 8003b7c:	f7ff ff78 	bl	8003a70 <__sfp_lock_release>
 8003b80:	230c      	movs	r3, #12
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	e7ee      	b.n	8003b64 <__sfp+0x60>
 8003b86:	bf00      	nop
 8003b88:	08004658 	.word	0x08004658
 8003b8c:	ffff0001 	.word	0xffff0001

08003b90 <_fwalk_reent>:
 8003b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b94:	4606      	mov	r6, r0
 8003b96:	4688      	mov	r8, r1
 8003b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b9c:	2700      	movs	r7, #0
 8003b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ba6:	d505      	bpl.n	8003bb4 <_fwalk_reent+0x24>
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	2c00      	cmp	r4, #0
 8003bac:	d1f7      	bne.n	8003b9e <_fwalk_reent+0xe>
 8003bae:	4638      	mov	r0, r7
 8003bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb4:	89ab      	ldrh	r3, [r5, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d907      	bls.n	8003bca <_fwalk_reent+0x3a>
 8003bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	d003      	beq.n	8003bca <_fwalk_reent+0x3a>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	47c0      	blx	r8
 8003bc8:	4307      	orrs	r7, r0
 8003bca:	3568      	adds	r5, #104	; 0x68
 8003bcc:	e7e9      	b.n	8003ba2 <_fwalk_reent+0x12>

08003bce <__retarget_lock_init_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <__retarget_lock_acquire_recursive>:
 8003bd0:	4770      	bx	lr

08003bd2 <__retarget_lock_release_recursive>:
 8003bd2:	4770      	bx	lr

08003bd4 <__swhatbuf_r>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	460e      	mov	r6, r1
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	b096      	sub	sp, #88	; 0x58
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	da08      	bge.n	8003bf8 <__swhatbuf_r+0x24>
 8003be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	602a      	str	r2, [r5, #0]
 8003bee:	061a      	lsls	r2, r3, #24
 8003bf0:	d410      	bmi.n	8003c14 <__swhatbuf_r+0x40>
 8003bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bf6:	e00e      	b.n	8003c16 <__swhatbuf_r+0x42>
 8003bf8:	466a      	mov	r2, sp
 8003bfa:	f000 fc95 	bl	8004528 <_fstat_r>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	dbf1      	blt.n	8003be6 <__swhatbuf_r+0x12>
 8003c02:	9a01      	ldr	r2, [sp, #4]
 8003c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c0c:	425a      	negs	r2, r3
 8003c0e:	415a      	adcs	r2, r3
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	e7ee      	b.n	8003bf2 <__swhatbuf_r+0x1e>
 8003c14:	2340      	movs	r3, #64	; 0x40
 8003c16:	2000      	movs	r0, #0
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	b016      	add	sp, #88	; 0x58
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c20 <__smakebuf_r>:
 8003c20:	898b      	ldrh	r3, [r1, #12]
 8003c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c24:	079d      	lsls	r5, r3, #30
 8003c26:	4606      	mov	r6, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	d507      	bpl.n	8003c3c <__smakebuf_r+0x1c>
 8003c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	2301      	movs	r3, #1
 8003c36:	6163      	str	r3, [r4, #20]
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	ab01      	add	r3, sp, #4
 8003c3e:	466a      	mov	r2, sp
 8003c40:	f7ff ffc8 	bl	8003bd4 <__swhatbuf_r>
 8003c44:	9900      	ldr	r1, [sp, #0]
 8003c46:	4605      	mov	r5, r0
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 f895 	bl	8003d78 <_malloc_r>
 8003c4e:	b948      	cbnz	r0, 8003c64 <__smakebuf_r+0x44>
 8003c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c54:	059a      	lsls	r2, r3, #22
 8003c56:	d4ef      	bmi.n	8003c38 <__smakebuf_r+0x18>
 8003c58:	f023 0303 	bic.w	r3, r3, #3
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	e7e3      	b.n	8003c2c <__smakebuf_r+0xc>
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <__smakebuf_r+0x7c>)
 8003c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c68:	89a3      	ldrh	r3, [r4, #12]
 8003c6a:	6020      	str	r0, [r4, #0]
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	9b00      	ldr	r3, [sp, #0]
 8003c74:	6163      	str	r3, [r4, #20]
 8003c76:	9b01      	ldr	r3, [sp, #4]
 8003c78:	6120      	str	r0, [r4, #16]
 8003c7a:	b15b      	cbz	r3, 8003c94 <__smakebuf_r+0x74>
 8003c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 fc63 	bl	800454c <_isatty_r>
 8003c86:	b128      	cbz	r0, 8003c94 <__smakebuf_r+0x74>
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	89a0      	ldrh	r0, [r4, #12]
 8003c96:	4305      	orrs	r5, r0
 8003c98:	81a5      	strh	r5, [r4, #12]
 8003c9a:	e7cd      	b.n	8003c38 <__smakebuf_r+0x18>
 8003c9c:	08003a2d 	.word	0x08003a2d

08003ca0 <_free_r>:
 8003ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d044      	beq.n	8003d30 <_free_r+0x90>
 8003ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003caa:	9001      	str	r0, [sp, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f1a1 0404 	sub.w	r4, r1, #4
 8003cb2:	bfb8      	it	lt
 8003cb4:	18e4      	addlt	r4, r4, r3
 8003cb6:	f000 fc6b 	bl	8004590 <__malloc_lock>
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <_free_r+0x94>)
 8003cbc:	9801      	ldr	r0, [sp, #4]
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	b933      	cbnz	r3, 8003cd0 <_free_r+0x30>
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	6014      	str	r4, [r2, #0]
 8003cc6:	b003      	add	sp, #12
 8003cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ccc:	f000 bc66 	b.w	800459c <__malloc_unlock>
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	d908      	bls.n	8003ce6 <_free_r+0x46>
 8003cd4:	6825      	ldr	r5, [r4, #0]
 8003cd6:	1961      	adds	r1, r4, r5
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	bf01      	itttt	eq
 8003cdc:	6819      	ldreq	r1, [r3, #0]
 8003cde:	685b      	ldreq	r3, [r3, #4]
 8003ce0:	1949      	addeq	r1, r1, r5
 8003ce2:	6021      	streq	r1, [r4, #0]
 8003ce4:	e7ed      	b.n	8003cc2 <_free_r+0x22>
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b10b      	cbz	r3, 8003cf0 <_free_r+0x50>
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x46>
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	1855      	adds	r5, r2, r1
 8003cf4:	42a5      	cmp	r5, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x70>
 8003cf8:	6824      	ldr	r4, [r4, #0]
 8003cfa:	4421      	add	r1, r4
 8003cfc:	1854      	adds	r4, r2, r1
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	d1e0      	bne.n	8003cc6 <_free_r+0x26>
 8003d04:	681c      	ldr	r4, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	6053      	str	r3, [r2, #4]
 8003d0a:	4421      	add	r1, r4
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	e7da      	b.n	8003cc6 <_free_r+0x26>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x78>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6003      	str	r3, [r0, #0]
 8003d16:	e7d6      	b.n	8003cc6 <_free_r+0x26>
 8003d18:	6825      	ldr	r5, [r4, #0]
 8003d1a:	1961      	adds	r1, r4, r5
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	bf04      	itt	eq
 8003d20:	6819      	ldreq	r1, [r3, #0]
 8003d22:	685b      	ldreq	r3, [r3, #4]
 8003d24:	6063      	str	r3, [r4, #4]
 8003d26:	bf04      	itt	eq
 8003d28:	1949      	addeq	r1, r1, r5
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	6054      	str	r4, [r2, #4]
 8003d2e:	e7ca      	b.n	8003cc6 <_free_r+0x26>
 8003d30:	b003      	add	sp, #12
 8003d32:	bd30      	pop	{r4, r5, pc}
 8003d34:	20000130 	.word	0x20000130

08003d38 <sbrk_aligned>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4e0e      	ldr	r6, [pc, #56]	; (8003d74 <sbrk_aligned+0x3c>)
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	6831      	ldr	r1, [r6, #0]
 8003d40:	4605      	mov	r5, r0
 8003d42:	b911      	cbnz	r1, 8003d4a <sbrk_aligned+0x12>
 8003d44:	f000 fb7a 	bl	800443c <_sbrk_r>
 8003d48:	6030      	str	r0, [r6, #0]
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f000 fb75 	bl	800443c <_sbrk_r>
 8003d52:	1c43      	adds	r3, r0, #1
 8003d54:	d00a      	beq.n	8003d6c <sbrk_aligned+0x34>
 8003d56:	1cc4      	adds	r4, r0, #3
 8003d58:	f024 0403 	bic.w	r4, r4, #3
 8003d5c:	42a0      	cmp	r0, r4
 8003d5e:	d007      	beq.n	8003d70 <sbrk_aligned+0x38>
 8003d60:	1a21      	subs	r1, r4, r0
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fb6a 	bl	800443c <_sbrk_r>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d101      	bne.n	8003d70 <sbrk_aligned+0x38>
 8003d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8003d70:	4620      	mov	r0, r4
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	20000134 	.word	0x20000134

08003d78 <_malloc_r>:
 8003d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d7c:	1ccd      	adds	r5, r1, #3
 8003d7e:	f025 0503 	bic.w	r5, r5, #3
 8003d82:	3508      	adds	r5, #8
 8003d84:	2d0c      	cmp	r5, #12
 8003d86:	bf38      	it	cc
 8003d88:	250c      	movcc	r5, #12
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	db01      	blt.n	8003d94 <_malloc_r+0x1c>
 8003d90:	42a9      	cmp	r1, r5
 8003d92:	d905      	bls.n	8003da0 <_malloc_r+0x28>
 8003d94:	230c      	movs	r3, #12
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	2600      	movs	r6, #0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da0:	4e2e      	ldr	r6, [pc, #184]	; (8003e5c <_malloc_r+0xe4>)
 8003da2:	f000 fbf5 	bl	8004590 <__malloc_lock>
 8003da6:	6833      	ldr	r3, [r6, #0]
 8003da8:	461c      	mov	r4, r3
 8003daa:	bb34      	cbnz	r4, 8003dfa <_malloc_r+0x82>
 8003dac:	4629      	mov	r1, r5
 8003dae:	4638      	mov	r0, r7
 8003db0:	f7ff ffc2 	bl	8003d38 <sbrk_aligned>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	4604      	mov	r4, r0
 8003db8:	d14d      	bne.n	8003e56 <_malloc_r+0xde>
 8003dba:	6834      	ldr	r4, [r6, #0]
 8003dbc:	4626      	mov	r6, r4
 8003dbe:	2e00      	cmp	r6, #0
 8003dc0:	d140      	bne.n	8003e44 <_malloc_r+0xcc>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4638      	mov	r0, r7
 8003dc8:	eb04 0803 	add.w	r8, r4, r3
 8003dcc:	f000 fb36 	bl	800443c <_sbrk_r>
 8003dd0:	4580      	cmp	r8, r0
 8003dd2:	d13a      	bne.n	8003e4a <_malloc_r+0xd2>
 8003dd4:	6821      	ldr	r1, [r4, #0]
 8003dd6:	3503      	adds	r5, #3
 8003dd8:	1a6d      	subs	r5, r5, r1
 8003dda:	f025 0503 	bic.w	r5, r5, #3
 8003dde:	3508      	adds	r5, #8
 8003de0:	2d0c      	cmp	r5, #12
 8003de2:	bf38      	it	cc
 8003de4:	250c      	movcc	r5, #12
 8003de6:	4629      	mov	r1, r5
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7ff ffa5 	bl	8003d38 <sbrk_aligned>
 8003dee:	3001      	adds	r0, #1
 8003df0:	d02b      	beq.n	8003e4a <_malloc_r+0xd2>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	442b      	add	r3, r5
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	e00e      	b.n	8003e18 <_malloc_r+0xa0>
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	1b52      	subs	r2, r2, r5
 8003dfe:	d41e      	bmi.n	8003e3e <_malloc_r+0xc6>
 8003e00:	2a0b      	cmp	r2, #11
 8003e02:	d916      	bls.n	8003e32 <_malloc_r+0xba>
 8003e04:	1961      	adds	r1, r4, r5
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	6025      	str	r5, [r4, #0]
 8003e0a:	bf18      	it	ne
 8003e0c:	6059      	strne	r1, [r3, #4]
 8003e0e:	6863      	ldr	r3, [r4, #4]
 8003e10:	bf08      	it	eq
 8003e12:	6031      	streq	r1, [r6, #0]
 8003e14:	5162      	str	r2, [r4, r5]
 8003e16:	604b      	str	r3, [r1, #4]
 8003e18:	4638      	mov	r0, r7
 8003e1a:	f104 060b 	add.w	r6, r4, #11
 8003e1e:	f000 fbbd 	bl	800459c <__malloc_unlock>
 8003e22:	f026 0607 	bic.w	r6, r6, #7
 8003e26:	1d23      	adds	r3, r4, #4
 8003e28:	1af2      	subs	r2, r6, r3
 8003e2a:	d0b6      	beq.n	8003d9a <_malloc_r+0x22>
 8003e2c:	1b9b      	subs	r3, r3, r6
 8003e2e:	50a3      	str	r3, [r4, r2]
 8003e30:	e7b3      	b.n	8003d9a <_malloc_r+0x22>
 8003e32:	6862      	ldr	r2, [r4, #4]
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	bf0c      	ite	eq
 8003e38:	6032      	streq	r2, [r6, #0]
 8003e3a:	605a      	strne	r2, [r3, #4]
 8003e3c:	e7ec      	b.n	8003e18 <_malloc_r+0xa0>
 8003e3e:	4623      	mov	r3, r4
 8003e40:	6864      	ldr	r4, [r4, #4]
 8003e42:	e7b2      	b.n	8003daa <_malloc_r+0x32>
 8003e44:	4634      	mov	r4, r6
 8003e46:	6876      	ldr	r6, [r6, #4]
 8003e48:	e7b9      	b.n	8003dbe <_malloc_r+0x46>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f000 fba4 	bl	800459c <__malloc_unlock>
 8003e54:	e7a1      	b.n	8003d9a <_malloc_r+0x22>
 8003e56:	6025      	str	r5, [r4, #0]
 8003e58:	e7de      	b.n	8003e18 <_malloc_r+0xa0>
 8003e5a:	bf00      	nop
 8003e5c:	20000130 	.word	0x20000130

08003e60 <__sfputc_r>:
 8003e60:	6893      	ldr	r3, [r2, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	b410      	push	{r4}
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	da08      	bge.n	8003e7e <__sfputc_r+0x1e>
 8003e6c:	6994      	ldr	r4, [r2, #24]
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	db01      	blt.n	8003e76 <__sfputc_r+0x16>
 8003e72:	290a      	cmp	r1, #10
 8003e74:	d103      	bne.n	8003e7e <__sfputc_r+0x1e>
 8003e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e7a:	f7ff bc31 	b.w	80036e0 <__swbuf_r>
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	1c58      	adds	r0, r3, #1
 8003e82:	6010      	str	r0, [r2, #0]
 8003e84:	7019      	strb	r1, [r3, #0]
 8003e86:	4608      	mov	r0, r1
 8003e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <__sfputs_r>:
 8003e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	18d5      	adds	r5, r2, r3
 8003e98:	42ac      	cmp	r4, r5
 8003e9a:	d101      	bne.n	8003ea0 <__sfputs_r+0x12>
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e007      	b.n	8003eb0 <__sfputs_r+0x22>
 8003ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff ffda 	bl	8003e60 <__sfputc_r>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d1f3      	bne.n	8003e98 <__sfputs_r+0xa>
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb4 <_vfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	460d      	mov	r5, r1
 8003eba:	b09d      	sub	sp, #116	; 0x74
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	4698      	mov	r8, r3
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	b118      	cbz	r0, 8003ecc <_vfiprintf_r+0x18>
 8003ec4:	6983      	ldr	r3, [r0, #24]
 8003ec6:	b90b      	cbnz	r3, 8003ecc <_vfiprintf_r+0x18>
 8003ec8:	f7ff fde4 	bl	8003a94 <__sinit>
 8003ecc:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <_vfiprintf_r+0x240>)
 8003ece:	429d      	cmp	r5, r3
 8003ed0:	d11b      	bne.n	8003f0a <_vfiprintf_r+0x56>
 8003ed2:	6875      	ldr	r5, [r6, #4]
 8003ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed6:	07d9      	lsls	r1, r3, #31
 8003ed8:	d405      	bmi.n	8003ee6 <_vfiprintf_r+0x32>
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	059a      	lsls	r2, r3, #22
 8003ede:	d402      	bmi.n	8003ee6 <_vfiprintf_r+0x32>
 8003ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ee2:	f7ff fe75 	bl	8003bd0 <__retarget_lock_acquire_recursive>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	d501      	bpl.n	8003ef0 <_vfiprintf_r+0x3c>
 8003eec:	692b      	ldr	r3, [r5, #16]
 8003eee:	b9eb      	cbnz	r3, 8003f2c <_vfiprintf_r+0x78>
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff fc46 	bl	8003784 <__swsetup_r>
 8003ef8:	b1c0      	cbz	r0, 8003f2c <_vfiprintf_r+0x78>
 8003efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003efc:	07dc      	lsls	r4, r3, #31
 8003efe:	d50e      	bpl.n	8003f1e <_vfiprintf_r+0x6a>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b01d      	add	sp, #116	; 0x74
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <_vfiprintf_r+0x244>)
 8003f0c:	429d      	cmp	r5, r3
 8003f0e:	d101      	bne.n	8003f14 <_vfiprintf_r+0x60>
 8003f10:	68b5      	ldr	r5, [r6, #8]
 8003f12:	e7df      	b.n	8003ed4 <_vfiprintf_r+0x20>
 8003f14:	4b79      	ldr	r3, [pc, #484]	; (80040fc <_vfiprintf_r+0x248>)
 8003f16:	429d      	cmp	r5, r3
 8003f18:	bf08      	it	eq
 8003f1a:	68f5      	ldreq	r5, [r6, #12]
 8003f1c:	e7da      	b.n	8003ed4 <_vfiprintf_r+0x20>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	0598      	lsls	r0, r3, #22
 8003f22:	d4ed      	bmi.n	8003f00 <_vfiprintf_r+0x4c>
 8003f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f26:	f7ff fe54 	bl	8003bd2 <__retarget_lock_release_recursive>
 8003f2a:	e7e9      	b.n	8003f00 <_vfiprintf_r+0x4c>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f30:	2320      	movs	r3, #32
 8003f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004100 <_vfiprintf_r+0x24c>
 8003f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f44:	f04f 0901 	mov.w	r9, #1
 8003f48:	4623      	mov	r3, r4
 8003f4a:	469a      	mov	sl, r3
 8003f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f50:	b10a      	cbz	r2, 8003f56 <_vfiprintf_r+0xa2>
 8003f52:	2a25      	cmp	r2, #37	; 0x25
 8003f54:	d1f9      	bne.n	8003f4a <_vfiprintf_r+0x96>
 8003f56:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5a:	d00b      	beq.n	8003f74 <_vfiprintf_r+0xc0>
 8003f5c:	465b      	mov	r3, fp
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4629      	mov	r1, r5
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ff93 	bl	8003e8e <__sfputs_r>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	f000 80aa 	beq.w	80040c2 <_vfiprintf_r+0x20e>
 8003f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f70:	445a      	add	r2, fp
 8003f72:	9209      	str	r2, [sp, #36]	; 0x24
 8003f74:	f89a 3000 	ldrb.w	r3, [sl]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a2 	beq.w	80040c2 <_vfiprintf_r+0x20e>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f88:	f10a 0a01 	add.w	sl, sl, #1
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	9307      	str	r3, [sp, #28]
 8003f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f94:	931a      	str	r3, [sp, #104]	; 0x68
 8003f96:	4654      	mov	r4, sl
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9e:	4858      	ldr	r0, [pc, #352]	; (8004100 <_vfiprintf_r+0x24c>)
 8003fa0:	f7fc f936 	bl	8000210 <memchr>
 8003fa4:	9a04      	ldr	r2, [sp, #16]
 8003fa6:	b9d8      	cbnz	r0, 8003fe0 <_vfiprintf_r+0x12c>
 8003fa8:	06d1      	lsls	r1, r2, #27
 8003faa:	bf44      	itt	mi
 8003fac:	2320      	movmi	r3, #32
 8003fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb2:	0713      	lsls	r3, r2, #28
 8003fb4:	bf44      	itt	mi
 8003fb6:	232b      	movmi	r3, #43	; 0x2b
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d015      	beq.n	8003ff0 <_vfiprintf_r+0x13c>
 8003fc4:	9a07      	ldr	r2, [sp, #28]
 8003fc6:	4654      	mov	r4, sl
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f04f 0c0a 	mov.w	ip, #10
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd4:	3b30      	subs	r3, #48	; 0x30
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	d94e      	bls.n	8004078 <_vfiprintf_r+0x1c4>
 8003fda:	b1b0      	cbz	r0, 800400a <_vfiprintf_r+0x156>
 8003fdc:	9207      	str	r2, [sp, #28]
 8003fde:	e014      	b.n	800400a <_vfiprintf_r+0x156>
 8003fe0:	eba0 0308 	sub.w	r3, r0, r8
 8003fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	9304      	str	r3, [sp, #16]
 8003fec:	46a2      	mov	sl, r4
 8003fee:	e7d2      	b.n	8003f96 <_vfiprintf_r+0xe2>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d19      	adds	r1, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9103      	str	r1, [sp, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfbb      	ittet	lt
 8003ffc:	425b      	neglt	r3, r3
 8003ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8004002:	9307      	strge	r3, [sp, #28]
 8004004:	9307      	strlt	r3, [sp, #28]
 8004006:	bfb8      	it	lt
 8004008:	9204      	strlt	r2, [sp, #16]
 800400a:	7823      	ldrb	r3, [r4, #0]
 800400c:	2b2e      	cmp	r3, #46	; 0x2e
 800400e:	d10c      	bne.n	800402a <_vfiprintf_r+0x176>
 8004010:	7863      	ldrb	r3, [r4, #1]
 8004012:	2b2a      	cmp	r3, #42	; 0x2a
 8004014:	d135      	bne.n	8004082 <_vfiprintf_r+0x1ce>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	1d1a      	adds	r2, r3, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	9203      	str	r2, [sp, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	bfb8      	it	lt
 8004022:	f04f 33ff 	movlt.w	r3, #4294967295
 8004026:	3402      	adds	r4, #2
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004110 <_vfiprintf_r+0x25c>
 800402e:	7821      	ldrb	r1, [r4, #0]
 8004030:	2203      	movs	r2, #3
 8004032:	4650      	mov	r0, sl
 8004034:	f7fc f8ec 	bl	8000210 <memchr>
 8004038:	b140      	cbz	r0, 800404c <_vfiprintf_r+0x198>
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	eba0 000a 	sub.w	r0, r0, sl
 8004040:	fa03 f000 	lsl.w	r0, r3, r0
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	4303      	orrs	r3, r0
 8004048:	3401      	adds	r4, #1
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	482c      	ldr	r0, [pc, #176]	; (8004104 <_vfiprintf_r+0x250>)
 8004052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004056:	2206      	movs	r2, #6
 8004058:	f7fc f8da 	bl	8000210 <memchr>
 800405c:	2800      	cmp	r0, #0
 800405e:	d03f      	beq.n	80040e0 <_vfiprintf_r+0x22c>
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <_vfiprintf_r+0x254>)
 8004062:	bb1b      	cbnz	r3, 80040ac <_vfiprintf_r+0x1f8>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	3307      	adds	r3, #7
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	3308      	adds	r3, #8
 800406e:	9303      	str	r3, [sp, #12]
 8004070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004072:	443b      	add	r3, r7
 8004074:	9309      	str	r3, [sp, #36]	; 0x24
 8004076:	e767      	b.n	8003f48 <_vfiprintf_r+0x94>
 8004078:	fb0c 3202 	mla	r2, ip, r2, r3
 800407c:	460c      	mov	r4, r1
 800407e:	2001      	movs	r0, #1
 8004080:	e7a5      	b.n	8003fce <_vfiprintf_r+0x11a>
 8004082:	2300      	movs	r3, #0
 8004084:	3401      	adds	r4, #1
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	4619      	mov	r1, r3
 800408a:	f04f 0c0a 	mov.w	ip, #10
 800408e:	4620      	mov	r0, r4
 8004090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004094:	3a30      	subs	r2, #48	; 0x30
 8004096:	2a09      	cmp	r2, #9
 8004098:	d903      	bls.n	80040a2 <_vfiprintf_r+0x1ee>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0c5      	beq.n	800402a <_vfiprintf_r+0x176>
 800409e:	9105      	str	r1, [sp, #20]
 80040a0:	e7c3      	b.n	800402a <_vfiprintf_r+0x176>
 80040a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a6:	4604      	mov	r4, r0
 80040a8:	2301      	movs	r3, #1
 80040aa:	e7f0      	b.n	800408e <_vfiprintf_r+0x1da>
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	462a      	mov	r2, r5
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <_vfiprintf_r+0x258>)
 80040b4:	a904      	add	r1, sp, #16
 80040b6:	4630      	mov	r0, r6
 80040b8:	f3af 8000 	nop.w
 80040bc:	4607      	mov	r7, r0
 80040be:	1c78      	adds	r0, r7, #1
 80040c0:	d1d6      	bne.n	8004070 <_vfiprintf_r+0x1bc>
 80040c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c4:	07d9      	lsls	r1, r3, #31
 80040c6:	d405      	bmi.n	80040d4 <_vfiprintf_r+0x220>
 80040c8:	89ab      	ldrh	r3, [r5, #12]
 80040ca:	059a      	lsls	r2, r3, #22
 80040cc:	d402      	bmi.n	80040d4 <_vfiprintf_r+0x220>
 80040ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d0:	f7ff fd7f 	bl	8003bd2 <__retarget_lock_release_recursive>
 80040d4:	89ab      	ldrh	r3, [r5, #12]
 80040d6:	065b      	lsls	r3, r3, #25
 80040d8:	f53f af12 	bmi.w	8003f00 <_vfiprintf_r+0x4c>
 80040dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040de:	e711      	b.n	8003f04 <_vfiprintf_r+0x50>
 80040e0:	ab03      	add	r3, sp, #12
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	462a      	mov	r2, r5
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <_vfiprintf_r+0x258>)
 80040e8:	a904      	add	r1, sp, #16
 80040ea:	4630      	mov	r0, r6
 80040ec:	f000 f880 	bl	80041f0 <_printf_i>
 80040f0:	e7e4      	b.n	80040bc <_vfiprintf_r+0x208>
 80040f2:	bf00      	nop
 80040f4:	0800467c 	.word	0x0800467c
 80040f8:	0800469c 	.word	0x0800469c
 80040fc:	0800465c 	.word	0x0800465c
 8004100:	080046bc 	.word	0x080046bc
 8004104:	080046c6 	.word	0x080046c6
 8004108:	00000000 	.word	0x00000000
 800410c:	08003e8f 	.word	0x08003e8f
 8004110:	080046c2 	.word	0x080046c2

08004114 <_printf_common>:
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	4616      	mov	r6, r2
 800411a:	4699      	mov	r9, r3
 800411c:	688a      	ldr	r2, [r1, #8]
 800411e:	690b      	ldr	r3, [r1, #16]
 8004120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004124:	4293      	cmp	r3, r2
 8004126:	bfb8      	it	lt
 8004128:	4613      	movlt	r3, r2
 800412a:	6033      	str	r3, [r6, #0]
 800412c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004130:	4607      	mov	r7, r0
 8004132:	460c      	mov	r4, r1
 8004134:	b10a      	cbz	r2, 800413a <_printf_common+0x26>
 8004136:	3301      	adds	r3, #1
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	0699      	lsls	r1, r3, #26
 800413e:	bf42      	ittt	mi
 8004140:	6833      	ldrmi	r3, [r6, #0]
 8004142:	3302      	addmi	r3, #2
 8004144:	6033      	strmi	r3, [r6, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	f015 0506 	ands.w	r5, r5, #6
 800414c:	d106      	bne.n	800415c <_printf_common+0x48>
 800414e:	f104 0a19 	add.w	sl, r4, #25
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	6832      	ldr	r2, [r6, #0]
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	42ab      	cmp	r3, r5
 800415a:	dc26      	bgt.n	80041aa <_printf_common+0x96>
 800415c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004160:	1e13      	subs	r3, r2, #0
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	bf18      	it	ne
 8004166:	2301      	movne	r3, #1
 8004168:	0692      	lsls	r2, r2, #26
 800416a:	d42b      	bmi.n	80041c4 <_printf_common+0xb0>
 800416c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004170:	4649      	mov	r1, r9
 8004172:	4638      	mov	r0, r7
 8004174:	47c0      	blx	r8
 8004176:	3001      	adds	r0, #1
 8004178:	d01e      	beq.n	80041b8 <_printf_common+0xa4>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	68e5      	ldr	r5, [r4, #12]
 800417e:	6832      	ldr	r2, [r6, #0]
 8004180:	f003 0306 	and.w	r3, r3, #6
 8004184:	2b04      	cmp	r3, #4
 8004186:	bf08      	it	eq
 8004188:	1aad      	subeq	r5, r5, r2
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	6922      	ldr	r2, [r4, #16]
 800418e:	bf0c      	ite	eq
 8004190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004194:	2500      	movne	r5, #0
 8004196:	4293      	cmp	r3, r2
 8004198:	bfc4      	itt	gt
 800419a:	1a9b      	subgt	r3, r3, r2
 800419c:	18ed      	addgt	r5, r5, r3
 800419e:	2600      	movs	r6, #0
 80041a0:	341a      	adds	r4, #26
 80041a2:	42b5      	cmp	r5, r6
 80041a4:	d11a      	bne.n	80041dc <_printf_common+0xc8>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e008      	b.n	80041bc <_printf_common+0xa8>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4652      	mov	r2, sl
 80041ae:	4649      	mov	r1, r9
 80041b0:	4638      	mov	r0, r7
 80041b2:	47c0      	blx	r8
 80041b4:	3001      	adds	r0, #1
 80041b6:	d103      	bne.n	80041c0 <_printf_common+0xac>
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c0:	3501      	adds	r5, #1
 80041c2:	e7c6      	b.n	8004152 <_printf_common+0x3e>
 80041c4:	18e1      	adds	r1, r4, r3
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	2030      	movs	r0, #48	; 0x30
 80041ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ce:	4422      	add	r2, r4
 80041d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041d8:	3302      	adds	r3, #2
 80041da:	e7c7      	b.n	800416c <_printf_common+0x58>
 80041dc:	2301      	movs	r3, #1
 80041de:	4622      	mov	r2, r4
 80041e0:	4649      	mov	r1, r9
 80041e2:	4638      	mov	r0, r7
 80041e4:	47c0      	blx	r8
 80041e6:	3001      	adds	r0, #1
 80041e8:	d0e6      	beq.n	80041b8 <_printf_common+0xa4>
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7d9      	b.n	80041a2 <_printf_common+0x8e>
	...

080041f0 <_printf_i>:
 80041f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	7e0f      	ldrb	r7, [r1, #24]
 80041f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041f8:	2f78      	cmp	r7, #120	; 0x78
 80041fa:	4691      	mov	r9, r2
 80041fc:	4680      	mov	r8, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	469a      	mov	sl, r3
 8004202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004206:	d807      	bhi.n	8004218 <_printf_i+0x28>
 8004208:	2f62      	cmp	r7, #98	; 0x62
 800420a:	d80a      	bhi.n	8004222 <_printf_i+0x32>
 800420c:	2f00      	cmp	r7, #0
 800420e:	f000 80d8 	beq.w	80043c2 <_printf_i+0x1d2>
 8004212:	2f58      	cmp	r7, #88	; 0x58
 8004214:	f000 80a3 	beq.w	800435e <_printf_i+0x16e>
 8004218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800421c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004220:	e03a      	b.n	8004298 <_printf_i+0xa8>
 8004222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004226:	2b15      	cmp	r3, #21
 8004228:	d8f6      	bhi.n	8004218 <_printf_i+0x28>
 800422a:	a101      	add	r1, pc, #4	; (adr r1, 8004230 <_printf_i+0x40>)
 800422c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004230:	08004289 	.word	0x08004289
 8004234:	0800429d 	.word	0x0800429d
 8004238:	08004219 	.word	0x08004219
 800423c:	08004219 	.word	0x08004219
 8004240:	08004219 	.word	0x08004219
 8004244:	08004219 	.word	0x08004219
 8004248:	0800429d 	.word	0x0800429d
 800424c:	08004219 	.word	0x08004219
 8004250:	08004219 	.word	0x08004219
 8004254:	08004219 	.word	0x08004219
 8004258:	08004219 	.word	0x08004219
 800425c:	080043a9 	.word	0x080043a9
 8004260:	080042cd 	.word	0x080042cd
 8004264:	0800438b 	.word	0x0800438b
 8004268:	08004219 	.word	0x08004219
 800426c:	08004219 	.word	0x08004219
 8004270:	080043cb 	.word	0x080043cb
 8004274:	08004219 	.word	0x08004219
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004219 	.word	0x08004219
 8004280:	08004219 	.word	0x08004219
 8004284:	08004393 	.word	0x08004393
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	1d1a      	adds	r2, r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	602a      	str	r2, [r5, #0]
 8004290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004298:	2301      	movs	r3, #1
 800429a:	e0a3      	b.n	80043e4 <_printf_i+0x1f4>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	6829      	ldr	r1, [r5, #0]
 80042a0:	0606      	lsls	r6, r0, #24
 80042a2:	f101 0304 	add.w	r3, r1, #4
 80042a6:	d50a      	bpl.n	80042be <_printf_i+0xce>
 80042a8:	680e      	ldr	r6, [r1, #0]
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	2e00      	cmp	r6, #0
 80042ae:	da03      	bge.n	80042b8 <_printf_i+0xc8>
 80042b0:	232d      	movs	r3, #45	; 0x2d
 80042b2:	4276      	negs	r6, r6
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b8:	485e      	ldr	r0, [pc, #376]	; (8004434 <_printf_i+0x244>)
 80042ba:	230a      	movs	r3, #10
 80042bc:	e019      	b.n	80042f2 <_printf_i+0x102>
 80042be:	680e      	ldr	r6, [r1, #0]
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042c6:	bf18      	it	ne
 80042c8:	b236      	sxthne	r6, r6
 80042ca:	e7ef      	b.n	80042ac <_printf_i+0xbc>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	6820      	ldr	r0, [r4, #0]
 80042d0:	1d19      	adds	r1, r3, #4
 80042d2:	6029      	str	r1, [r5, #0]
 80042d4:	0601      	lsls	r1, r0, #24
 80042d6:	d501      	bpl.n	80042dc <_printf_i+0xec>
 80042d8:	681e      	ldr	r6, [r3, #0]
 80042da:	e002      	b.n	80042e2 <_printf_i+0xf2>
 80042dc:	0646      	lsls	r6, r0, #25
 80042de:	d5fb      	bpl.n	80042d8 <_printf_i+0xe8>
 80042e0:	881e      	ldrh	r6, [r3, #0]
 80042e2:	4854      	ldr	r0, [pc, #336]	; (8004434 <_printf_i+0x244>)
 80042e4:	2f6f      	cmp	r7, #111	; 0x6f
 80042e6:	bf0c      	ite	eq
 80042e8:	2308      	moveq	r3, #8
 80042ea:	230a      	movne	r3, #10
 80042ec:	2100      	movs	r1, #0
 80042ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042f2:	6865      	ldr	r5, [r4, #4]
 80042f4:	60a5      	str	r5, [r4, #8]
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	bfa2      	ittt	ge
 80042fa:	6821      	ldrge	r1, [r4, #0]
 80042fc:	f021 0104 	bicge.w	r1, r1, #4
 8004300:	6021      	strge	r1, [r4, #0]
 8004302:	b90e      	cbnz	r6, 8004308 <_printf_i+0x118>
 8004304:	2d00      	cmp	r5, #0
 8004306:	d04d      	beq.n	80043a4 <_printf_i+0x1b4>
 8004308:	4615      	mov	r5, r2
 800430a:	fbb6 f1f3 	udiv	r1, r6, r3
 800430e:	fb03 6711 	mls	r7, r3, r1, r6
 8004312:	5dc7      	ldrb	r7, [r0, r7]
 8004314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004318:	4637      	mov	r7, r6
 800431a:	42bb      	cmp	r3, r7
 800431c:	460e      	mov	r6, r1
 800431e:	d9f4      	bls.n	800430a <_printf_i+0x11a>
 8004320:	2b08      	cmp	r3, #8
 8004322:	d10b      	bne.n	800433c <_printf_i+0x14c>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	07de      	lsls	r6, r3, #31
 8004328:	d508      	bpl.n	800433c <_printf_i+0x14c>
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	6861      	ldr	r1, [r4, #4]
 800432e:	4299      	cmp	r1, r3
 8004330:	bfde      	ittt	le
 8004332:	2330      	movle	r3, #48	; 0x30
 8004334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800433c:	1b52      	subs	r2, r2, r5
 800433e:	6122      	str	r2, [r4, #16]
 8004340:	f8cd a000 	str.w	sl, [sp]
 8004344:	464b      	mov	r3, r9
 8004346:	aa03      	add	r2, sp, #12
 8004348:	4621      	mov	r1, r4
 800434a:	4640      	mov	r0, r8
 800434c:	f7ff fee2 	bl	8004114 <_printf_common>
 8004350:	3001      	adds	r0, #1
 8004352:	d14c      	bne.n	80043ee <_printf_i+0x1fe>
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	b004      	add	sp, #16
 800435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435e:	4835      	ldr	r0, [pc, #212]	; (8004434 <_printf_i+0x244>)
 8004360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004364:	6829      	ldr	r1, [r5, #0]
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	f851 6b04 	ldr.w	r6, [r1], #4
 800436c:	6029      	str	r1, [r5, #0]
 800436e:	061d      	lsls	r5, r3, #24
 8004370:	d514      	bpl.n	800439c <_printf_i+0x1ac>
 8004372:	07df      	lsls	r7, r3, #31
 8004374:	bf44      	itt	mi
 8004376:	f043 0320 	orrmi.w	r3, r3, #32
 800437a:	6023      	strmi	r3, [r4, #0]
 800437c:	b91e      	cbnz	r6, 8004386 <_printf_i+0x196>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f023 0320 	bic.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2310      	movs	r3, #16
 8004388:	e7b0      	b.n	80042ec <_printf_i+0xfc>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	f043 0320 	orr.w	r3, r3, #32
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	2378      	movs	r3, #120	; 0x78
 8004394:	4828      	ldr	r0, [pc, #160]	; (8004438 <_printf_i+0x248>)
 8004396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800439a:	e7e3      	b.n	8004364 <_printf_i+0x174>
 800439c:	0659      	lsls	r1, r3, #25
 800439e:	bf48      	it	mi
 80043a0:	b2b6      	uxthmi	r6, r6
 80043a2:	e7e6      	b.n	8004372 <_printf_i+0x182>
 80043a4:	4615      	mov	r5, r2
 80043a6:	e7bb      	b.n	8004320 <_printf_i+0x130>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	6826      	ldr	r6, [r4, #0]
 80043ac:	6961      	ldr	r1, [r4, #20]
 80043ae:	1d18      	adds	r0, r3, #4
 80043b0:	6028      	str	r0, [r5, #0]
 80043b2:	0635      	lsls	r5, r6, #24
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	d501      	bpl.n	80043bc <_printf_i+0x1cc>
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	e002      	b.n	80043c2 <_printf_i+0x1d2>
 80043bc:	0670      	lsls	r0, r6, #25
 80043be:	d5fb      	bpl.n	80043b8 <_printf_i+0x1c8>
 80043c0:	8019      	strh	r1, [r3, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	6123      	str	r3, [r4, #16]
 80043c6:	4615      	mov	r5, r2
 80043c8:	e7ba      	b.n	8004340 <_printf_i+0x150>
 80043ca:	682b      	ldr	r3, [r5, #0]
 80043cc:	1d1a      	adds	r2, r3, #4
 80043ce:	602a      	str	r2, [r5, #0]
 80043d0:	681d      	ldr	r5, [r3, #0]
 80043d2:	6862      	ldr	r2, [r4, #4]
 80043d4:	2100      	movs	r1, #0
 80043d6:	4628      	mov	r0, r5
 80043d8:	f7fb ff1a 	bl	8000210 <memchr>
 80043dc:	b108      	cbz	r0, 80043e2 <_printf_i+0x1f2>
 80043de:	1b40      	subs	r0, r0, r5
 80043e0:	6060      	str	r0, [r4, #4]
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	2300      	movs	r3, #0
 80043e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043ec:	e7a8      	b.n	8004340 <_printf_i+0x150>
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	462a      	mov	r2, r5
 80043f2:	4649      	mov	r1, r9
 80043f4:	4640      	mov	r0, r8
 80043f6:	47d0      	blx	sl
 80043f8:	3001      	adds	r0, #1
 80043fa:	d0ab      	beq.n	8004354 <_printf_i+0x164>
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	079b      	lsls	r3, r3, #30
 8004400:	d413      	bmi.n	800442a <_printf_i+0x23a>
 8004402:	68e0      	ldr	r0, [r4, #12]
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	4298      	cmp	r0, r3
 8004408:	bfb8      	it	lt
 800440a:	4618      	movlt	r0, r3
 800440c:	e7a4      	b.n	8004358 <_printf_i+0x168>
 800440e:	2301      	movs	r3, #1
 8004410:	4632      	mov	r2, r6
 8004412:	4649      	mov	r1, r9
 8004414:	4640      	mov	r0, r8
 8004416:	47d0      	blx	sl
 8004418:	3001      	adds	r0, #1
 800441a:	d09b      	beq.n	8004354 <_printf_i+0x164>
 800441c:	3501      	adds	r5, #1
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	9903      	ldr	r1, [sp, #12]
 8004422:	1a5b      	subs	r3, r3, r1
 8004424:	42ab      	cmp	r3, r5
 8004426:	dcf2      	bgt.n	800440e <_printf_i+0x21e>
 8004428:	e7eb      	b.n	8004402 <_printf_i+0x212>
 800442a:	2500      	movs	r5, #0
 800442c:	f104 0619 	add.w	r6, r4, #25
 8004430:	e7f5      	b.n	800441e <_printf_i+0x22e>
 8004432:	bf00      	nop
 8004434:	080046cd 	.word	0x080046cd
 8004438:	080046de 	.word	0x080046de

0800443c <_sbrk_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d06      	ldr	r5, [pc, #24]	; (8004458 <_sbrk_r+0x1c>)
 8004440:	2300      	movs	r3, #0
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	f7fc fb60 	bl	8000b0c <_sbrk>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_sbrk_r+0x1a>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_sbrk_r+0x1a>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	20000138 	.word	0x20000138

0800445c <__sread>:
 800445c:	b510      	push	{r4, lr}
 800445e:	460c      	mov	r4, r1
 8004460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004464:	f000 f8a0 	bl	80045a8 <_read_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	bfab      	itete	ge
 800446c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800446e:	89a3      	ldrhlt	r3, [r4, #12]
 8004470:	181b      	addge	r3, r3, r0
 8004472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004476:	bfac      	ite	ge
 8004478:	6563      	strge	r3, [r4, #84]	; 0x54
 800447a:	81a3      	strhlt	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__swrite>:
 800447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004482:	461f      	mov	r7, r3
 8004484:	898b      	ldrh	r3, [r1, #12]
 8004486:	05db      	lsls	r3, r3, #23
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	4616      	mov	r6, r2
 800448e:	d505      	bpl.n	800449c <__swrite+0x1e>
 8004490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004494:	2302      	movs	r3, #2
 8004496:	2200      	movs	r2, #0
 8004498:	f000 f868 	bl	800456c <_lseek_r>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	4632      	mov	r2, r6
 80044aa:	463b      	mov	r3, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b2:	f000 b817 	b.w	80044e4 <_write_r>

080044b6 <__sseek>:
 80044b6:	b510      	push	{r4, lr}
 80044b8:	460c      	mov	r4, r1
 80044ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044be:	f000 f855 	bl	800456c <_lseek_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	bf15      	itete	ne
 80044c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044d2:	81a3      	strheq	r3, [r4, #12]
 80044d4:	bf18      	it	ne
 80044d6:	81a3      	strhne	r3, [r4, #12]
 80044d8:	bd10      	pop	{r4, pc}

080044da <__sclose>:
 80044da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044de:	f000 b813 	b.w	8004508 <_close_r>
	...

080044e4 <_write_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4d07      	ldr	r5, [pc, #28]	; (8004504 <_write_r+0x20>)
 80044e8:	4604      	mov	r4, r0
 80044ea:	4608      	mov	r0, r1
 80044ec:	4611      	mov	r1, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	602a      	str	r2, [r5, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fc fab9 	bl	8000a6a <_write>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d102      	bne.n	8004502 <_write_r+0x1e>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	b103      	cbz	r3, 8004502 <_write_r+0x1e>
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	20000138 	.word	0x20000138

08004508 <_close_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_close_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc fac5 	bl	8000aa2 <_close>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_close_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_close_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000138 	.word	0x20000138

08004528 <_fstat_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d07      	ldr	r5, [pc, #28]	; (8004548 <_fstat_r+0x20>)
 800452c:	2300      	movs	r3, #0
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	f7fc fac0 	bl	8000aba <_fstat>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d102      	bne.n	8004544 <_fstat_r+0x1c>
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	b103      	cbz	r3, 8004544 <_fstat_r+0x1c>
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	bd38      	pop	{r3, r4, r5, pc}
 8004546:	bf00      	nop
 8004548:	20000138 	.word	0x20000138

0800454c <_isatty_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4d06      	ldr	r5, [pc, #24]	; (8004568 <_isatty_r+0x1c>)
 8004550:	2300      	movs	r3, #0
 8004552:	4604      	mov	r4, r0
 8004554:	4608      	mov	r0, r1
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	f7fc fabf 	bl	8000ada <_isatty>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_isatty_r+0x1a>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_isatty_r+0x1a>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000138 	.word	0x20000138

0800456c <_lseek_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d07      	ldr	r5, [pc, #28]	; (800458c <_lseek_r+0x20>)
 8004570:	4604      	mov	r4, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	602a      	str	r2, [r5, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fab8 	bl	8000af0 <_lseek>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_lseek_r+0x1e>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_lseek_r+0x1e>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000138 	.word	0x20000138

08004590 <__malloc_lock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_lock+0x8>)
 8004592:	f7ff bb1d 	b.w	8003bd0 <__retarget_lock_acquire_recursive>
 8004596:	bf00      	nop
 8004598:	2000012c 	.word	0x2000012c

0800459c <__malloc_unlock>:
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <__malloc_unlock+0x8>)
 800459e:	f7ff bb18 	b.w	8003bd2 <__retarget_lock_release_recursive>
 80045a2:	bf00      	nop
 80045a4:	2000012c 	.word	0x2000012c

080045a8 <_read_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d07      	ldr	r5, [pc, #28]	; (80045c8 <_read_r+0x20>)
 80045ac:	4604      	mov	r4, r0
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	2200      	movs	r2, #0
 80045b4:	602a      	str	r2, [r5, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f7fc fa3a 	bl	8000a30 <_read>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_read_r+0x1e>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_read_r+0x1e>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	20000138 	.word	0x20000138

080045cc <_init>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr

080045d8 <_fini>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr
