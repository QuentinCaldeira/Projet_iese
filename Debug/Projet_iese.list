
Projet_iese.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004688  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800497c  0800497c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080049f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080049f4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da1  00000000  00000000  0002c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002ef70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224e3  00000000  00000000  0002f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f3  00000000  00000000  00051dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc023  00000000  00000000  000604ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c511  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  0012c564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004840 	.word	0x08004840

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004840 	.word	0x08004840

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a25      	ldr	r2, [pc, #148]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <MX_GPIO_Init+0xd0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000640:	f000 ff6e 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_GPIO_Init+0xd8>)
 800065c:	f000 fdcc 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000678:	f000 fdbe 	bl	80011f8 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020800 	.word	0x40020800

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f000 ff41 	bl	8001554 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fa88 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00061a80 	.word	0x00061a80

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fd56 	bl	80011f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*------------Fonction permettant de relier le printf et l'uart---------------*/
int __io_putchar(int ch) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0x00FF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 800078a:	f107 010f 	add.w	r1, r7, #15
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_putchar+0x28>)
 8000794:	f002 fca9 	bl	80030ea <HAL_UART_Transmit>
	return ch;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e4 	.word	0x200000e4

080007a8 <who_am_i_sensors>:
/*----------------------------------------------------------------------------*/

/*---Fonction permettant d'attester la présence du magneto et de l'accelero---*/
int who_am_i_sensors(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
	uint8_t buf[1];                                                                                     //Buffer de 1 octet car on ne lit que une case mémoire
	HAL_StatusTypeDef ret;                                                                              //Variable HAL permettant de voir l'état de la transmission I2C
	buf[0] = WHO_AM_I_A;                                                                                //On affecte l'adresse de la case mémoire stockant WHOAMI pour l'accelero
 80007ae:	230f      	movs	r3, #15
 80007b0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur l'accelero
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	2132      	movs	r1, #50	; 0x32
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <who_am_i_sensors+0xc0>)
 80007c0:	f001 f80c 	bl	80017dc <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <who_am_i_sensors+0x2e>
		printf("Error Tx\r\n");
 80007ce:	4827      	ldr	r0, [pc, #156]	; (800086c <who_am_i_sensors+0xc4>)
 80007d0:	f003 f8b8 	bl	8003944 <puts>
 80007d4:	e017      	b.n	8000806 <who_am_i_sensors+0x5e>
	}
	else {
	    ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                           //Sinon, on recupere la valeur dans la case memoire
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <who_am_i_sensors+0xc0>)
 80007e4:	f001 f8f8 	bl	80019d8 <HAL_I2C_Master_Receive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	    if ( ret != HAL_OK ) {                                                                          //Si la réception s'est mal passée, on affiche une erreur
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <who_am_i_sensors+0x52>
	      printf("Error Rx\r\n");
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <who_am_i_sensors+0xc8>)
 80007f4:	f003 f8a6 	bl	8003944 <puts>
 80007f8:	e005      	b.n	8000806 <who_am_i_sensors+0x5e>
	    }
	    else {
	    	if ( buf[0]==0x33 ) {                                                                         //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	2b33      	cmp	r3, #51	; 0x33
 80007fe:	d102      	bne.n	8000806 <who_am_i_sensors+0x5e>
	        printf("Detection de accelerometre \n\r");
 8000800:	481c      	ldr	r0, [pc, #112]	; (8000874 <who_am_i_sensors+0xcc>)
 8000802:	f003 f819 	bl	8003838 <iprintf>
	    	}
	    }
  }
  buf[0] = WHO_AM_I_M;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000806:	234f      	movs	r3, #79	; 0x4f
 8000808:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	213c      	movs	r1, #60	; 0x3c
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <who_am_i_sensors+0xc0>)
 8000818:	f000 ffe0 	bl	80017dc <HAL_I2C_Master_Transmit>
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <who_am_i_sensors+0x86>
	  printf("Error Tx\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <who_am_i_sensors+0xc4>)
 8000828:	f003 f88c 	bl	8003944 <puts>
 800082c:	e017      	b.n	800085e <who_am_i_sensors+0xb6>
  }
  else {
  	ret = HAL_I2C_Master_Receive(&hi2c1, MAG_ADR, buf, 1, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	213c      	movs	r1, #60	; 0x3c
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <who_am_i_sensors+0xc0>)
 800083c:	f001 f8cc 	bl	80019d8 <HAL_I2C_Master_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <who_am_i_sensors+0xaa>
  	  printf("Error Rx\r\n");
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <who_am_i_sensors+0xc8>)
 800084c:	f003 f87a 	bl	8003944 <puts>
 8000850:	e005      	b.n	800085e <who_am_i_sensors+0xb6>
  	}
    else {
    	if ( buf[0]==0x40 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	2b40      	cmp	r3, #64	; 0x40
 8000856:	d102      	bne.n	800085e <who_am_i_sensors+0xb6>
    		printf("Detection de magneto \n\r");
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <who_am_i_sensors+0xd0>)
 800085a:	f002 ffed 	bl	8003838 <iprintf>
    	}
    }
  }
}
 800085e:	bf00      	nop
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000008c 	.word	0x2000008c
 800086c:	08004858 	.word	0x08004858
 8000870:	08004864 	.word	0x08004864
 8000874:	08004870 	.word	0x08004870
 8000878:	08004890 	.word	0x08004890

0800087c <reset_acc>:

int reset_acc(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = CTRL_REG5_A;  
 8000882:	2324      	movs	r3, #36	; 0x24
 8000884:	713b      	strb	r3, [r7, #4]
 	buf[1]=0x80;  //Data de reset
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 2, HAL_MAX_DELAY);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2302      	movs	r3, #2
 8000894:	2132      	movs	r1, #50	; 0x32
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <reset_acc+0x3c>)
 8000898:	f000 ffa0 	bl	80017dc <HAL_I2C_Master_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
	if ( ret != HAL_OK ) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d002      	beq.n	80008ac <reset_acc+0x30>
		printf("Error Tx\r\n");
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <reset_acc+0x40>)
 80008a8:	f003 f84c 	bl	8003944 <puts>
	}
}
 80008ac:	bf00      	nop
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	08004858 	.word	0x08004858

080008c0 <config_acc>:

int config_acc(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[8] ;
	buf[0]=CTRL_REG1_A;
 80008c6:	2320      	movs	r3, #32
 80008c8:	713b      	strb	r3, [r7, #4]
	buf[1]=0x27;//Valeur a mettre dans ctrm_reg_1
 80008ca:	2327      	movs	r3, #39	; 0x27
 80008cc:	717b      	strb	r3, [r7, #5]
	buf[2]=0x21;//Valeur a mettre dans ctrm_reg_2
 80008ce:	2321      	movs	r3, #33	; 0x21
 80008d0:	71bb      	strb	r3, [r7, #6]
	buf[3]=0x22;//Valeur a mettre dans ctrm_reg_3
 80008d2:	2322      	movs	r3, #34	; 0x22
 80008d4:	71fb      	strb	r3, [r7, #7]
	buf[4]=0x23;//Valeur a mettre dans ctrm_reg_4
 80008d6:	2323      	movs	r3, #35	; 0x23
 80008d8:	723b      	strb	r3, [r7, #8]
	buf[5]=0x00;//Valeur a mettre dans ctrm_reg_5
 80008da:	2300      	movs	r3, #0
 80008dc:	727b      	strb	r3, [r7, #9]
	buf[6]=0x25;//Valeur a mettre dans ctrm_reg_6
 80008de:	2325      	movs	r3, #37	; 0x25
 80008e0:	72bb      	strb	r3, [r7, #10]
	ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 7, HAL_MAX_DELAY);
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2307      	movs	r3, #7
 80008ec:	2132      	movs	r1, #50	; 0x32
 80008ee:	481e      	ldr	r0, [pc, #120]	; (8000968 <config_acc+0xa8>)
 80008f0:	f000 ff74 	bl	80017dc <HAL_I2C_Master_Transmit>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
	if ( ret != HAL_OK ) {
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <config_acc+0x44>
		printf("Error Tx\r\n");
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <config_acc+0xac>)
 8000900:	f003 f820 	bl	8003944 <puts>
	}
	  buf[0] = 0x20;                                                                                //On affecte l'adresse de la case mémoire du WHOAMI pour le magneto
 8000904:	2320      	movs	r3, #32
 8000906:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ACC_ADR, buf, 1, HAL_MAX_DELAY);                              //On effectue la transmission sur le magneto
 8000908:	1d3a      	adds	r2, r7, #4
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2301      	movs	r3, #1
 8000912:	2132      	movs	r1, #50	; 0x32
 8000914:	4814      	ldr	r0, [pc, #80]	; (8000968 <config_acc+0xa8>)
 8000916:	f000 ff61 	bl	80017dc <HAL_I2C_Master_Transmit>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
	  if ( ret != HAL_OK ) {                                                                              //Si la transmission s'est mal passé, on affiche une erreur
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <config_acc+0x6c>
		  printf("Error Tx\r\n");
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <config_acc+0xac>)
 8000926:	f003 f80d 	bl	8003944 <puts>
 800092a:	e017      	b.n	800095c <config_acc+0x9c>
	  }
	  else {
	  	ret = HAL_I2C_Master_Receive(&hi2c1, ACC_ADR, buf, 7, HAL_MAX_DELAY);                             //Sinon, on recupere la valeur dans la case memoire
 800092c:	1d3a      	adds	r2, r7, #4
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2307      	movs	r3, #7
 8000936:	2132      	movs	r1, #50	; 0x32
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <config_acc+0xa8>)
 800093a:	f001 f84d 	bl	80019d8 <HAL_I2C_Master_Receive>
 800093e:	4603      	mov	r3, r0
 8000940:	73fb      	strb	r3, [r7, #15]
	  	if ( ret != HAL_OK ) {                                                                            //Si la réception s'est mal passée, on affiche une erreur
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <config_acc+0x90>
	  	  printf("Error Rx\r\n");
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <config_acc+0xb0>)
 800094a:	f002 fffb 	bl	8003944 <puts>
 800094e:	e005      	b.n	800095c <config_acc+0x9c>
	  	}
	    else {
	    	if ( buf[0]==0x21 ) {                                                                           //On teste si la valeur présente dans la case memoire est identique à celle indiquée dans la doc
 8000950:	793b      	ldrb	r3, [r7, #4]
 8000952:	2b21      	cmp	r3, #33	; 0x21
 8000954:	d102      	bne.n	800095c <config_acc+0x9c>
	    		printf("OKOKOKOKO \n\r");
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <config_acc+0xb4>)
 8000958:	f002 ff6e 	bl	8003838 <iprintf>
	    	}
	    }
	  }
}
 800095c:	bf00      	nop
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000008c 	.word	0x2000008c
 800096c:	08004858 	.word	0x08004858
 8000970:	08004864 	.word	0x08004864
 8000974:	080048a8 	.word	0x080048a8

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 fae3 	bl	8000f48 <HAL_Init>
  uint16_t reg, i;
  int length=1, a;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f8c3 	bl	8000b10 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f7ff fe13 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800098e:	f000 fa3f 	bl	8000e10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000992:	f7ff fe7d 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  who_am_i_sensors();
 8000996:	f7ff ff07 	bl	80007a8 <who_am_i_sensors>
	  reset_acc();
 800099a:	f7ff ff6f 	bl	800087c <reset_acc>
	  config_acc();
 800099e:	f7ff ff8f 	bl	80008c0 <config_acc>

	  I2C1 -> CR1 &= ~I2C_CR1_POS;
 80009a2:	4b5a      	ldr	r3, [pc, #360]	; (8000b0c <main+0x194>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a59      	ldr	r2, [pc, #356]	; (8000b0c <main+0x194>)
 80009a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ac:	6013      	str	r3, [r2, #0]
	  I2C1 -> CR1 |= I2C_CR1_START;
 80009ae:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <main+0x194>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <main+0x194>)
 80009b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b8:	6013      	str	r3, [r2, #0]
	  while(!(I2C1 -> SR1 & I2C_SR1_SB)){}
 80009ba:	bf00      	nop
 80009bc:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <main+0x194>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f9      	beq.n	80009bc <main+0x44>
	  I2C1 -> DR = (0x32) | 0x00;
 80009c8:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <main+0x194>)
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	611a      	str	r2, [r3, #16]
	  while(!(I2C1 -> SR1 & I2C_SR1_ADDR)){}
 80009ce:	bf00      	nop
 80009d0:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <main+0x194>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f9      	beq.n	80009d0 <main+0x58>
	  reg = 0x00;
 80009dc:	2300      	movs	r3, #0
 80009de:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR1;
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <main+0x194>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR2;
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <main+0x194>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	817b      	strh	r3, [r7, #10]
	  while(!(I2C1 -> SR1 & I2C_SR1_TXE)){}
 80009ec:	bf00      	nop
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <main+0x194>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f9      	beq.n	80009ee <main+0x76>
	  for(int i = 0 ; i < length; i++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	e01b      	b.n	8000a38 <main+0xc0>
	  {
	  I2C1 -> DR = WHO_AM_I_A;
 8000a00:	4b42      	ldr	r3, [pc, #264]	; (8000b0c <main+0x194>)
 8000a02:	220f      	movs	r2, #15
 8000a04:	611a      	str	r2, [r3, #16]
	  while(!(I2C1 -> SR1 & I2C_SR1_TXE)){}
 8000a06:	bf00      	nop
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <main+0x194>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f9      	beq.n	8000a08 <main+0x90>
	  while(!(I2C1 -> SR1 & I2C_SR1_BTF)){}
 8000a14:	bf00      	nop
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <main+0x194>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f9      	beq.n	8000a16 <main+0x9e>
	  reg = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR1;
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <main+0x194>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR2;
 8000a2c:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <main+0x194>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	817b      	strh	r3, [r7, #10]
	  for(int i = 0 ; i < length; i++)
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3301      	adds	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbdf      	blt.n	8000a00 <main+0x88>
	  }
	  I2C1 -> CR1 |= I2C_CR1_STOP;
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <main+0x194>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <main+0x194>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
	  reg = I2C1 -> SR1;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <main+0x194>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR2;
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <main+0x194>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	817b      	strh	r3, [r7, #10]


	  I2C1 -> CR1 &= ~I2C_CR1_POS;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <main+0x194>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <main+0x194>)
 8000a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a62:	6013      	str	r3, [r2, #0]
	  I2C1 -> CR1 |= I2C_CR1_ACK;
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <main+0x194>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <main+0x194>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
	  I2C1 -> CR1 |= I2C_CR1_START;
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <main+0x194>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <main+0x194>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
	  while(!(I2C1 -> SR1 & I2C_SR1_SB)){}
 8000a7c:	bf00      	nop
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <main+0x194>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f9      	beq.n	8000a7e <main+0x106>
	  I2C1 -> DR = (0x32) | 0x01;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <main+0x194>)
 8000a8c:	2233      	movs	r2, #51	; 0x33
 8000a8e:	611a      	str	r2, [r3, #16]
	  while(!(I2C1 -> SR1 & I2C_SR1_ADDR)){}
 8000a90:	bf00      	nop
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <main+0x194>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <main+0x11a>
	  reg = 0x00; reg = I2C1->SR1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	817b      	strh	r3, [r7, #10]
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <main+0x194>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	817b      	strh	r3, [r7, #10]
	  reg = I2C1 -> SR2;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <main+0x194>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	817b      	strh	r3, [r7, #10]
	  for( i =0; i < (length - 1); i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	82fb      	strh	r3, [r7, #22]
 8000ab2:	e012      	b.n	8000ada <main+0x162>
	  {
	   while(!(I2C1 -> SR1 & I2C_SR1_RXNE)){}
 8000ab4:	bf00      	nop
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <main+0x194>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f9      	beq.n	8000ab6 <main+0x13e>
	  a = I2C1 -> DR;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <main+0x194>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	607b      	str	r3, [r7, #4]
	  I2C1 -> CR1 |= I2C_CR1_ACK;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <main+0x194>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <main+0x194>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
	  for( i =0; i < (length - 1); i++)
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	82fb      	strh	r3, [r7, #22]
 8000ada:	8afa      	ldrh	r2, [r7, #22]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbe7      	blt.n	8000ab4 <main+0x13c>
	  }
	  i++;
 8000ae4:	8afb      	ldrh	r3, [r7, #22]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	82fb      	strh	r3, [r7, #22]
	  a = I2C1 -> DR;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <main+0x194>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	607b      	str	r3, [r7, #4]
	  I2C1 -> CR1 &= ~I2C_CR1_ACK;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <main+0x194>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <main+0x194>)
 8000af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
	  I2C1 -> CR1 |= I2C_CR1_STOP;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <main+0x194>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a02      	ldr	r2, [pc, #8]	; (8000b0c <main+0x194>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
	  who_am_i_sensors();
 8000b08:	e745      	b.n	8000996 <main+0x1e>
 8000b0a:	bf00      	nop
 8000b0c:	40005400 	.word	0x40005400

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	; 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fe82 	bl	8003828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <SystemClock_Config+0xd4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <SystemClock_Config+0xd4>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <SystemClock_Config+0xd4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b5c:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <SystemClock_Config+0xd8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b84:	2310      	movs	r3, #16
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 ffb8 	bl	8002b14 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000baa:	f000 f81f 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fc58 	bl	8002480 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bd6:	f000 f809 	bl	8000bec <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error i2c");
 8000bf4:	4801      	ldr	r0, [pc, #4]	; (8000bfc <Error_Handler+0x10>)
 8000bf6:	f002 fe1f 	bl	8003838 <iprintf>
  {
 8000bfa:	e7fb      	b.n	8000bf4 <Error_Handler+0x8>
 8000bfc:	080048b8 	.word	0x080048b8

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3e:	2007      	movs	r0, #7
 8000c40:	f000 faa6 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f9a6 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
	}

return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fd3f 	bl	800077c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
	}
	return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f002 fd10 	bl	80037d4 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200000e0 	.word	0x200000e0
 8000de8:	20000140 	.word	0x20000140

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_USART2_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART2_UART_Init+0x4c>)
 8000e48:	f002 f902 	bl	8003050 <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f7ff fecb 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000e4 	.word	0x200000e4
 8000e60:	40004400 	.word	0x40004400

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eda:	f000 f98d 	bl	80011f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ff65 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 fc5d 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fd27 	bl	8000978 <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f38:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 8000f3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f40:	2000013c 	.word	0x2000013c

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f90d 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe40 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f917 	bl	80011de <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f8ed 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20000128 	.word	0x20000128

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000128 	.word	0x20000128

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5c 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e165      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8154 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80ae 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_GPIO_Init+0x304>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x308>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x21a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_GPIO_Init+0x30c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x216>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x310>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x212>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x314>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4b      	ldr	r2, [pc, #300]	; (8001510 <HAL_GPIO_Init+0x318>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x20a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4a      	ldr	r2, [pc, #296]	; (8001514 <HAL_GPIO_Init+0x31c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x206>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_GPIO_Init+0x320>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x202>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x21c>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_GPIO_Init+0x324>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_GPIO_Init+0x324>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x324>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x324>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_GPIO_Init+0x324>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_GPIO_Init+0x324>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_GPIO_Init+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_GPIO_Init+0x324>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae96 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e12b      	b.n	80017be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff f8b6 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b8:	f001 f854 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a81      	ldr	r2, [pc, #516]	; (80017c8 <HAL_I2C_Init+0x274>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d807      	bhi.n	80015d8 <HAL_I2C_Init+0x84>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a80      	ldr	r2, [pc, #512]	; (80017cc <HAL_I2C_Init+0x278>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf94      	ite	ls
 80015d0:	2301      	movls	r3, #1
 80015d2:	2300      	movhi	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	e006      	b.n	80015e6 <HAL_I2C_Init+0x92>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a7d      	ldr	r2, [pc, #500]	; (80017d0 <HAL_I2C_Init+0x27c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	bf94      	ite	ls
 80015e0:	2301      	movls	r3, #1
 80015e2:	2300      	movhi	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0e7      	b.n	80017be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4a78      	ldr	r2, [pc, #480]	; (80017d4 <HAL_I2C_Init+0x280>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9b      	lsrs	r3, r3, #18
 80015f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <HAL_I2C_Init+0x274>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d802      	bhi.n	8001628 <HAL_I2C_Init+0xd4>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	e009      	b.n	800163c <HAL_I2C_Init+0xe8>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a69      	ldr	r2, [pc, #420]	; (80017d8 <HAL_I2C_Init+0x284>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	3301      	adds	r3, #1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	430b      	orrs	r3, r1
 8001642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800164e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	495c      	ldr	r1, [pc, #368]	; (80017c8 <HAL_I2C_Init+0x274>)
 8001658:	428b      	cmp	r3, r1
 800165a:	d819      	bhi.n	8001690 <HAL_I2C_Init+0x13c>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e59      	subs	r1, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fbb1 f3f3 	udiv	r3, r1, r3
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001670:	400b      	ands	r3, r1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00a      	beq.n	800168c <HAL_I2C_Init+0x138>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e59      	subs	r1, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fbb1 f3f3 	udiv	r3, r1, r3
 8001684:	3301      	adds	r3, #1
 8001686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168a:	e051      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 800168c:	2304      	movs	r3, #4
 800168e:	e04f      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <HAL_I2C_Init+0x168>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e012      	b.n	80016e2 <HAL_I2C_Init+0x18e>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	0099      	lsls	r1, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x196>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e022      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10e      	bne.n	8001710 <HAL_I2C_Init+0x1bc>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1e58      	subs	r0, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	440b      	add	r3, r1
 8001700:	fbb0 f3f3 	udiv	r3, r0, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170e:	e00f      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	6809      	ldr	r1, [r1, #0]
 8001734:	4313      	orrs	r3, r2
 8001736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800175e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6911      	ldr	r1, [r2, #16]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68d2      	ldr	r2, [r2, #12]
 800176a:	4311      	orrs	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2220      	movs	r2, #32
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	000186a0 	.word	0x000186a0
 80017cc:	001e847f 	.word	0x001e847f
 80017d0:	003d08ff 	.word	0x003d08ff
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	10624dd3 	.word	0x10624dd3

080017dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	461a      	mov	r2, r3
 80017e8:	460b      	mov	r3, r1
 80017ea:	817b      	strh	r3, [r7, #10]
 80017ec:	4613      	mov	r3, r2
 80017ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fc10 	bl	8001014 <HAL_GetTick>
 80017f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	f040 80e0 	bne.w	80019c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2319      	movs	r3, #25
 800180a:	2201      	movs	r2, #1
 800180c:	4970      	ldr	r1, [pc, #448]	; (80019d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fc58 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
 800181c:	e0d3      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_I2C_Master_Transmit+0x50>
 8001828:	2302      	movs	r3, #2
 800182a:	e0cc      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d007      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2221      	movs	r2, #33	; 0x21
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2210      	movs	r2, #16
 800186e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	893a      	ldrh	r2, [r7, #8]
 8001882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001894:	8979      	ldrh	r1, [r7, #10]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	6a3a      	ldr	r2, [r7, #32]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fac2 	bl	8001e24 <I2C_MasterRequestWrite>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e08d      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018c0:	e066      	b.n	8001990 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fcd2 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d107      	bne.n	80018ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e06b      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d11b      	bne.n	8001964 <HAL_I2C_Master_Transmit+0x188>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	2b00      	cmp	r3, #0
 8001932:	d017      	beq.n	8001964 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	6a39      	ldr	r1, [r7, #32]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fcc2 	bl	80022f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00d      	beq.n	8001990 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2b04      	cmp	r3, #4
 800197a:	d107      	bne.n	800198c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e01a      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d194      	bne.n	80018c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	00100002 	.word	0x00100002
 80019d4:	ffff0000 	.word	0xffff0000

080019d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	460b      	mov	r3, r1
 80019e6:	817b      	strh	r3, [r7, #10]
 80019e8:	4613      	mov	r3, r2
 80019ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff fb12 	bl	8001014 <HAL_GetTick>
 80019f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	f040 820b 	bne.w	8001e16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2319      	movs	r3, #25
 8001a06:	2201      	movs	r2, #1
 8001a08:	497c      	ldr	r1, [pc, #496]	; (8001bfc <HAL_I2C_Master_Receive+0x224>)
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fb5a 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	e1fe      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2C_Master_Receive+0x50>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e1f7      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d007      	beq.n	8001a4e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2222      	movs	r2, #34	; 0x22
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	893a      	ldrh	r2, [r7, #8]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <HAL_I2C_Master_Receive+0x228>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a90:	8979      	ldrh	r1, [r7, #10]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fa46 	bl	8001f28 <I2C_MasterRequestRead>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1b8      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	623b      	str	r3, [r7, #32]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e18c      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11b      	bne.n	8001b16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e16c      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d11b      	bne.n	8001b56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	e14c      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b7c:	e138      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	f200 80f1 	bhi.w	8001d6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d123      	bne.n	8001bd8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fbed 	bl	8002374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e139      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd6:	e10b      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d14e      	bne.n	8001c7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	2200      	movs	r2, #0
 8001be8:	4906      	ldr	r1, [pc, #24]	; (8001c04 <HAL_I2C_Master_Receive+0x22c>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa6a 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e10e      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
 8001bfa:	bf00      	nop
 8001bfc:	00100002 	.word	0x00100002
 8001c00:	ffff0000 	.word	0xffff0000
 8001c04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c7c:	e0b8      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	2200      	movs	r2, #0
 8001c86:	4966      	ldr	r1, [pc, #408]	; (8001e20 <HAL_I2C_Master_Receive+0x448>)
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fa1b 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0bf      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	494f      	ldr	r1, [pc, #316]	; (8001e20 <HAL_I2C_Master_Receive+0x448>)
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f9ed 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e091      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d68:	e042      	b.n	8001df0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fb00 	bl	8002374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e04c      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d118      	bne.n	8001df0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f aec2 	bne.w	8001b7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	00010004 	.word	0x00010004

08001e24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d006      	beq.n	8001e4e <I2C_MasterRequestWrite+0x2a>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d003      	beq.n	8001e4e <I2C_MasterRequestWrite+0x2a>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e4c:	d108      	bne.n	8001e60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e00b      	b.n	8001e78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	d107      	bne.n	8001e78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f91d 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9e:	d103      	bne.n	8001ea8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e035      	b.n	8001f18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb4:	d108      	bne.n	8001ec8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e01b      	b.n	8001f00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ec8:	897b      	ldrh	r3, [r7, #10]
 8001eca:	11db      	asrs	r3, r3, #7
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 0306 	and.w	r3, r3, #6
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f063 030f 	orn	r3, r3, #15
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <I2C_MasterRequestWrite+0xfc>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f943 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e010      	b.n	8001f18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <I2C_MasterRequestWrite+0x100>)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f933 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	00010008 	.word	0x00010008
 8001f24:	00010002 	.word	0x00010002

08001f28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d006      	beq.n	8001f62 <I2C_MasterRequestRead+0x3a>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d003      	beq.n	8001f62 <I2C_MasterRequestRead+0x3a>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f60:	d108      	bne.n	8001f74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e00b      	b.n	8001f8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	2b11      	cmp	r3, #17
 8001f7a:	d107      	bne.n	8001f8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f893 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb2:	d103      	bne.n	8001fbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e079      	b.n	80020b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fc8:	d108      	bne.n	8001fdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	e05f      	b.n	800209c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fdc:	897b      	ldrh	r3, [r7, #10]
 8001fde:	11db      	asrs	r3, r3, #7
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f003 0306 	and.w	r3, r3, #6
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f063 030f 	orn	r3, r3, #15
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4930      	ldr	r1, [pc, #192]	; (80020bc <I2C_MasterRequestRead+0x194>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8b9 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e054      	b.n	80020b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4929      	ldr	r1, [pc, #164]	; (80020c0 <I2C_MasterRequestRead+0x198>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f8a9 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e044      	b.n	80020b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f831 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002076:	d103      	bne.n	8002080 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e017      	b.n	80020b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	11db      	asrs	r3, r3, #7
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 0306 	and.w	r3, r3, #6
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f063 030e 	orn	r3, r3, #14
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <I2C_MasterRequestRead+0x198>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f865 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	00010008 	.word	0x00010008
 80020c0:	00010002 	.word	0x00010002

080020c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d4:	e025      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d021      	beq.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7fe ff99 	bl	8001014 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e023      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10d      	bne.n	8002148 <I2C_WaitOnFlagUntilTimeout+0x84>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4013      	ands	r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	e00c      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	429a      	cmp	r2, r3
 8002166:	d0b6      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002180:	e051      	b.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d123      	bne.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0204 	orr.w	r2, r3, #4
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e046      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d021      	beq.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7fe ff17 	bl	8001014 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d116      	bne.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e020      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10c      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e00b      	b.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d18d      	bne.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800227c:	e02d      	b.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8ce 	bl	8002420 <I2C_IsAcknowledgeFailed>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e02d      	b.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d021      	beq.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002296:	f7fe febd 	bl	8001014 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d116      	bne.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d1ca      	bne.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fe:	e02d      	b.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f88d 	bl	8002420 <I2C_IsAcknowledgeFailed>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e02d      	b.n	800236c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d021      	beq.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002318:	f7fe fe7c 	bl	8001014 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d1ca      	bne.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002380:	e042      	b.n	8002408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b10      	cmp	r3, #16
 800238e:	d119      	bne.n	80023c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0210 	mvn.w	r2, #16
 8002398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e029      	b.n	8002418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe fe26 	bl	8001014 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e007      	b.n	8002418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d1b5      	bne.n	8002382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d11b      	bne.n	8002470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0cc      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b68      	ldr	r3, [pc, #416]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d90c      	bls.n	80024bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d044      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d119      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	2b03      	cmp	r3, #3
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e067      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4934      	ldr	r1, [pc, #208]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002570:	f7fe fd50 	bl	8001014 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	e00a      	b.n	800258e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7fe fd4c 	bl	8001014 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 020c 	and.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1eb      	bne.n	8002578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d20c      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f855 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fcb0 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00
 800263c:	40023800 	.word	0x40023800
 8002640:	080048c4 	.word	0x080048c4
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	080048d4 	.word	0x080048d4

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffdc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0b5b      	lsrs	r3, r3, #13
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080048d4 	.word	0x080048d4

080026b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b8:	b0ae      	sub	sp, #184	; 0xb8
 80026ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026da:	4bcb      	ldr	r3, [pc, #812]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	f200 8206 	bhi.w	8002af4 <HAL_RCC_GetSysClockFreq+0x440>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002725 	.word	0x08002725
 80026f4:	08002af5 	.word	0x08002af5
 80026f8:	08002af5 	.word	0x08002af5
 80026fc:	08002af5 	.word	0x08002af5
 8002700:	0800272d 	.word	0x0800272d
 8002704:	08002af5 	.word	0x08002af5
 8002708:	08002af5 	.word	0x08002af5
 800270c:	08002af5 	.word	0x08002af5
 8002710:	08002735 	.word	0x08002735
 8002714:	08002af5 	.word	0x08002af5
 8002718:	08002af5 	.word	0x08002af5
 800271c:	08002af5 	.word	0x08002af5
 8002720:	08002925 	.word	0x08002925
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4bb9      	ldr	r3, [pc, #740]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800272a:	e1e7      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272c:	4bb8      	ldr	r3, [pc, #736]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002732:	e1e3      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4bb4      	ldr	r3, [pc, #720]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002740:	4bb1      	ldr	r3, [pc, #708]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d071      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4bae      	ldr	r3, [pc, #696]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002758:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800275c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800276e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4621      	mov	r1, r4
 800278c:	1a51      	subs	r1, r2, r1
 800278e:	6439      	str	r1, [r7, #64]	; 0x40
 8002790:	4629      	mov	r1, r5
 8002792:	eb63 0301 	sbc.w	r3, r3, r1
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027a4:	4649      	mov	r1, r9
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ae:	4641      	mov	r1, r8
 80027b0:	018a      	lsls	r2, r1, #6
 80027b2:	4641      	mov	r1, r8
 80027b4:	1a51      	subs	r1, r2, r1
 80027b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b8:	4649      	mov	r1, r9
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80027cc:	4649      	mov	r1, r9
 80027ce:	00cb      	lsls	r3, r1, #3
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d6:	4641      	mov	r1, r8
 80027d8:	00ca      	lsls	r2, r1, #3
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	4622      	mov	r2, r4
 80027e2:	189b      	adds	r3, r3, r2
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
 80027e6:	462b      	mov	r3, r5
 80027e8:	460a      	mov	r2, r1
 80027ea:	eb42 0303 	adc.w	r3, r2, r3
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027fc:	4629      	mov	r1, r5
 80027fe:	024b      	lsls	r3, r1, #9
 8002800:	4621      	mov	r1, r4
 8002802:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002806:	4621      	mov	r1, r4
 8002808:	024a      	lsls	r2, r1, #9
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800281c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002820:	f7fd fd46 	bl	80002b0 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800282e:	e067      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800283c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	67bb      	str	r3, [r7, #120]	; 0x78
 800284a:	2300      	movs	r3, #0
 800284c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800284e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002884:	4649      	mov	r1, r9
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4641      	mov	r1, r8
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4641      	mov	r1, r8
 8002894:	ebb2 0a01 	subs.w	sl, r2, r1
 8002898:	4649      	mov	r1, r9
 800289a:	eb63 0b01 	sbc.w	fp, r3, r1
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	4692      	mov	sl, r2
 80028b4:	469b      	mov	fp, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	eb1a 0303 	adds.w	r3, sl, r3
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	462b      	mov	r3, r5
 80028c0:	eb4b 0303 	adc.w	r3, fp, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e8:	2200      	movs	r2, #0
 80028ea:	673b      	str	r3, [r7, #112]	; 0x70
 80028ec:	677a      	str	r2, [r7, #116]	; 0x74
 80028ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028f2:	f7fd fcdd 	bl	80002b0 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4613      	mov	r3, r2
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002900:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	3301      	adds	r3, #1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002922:	e0eb      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002930:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d06b      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x354>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	66bb      	str	r3, [r7, #104]	; 0x68
 8002946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	663b      	str	r3, [r7, #96]	; 0x60
 8002950:	2300      	movs	r3, #0
 8002952:	667b      	str	r3, [r7, #100]	; 0x64
 8002954:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002958:	4622      	mov	r2, r4
 800295a:	462b      	mov	r3, r5
 800295c:	f04f 0000 	mov.w	r0, #0
 8002960:	f04f 0100 	mov.w	r1, #0
 8002964:	0159      	lsls	r1, r3, #5
 8002966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296a:	0150      	lsls	r0, r2, #5
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4621      	mov	r1, r4
 8002972:	1a51      	subs	r1, r2, r1
 8002974:	61b9      	str	r1, [r7, #24]
 8002976:	4629      	mov	r1, r5
 8002978:	eb63 0301 	sbc.w	r3, r3, r1
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800298a:	4659      	mov	r1, fp
 800298c:	018b      	lsls	r3, r1, #6
 800298e:	4651      	mov	r1, sl
 8002990:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002994:	4651      	mov	r1, sl
 8002996:	018a      	lsls	r2, r1, #6
 8002998:	4651      	mov	r1, sl
 800299a:	ebb2 0801 	subs.w	r8, r2, r1
 800299e:	4659      	mov	r1, fp
 80029a0:	eb63 0901 	sbc.w	r9, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b8:	4690      	mov	r8, r2
 80029ba:	4699      	mov	r9, r3
 80029bc:	4623      	mov	r3, r4
 80029be:	eb18 0303 	adds.w	r3, r8, r3
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	462b      	mov	r3, r5
 80029c6:	eb49 0303 	adc.w	r3, r9, r3
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029d8:	4629      	mov	r1, r5
 80029da:	024b      	lsls	r3, r1, #9
 80029dc:	4621      	mov	r1, r4
 80029de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e2:	4621      	mov	r1, r4
 80029e4:	024a      	lsls	r2, r1, #9
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ee:	2200      	movs	r2, #0
 80029f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029f8:	f7fd fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4613      	mov	r3, r2
 8002a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a06:	e065      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x420>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a14:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	099b      	lsrs	r3, r3, #6
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4611      	mov	r1, r2
 8002a20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a24:	653b      	str	r3, [r7, #80]	; 0x50
 8002a26:	2300      	movs	r3, #0
 8002a28:	657b      	str	r3, [r7, #84]	; 0x54
 8002a2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a2e:	4642      	mov	r2, r8
 8002a30:	464b      	mov	r3, r9
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	0159      	lsls	r1, r3, #5
 8002a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a40:	0150      	lsls	r0, r2, #5
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4641      	mov	r1, r8
 8002a48:	1a51      	subs	r1, r2, r1
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a60:	4659      	mov	r1, fp
 8002a62:	018b      	lsls	r3, r1, #6
 8002a64:	4651      	mov	r1, sl
 8002a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	018a      	lsls	r2, r1, #6
 8002a6e:	4651      	mov	r1, sl
 8002a70:	1a54      	subs	r4, r2, r1
 8002a72:	4659      	mov	r1, fp
 8002a74:	eb63 0501 	sbc.w	r5, r3, r1
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	18e3      	adds	r3, r4, r3
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	464b      	mov	r3, r9
 8002a94:	eb45 0303 	adc.w	r3, r5, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002abc:	2200      	movs	r2, #0
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ac2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac6:	f7fd fbf3 	bl	80002b0 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4613      	mov	r3, r2
 8002ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x458>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0f1b      	lsrs	r3, r3, #28
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002af2:	e003      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002afa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	37b8      	adds	r7, #184	; 0xb8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	00f42400 	.word	0x00f42400

08002b14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e28d      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8083 	beq.w	8002c3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b34:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b40:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b4c:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x124>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e25a      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x90>
 8002b96:	4b7c      	ldr	r3, [pc, #496]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7b      	ldr	r2, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xcc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xb4>
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xcc>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6b      	ldr	r2, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fa14 	bl	8001014 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fa10 	bl	8001014 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e21f      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xdc>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe fa00 	bl	8001014 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe f9fc 	bl	8001014 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e20b      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x104>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06f      	beq.n	8002d26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c46:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x186>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1d3      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4937      	ldr	r1, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x278>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f9a9 	bl	8001014 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fe f9a5 	bl	8001014 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1b4      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4925      	ldr	r1, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e015      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x278>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe f988 	bl	8001014 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe f984 	bl	8001014 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e193      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe f968 	bl	8001014 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe f964 	bl	8001014 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e173      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x234>
 8002d66:	e01b      	b.n	8002da0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f951 	bl	8001014 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e00e      	b.n	8002d94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe f94d 	bl	8001014 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d907      	bls.n	8002d94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e15c      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ea      	bne.n	8002d76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8097 	beq.w	8002edc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a7e      	ldr	r2, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe f90d 	bl	8001014 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe f909 	bl	8001014 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e118      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x31e>
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a65      	ldr	r2, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e01c      	b.n	8002e6c <HAL_RCC_OscConfig+0x358>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x340>
 8002e3a:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a60      	ldr	r2, [pc, #384]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0x358>
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a59      	ldr	r2, [pc, #356]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a56      	ldr	r2, [pc, #344]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe f8ce 	bl	8001014 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe f8ca 	bl	8001014 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0d7      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ee      	beq.n	8002e7c <HAL_RCC_OscConfig+0x368>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f8b8 	bl	8001014 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe f8b4 	bl	8001014 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0c1      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ee      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80ad 	beq.w	8003040 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d060      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d145      	bne.n	8002f86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe f888 	bl	8001014 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe f884 	bl	8001014 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e093      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	491b      	ldr	r1, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f859 	bl	8001014 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe f855 	bl	8001014 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e064      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x452>
 8002f84:	e05c      	b.n	8003040 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f842 	bl	8001014 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe f83e 	bl	8001014 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04d      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x480>
 8002fb2:	e045      	b.n	8003040 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e040      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x538>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d030      	beq.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d129      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d119      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d10f      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e03f      	b.n	80030e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fef4 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f929 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b08a      	sub	sp, #40	; 0x28
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b20      	cmp	r3, #32
 8003108:	d17c      	bne.n	8003204 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_UART_Transmit+0x2c>
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e075      	b.n	8003206 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit+0x3e>
 8003124:	2302      	movs	r3, #2
 8003126:	e06e      	b.n	8003206 <HAL_UART_Transmit+0x11c>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2221      	movs	r2, #33	; 0x21
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fd ff69 	bl	8001014 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d108      	bne.n	800316c <HAL_UART_Transmit+0x82>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e003      	b.n	8003174 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800317c:	e02a      	b.n	80031d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f840 	bl	800320e <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e036      	b.n	8003206 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10b      	bne.n	80031b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	3302      	adds	r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e007      	b.n	80031c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	3301      	adds	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1cf      	bne.n	800317e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f810 	bl	800320e <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e006      	b.n	8003206 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b090      	sub	sp, #64	; 0x40
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321e:	e050      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d04c      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <UART_WaitOnFlagUntilTimeout+0x30>
 800322e:	f7fd fef1 	bl	8001014 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323a:	429a      	cmp	r2, r3
 800323c:	d241      	bcs.n	80032c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800325e:	637a      	str	r2, [r7, #52]	; 0x34
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e5      	bne.n	800323e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	613b      	str	r3, [r7, #16]
   return(result);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003292:	623a      	str	r2, [r7, #32]
 8003294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	e841 2300 	strex	r3, r2, [r1]
 800329e:	61bb      	str	r3, [r7, #24]
   return(result);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1e5      	bne.n	8003272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d09f      	beq.n	8003220 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3740      	adds	r7, #64	; 0x40
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0c0      	sub	sp, #256	; 0x100
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	ea40 0301 	orr.w	r3, r0, r1
 8003314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003344:	f021 010c 	bic.w	r1, r1, #12
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003352:	430b      	orrs	r3, r1
 8003354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	6999      	ldr	r1, [r3, #24]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	ea40 0301 	orr.w	r3, r0, r1
 8003372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <UART_SetConfig+0x2cc>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0xa0>
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <UART_SetConfig+0x2d0>)
 8003388:	429a      	cmp	r2, r3
 800338a:	d104      	bne.n	8003396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7ff f97e 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8003390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003394:	e003      	b.n	800339e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003396:	f7ff f965 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 800339a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a8:	f040 810c 	bne.w	80035c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80033c6:	415b      	adcs	r3, r3
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ce:	4621      	mov	r1, r4
 80033d0:	eb12 0801 	adds.w	r8, r2, r1
 80033d4:	4629      	mov	r1, r5
 80033d6:	eb43 0901 	adc.w	r9, r3, r1
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	eb18 0303 	adds.w	r3, r8, r3
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033fc:	462b      	mov	r3, r5
 80033fe:	eb49 0303 	adc.w	r3, r9, r3
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800341a:	460b      	mov	r3, r1
 800341c:	18db      	adds	r3, r3, r3
 800341e:	653b      	str	r3, [r7, #80]	; 0x50
 8003420:	4613      	mov	r3, r2
 8003422:	eb42 0303 	adc.w	r3, r2, r3
 8003426:	657b      	str	r3, [r7, #84]	; 0x54
 8003428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800342c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003430:	f7fc ff3e 	bl	80002b0 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4b61      	ldr	r3, [pc, #388]	; (80035c0 <UART_SetConfig+0x2d4>)
 800343a:	fba3 2302 	umull	r2, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	011c      	lsls	r4, r3, #4
 8003442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800344c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	1891      	adds	r1, r2, r2
 800345a:	64b9      	str	r1, [r7, #72]	; 0x48
 800345c:	415b      	adcs	r3, r3
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003464:	4641      	mov	r1, r8
 8003466:	eb12 0a01 	adds.w	sl, r2, r1
 800346a:	4649      	mov	r1, r9
 800346c:	eb43 0b01 	adc.w	fp, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800347c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003484:	4692      	mov	sl, r2
 8003486:	469b      	mov	fp, r3
 8003488:	4643      	mov	r3, r8
 800348a:	eb1a 0303 	adds.w	r3, sl, r3
 800348e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003492:	464b      	mov	r3, r9
 8003494:	eb4b 0303 	adc.w	r3, fp, r3
 8003498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034b0:	460b      	mov	r3, r1
 80034b2:	18db      	adds	r3, r3, r3
 80034b4:	643b      	str	r3, [r7, #64]	; 0x40
 80034b6:	4613      	mov	r3, r2
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
 80034be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034c6:	f7fc fef3 	bl	80002b0 <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <UART_SetConfig+0x2d4>)
 80034d2:	fba3 2301 	umull	r2, r3, r3, r1
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2264      	movs	r2, #100	; 0x64
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	1acb      	subs	r3, r1, r3
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <UART_SetConfig+0x2d4>)
 80034e8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f4:	441c      	add	r4, r3
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	1891      	adds	r1, r2, r2
 800350e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003510:	415b      	adcs	r3, r3
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003518:	4641      	mov	r1, r8
 800351a:	1851      	adds	r1, r2, r1
 800351c:	6339      	str	r1, [r7, #48]	; 0x30
 800351e:	4649      	mov	r1, r9
 8003520:	414b      	adcs	r3, r1
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003530:	4659      	mov	r1, fp
 8003532:	00cb      	lsls	r3, r1, #3
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353a:	4651      	mov	r1, sl
 800353c:	00ca      	lsls	r2, r1, #3
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	4603      	mov	r3, r0
 8003544:	4642      	mov	r2, r8
 8003546:	189b      	adds	r3, r3, r2
 8003548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800354c:	464b      	mov	r3, r9
 800354e:	460a      	mov	r2, r1
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800356c:	460b      	mov	r3, r1
 800356e:	18db      	adds	r3, r3, r3
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	4613      	mov	r3, r2
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003582:	f7fc fe95 	bl	80002b0 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <UART_SetConfig+0x2d4>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	; 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3332      	adds	r3, #50	; 0x32
 800359e:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <UART_SetConfig+0x2d4>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 0207 	and.w	r2, r3, #7
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4422      	add	r2, r4
 80035b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b4:	e105      	b.n	80037c2 <UART_SetConfig+0x4d6>
 80035b6:	bf00      	nop
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035d6:	4642      	mov	r2, r8
 80035d8:	464b      	mov	r3, r9
 80035da:	1891      	adds	r1, r2, r2
 80035dc:	6239      	str	r1, [r7, #32]
 80035de:	415b      	adcs	r3, r3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e6:	4641      	mov	r1, r8
 80035e8:	1854      	adds	r4, r2, r1
 80035ea:	4649      	mov	r1, r9
 80035ec:	eb43 0501 	adc.w	r5, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	00eb      	lsls	r3, r5, #3
 80035fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fe:	00e2      	lsls	r2, r4, #3
 8003600:	4614      	mov	r4, r2
 8003602:	461d      	mov	r5, r3
 8003604:	4643      	mov	r3, r8
 8003606:	18e3      	adds	r3, r4, r3
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800360c:	464b      	mov	r3, r9
 800360e:	eb45 0303 	adc.w	r3, r5, r3
 8003612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003632:	4629      	mov	r1, r5
 8003634:	008b      	lsls	r3, r1, #2
 8003636:	4621      	mov	r1, r4
 8003638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363c:	4621      	mov	r1, r4
 800363e:	008a      	lsls	r2, r1, #2
 8003640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003644:	f7fc fe34 	bl	80002b0 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <UART_SetConfig+0x4e4>)
 800364e:	fba3 2302 	umull	r2, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	011c      	lsls	r4, r3, #4
 8003656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	1891      	adds	r1, r2, r2
 800366e:	61b9      	str	r1, [r7, #24]
 8003670:	415b      	adcs	r3, r3
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003678:	4641      	mov	r1, r8
 800367a:	1851      	adds	r1, r2, r1
 800367c:	6139      	str	r1, [r7, #16]
 800367e:	4649      	mov	r1, r9
 8003680:	414b      	adcs	r3, r1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003690:	4659      	mov	r1, fp
 8003692:	00cb      	lsls	r3, r1, #3
 8003694:	4651      	mov	r1, sl
 8003696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369a:	4651      	mov	r1, sl
 800369c:	00ca      	lsls	r2, r1, #3
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	4642      	mov	r2, r8
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036ac:	464b      	mov	r3, r9
 80036ae:	460a      	mov	r2, r1
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80036c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036d0:	4649      	mov	r1, r9
 80036d2:	008b      	lsls	r3, r1, #2
 80036d4:	4641      	mov	r1, r8
 80036d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036da:	4641      	mov	r1, r8
 80036dc:	008a      	lsls	r2, r1, #2
 80036de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036e2:	f7fc fde5 	bl	80002b0 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <UART_SetConfig+0x4e4>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <UART_SetConfig+0x4e4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800370a:	441c      	add	r4, r3
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003710:	2200      	movs	r2, #0
 8003712:	673b      	str	r3, [r7, #112]	; 0x70
 8003714:	677a      	str	r2, [r7, #116]	; 0x74
 8003716:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800371a:	4642      	mov	r2, r8
 800371c:	464b      	mov	r3, r9
 800371e:	1891      	adds	r1, r2, r2
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	415b      	adcs	r3, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800372a:	4641      	mov	r1, r8
 800372c:	1851      	adds	r1, r2, r1
 800372e:	6039      	str	r1, [r7, #0]
 8003730:	4649      	mov	r1, r9
 8003732:	414b      	adcs	r3, r1
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003742:	4659      	mov	r1, fp
 8003744:	00cb      	lsls	r3, r1, #3
 8003746:	4651      	mov	r1, sl
 8003748:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374c:	4651      	mov	r1, sl
 800374e:	00ca      	lsls	r2, r1, #3
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	4603      	mov	r3, r0
 8003756:	4642      	mov	r2, r8
 8003758:	189b      	adds	r3, r3, r2
 800375a:	66bb      	str	r3, [r7, #104]	; 0x68
 800375c:	464b      	mov	r3, r9
 800375e:	460a      	mov	r2, r1
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	663b      	str	r3, [r7, #96]	; 0x60
 8003770:	667a      	str	r2, [r7, #100]	; 0x64
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800377e:	4649      	mov	r1, r9
 8003780:	008b      	lsls	r3, r1, #2
 8003782:	4641      	mov	r1, r8
 8003784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003788:	4641      	mov	r1, r8
 800378a:	008a      	lsls	r2, r1, #2
 800378c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003790:	f7fc fd8e 	bl	80002b0 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <UART_SetConfig+0x4e4>)
 800379a:	fba3 1302 	umull	r1, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2164      	movs	r1, #100	; 0x64
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <UART_SetConfig+0x4e4>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4422      	add	r2, r4
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ce:	bf00      	nop
 80037d0:	51eb851f 	.word	0x51eb851f

080037d4 <__errno>:
 80037d4:	4b01      	ldr	r3, [pc, #4]	; (80037dc <__errno+0x8>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	2000000c 	.word	0x2000000c

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	4d0d      	ldr	r5, [pc, #52]	; (8003818 <__libc_init_array+0x38>)
 80037e4:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	2600      	movs	r6, #0
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	4d0b      	ldr	r5, [pc, #44]	; (8003820 <__libc_init_array+0x40>)
 80037f2:	4c0c      	ldr	r4, [pc, #48]	; (8003824 <__libc_init_array+0x44>)
 80037f4:	f001 f824 	bl	8004840 <_init>
 80037f8:	1b64      	subs	r4, r4, r5
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	2600      	movs	r6, #0
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	0800497c 	.word	0x0800497c
 800381c:	0800497c 	.word	0x0800497c
 8003820:	0800497c 	.word	0x0800497c
 8003824:	08004980 	.word	0x08004980

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <iprintf>:
 8003838:	b40f      	push	{r0, r1, r2, r3}
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <iprintf+0x2c>)
 800383c:	b513      	push	{r0, r1, r4, lr}
 800383e:	681c      	ldr	r4, [r3, #0]
 8003840:	b124      	cbz	r4, 800384c <iprintf+0x14>
 8003842:	69a3      	ldr	r3, [r4, #24]
 8003844:	b913      	cbnz	r3, 800384c <iprintf+0x14>
 8003846:	4620      	mov	r0, r4
 8003848:	f000 fa5e 	bl	8003d08 <__sinit>
 800384c:	ab05      	add	r3, sp, #20
 800384e:	9a04      	ldr	r2, [sp, #16]
 8003850:	68a1      	ldr	r1, [r4, #8]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	4620      	mov	r0, r4
 8003856:	f000 fc67 	bl	8004128 <_vfiprintf_r>
 800385a:	b002      	add	sp, #8
 800385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003860:	b004      	add	sp, #16
 8003862:	4770      	bx	lr
 8003864:	2000000c 	.word	0x2000000c

08003868 <_puts_r>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	460e      	mov	r6, r1
 800386c:	4605      	mov	r5, r0
 800386e:	b118      	cbz	r0, 8003878 <_puts_r+0x10>
 8003870:	6983      	ldr	r3, [r0, #24]
 8003872:	b90b      	cbnz	r3, 8003878 <_puts_r+0x10>
 8003874:	f000 fa48 	bl	8003d08 <__sinit>
 8003878:	69ab      	ldr	r3, [r5, #24]
 800387a:	68ac      	ldr	r4, [r5, #8]
 800387c:	b913      	cbnz	r3, 8003884 <_puts_r+0x1c>
 800387e:	4628      	mov	r0, r5
 8003880:	f000 fa42 	bl	8003d08 <__sinit>
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <_puts_r+0xd0>)
 8003886:	429c      	cmp	r4, r3
 8003888:	d120      	bne.n	80038cc <_puts_r+0x64>
 800388a:	686c      	ldr	r4, [r5, #4]
 800388c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800388e:	07db      	lsls	r3, r3, #31
 8003890:	d405      	bmi.n	800389e <_puts_r+0x36>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	0598      	lsls	r0, r3, #22
 8003896:	d402      	bmi.n	800389e <_puts_r+0x36>
 8003898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389a:	f000 fad3 	bl	8003e44 <__retarget_lock_acquire_recursive>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	0719      	lsls	r1, r3, #28
 80038a2:	d51d      	bpl.n	80038e0 <_puts_r+0x78>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	b1db      	cbz	r3, 80038e0 <_puts_r+0x78>
 80038a8:	3e01      	subs	r6, #1
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038b0:	3b01      	subs	r3, #1
 80038b2:	60a3      	str	r3, [r4, #8]
 80038b4:	bb39      	cbnz	r1, 8003906 <_puts_r+0x9e>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da38      	bge.n	800392c <_puts_r+0xc4>
 80038ba:	4622      	mov	r2, r4
 80038bc:	210a      	movs	r1, #10
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 f848 	bl	8003954 <__swbuf_r>
 80038c4:	3001      	adds	r0, #1
 80038c6:	d011      	beq.n	80038ec <_puts_r+0x84>
 80038c8:	250a      	movs	r5, #10
 80038ca:	e011      	b.n	80038f0 <_puts_r+0x88>
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <_puts_r+0xd4>)
 80038ce:	429c      	cmp	r4, r3
 80038d0:	d101      	bne.n	80038d6 <_puts_r+0x6e>
 80038d2:	68ac      	ldr	r4, [r5, #8]
 80038d4:	e7da      	b.n	800388c <_puts_r+0x24>
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <_puts_r+0xd8>)
 80038d8:	429c      	cmp	r4, r3
 80038da:	bf08      	it	eq
 80038dc:	68ec      	ldreq	r4, [r5, #12]
 80038de:	e7d5      	b.n	800388c <_puts_r+0x24>
 80038e0:	4621      	mov	r1, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	f000 f888 	bl	80039f8 <__swsetup_r>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d0dd      	beq.n	80038a8 <_puts_r+0x40>
 80038ec:	f04f 35ff 	mov.w	r5, #4294967295
 80038f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038f2:	07da      	lsls	r2, r3, #31
 80038f4:	d405      	bmi.n	8003902 <_puts_r+0x9a>
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	059b      	lsls	r3, r3, #22
 80038fa:	d402      	bmi.n	8003902 <_puts_r+0x9a>
 80038fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fe:	f000 faa2 	bl	8003e46 <__retarget_lock_release_recursive>
 8003902:	4628      	mov	r0, r5
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	2b00      	cmp	r3, #0
 8003908:	da04      	bge.n	8003914 <_puts_r+0xac>
 800390a:	69a2      	ldr	r2, [r4, #24]
 800390c:	429a      	cmp	r2, r3
 800390e:	dc06      	bgt.n	800391e <_puts_r+0xb6>
 8003910:	290a      	cmp	r1, #10
 8003912:	d004      	beq.n	800391e <_puts_r+0xb6>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	6022      	str	r2, [r4, #0]
 800391a:	7019      	strb	r1, [r3, #0]
 800391c:	e7c5      	b.n	80038aa <_puts_r+0x42>
 800391e:	4622      	mov	r2, r4
 8003920:	4628      	mov	r0, r5
 8003922:	f000 f817 	bl	8003954 <__swbuf_r>
 8003926:	3001      	adds	r0, #1
 8003928:	d1bf      	bne.n	80038aa <_puts_r+0x42>
 800392a:	e7df      	b.n	80038ec <_puts_r+0x84>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	250a      	movs	r5, #10
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	6022      	str	r2, [r4, #0]
 8003934:	701d      	strb	r5, [r3, #0]
 8003936:	e7db      	b.n	80038f0 <_puts_r+0x88>
 8003938:	08004900 	.word	0x08004900
 800393c:	08004920 	.word	0x08004920
 8003940:	080048e0 	.word	0x080048e0

08003944 <puts>:
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <puts+0xc>)
 8003946:	4601      	mov	r1, r0
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f7ff bf8d 	b.w	8003868 <_puts_r>
 800394e:	bf00      	nop
 8003950:	2000000c 	.word	0x2000000c

08003954 <__swbuf_r>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	460e      	mov	r6, r1
 8003958:	4614      	mov	r4, r2
 800395a:	4605      	mov	r5, r0
 800395c:	b118      	cbz	r0, 8003966 <__swbuf_r+0x12>
 800395e:	6983      	ldr	r3, [r0, #24]
 8003960:	b90b      	cbnz	r3, 8003966 <__swbuf_r+0x12>
 8003962:	f000 f9d1 	bl	8003d08 <__sinit>
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <__swbuf_r+0x98>)
 8003968:	429c      	cmp	r4, r3
 800396a:	d12b      	bne.n	80039c4 <__swbuf_r+0x70>
 800396c:	686c      	ldr	r4, [r5, #4]
 800396e:	69a3      	ldr	r3, [r4, #24]
 8003970:	60a3      	str	r3, [r4, #8]
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	071a      	lsls	r2, r3, #28
 8003976:	d52f      	bpl.n	80039d8 <__swbuf_r+0x84>
 8003978:	6923      	ldr	r3, [r4, #16]
 800397a:	b36b      	cbz	r3, 80039d8 <__swbuf_r+0x84>
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	1ac0      	subs	r0, r0, r3
 8003982:	6963      	ldr	r3, [r4, #20]
 8003984:	b2f6      	uxtb	r6, r6
 8003986:	4283      	cmp	r3, r0
 8003988:	4637      	mov	r7, r6
 800398a:	dc04      	bgt.n	8003996 <__swbuf_r+0x42>
 800398c:	4621      	mov	r1, r4
 800398e:	4628      	mov	r0, r5
 8003990:	f000 f926 	bl	8003be0 <_fflush_r>
 8003994:	bb30      	cbnz	r0, 80039e4 <__swbuf_r+0x90>
 8003996:	68a3      	ldr	r3, [r4, #8]
 8003998:	3b01      	subs	r3, #1
 800399a:	60a3      	str	r3, [r4, #8]
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	6022      	str	r2, [r4, #0]
 80039a2:	701e      	strb	r6, [r3, #0]
 80039a4:	6963      	ldr	r3, [r4, #20]
 80039a6:	3001      	adds	r0, #1
 80039a8:	4283      	cmp	r3, r0
 80039aa:	d004      	beq.n	80039b6 <__swbuf_r+0x62>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	07db      	lsls	r3, r3, #31
 80039b0:	d506      	bpl.n	80039c0 <__swbuf_r+0x6c>
 80039b2:	2e0a      	cmp	r6, #10
 80039b4:	d104      	bne.n	80039c0 <__swbuf_r+0x6c>
 80039b6:	4621      	mov	r1, r4
 80039b8:	4628      	mov	r0, r5
 80039ba:	f000 f911 	bl	8003be0 <_fflush_r>
 80039be:	b988      	cbnz	r0, 80039e4 <__swbuf_r+0x90>
 80039c0:	4638      	mov	r0, r7
 80039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <__swbuf_r+0x9c>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d101      	bne.n	80039ce <__swbuf_r+0x7a>
 80039ca:	68ac      	ldr	r4, [r5, #8]
 80039cc:	e7cf      	b.n	800396e <__swbuf_r+0x1a>
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <__swbuf_r+0xa0>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	bf08      	it	eq
 80039d4:	68ec      	ldreq	r4, [r5, #12]
 80039d6:	e7ca      	b.n	800396e <__swbuf_r+0x1a>
 80039d8:	4621      	mov	r1, r4
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 f80c 	bl	80039f8 <__swsetup_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d0cb      	beq.n	800397c <__swbuf_r+0x28>
 80039e4:	f04f 37ff 	mov.w	r7, #4294967295
 80039e8:	e7ea      	b.n	80039c0 <__swbuf_r+0x6c>
 80039ea:	bf00      	nop
 80039ec:	08004900 	.word	0x08004900
 80039f0:	08004920 	.word	0x08004920
 80039f4:	080048e0 	.word	0x080048e0

080039f8 <__swsetup_r>:
 80039f8:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <__swsetup_r+0xcc>)
 80039fa:	b570      	push	{r4, r5, r6, lr}
 80039fc:	681d      	ldr	r5, [r3, #0]
 80039fe:	4606      	mov	r6, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	b125      	cbz	r5, 8003a0e <__swsetup_r+0x16>
 8003a04:	69ab      	ldr	r3, [r5, #24]
 8003a06:	b913      	cbnz	r3, 8003a0e <__swsetup_r+0x16>
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 f97d 	bl	8003d08 <__sinit>
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <__swsetup_r+0xd0>)
 8003a10:	429c      	cmp	r4, r3
 8003a12:	d10f      	bne.n	8003a34 <__swsetup_r+0x3c>
 8003a14:	686c      	ldr	r4, [r5, #4]
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a1c:	0719      	lsls	r1, r3, #28
 8003a1e:	d42c      	bmi.n	8003a7a <__swsetup_r+0x82>
 8003a20:	06dd      	lsls	r5, r3, #27
 8003a22:	d411      	bmi.n	8003a48 <__swsetup_r+0x50>
 8003a24:	2309      	movs	r3, #9
 8003a26:	6033      	str	r3, [r6, #0]
 8003a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	e03e      	b.n	8003ab2 <__swsetup_r+0xba>
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <__swsetup_r+0xd4>)
 8003a36:	429c      	cmp	r4, r3
 8003a38:	d101      	bne.n	8003a3e <__swsetup_r+0x46>
 8003a3a:	68ac      	ldr	r4, [r5, #8]
 8003a3c:	e7eb      	b.n	8003a16 <__swsetup_r+0x1e>
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <__swsetup_r+0xd8>)
 8003a40:	429c      	cmp	r4, r3
 8003a42:	bf08      	it	eq
 8003a44:	68ec      	ldreq	r4, [r5, #12]
 8003a46:	e7e6      	b.n	8003a16 <__swsetup_r+0x1e>
 8003a48:	0758      	lsls	r0, r3, #29
 8003a4a:	d512      	bpl.n	8003a72 <__swsetup_r+0x7a>
 8003a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a4e:	b141      	cbz	r1, 8003a62 <__swsetup_r+0x6a>
 8003a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a54:	4299      	cmp	r1, r3
 8003a56:	d002      	beq.n	8003a5e <__swsetup_r+0x66>
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f000 fa5b 	bl	8003f14 <_free_r>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6363      	str	r3, [r4, #52]	; 0x34
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f043 0308 	orr.w	r3, r3, #8
 8003a78:	81a3      	strh	r3, [r4, #12]
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	b94b      	cbnz	r3, 8003a92 <__swsetup_r+0x9a>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a88:	d003      	beq.n	8003a92 <__swsetup_r+0x9a>
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f000 fa01 	bl	8003e94 <__smakebuf_r>
 8003a92:	89a0      	ldrh	r0, [r4, #12]
 8003a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a98:	f010 0301 	ands.w	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <__swsetup_r+0xbc>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	6963      	ldr	r3, [r4, #20]
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	61a3      	str	r3, [r4, #24]
 8003aa8:	6923      	ldr	r3, [r4, #16]
 8003aaa:	b943      	cbnz	r3, 8003abe <__swsetup_r+0xc6>
 8003aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ab0:	d1ba      	bne.n	8003a28 <__swsetup_r+0x30>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	0781      	lsls	r1, r0, #30
 8003ab6:	bf58      	it	pl
 8003ab8:	6963      	ldrpl	r3, [r4, #20]
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	e7f4      	b.n	8003aa8 <__swsetup_r+0xb0>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	e7f7      	b.n	8003ab2 <__swsetup_r+0xba>
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	08004900 	.word	0x08004900
 8003acc:	08004920 	.word	0x08004920
 8003ad0:	080048e0 	.word	0x080048e0

08003ad4 <__sflush_r>:
 8003ad4:	898a      	ldrh	r2, [r1, #12]
 8003ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ada:	4605      	mov	r5, r0
 8003adc:	0710      	lsls	r0, r2, #28
 8003ade:	460c      	mov	r4, r1
 8003ae0:	d458      	bmi.n	8003b94 <__sflush_r+0xc0>
 8003ae2:	684b      	ldr	r3, [r1, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dc05      	bgt.n	8003af4 <__sflush_r+0x20>
 8003ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dc02      	bgt.n	8003af4 <__sflush_r+0x20>
 8003aee:	2000      	movs	r0, #0
 8003af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	d0f9      	beq.n	8003aee <__sflush_r+0x1a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b00:	682f      	ldr	r7, [r5, #0]
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	d032      	beq.n	8003b6c <__sflush_r+0x98>
 8003b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	075a      	lsls	r2, r3, #29
 8003b0c:	d505      	bpl.n	8003b1a <__sflush_r+0x46>
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	1ac0      	subs	r0, r0, r3
 8003b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b14:	b10b      	cbz	r3, 8003b1a <__sflush_r+0x46>
 8003b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b18:	1ac0      	subs	r0, r0, r3
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b20:	6a21      	ldr	r1, [r4, #32]
 8003b22:	4628      	mov	r0, r5
 8003b24:	47b0      	blx	r6
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	d106      	bne.n	8003b3a <__sflush_r+0x66>
 8003b2c:	6829      	ldr	r1, [r5, #0]
 8003b2e:	291d      	cmp	r1, #29
 8003b30:	d82c      	bhi.n	8003b8c <__sflush_r+0xb8>
 8003b32:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <__sflush_r+0x108>)
 8003b34:	40ca      	lsrs	r2, r1
 8003b36:	07d6      	lsls	r6, r2, #31
 8003b38:	d528      	bpl.n	8003b8c <__sflush_r+0xb8>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	6062      	str	r2, [r4, #4]
 8003b3e:	04d9      	lsls	r1, r3, #19
 8003b40:	6922      	ldr	r2, [r4, #16]
 8003b42:	6022      	str	r2, [r4, #0]
 8003b44:	d504      	bpl.n	8003b50 <__sflush_r+0x7c>
 8003b46:	1c42      	adds	r2, r0, #1
 8003b48:	d101      	bne.n	8003b4e <__sflush_r+0x7a>
 8003b4a:	682b      	ldr	r3, [r5, #0]
 8003b4c:	b903      	cbnz	r3, 8003b50 <__sflush_r+0x7c>
 8003b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8003b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b52:	602f      	str	r7, [r5, #0]
 8003b54:	2900      	cmp	r1, #0
 8003b56:	d0ca      	beq.n	8003aee <__sflush_r+0x1a>
 8003b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d002      	beq.n	8003b66 <__sflush_r+0x92>
 8003b60:	4628      	mov	r0, r5
 8003b62:	f000 f9d7 	bl	8003f14 <_free_r>
 8003b66:	2000      	movs	r0, #0
 8003b68:	6360      	str	r0, [r4, #52]	; 0x34
 8003b6a:	e7c1      	b.n	8003af0 <__sflush_r+0x1c>
 8003b6c:	6a21      	ldr	r1, [r4, #32]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b0      	blx	r6
 8003b74:	1c41      	adds	r1, r0, #1
 8003b76:	d1c7      	bne.n	8003b08 <__sflush_r+0x34>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0c4      	beq.n	8003b08 <__sflush_r+0x34>
 8003b7e:	2b1d      	cmp	r3, #29
 8003b80:	d001      	beq.n	8003b86 <__sflush_r+0xb2>
 8003b82:	2b16      	cmp	r3, #22
 8003b84:	d101      	bne.n	8003b8a <__sflush_r+0xb6>
 8003b86:	602f      	str	r7, [r5, #0]
 8003b88:	e7b1      	b.n	8003aee <__sflush_r+0x1a>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	e7ad      	b.n	8003af0 <__sflush_r+0x1c>
 8003b94:	690f      	ldr	r7, [r1, #16]
 8003b96:	2f00      	cmp	r7, #0
 8003b98:	d0a9      	beq.n	8003aee <__sflush_r+0x1a>
 8003b9a:	0793      	lsls	r3, r2, #30
 8003b9c:	680e      	ldr	r6, [r1, #0]
 8003b9e:	bf08      	it	eq
 8003ba0:	694b      	ldreq	r3, [r1, #20]
 8003ba2:	600f      	str	r7, [r1, #0]
 8003ba4:	bf18      	it	ne
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	eba6 0807 	sub.w	r8, r6, r7
 8003bac:	608b      	str	r3, [r1, #8]
 8003bae:	f1b8 0f00 	cmp.w	r8, #0
 8003bb2:	dd9c      	ble.n	8003aee <__sflush_r+0x1a>
 8003bb4:	6a21      	ldr	r1, [r4, #32]
 8003bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bb8:	4643      	mov	r3, r8
 8003bba:	463a      	mov	r2, r7
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47b0      	blx	r6
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	dc06      	bgt.n	8003bd2 <__sflush_r+0xfe>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	e78e      	b.n	8003af0 <__sflush_r+0x1c>
 8003bd2:	4407      	add	r7, r0
 8003bd4:	eba8 0800 	sub.w	r8, r8, r0
 8003bd8:	e7e9      	b.n	8003bae <__sflush_r+0xda>
 8003bda:	bf00      	nop
 8003bdc:	20400001 	.word	0x20400001

08003be0 <_fflush_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	690b      	ldr	r3, [r1, #16]
 8003be4:	4605      	mov	r5, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	b913      	cbnz	r3, 8003bf0 <_fflush_r+0x10>
 8003bea:	2500      	movs	r5, #0
 8003bec:	4628      	mov	r0, r5
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	b118      	cbz	r0, 8003bfa <_fflush_r+0x1a>
 8003bf2:	6983      	ldr	r3, [r0, #24]
 8003bf4:	b90b      	cbnz	r3, 8003bfa <_fflush_r+0x1a>
 8003bf6:	f000 f887 	bl	8003d08 <__sinit>
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <_fflush_r+0x6c>)
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d11b      	bne.n	8003c38 <_fflush_r+0x58>
 8003c00:	686c      	ldr	r4, [r5, #4]
 8003c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <_fflush_r+0xa>
 8003c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c0c:	07d0      	lsls	r0, r2, #31
 8003c0e:	d404      	bmi.n	8003c1a <_fflush_r+0x3a>
 8003c10:	0599      	lsls	r1, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_fflush_r+0x3a>
 8003c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c16:	f000 f915 	bl	8003e44 <__retarget_lock_acquire_recursive>
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	f7ff ff59 	bl	8003ad4 <__sflush_r>
 8003c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c24:	07da      	lsls	r2, r3, #31
 8003c26:	4605      	mov	r5, r0
 8003c28:	d4e0      	bmi.n	8003bec <_fflush_r+0xc>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	059b      	lsls	r3, r3, #22
 8003c2e:	d4dd      	bmi.n	8003bec <_fflush_r+0xc>
 8003c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c32:	f000 f908 	bl	8003e46 <__retarget_lock_release_recursive>
 8003c36:	e7d9      	b.n	8003bec <_fflush_r+0xc>
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <_fflush_r+0x70>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d101      	bne.n	8003c42 <_fflush_r+0x62>
 8003c3e:	68ac      	ldr	r4, [r5, #8]
 8003c40:	e7df      	b.n	8003c02 <_fflush_r+0x22>
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <_fflush_r+0x74>)
 8003c44:	429c      	cmp	r4, r3
 8003c46:	bf08      	it	eq
 8003c48:	68ec      	ldreq	r4, [r5, #12]
 8003c4a:	e7da      	b.n	8003c02 <_fflush_r+0x22>
 8003c4c:	08004900 	.word	0x08004900
 8003c50:	08004920 	.word	0x08004920
 8003c54:	080048e0 	.word	0x080048e0

08003c58 <std>:
 8003c58:	2300      	movs	r3, #0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6183      	str	r3, [r0, #24]
 8003c70:	4619      	mov	r1, r3
 8003c72:	2208      	movs	r2, #8
 8003c74:	305c      	adds	r0, #92	; 0x5c
 8003c76:	f7ff fdd7 	bl	8003828 <memset>
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <std+0x38>)
 8003c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <std+0x3c>)
 8003c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <std+0x40>)
 8003c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <std+0x44>)
 8003c88:	6224      	str	r4, [r4, #32]
 8003c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	080046d1 	.word	0x080046d1
 8003c94:	080046f3 	.word	0x080046f3
 8003c98:	0800472b 	.word	0x0800472b
 8003c9c:	0800474f 	.word	0x0800474f

08003ca0 <_cleanup_r>:
 8003ca0:	4901      	ldr	r1, [pc, #4]	; (8003ca8 <_cleanup_r+0x8>)
 8003ca2:	f000 b8af 	b.w	8003e04 <_fwalk_reent>
 8003ca6:	bf00      	nop
 8003ca8:	08003be1 	.word	0x08003be1

08003cac <__sfmoreglue>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	2268      	movs	r2, #104	; 0x68
 8003cb0:	1e4d      	subs	r5, r1, #1
 8003cb2:	4355      	muls	r5, r2
 8003cb4:	460e      	mov	r6, r1
 8003cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cba:	f000 f997 	bl	8003fec <_malloc_r>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	b140      	cbz	r0, 8003cd4 <__sfmoreglue+0x28>
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8003cc8:	300c      	adds	r0, #12
 8003cca:	60a0      	str	r0, [r4, #8]
 8003ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cd0:	f7ff fdaa 	bl	8003828 <memset>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}

08003cd8 <__sfp_lock_acquire>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__sfp_lock_acquire+0x8>)
 8003cda:	f000 b8b3 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8003cde:	bf00      	nop
 8003ce0:	2000012d 	.word	0x2000012d

08003ce4 <__sfp_lock_release>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	; (8003cec <__sfp_lock_release+0x8>)
 8003ce6:	f000 b8ae 	b.w	8003e46 <__retarget_lock_release_recursive>
 8003cea:	bf00      	nop
 8003cec:	2000012d 	.word	0x2000012d

08003cf0 <__sinit_lock_acquire>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__sinit_lock_acquire+0x8>)
 8003cf2:	f000 b8a7 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000012e 	.word	0x2000012e

08003cfc <__sinit_lock_release>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__sinit_lock_release+0x8>)
 8003cfe:	f000 b8a2 	b.w	8003e46 <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	2000012e 	.word	0x2000012e

08003d08 <__sinit>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	f7ff fff0 	bl	8003cf0 <__sinit_lock_acquire>
 8003d10:	69a3      	ldr	r3, [r4, #24]
 8003d12:	b11b      	cbz	r3, 8003d1c <__sinit+0x14>
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d18:	f7ff bff0 	b.w	8003cfc <__sinit_lock_release>
 8003d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d20:	6523      	str	r3, [r4, #80]	; 0x50
 8003d22:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <__sinit+0x68>)
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <__sinit+0x6c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d2a:	42a3      	cmp	r3, r4
 8003d2c:	bf04      	itt	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	61a3      	streq	r3, [r4, #24]
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 f820 	bl	8003d78 <__sfp>
 8003d38:	6060      	str	r0, [r4, #4]
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 f81c 	bl	8003d78 <__sfp>
 8003d40:	60a0      	str	r0, [r4, #8]
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 f818 	bl	8003d78 <__sfp>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60e0      	str	r0, [r4, #12]
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	6860      	ldr	r0, [r4, #4]
 8003d50:	f7ff ff82 	bl	8003c58 <std>
 8003d54:	68a0      	ldr	r0, [r4, #8]
 8003d56:	2201      	movs	r2, #1
 8003d58:	2109      	movs	r1, #9
 8003d5a:	f7ff ff7d 	bl	8003c58 <std>
 8003d5e:	68e0      	ldr	r0, [r4, #12]
 8003d60:	2202      	movs	r2, #2
 8003d62:	2112      	movs	r1, #18
 8003d64:	f7ff ff78 	bl	8003c58 <std>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	61a3      	str	r3, [r4, #24]
 8003d6c:	e7d2      	b.n	8003d14 <__sinit+0xc>
 8003d6e:	bf00      	nop
 8003d70:	080048dc 	.word	0x080048dc
 8003d74:	08003ca1 	.word	0x08003ca1

08003d78 <__sfp>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	f7ff ffac 	bl	8003cd8 <__sfp_lock_acquire>
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <__sfp+0x84>)
 8003d82:	681e      	ldr	r6, [r3, #0]
 8003d84:	69b3      	ldr	r3, [r6, #24]
 8003d86:	b913      	cbnz	r3, 8003d8e <__sfp+0x16>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7ff ffbd 	bl	8003d08 <__sinit>
 8003d8e:	3648      	adds	r6, #72	; 0x48
 8003d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	d503      	bpl.n	8003da0 <__sfp+0x28>
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	b30b      	cbz	r3, 8003de0 <__sfp+0x68>
 8003d9c:	6836      	ldr	r6, [r6, #0]
 8003d9e:	e7f7      	b.n	8003d90 <__sfp+0x18>
 8003da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003da4:	b9d5      	cbnz	r5, 8003ddc <__sfp+0x64>
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <__sfp+0x88>)
 8003da8:	60e3      	str	r3, [r4, #12]
 8003daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dae:	6665      	str	r5, [r4, #100]	; 0x64
 8003db0:	f000 f847 	bl	8003e42 <__retarget_lock_init_recursive>
 8003db4:	f7ff ff96 	bl	8003ce4 <__sfp_lock_release>
 8003db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dc0:	6025      	str	r5, [r4, #0]
 8003dc2:	61a5      	str	r5, [r4, #24]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dcc:	f7ff fd2c 	bl	8003828 <memset>
 8003dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ddc:	3468      	adds	r4, #104	; 0x68
 8003dde:	e7d9      	b.n	8003d94 <__sfp+0x1c>
 8003de0:	2104      	movs	r1, #4
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ff62 	bl	8003cac <__sfmoreglue>
 8003de8:	4604      	mov	r4, r0
 8003dea:	6030      	str	r0, [r6, #0]
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d1d5      	bne.n	8003d9c <__sfp+0x24>
 8003df0:	f7ff ff78 	bl	8003ce4 <__sfp_lock_release>
 8003df4:	230c      	movs	r3, #12
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	e7ee      	b.n	8003dd8 <__sfp+0x60>
 8003dfa:	bf00      	nop
 8003dfc:	080048dc 	.word	0x080048dc
 8003e00:	ffff0001 	.word	0xffff0001

08003e04 <_fwalk_reent>:
 8003e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e08:	4606      	mov	r6, r0
 8003e0a:	4688      	mov	r8, r1
 8003e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e10:	2700      	movs	r7, #0
 8003e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e16:	f1b9 0901 	subs.w	r9, r9, #1
 8003e1a:	d505      	bpl.n	8003e28 <_fwalk_reent+0x24>
 8003e1c:	6824      	ldr	r4, [r4, #0]
 8003e1e:	2c00      	cmp	r4, #0
 8003e20:	d1f7      	bne.n	8003e12 <_fwalk_reent+0xe>
 8003e22:	4638      	mov	r0, r7
 8003e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e28:	89ab      	ldrh	r3, [r5, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d907      	bls.n	8003e3e <_fwalk_reent+0x3a>
 8003e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e32:	3301      	adds	r3, #1
 8003e34:	d003      	beq.n	8003e3e <_fwalk_reent+0x3a>
 8003e36:	4629      	mov	r1, r5
 8003e38:	4630      	mov	r0, r6
 8003e3a:	47c0      	blx	r8
 8003e3c:	4307      	orrs	r7, r0
 8003e3e:	3568      	adds	r5, #104	; 0x68
 8003e40:	e7e9      	b.n	8003e16 <_fwalk_reent+0x12>

08003e42 <__retarget_lock_init_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <__retarget_lock_acquire_recursive>:
 8003e44:	4770      	bx	lr

08003e46 <__retarget_lock_release_recursive>:
 8003e46:	4770      	bx	lr

08003e48 <__swhatbuf_r>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	460e      	mov	r6, r1
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	2900      	cmp	r1, #0
 8003e52:	b096      	sub	sp, #88	; 0x58
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	da08      	bge.n	8003e6c <__swhatbuf_r+0x24>
 8003e5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	602a      	str	r2, [r5, #0]
 8003e62:	061a      	lsls	r2, r3, #24
 8003e64:	d410      	bmi.n	8003e88 <__swhatbuf_r+0x40>
 8003e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e6a:	e00e      	b.n	8003e8a <__swhatbuf_r+0x42>
 8003e6c:	466a      	mov	r2, sp
 8003e6e:	f000 fc95 	bl	800479c <_fstat_r>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	dbf1      	blt.n	8003e5a <__swhatbuf_r+0x12>
 8003e76:	9a01      	ldr	r2, [sp, #4]
 8003e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e80:	425a      	negs	r2, r3
 8003e82:	415a      	adcs	r2, r3
 8003e84:	602a      	str	r2, [r5, #0]
 8003e86:	e7ee      	b.n	8003e66 <__swhatbuf_r+0x1e>
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	b016      	add	sp, #88	; 0x58
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e94 <__smakebuf_r>:
 8003e94:	898b      	ldrh	r3, [r1, #12]
 8003e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e98:	079d      	lsls	r5, r3, #30
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	d507      	bpl.n	8003eb0 <__smakebuf_r+0x1c>
 8003ea0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	6163      	str	r3, [r4, #20]
 8003eac:	b002      	add	sp, #8
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	ab01      	add	r3, sp, #4
 8003eb2:	466a      	mov	r2, sp
 8003eb4:	f7ff ffc8 	bl	8003e48 <__swhatbuf_r>
 8003eb8:	9900      	ldr	r1, [sp, #0]
 8003eba:	4605      	mov	r5, r0
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 f895 	bl	8003fec <_malloc_r>
 8003ec2:	b948      	cbnz	r0, 8003ed8 <__smakebuf_r+0x44>
 8003ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d4ef      	bmi.n	8003eac <__smakebuf_r+0x18>
 8003ecc:	f023 0303 	bic.w	r3, r3, #3
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	e7e3      	b.n	8003ea0 <__smakebuf_r+0xc>
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <__smakebuf_r+0x7c>)
 8003eda:	62b3      	str	r3, [r6, #40]	; 0x28
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	9b00      	ldr	r3, [sp, #0]
 8003ee8:	6163      	str	r3, [r4, #20]
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	6120      	str	r0, [r4, #16]
 8003eee:	b15b      	cbz	r3, 8003f08 <__smakebuf_r+0x74>
 8003ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 fc63 	bl	80047c0 <_isatty_r>
 8003efa:	b128      	cbz	r0, 8003f08 <__smakebuf_r+0x74>
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	89a0      	ldrh	r0, [r4, #12]
 8003f0a:	4305      	orrs	r5, r0
 8003f0c:	81a5      	strh	r5, [r4, #12]
 8003f0e:	e7cd      	b.n	8003eac <__smakebuf_r+0x18>
 8003f10:	08003ca1 	.word	0x08003ca1

08003f14 <_free_r>:
 8003f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f16:	2900      	cmp	r1, #0
 8003f18:	d044      	beq.n	8003fa4 <_free_r+0x90>
 8003f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f1e:	9001      	str	r0, [sp, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f1a1 0404 	sub.w	r4, r1, #4
 8003f26:	bfb8      	it	lt
 8003f28:	18e4      	addlt	r4, r4, r3
 8003f2a:	f000 fc6b 	bl	8004804 <__malloc_lock>
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <_free_r+0x94>)
 8003f30:	9801      	ldr	r0, [sp, #4]
 8003f32:	6813      	ldr	r3, [r2, #0]
 8003f34:	b933      	cbnz	r3, 8003f44 <_free_r+0x30>
 8003f36:	6063      	str	r3, [r4, #4]
 8003f38:	6014      	str	r4, [r2, #0]
 8003f3a:	b003      	add	sp, #12
 8003f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f40:	f000 bc66 	b.w	8004810 <__malloc_unlock>
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d908      	bls.n	8003f5a <_free_r+0x46>
 8003f48:	6825      	ldr	r5, [r4, #0]
 8003f4a:	1961      	adds	r1, r4, r5
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	bf01      	itttt	eq
 8003f50:	6819      	ldreq	r1, [r3, #0]
 8003f52:	685b      	ldreq	r3, [r3, #4]
 8003f54:	1949      	addeq	r1, r1, r5
 8003f56:	6021      	streq	r1, [r4, #0]
 8003f58:	e7ed      	b.n	8003f36 <_free_r+0x22>
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b10b      	cbz	r3, 8003f64 <_free_r+0x50>
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	d9fa      	bls.n	8003f5a <_free_r+0x46>
 8003f64:	6811      	ldr	r1, [r2, #0]
 8003f66:	1855      	adds	r5, r2, r1
 8003f68:	42a5      	cmp	r5, r4
 8003f6a:	d10b      	bne.n	8003f84 <_free_r+0x70>
 8003f6c:	6824      	ldr	r4, [r4, #0]
 8003f6e:	4421      	add	r1, r4
 8003f70:	1854      	adds	r4, r2, r1
 8003f72:	42a3      	cmp	r3, r4
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	d1e0      	bne.n	8003f3a <_free_r+0x26>
 8003f78:	681c      	ldr	r4, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	6053      	str	r3, [r2, #4]
 8003f7e:	4421      	add	r1, r4
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	e7da      	b.n	8003f3a <_free_r+0x26>
 8003f84:	d902      	bls.n	8003f8c <_free_r+0x78>
 8003f86:	230c      	movs	r3, #12
 8003f88:	6003      	str	r3, [r0, #0]
 8003f8a:	e7d6      	b.n	8003f3a <_free_r+0x26>
 8003f8c:	6825      	ldr	r5, [r4, #0]
 8003f8e:	1961      	adds	r1, r4, r5
 8003f90:	428b      	cmp	r3, r1
 8003f92:	bf04      	itt	eq
 8003f94:	6819      	ldreq	r1, [r3, #0]
 8003f96:	685b      	ldreq	r3, [r3, #4]
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	bf04      	itt	eq
 8003f9c:	1949      	addeq	r1, r1, r5
 8003f9e:	6021      	streq	r1, [r4, #0]
 8003fa0:	6054      	str	r4, [r2, #4]
 8003fa2:	e7ca      	b.n	8003f3a <_free_r+0x26>
 8003fa4:	b003      	add	sp, #12
 8003fa6:	bd30      	pop	{r4, r5, pc}
 8003fa8:	20000130 	.word	0x20000130

08003fac <sbrk_aligned>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4e0e      	ldr	r6, [pc, #56]	; (8003fe8 <sbrk_aligned+0x3c>)
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	6831      	ldr	r1, [r6, #0]
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	b911      	cbnz	r1, 8003fbe <sbrk_aligned+0x12>
 8003fb8:	f000 fb7a 	bl	80046b0 <_sbrk_r>
 8003fbc:	6030      	str	r0, [r6, #0]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 fb75 	bl	80046b0 <_sbrk_r>
 8003fc6:	1c43      	adds	r3, r0, #1
 8003fc8:	d00a      	beq.n	8003fe0 <sbrk_aligned+0x34>
 8003fca:	1cc4      	adds	r4, r0, #3
 8003fcc:	f024 0403 	bic.w	r4, r4, #3
 8003fd0:	42a0      	cmp	r0, r4
 8003fd2:	d007      	beq.n	8003fe4 <sbrk_aligned+0x38>
 8003fd4:	1a21      	subs	r1, r4, r0
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 fb6a 	bl	80046b0 <_sbrk_r>
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d101      	bne.n	8003fe4 <sbrk_aligned+0x38>
 8003fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	20000134 	.word	0x20000134

08003fec <_malloc_r>:
 8003fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff0:	1ccd      	adds	r5, r1, #3
 8003ff2:	f025 0503 	bic.w	r5, r5, #3
 8003ff6:	3508      	adds	r5, #8
 8003ff8:	2d0c      	cmp	r5, #12
 8003ffa:	bf38      	it	cc
 8003ffc:	250c      	movcc	r5, #12
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	4607      	mov	r7, r0
 8004002:	db01      	blt.n	8004008 <_malloc_r+0x1c>
 8004004:	42a9      	cmp	r1, r5
 8004006:	d905      	bls.n	8004014 <_malloc_r+0x28>
 8004008:	230c      	movs	r3, #12
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	2600      	movs	r6, #0
 800400e:	4630      	mov	r0, r6
 8004010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004014:	4e2e      	ldr	r6, [pc, #184]	; (80040d0 <_malloc_r+0xe4>)
 8004016:	f000 fbf5 	bl	8004804 <__malloc_lock>
 800401a:	6833      	ldr	r3, [r6, #0]
 800401c:	461c      	mov	r4, r3
 800401e:	bb34      	cbnz	r4, 800406e <_malloc_r+0x82>
 8004020:	4629      	mov	r1, r5
 8004022:	4638      	mov	r0, r7
 8004024:	f7ff ffc2 	bl	8003fac <sbrk_aligned>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	4604      	mov	r4, r0
 800402c:	d14d      	bne.n	80040ca <_malloc_r+0xde>
 800402e:	6834      	ldr	r4, [r6, #0]
 8004030:	4626      	mov	r6, r4
 8004032:	2e00      	cmp	r6, #0
 8004034:	d140      	bne.n	80040b8 <_malloc_r+0xcc>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	4631      	mov	r1, r6
 800403a:	4638      	mov	r0, r7
 800403c:	eb04 0803 	add.w	r8, r4, r3
 8004040:	f000 fb36 	bl	80046b0 <_sbrk_r>
 8004044:	4580      	cmp	r8, r0
 8004046:	d13a      	bne.n	80040be <_malloc_r+0xd2>
 8004048:	6821      	ldr	r1, [r4, #0]
 800404a:	3503      	adds	r5, #3
 800404c:	1a6d      	subs	r5, r5, r1
 800404e:	f025 0503 	bic.w	r5, r5, #3
 8004052:	3508      	adds	r5, #8
 8004054:	2d0c      	cmp	r5, #12
 8004056:	bf38      	it	cc
 8004058:	250c      	movcc	r5, #12
 800405a:	4629      	mov	r1, r5
 800405c:	4638      	mov	r0, r7
 800405e:	f7ff ffa5 	bl	8003fac <sbrk_aligned>
 8004062:	3001      	adds	r0, #1
 8004064:	d02b      	beq.n	80040be <_malloc_r+0xd2>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	442b      	add	r3, r5
 800406a:	6023      	str	r3, [r4, #0]
 800406c:	e00e      	b.n	800408c <_malloc_r+0xa0>
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	1b52      	subs	r2, r2, r5
 8004072:	d41e      	bmi.n	80040b2 <_malloc_r+0xc6>
 8004074:	2a0b      	cmp	r2, #11
 8004076:	d916      	bls.n	80040a6 <_malloc_r+0xba>
 8004078:	1961      	adds	r1, r4, r5
 800407a:	42a3      	cmp	r3, r4
 800407c:	6025      	str	r5, [r4, #0]
 800407e:	bf18      	it	ne
 8004080:	6059      	strne	r1, [r3, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	bf08      	it	eq
 8004086:	6031      	streq	r1, [r6, #0]
 8004088:	5162      	str	r2, [r4, r5]
 800408a:	604b      	str	r3, [r1, #4]
 800408c:	4638      	mov	r0, r7
 800408e:	f104 060b 	add.w	r6, r4, #11
 8004092:	f000 fbbd 	bl	8004810 <__malloc_unlock>
 8004096:	f026 0607 	bic.w	r6, r6, #7
 800409a:	1d23      	adds	r3, r4, #4
 800409c:	1af2      	subs	r2, r6, r3
 800409e:	d0b6      	beq.n	800400e <_malloc_r+0x22>
 80040a0:	1b9b      	subs	r3, r3, r6
 80040a2:	50a3      	str	r3, [r4, r2]
 80040a4:	e7b3      	b.n	800400e <_malloc_r+0x22>
 80040a6:	6862      	ldr	r2, [r4, #4]
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	bf0c      	ite	eq
 80040ac:	6032      	streq	r2, [r6, #0]
 80040ae:	605a      	strne	r2, [r3, #4]
 80040b0:	e7ec      	b.n	800408c <_malloc_r+0xa0>
 80040b2:	4623      	mov	r3, r4
 80040b4:	6864      	ldr	r4, [r4, #4]
 80040b6:	e7b2      	b.n	800401e <_malloc_r+0x32>
 80040b8:	4634      	mov	r4, r6
 80040ba:	6876      	ldr	r6, [r6, #4]
 80040bc:	e7b9      	b.n	8004032 <_malloc_r+0x46>
 80040be:	230c      	movs	r3, #12
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	4638      	mov	r0, r7
 80040c4:	f000 fba4 	bl	8004810 <__malloc_unlock>
 80040c8:	e7a1      	b.n	800400e <_malloc_r+0x22>
 80040ca:	6025      	str	r5, [r4, #0]
 80040cc:	e7de      	b.n	800408c <_malloc_r+0xa0>
 80040ce:	bf00      	nop
 80040d0:	20000130 	.word	0x20000130

080040d4 <__sfputc_r>:
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	b410      	push	{r4}
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	da08      	bge.n	80040f2 <__sfputc_r+0x1e>
 80040e0:	6994      	ldr	r4, [r2, #24]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	db01      	blt.n	80040ea <__sfputc_r+0x16>
 80040e6:	290a      	cmp	r1, #10
 80040e8:	d103      	bne.n	80040f2 <__sfputc_r+0x1e>
 80040ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ee:	f7ff bc31 	b.w	8003954 <__swbuf_r>
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	1c58      	adds	r0, r3, #1
 80040f6:	6010      	str	r0, [r2, #0]
 80040f8:	7019      	strb	r1, [r3, #0]
 80040fa:	4608      	mov	r0, r1
 80040fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004100:	4770      	bx	lr

08004102 <__sfputs_r>:
 8004102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	4614      	mov	r4, r2
 800410a:	18d5      	adds	r5, r2, r3
 800410c:	42ac      	cmp	r4, r5
 800410e:	d101      	bne.n	8004114 <__sfputs_r+0x12>
 8004110:	2000      	movs	r0, #0
 8004112:	e007      	b.n	8004124 <__sfputs_r+0x22>
 8004114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004118:	463a      	mov	r2, r7
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ffda 	bl	80040d4 <__sfputc_r>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d1f3      	bne.n	800410c <__sfputs_r+0xa>
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004128 <_vfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	460d      	mov	r5, r1
 800412e:	b09d      	sub	sp, #116	; 0x74
 8004130:	4614      	mov	r4, r2
 8004132:	4698      	mov	r8, r3
 8004134:	4606      	mov	r6, r0
 8004136:	b118      	cbz	r0, 8004140 <_vfiprintf_r+0x18>
 8004138:	6983      	ldr	r3, [r0, #24]
 800413a:	b90b      	cbnz	r3, 8004140 <_vfiprintf_r+0x18>
 800413c:	f7ff fde4 	bl	8003d08 <__sinit>
 8004140:	4b89      	ldr	r3, [pc, #548]	; (8004368 <_vfiprintf_r+0x240>)
 8004142:	429d      	cmp	r5, r3
 8004144:	d11b      	bne.n	800417e <_vfiprintf_r+0x56>
 8004146:	6875      	ldr	r5, [r6, #4]
 8004148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800414a:	07d9      	lsls	r1, r3, #31
 800414c:	d405      	bmi.n	800415a <_vfiprintf_r+0x32>
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	059a      	lsls	r2, r3, #22
 8004152:	d402      	bmi.n	800415a <_vfiprintf_r+0x32>
 8004154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004156:	f7ff fe75 	bl	8003e44 <__retarget_lock_acquire_recursive>
 800415a:	89ab      	ldrh	r3, [r5, #12]
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	d501      	bpl.n	8004164 <_vfiprintf_r+0x3c>
 8004160:	692b      	ldr	r3, [r5, #16]
 8004162:	b9eb      	cbnz	r3, 80041a0 <_vfiprintf_r+0x78>
 8004164:	4629      	mov	r1, r5
 8004166:	4630      	mov	r0, r6
 8004168:	f7ff fc46 	bl	80039f8 <__swsetup_r>
 800416c:	b1c0      	cbz	r0, 80041a0 <_vfiprintf_r+0x78>
 800416e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004170:	07dc      	lsls	r4, r3, #31
 8004172:	d50e      	bpl.n	8004192 <_vfiprintf_r+0x6a>
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	b01d      	add	sp, #116	; 0x74
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	4b7b      	ldr	r3, [pc, #492]	; (800436c <_vfiprintf_r+0x244>)
 8004180:	429d      	cmp	r5, r3
 8004182:	d101      	bne.n	8004188 <_vfiprintf_r+0x60>
 8004184:	68b5      	ldr	r5, [r6, #8]
 8004186:	e7df      	b.n	8004148 <_vfiprintf_r+0x20>
 8004188:	4b79      	ldr	r3, [pc, #484]	; (8004370 <_vfiprintf_r+0x248>)
 800418a:	429d      	cmp	r5, r3
 800418c:	bf08      	it	eq
 800418e:	68f5      	ldreq	r5, [r6, #12]
 8004190:	e7da      	b.n	8004148 <_vfiprintf_r+0x20>
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	0598      	lsls	r0, r3, #22
 8004196:	d4ed      	bmi.n	8004174 <_vfiprintf_r+0x4c>
 8004198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800419a:	f7ff fe54 	bl	8003e46 <__retarget_lock_release_recursive>
 800419e:	e7e9      	b.n	8004174 <_vfiprintf_r+0x4c>
 80041a0:	2300      	movs	r3, #0
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
 80041a4:	2320      	movs	r3, #32
 80041a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ae:	2330      	movs	r3, #48	; 0x30
 80041b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004374 <_vfiprintf_r+0x24c>
 80041b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b8:	f04f 0901 	mov.w	r9, #1
 80041bc:	4623      	mov	r3, r4
 80041be:	469a      	mov	sl, r3
 80041c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c4:	b10a      	cbz	r2, 80041ca <_vfiprintf_r+0xa2>
 80041c6:	2a25      	cmp	r2, #37	; 0x25
 80041c8:	d1f9      	bne.n	80041be <_vfiprintf_r+0x96>
 80041ca:	ebba 0b04 	subs.w	fp, sl, r4
 80041ce:	d00b      	beq.n	80041e8 <_vfiprintf_r+0xc0>
 80041d0:	465b      	mov	r3, fp
 80041d2:	4622      	mov	r2, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff ff93 	bl	8004102 <__sfputs_r>
 80041dc:	3001      	adds	r0, #1
 80041de:	f000 80aa 	beq.w	8004336 <_vfiprintf_r+0x20e>
 80041e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e4:	445a      	add	r2, fp
 80041e6:	9209      	str	r2, [sp, #36]	; 0x24
 80041e8:	f89a 3000 	ldrb.w	r3, [sl]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a2 	beq.w	8004336 <_vfiprintf_r+0x20e>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fc:	f10a 0a01 	add.w	sl, sl, #1
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004208:	931a      	str	r3, [sp, #104]	; 0x68
 800420a:	4654      	mov	r4, sl
 800420c:	2205      	movs	r2, #5
 800420e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004212:	4858      	ldr	r0, [pc, #352]	; (8004374 <_vfiprintf_r+0x24c>)
 8004214:	f7fb fffc 	bl	8000210 <memchr>
 8004218:	9a04      	ldr	r2, [sp, #16]
 800421a:	b9d8      	cbnz	r0, 8004254 <_vfiprintf_r+0x12c>
 800421c:	06d1      	lsls	r1, r2, #27
 800421e:	bf44      	itt	mi
 8004220:	2320      	movmi	r3, #32
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004226:	0713      	lsls	r3, r2, #28
 8004228:	bf44      	itt	mi
 800422a:	232b      	movmi	r3, #43	; 0x2b
 800422c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004230:	f89a 3000 	ldrb.w	r3, [sl]
 8004234:	2b2a      	cmp	r3, #42	; 0x2a
 8004236:	d015      	beq.n	8004264 <_vfiprintf_r+0x13c>
 8004238:	9a07      	ldr	r2, [sp, #28]
 800423a:	4654      	mov	r4, sl
 800423c:	2000      	movs	r0, #0
 800423e:	f04f 0c0a 	mov.w	ip, #10
 8004242:	4621      	mov	r1, r4
 8004244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004248:	3b30      	subs	r3, #48	; 0x30
 800424a:	2b09      	cmp	r3, #9
 800424c:	d94e      	bls.n	80042ec <_vfiprintf_r+0x1c4>
 800424e:	b1b0      	cbz	r0, 800427e <_vfiprintf_r+0x156>
 8004250:	9207      	str	r2, [sp, #28]
 8004252:	e014      	b.n	800427e <_vfiprintf_r+0x156>
 8004254:	eba0 0308 	sub.w	r3, r0, r8
 8004258:	fa09 f303 	lsl.w	r3, r9, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	46a2      	mov	sl, r4
 8004262:	e7d2      	b.n	800420a <_vfiprintf_r+0xe2>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	1d19      	adds	r1, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	9103      	str	r1, [sp, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	bfbb      	ittet	lt
 8004270:	425b      	neglt	r3, r3
 8004272:	f042 0202 	orrlt.w	r2, r2, #2
 8004276:	9307      	strge	r3, [sp, #28]
 8004278:	9307      	strlt	r3, [sp, #28]
 800427a:	bfb8      	it	lt
 800427c:	9204      	strlt	r2, [sp, #16]
 800427e:	7823      	ldrb	r3, [r4, #0]
 8004280:	2b2e      	cmp	r3, #46	; 0x2e
 8004282:	d10c      	bne.n	800429e <_vfiprintf_r+0x176>
 8004284:	7863      	ldrb	r3, [r4, #1]
 8004286:	2b2a      	cmp	r3, #42	; 0x2a
 8004288:	d135      	bne.n	80042f6 <_vfiprintf_r+0x1ce>
 800428a:	9b03      	ldr	r3, [sp, #12]
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9203      	str	r2, [sp, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	f04f 33ff 	movlt.w	r3, #4294967295
 800429a:	3402      	adds	r4, #2
 800429c:	9305      	str	r3, [sp, #20]
 800429e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004384 <_vfiprintf_r+0x25c>
 80042a2:	7821      	ldrb	r1, [r4, #0]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4650      	mov	r0, sl
 80042a8:	f7fb ffb2 	bl	8000210 <memchr>
 80042ac:	b140      	cbz	r0, 80042c0 <_vfiprintf_r+0x198>
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	eba0 000a 	sub.w	r0, r0, sl
 80042b4:	fa03 f000 	lsl.w	r0, r3, r0
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	4303      	orrs	r3, r0
 80042bc:	3401      	adds	r4, #1
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c4:	482c      	ldr	r0, [pc, #176]	; (8004378 <_vfiprintf_r+0x250>)
 80042c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ca:	2206      	movs	r2, #6
 80042cc:	f7fb ffa0 	bl	8000210 <memchr>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d03f      	beq.n	8004354 <_vfiprintf_r+0x22c>
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <_vfiprintf_r+0x254>)
 80042d6:	bb1b      	cbnz	r3, 8004320 <_vfiprintf_r+0x1f8>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	3307      	adds	r3, #7
 80042dc:	f023 0307 	bic.w	r3, r3, #7
 80042e0:	3308      	adds	r3, #8
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e6:	443b      	add	r3, r7
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	e767      	b.n	80041bc <_vfiprintf_r+0x94>
 80042ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f0:	460c      	mov	r4, r1
 80042f2:	2001      	movs	r0, #1
 80042f4:	e7a5      	b.n	8004242 <_vfiprintf_r+0x11a>
 80042f6:	2300      	movs	r3, #0
 80042f8:	3401      	adds	r4, #1
 80042fa:	9305      	str	r3, [sp, #20]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 0c0a 	mov.w	ip, #10
 8004302:	4620      	mov	r0, r4
 8004304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004308:	3a30      	subs	r2, #48	; 0x30
 800430a:	2a09      	cmp	r2, #9
 800430c:	d903      	bls.n	8004316 <_vfiprintf_r+0x1ee>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0c5      	beq.n	800429e <_vfiprintf_r+0x176>
 8004312:	9105      	str	r1, [sp, #20]
 8004314:	e7c3      	b.n	800429e <_vfiprintf_r+0x176>
 8004316:	fb0c 2101 	mla	r1, ip, r1, r2
 800431a:	4604      	mov	r4, r0
 800431c:	2301      	movs	r3, #1
 800431e:	e7f0      	b.n	8004302 <_vfiprintf_r+0x1da>
 8004320:	ab03      	add	r3, sp, #12
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	462a      	mov	r2, r5
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <_vfiprintf_r+0x258>)
 8004328:	a904      	add	r1, sp, #16
 800432a:	4630      	mov	r0, r6
 800432c:	f3af 8000 	nop.w
 8004330:	4607      	mov	r7, r0
 8004332:	1c78      	adds	r0, r7, #1
 8004334:	d1d6      	bne.n	80042e4 <_vfiprintf_r+0x1bc>
 8004336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004338:	07d9      	lsls	r1, r3, #31
 800433a:	d405      	bmi.n	8004348 <_vfiprintf_r+0x220>
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	059a      	lsls	r2, r3, #22
 8004340:	d402      	bmi.n	8004348 <_vfiprintf_r+0x220>
 8004342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004344:	f7ff fd7f 	bl	8003e46 <__retarget_lock_release_recursive>
 8004348:	89ab      	ldrh	r3, [r5, #12]
 800434a:	065b      	lsls	r3, r3, #25
 800434c:	f53f af12 	bmi.w	8004174 <_vfiprintf_r+0x4c>
 8004350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004352:	e711      	b.n	8004178 <_vfiprintf_r+0x50>
 8004354:	ab03      	add	r3, sp, #12
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	462a      	mov	r2, r5
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <_vfiprintf_r+0x258>)
 800435c:	a904      	add	r1, sp, #16
 800435e:	4630      	mov	r0, r6
 8004360:	f000 f880 	bl	8004464 <_printf_i>
 8004364:	e7e4      	b.n	8004330 <_vfiprintf_r+0x208>
 8004366:	bf00      	nop
 8004368:	08004900 	.word	0x08004900
 800436c:	08004920 	.word	0x08004920
 8004370:	080048e0 	.word	0x080048e0
 8004374:	08004940 	.word	0x08004940
 8004378:	0800494a 	.word	0x0800494a
 800437c:	00000000 	.word	0x00000000
 8004380:	08004103 	.word	0x08004103
 8004384:	08004946 	.word	0x08004946

08004388 <_printf_common>:
 8004388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	4616      	mov	r6, r2
 800438e:	4699      	mov	r9, r3
 8004390:	688a      	ldr	r2, [r1, #8]
 8004392:	690b      	ldr	r3, [r1, #16]
 8004394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004398:	4293      	cmp	r3, r2
 800439a:	bfb8      	it	lt
 800439c:	4613      	movlt	r3, r2
 800439e:	6033      	str	r3, [r6, #0]
 80043a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043a4:	4607      	mov	r7, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b10a      	cbz	r2, 80043ae <_printf_common+0x26>
 80043aa:	3301      	adds	r3, #1
 80043ac:	6033      	str	r3, [r6, #0]
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	0699      	lsls	r1, r3, #26
 80043b2:	bf42      	ittt	mi
 80043b4:	6833      	ldrmi	r3, [r6, #0]
 80043b6:	3302      	addmi	r3, #2
 80043b8:	6033      	strmi	r3, [r6, #0]
 80043ba:	6825      	ldr	r5, [r4, #0]
 80043bc:	f015 0506 	ands.w	r5, r5, #6
 80043c0:	d106      	bne.n	80043d0 <_printf_common+0x48>
 80043c2:	f104 0a19 	add.w	sl, r4, #25
 80043c6:	68e3      	ldr	r3, [r4, #12]
 80043c8:	6832      	ldr	r2, [r6, #0]
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	42ab      	cmp	r3, r5
 80043ce:	dc26      	bgt.n	800441e <_printf_common+0x96>
 80043d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043d4:	1e13      	subs	r3, r2, #0
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	bf18      	it	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	0692      	lsls	r2, r2, #26
 80043de:	d42b      	bmi.n	8004438 <_printf_common+0xb0>
 80043e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e4:	4649      	mov	r1, r9
 80043e6:	4638      	mov	r0, r7
 80043e8:	47c0      	blx	r8
 80043ea:	3001      	adds	r0, #1
 80043ec:	d01e      	beq.n	800442c <_printf_common+0xa4>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	68e5      	ldr	r5, [r4, #12]
 80043f2:	6832      	ldr	r2, [r6, #0]
 80043f4:	f003 0306 	and.w	r3, r3, #6
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	bf08      	it	eq
 80043fc:	1aad      	subeq	r5, r5, r2
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	6922      	ldr	r2, [r4, #16]
 8004402:	bf0c      	ite	eq
 8004404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004408:	2500      	movne	r5, #0
 800440a:	4293      	cmp	r3, r2
 800440c:	bfc4      	itt	gt
 800440e:	1a9b      	subgt	r3, r3, r2
 8004410:	18ed      	addgt	r5, r5, r3
 8004412:	2600      	movs	r6, #0
 8004414:	341a      	adds	r4, #26
 8004416:	42b5      	cmp	r5, r6
 8004418:	d11a      	bne.n	8004450 <_printf_common+0xc8>
 800441a:	2000      	movs	r0, #0
 800441c:	e008      	b.n	8004430 <_printf_common+0xa8>
 800441e:	2301      	movs	r3, #1
 8004420:	4652      	mov	r2, sl
 8004422:	4649      	mov	r1, r9
 8004424:	4638      	mov	r0, r7
 8004426:	47c0      	blx	r8
 8004428:	3001      	adds	r0, #1
 800442a:	d103      	bne.n	8004434 <_printf_common+0xac>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004434:	3501      	adds	r5, #1
 8004436:	e7c6      	b.n	80043c6 <_printf_common+0x3e>
 8004438:	18e1      	adds	r1, r4, r3
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	2030      	movs	r0, #48	; 0x30
 800443e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004442:	4422      	add	r2, r4
 8004444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800444c:	3302      	adds	r3, #2
 800444e:	e7c7      	b.n	80043e0 <_printf_common+0x58>
 8004450:	2301      	movs	r3, #1
 8004452:	4622      	mov	r2, r4
 8004454:	4649      	mov	r1, r9
 8004456:	4638      	mov	r0, r7
 8004458:	47c0      	blx	r8
 800445a:	3001      	adds	r0, #1
 800445c:	d0e6      	beq.n	800442c <_printf_common+0xa4>
 800445e:	3601      	adds	r6, #1
 8004460:	e7d9      	b.n	8004416 <_printf_common+0x8e>
	...

08004464 <_printf_i>:
 8004464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	7e0f      	ldrb	r7, [r1, #24]
 800446a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800446c:	2f78      	cmp	r7, #120	; 0x78
 800446e:	4691      	mov	r9, r2
 8004470:	4680      	mov	r8, r0
 8004472:	460c      	mov	r4, r1
 8004474:	469a      	mov	sl, r3
 8004476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800447a:	d807      	bhi.n	800448c <_printf_i+0x28>
 800447c:	2f62      	cmp	r7, #98	; 0x62
 800447e:	d80a      	bhi.n	8004496 <_printf_i+0x32>
 8004480:	2f00      	cmp	r7, #0
 8004482:	f000 80d8 	beq.w	8004636 <_printf_i+0x1d2>
 8004486:	2f58      	cmp	r7, #88	; 0x58
 8004488:	f000 80a3 	beq.w	80045d2 <_printf_i+0x16e>
 800448c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004494:	e03a      	b.n	800450c <_printf_i+0xa8>
 8004496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800449a:	2b15      	cmp	r3, #21
 800449c:	d8f6      	bhi.n	800448c <_printf_i+0x28>
 800449e:	a101      	add	r1, pc, #4	; (adr r1, 80044a4 <_printf_i+0x40>)
 80044a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044a4:	080044fd 	.word	0x080044fd
 80044a8:	08004511 	.word	0x08004511
 80044ac:	0800448d 	.word	0x0800448d
 80044b0:	0800448d 	.word	0x0800448d
 80044b4:	0800448d 	.word	0x0800448d
 80044b8:	0800448d 	.word	0x0800448d
 80044bc:	08004511 	.word	0x08004511
 80044c0:	0800448d 	.word	0x0800448d
 80044c4:	0800448d 	.word	0x0800448d
 80044c8:	0800448d 	.word	0x0800448d
 80044cc:	0800448d 	.word	0x0800448d
 80044d0:	0800461d 	.word	0x0800461d
 80044d4:	08004541 	.word	0x08004541
 80044d8:	080045ff 	.word	0x080045ff
 80044dc:	0800448d 	.word	0x0800448d
 80044e0:	0800448d 	.word	0x0800448d
 80044e4:	0800463f 	.word	0x0800463f
 80044e8:	0800448d 	.word	0x0800448d
 80044ec:	08004541 	.word	0x08004541
 80044f0:	0800448d 	.word	0x0800448d
 80044f4:	0800448d 	.word	0x0800448d
 80044f8:	08004607 	.word	0x08004607
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	602a      	str	r2, [r5, #0]
 8004504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800450c:	2301      	movs	r3, #1
 800450e:	e0a3      	b.n	8004658 <_printf_i+0x1f4>
 8004510:	6820      	ldr	r0, [r4, #0]
 8004512:	6829      	ldr	r1, [r5, #0]
 8004514:	0606      	lsls	r6, r0, #24
 8004516:	f101 0304 	add.w	r3, r1, #4
 800451a:	d50a      	bpl.n	8004532 <_printf_i+0xce>
 800451c:	680e      	ldr	r6, [r1, #0]
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	2e00      	cmp	r6, #0
 8004522:	da03      	bge.n	800452c <_printf_i+0xc8>
 8004524:	232d      	movs	r3, #45	; 0x2d
 8004526:	4276      	negs	r6, r6
 8004528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452c:	485e      	ldr	r0, [pc, #376]	; (80046a8 <_printf_i+0x244>)
 800452e:	230a      	movs	r3, #10
 8004530:	e019      	b.n	8004566 <_printf_i+0x102>
 8004532:	680e      	ldr	r6, [r1, #0]
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800453a:	bf18      	it	ne
 800453c:	b236      	sxthne	r6, r6
 800453e:	e7ef      	b.n	8004520 <_printf_i+0xbc>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	1d19      	adds	r1, r3, #4
 8004546:	6029      	str	r1, [r5, #0]
 8004548:	0601      	lsls	r1, r0, #24
 800454a:	d501      	bpl.n	8004550 <_printf_i+0xec>
 800454c:	681e      	ldr	r6, [r3, #0]
 800454e:	e002      	b.n	8004556 <_printf_i+0xf2>
 8004550:	0646      	lsls	r6, r0, #25
 8004552:	d5fb      	bpl.n	800454c <_printf_i+0xe8>
 8004554:	881e      	ldrh	r6, [r3, #0]
 8004556:	4854      	ldr	r0, [pc, #336]	; (80046a8 <_printf_i+0x244>)
 8004558:	2f6f      	cmp	r7, #111	; 0x6f
 800455a:	bf0c      	ite	eq
 800455c:	2308      	moveq	r3, #8
 800455e:	230a      	movne	r3, #10
 8004560:	2100      	movs	r1, #0
 8004562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004566:	6865      	ldr	r5, [r4, #4]
 8004568:	60a5      	str	r5, [r4, #8]
 800456a:	2d00      	cmp	r5, #0
 800456c:	bfa2      	ittt	ge
 800456e:	6821      	ldrge	r1, [r4, #0]
 8004570:	f021 0104 	bicge.w	r1, r1, #4
 8004574:	6021      	strge	r1, [r4, #0]
 8004576:	b90e      	cbnz	r6, 800457c <_printf_i+0x118>
 8004578:	2d00      	cmp	r5, #0
 800457a:	d04d      	beq.n	8004618 <_printf_i+0x1b4>
 800457c:	4615      	mov	r5, r2
 800457e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004582:	fb03 6711 	mls	r7, r3, r1, r6
 8004586:	5dc7      	ldrb	r7, [r0, r7]
 8004588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800458c:	4637      	mov	r7, r6
 800458e:	42bb      	cmp	r3, r7
 8004590:	460e      	mov	r6, r1
 8004592:	d9f4      	bls.n	800457e <_printf_i+0x11a>
 8004594:	2b08      	cmp	r3, #8
 8004596:	d10b      	bne.n	80045b0 <_printf_i+0x14c>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	07de      	lsls	r6, r3, #31
 800459c:	d508      	bpl.n	80045b0 <_printf_i+0x14c>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	6861      	ldr	r1, [r4, #4]
 80045a2:	4299      	cmp	r1, r3
 80045a4:	bfde      	ittt	le
 80045a6:	2330      	movle	r3, #48	; 0x30
 80045a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045b0:	1b52      	subs	r2, r2, r5
 80045b2:	6122      	str	r2, [r4, #16]
 80045b4:	f8cd a000 	str.w	sl, [sp]
 80045b8:	464b      	mov	r3, r9
 80045ba:	aa03      	add	r2, sp, #12
 80045bc:	4621      	mov	r1, r4
 80045be:	4640      	mov	r0, r8
 80045c0:	f7ff fee2 	bl	8004388 <_printf_common>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d14c      	bne.n	8004662 <_printf_i+0x1fe>
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	b004      	add	sp, #16
 80045ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d2:	4835      	ldr	r0, [pc, #212]	; (80046a8 <_printf_i+0x244>)
 80045d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045d8:	6829      	ldr	r1, [r5, #0]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80045e0:	6029      	str	r1, [r5, #0]
 80045e2:	061d      	lsls	r5, r3, #24
 80045e4:	d514      	bpl.n	8004610 <_printf_i+0x1ac>
 80045e6:	07df      	lsls	r7, r3, #31
 80045e8:	bf44      	itt	mi
 80045ea:	f043 0320 	orrmi.w	r3, r3, #32
 80045ee:	6023      	strmi	r3, [r4, #0]
 80045f0:	b91e      	cbnz	r6, 80045fa <_printf_i+0x196>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	f023 0320 	bic.w	r3, r3, #32
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	2310      	movs	r3, #16
 80045fc:	e7b0      	b.n	8004560 <_printf_i+0xfc>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f043 0320 	orr.w	r3, r3, #32
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	2378      	movs	r3, #120	; 0x78
 8004608:	4828      	ldr	r0, [pc, #160]	; (80046ac <_printf_i+0x248>)
 800460a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800460e:	e7e3      	b.n	80045d8 <_printf_i+0x174>
 8004610:	0659      	lsls	r1, r3, #25
 8004612:	bf48      	it	mi
 8004614:	b2b6      	uxthmi	r6, r6
 8004616:	e7e6      	b.n	80045e6 <_printf_i+0x182>
 8004618:	4615      	mov	r5, r2
 800461a:	e7bb      	b.n	8004594 <_printf_i+0x130>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	6826      	ldr	r6, [r4, #0]
 8004620:	6961      	ldr	r1, [r4, #20]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6028      	str	r0, [r5, #0]
 8004626:	0635      	lsls	r5, r6, #24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	d501      	bpl.n	8004630 <_printf_i+0x1cc>
 800462c:	6019      	str	r1, [r3, #0]
 800462e:	e002      	b.n	8004636 <_printf_i+0x1d2>
 8004630:	0670      	lsls	r0, r6, #25
 8004632:	d5fb      	bpl.n	800462c <_printf_i+0x1c8>
 8004634:	8019      	strh	r1, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	4615      	mov	r5, r2
 800463c:	e7ba      	b.n	80045b4 <_printf_i+0x150>
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	1d1a      	adds	r2, r3, #4
 8004642:	602a      	str	r2, [r5, #0]
 8004644:	681d      	ldr	r5, [r3, #0]
 8004646:	6862      	ldr	r2, [r4, #4]
 8004648:	2100      	movs	r1, #0
 800464a:	4628      	mov	r0, r5
 800464c:	f7fb fde0 	bl	8000210 <memchr>
 8004650:	b108      	cbz	r0, 8004656 <_printf_i+0x1f2>
 8004652:	1b40      	subs	r0, r0, r5
 8004654:	6060      	str	r0, [r4, #4]
 8004656:	6863      	ldr	r3, [r4, #4]
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	2300      	movs	r3, #0
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	e7a8      	b.n	80045b4 <_printf_i+0x150>
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	462a      	mov	r2, r5
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d0ab      	beq.n	80045c8 <_printf_i+0x164>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	079b      	lsls	r3, r3, #30
 8004674:	d413      	bmi.n	800469e <_printf_i+0x23a>
 8004676:	68e0      	ldr	r0, [r4, #12]
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	4298      	cmp	r0, r3
 800467c:	bfb8      	it	lt
 800467e:	4618      	movlt	r0, r3
 8004680:	e7a4      	b.n	80045cc <_printf_i+0x168>
 8004682:	2301      	movs	r3, #1
 8004684:	4632      	mov	r2, r6
 8004686:	4649      	mov	r1, r9
 8004688:	4640      	mov	r0, r8
 800468a:	47d0      	blx	sl
 800468c:	3001      	adds	r0, #1
 800468e:	d09b      	beq.n	80045c8 <_printf_i+0x164>
 8004690:	3501      	adds	r5, #1
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	9903      	ldr	r1, [sp, #12]
 8004696:	1a5b      	subs	r3, r3, r1
 8004698:	42ab      	cmp	r3, r5
 800469a:	dcf2      	bgt.n	8004682 <_printf_i+0x21e>
 800469c:	e7eb      	b.n	8004676 <_printf_i+0x212>
 800469e:	2500      	movs	r5, #0
 80046a0:	f104 0619 	add.w	r6, r4, #25
 80046a4:	e7f5      	b.n	8004692 <_printf_i+0x22e>
 80046a6:	bf00      	nop
 80046a8:	08004951 	.word	0x08004951
 80046ac:	08004962 	.word	0x08004962

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d06      	ldr	r5, [pc, #24]	; (80046cc <_sbrk_r+0x1c>)
 80046b4:	2300      	movs	r3, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	f7fc fb60 	bl	8000d80 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	20000138 	.word	0x20000138

080046d0 <__sread>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	460c      	mov	r4, r1
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	f000 f8a0 	bl	800481c <_read_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	bfab      	itete	ge
 80046e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046e2:	89a3      	ldrhlt	r3, [r4, #12]
 80046e4:	181b      	addge	r3, r3, r0
 80046e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ea:	bfac      	ite	ge
 80046ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ee:	81a3      	strhlt	r3, [r4, #12]
 80046f0:	bd10      	pop	{r4, pc}

080046f2 <__swrite>:
 80046f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	461f      	mov	r7, r3
 80046f8:	898b      	ldrh	r3, [r1, #12]
 80046fa:	05db      	lsls	r3, r3, #23
 80046fc:	4605      	mov	r5, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	4616      	mov	r6, r2
 8004702:	d505      	bpl.n	8004710 <__swrite+0x1e>
 8004704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004708:	2302      	movs	r3, #2
 800470a:	2200      	movs	r2, #0
 800470c:	f000 f868 	bl	80047e0 <_lseek_r>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	4632      	mov	r2, r6
 800471e:	463b      	mov	r3, r7
 8004720:	4628      	mov	r0, r5
 8004722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	f000 b817 	b.w	8004758 <_write_r>

0800472a <__sseek>:
 800472a:	b510      	push	{r4, lr}
 800472c:	460c      	mov	r4, r1
 800472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004732:	f000 f855 	bl	80047e0 <_lseek_r>
 8004736:	1c43      	adds	r3, r0, #1
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	bf15      	itete	ne
 800473c:	6560      	strne	r0, [r4, #84]	; 0x54
 800473e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004746:	81a3      	strheq	r3, [r4, #12]
 8004748:	bf18      	it	ne
 800474a:	81a3      	strhne	r3, [r4, #12]
 800474c:	bd10      	pop	{r4, pc}

0800474e <__sclose>:
 800474e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004752:	f000 b813 	b.w	800477c <_close_r>
	...

08004758 <_write_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_write_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc fab9 	bl	8000cde <_write>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_write_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_write_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000138 	.word	0x20000138

0800477c <_close_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d06      	ldr	r5, [pc, #24]	; (8004798 <_close_r+0x1c>)
 8004780:	2300      	movs	r3, #0
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7fc fac5 	bl	8000d16 <_close>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d102      	bne.n	8004796 <_close_r+0x1a>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	b103      	cbz	r3, 8004796 <_close_r+0x1a>
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	20000138 	.word	0x20000138

0800479c <_fstat_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4d07      	ldr	r5, [pc, #28]	; (80047bc <_fstat_r+0x20>)
 80047a0:	2300      	movs	r3, #0
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	f7fc fac0 	bl	8000d2e <_fstat>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d102      	bne.n	80047b8 <_fstat_r+0x1c>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	b103      	cbz	r3, 80047b8 <_fstat_r+0x1c>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd38      	pop	{r3, r4, r5, pc}
 80047ba:	bf00      	nop
 80047bc:	20000138 	.word	0x20000138

080047c0 <_isatty_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d06      	ldr	r5, [pc, #24]	; (80047dc <_isatty_r+0x1c>)
 80047c4:	2300      	movs	r3, #0
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc fabf 	bl	8000d4e <_isatty>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_isatty_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_isatty_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20000138 	.word	0x20000138

080047e0 <_lseek_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4d07      	ldr	r5, [pc, #28]	; (8004800 <_lseek_r+0x20>)
 80047e4:	4604      	mov	r4, r0
 80047e6:	4608      	mov	r0, r1
 80047e8:	4611      	mov	r1, r2
 80047ea:	2200      	movs	r2, #0
 80047ec:	602a      	str	r2, [r5, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f7fc fab8 	bl	8000d64 <_lseek>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_lseek_r+0x1e>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_lseek_r+0x1e>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	20000138 	.word	0x20000138

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f7ff bb1d 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	2000012c 	.word	0x2000012c

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f7ff bb18 	b.w	8003e46 <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	2000012c 	.word	0x2000012c

0800481c <_read_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4d07      	ldr	r5, [pc, #28]	; (800483c <_read_r+0x20>)
 8004820:	4604      	mov	r4, r0
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	2200      	movs	r2, #0
 8004828:	602a      	str	r2, [r5, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7fc fa3a 	bl	8000ca4 <_read>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_read_r+0x1e>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_read_r+0x1e>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000138 	.word	0x20000138

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
